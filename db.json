{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechat_account.jpg","path":"images/wechat_account.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"1c4755457ed2d9f13f06520e7d3afe3e937d16e4","modified":1627402959798},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1580551872000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1580551872000},{"_id":"themes/next/.DS_Store","hash":"30aab2476612f755c1a9cb9e86a593b262d7c4b5","modified":1582790507243},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1580551872000},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1580551872000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1580551872000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1580551872000},{"_id":"themes/next/README.md","hash":"dc026053a4d9fb97a58dbc3e9060e480f6852b23","modified":1580551872000},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1580551872000},{"_id":"themes/next/_config.yml","hash":"564f76cd2351a1a1dfdaf4785ceb61af03b4f380","modified":1594452834206},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1580551872000},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1580551872000},{"_id":"themes/next/package.json","hash":"213bd6ff96a027f5db6d1ce966a2cc75499a3e10","modified":1580551872000},{"_id":"source/about/index.md","hash":"266a15c9327a2c80b7764cde9b90b9e3b3284098","modified":1594545781853},{"_id":"source/about/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1581357937068},{"_id":"source/_posts/.DS_Store","hash":"12c44772dc315e809630137d463a256ad9e017e1","modified":1626711820671},{"_id":"source/_posts/Design_Thoughts.md","hash":"1865ae2f2eeef21c84c549f2eb77a8fea6a63e95","modified":1594545853951},{"_id":"source/_posts/Apple Watch.md","hash":"d5d140f68b458db0a7f09dec28a9626d881c732c","modified":1584882084465},{"_id":"source/_posts/Action_Experiment.md","hash":"d3078b8ba7604c7f592e70c860baa44574b328b1","modified":1584881842407},{"_id":"source/_posts/Digital_Life.md","hash":"9b192f420c8518678ce16b07efb9a7704930d379","modified":1586789871682},{"_id":"source/_posts/Haze-Free.md","hash":"86782d8efa66001d9d550c463a6c42b1ab7c48ca","modified":1594546328120},{"_id":"source/_posts/Muzik_GettingStarted.md","hash":"364b8eb8ea741c9c6daf2aea93d8a73222425ab2","modified":1594546200212},{"_id":"source/_posts/Design+Code_Vue.js_Learning.md","hash":"71edc0ff93545505f49066a6de25b5a2c9cced2c","modified":1584882066779},{"_id":"source/_posts/Objc_Learning_1.md","hash":"25b386edc834a41085392d945a373e47d6875fba","modified":1594546497019},{"_id":"source/_posts/Objc_Learning_2.md","hash":"b37e379bcd299a63bbdc8534e209acb9ca925276","modified":1586590879536},{"_id":"source/_posts/Hibernate_Basic.md","hash":"379a8b879d73f86db619751a471e7da3f6676501","modified":1584881863737},{"_id":"source/_posts/Mediator_Pattern.md","hash":"640ce5171e094285ae59b019815d8d31f887ad02","modified":1591749867026},{"_id":"source/_posts/Objc_Learning_3.md","hash":"c7de9437d81d9ebdd3b62207e8bca0da2ddf2c1d","modified":1587118202108},{"_id":"source/_posts/Objc_Learning_5.md","hash":"94cee08d14251c979d2a836c99e540f698bfabc2","modified":1587118209102},{"_id":"source/_posts/Objc_Learning_4.md","hash":"9aebc62a47ea9d7c99bf7e32b3a806cc3efb26a2","modified":1586590968745},{"_id":"source/_posts/Objc_Learning_6.md","hash":"325016d5629582ccd6b8ac009ae26695e4043dcc","modified":1587118204356},{"_id":"source/_posts/OpenCV_Filter.md","hash":"d5bac985b497858e144abe67c7f815682322ab66","modified":1585801159321},{"_id":"source/_posts/Objc_Learning_7.md","hash":"19fb2d87d4def7226565eb3f70db43ee82e46803","modified":1587311471458},{"_id":"source/_posts/Objc_Learning_8.md","hash":"3c7399a87c0a786b6095939d755750dc1fde77fc","modified":1587785804433},{"_id":"source/_posts/OpenCV_Xcode.md","hash":"39687c257200e0803d143c1565fc61f475e70f43","modified":1594545601148},{"_id":"source/_posts/Singleton_Pattern.md","hash":"b3bcfe75f6f0b506ca7fadcdfa370dbb3a252471","modified":1591752083158},{"_id":"source/_posts/OpenCV_Grayscale.md","hash":"b8b37849a3d54839c5b3b2a920cabc2f0523373b","modified":1584881478806},{"_id":"source/_posts/Struts_Experiment.md","hash":"e7d387d390d3b5bed808105d635e714f33fd2b5d","modified":1584881847786},{"_id":"source/_posts/Struts_Workflow.md","hash":"18a20e391fe5fd884afca52797e0890b20d44d15","modified":1584881693608},{"_id":"source/_posts/WEKA_Association.md","hash":"57b055825639d879073d0e3d448a22e39228cbbe","modified":1587786594649},{"_id":"source/categories/index.md","hash":"333e28f7d065f0890d58ff4ffe3d8bf20ad1b086","modified":1586014550727},{"_id":"source/archives/index.md","hash":"2878109bfaf58743c1fe75792f8cbaa974346d29","modified":1586014560247},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1580551872000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ef63f34bd3b6bd4d7304d48ce5e0e3e2bead385","modified":1580551872000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"715dcf9b0429a4a4c7107d6d1d00a34e4cf9aa99","modified":1580551872000},{"_id":"source/tags/index.md","hash":"668a385f1c160a7f2a68b28d80aeb736a9a96918","modified":1586014539795},{"_id":"themes/next/.github/config.yml","hash":"e4f4b9afe59bc508c4f7634895b33d7d460a7cb1","modified":1580551872000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1580551872000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1580551872000},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1580551872000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1580551872000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1580551872000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1580551872000},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1580551872000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1580551872000},{"_id":"themes/next/docs/.DS_Store","hash":"f91dd81228438250b77da8248e90b2cbd83200f8","modified":1581084534023},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1580551872000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1580551872000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"40a8089076005e0d26ef7c0db58a2b5b464cda6c","modified":1580551872000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1580551872000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1580551872000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1580551872000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"682937d48bf5d243842a76190921322e26c75247","modified":1580551872000},{"_id":"themes/next/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1580551872000},{"_id":"themes/next/languages/de.yml","hash":"3530753456db8a7a7cb72b47505bf6197ac9a9f2","modified":1580551872000},{"_id":"themes/next/languages/en.yml","hash":"2c415150d5ba44a05ec7ca5fa671d6129c7fe7db","modified":1580551872000},{"_id":"themes/next/languages/default.yml","hash":"2c415150d5ba44a05ec7ca5fa671d6129c7fe7db","modified":1580551872000},{"_id":"themes/next/languages/fa.yml","hash":"c77d0ab86695651f4fb09e0e9af484114fe80292","modified":1580551872000},{"_id":"themes/next/languages/es.yml","hash":"9596836628169400beed4124eeb5867821075b00","modified":1580551872000},{"_id":"themes/next/languages/fr.yml","hash":"30702ddcb121ee1ada258b8b900d826fec697e5e","modified":1580551872000},{"_id":"themes/next/languages/id.yml","hash":"85441f625f1f93a329b7eab01f919e81a6f36172","modified":1580551872000},{"_id":"themes/next/languages/hu.yml","hash":"a317ba3ab2d9de40fe8b5447d0e63b9d8ab97c8b","modified":1580551872000},{"_id":"themes/next/languages/it.yml","hash":"8e4d494cd7f4e33d2c416da3a48f9bd8968243ea","modified":1580551872000},{"_id":"themes/next/languages/ko.yml","hash":"04ba65574f1fa63ffb95fcfb7a4515ee4b01532f","modified":1580551872000},{"_id":"themes/next/languages/nl.yml","hash":"dea4d7d516071c9ec9e57935a84aaab15c3d2e97","modified":1580551872000},{"_id":"themes/next/languages/ja.yml","hash":"2a767bc258a5072f8d97ffdfce53b4e2332570f4","modified":1580551872000},{"_id":"themes/next/languages/ru.yml","hash":"79f7f3b6e96184cf21ce2c9a2adb01b0f0228cf8","modified":1580551872000},{"_id":"themes/next/languages/tr.yml","hash":"5c5b60faa00401e822c92abcdcf9c5d410a8b753","modified":1580551872000},{"_id":"themes/next/languages/pt-BR.yml","hash":"66e3cc8efc2a26184fcbe4db8981b84099348276","modified":1580551872000},{"_id":"themes/next/languages/pt.yml","hash":"f184ffed48395675a7025cb1ccfdade546f3e987","modified":1580551872000},{"_id":"themes/next/languages/vi.yml","hash":"2b698896b08d79333a3414185fc2b445b3657361","modified":1580551872000},{"_id":"themes/next/languages/uk.yml","hash":"a6af58b5351e0d0dde1fec22a3e80fc76bd8eecf","modified":1580551872000},{"_id":"themes/next/languages/zh-HK.yml","hash":"6e333aaca52dccee8e5f2d1dc28b0a6cda7b0c9a","modified":1580551872000},{"_id":"themes/next/languages/zh-TW.yml","hash":"d4517fa82652ccc75915469985efd7da1895963a","modified":1580551872000},{"_id":"themes/next/languages/zh-CN.yml","hash":"6665546c8579eef40bf6d55ca83377a3d9f540b8","modified":1582791084575},{"_id":"themes/next/layout/_layout.swig","hash":"29ee038b0d5ffdb45327598733ea968588367769","modified":1584883214621},{"_id":"themes/next/layout/.DS_Store","hash":"fe6a1b1850b72539d36fc0dfa8130015bafcde21","modified":1582790500618},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1580551872000},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1580551872000},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1580551872000},{"_id":"themes/next/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1580551872000},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1580551872000},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1580551872000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1580551872000},{"_id":"themes/next/scripts/.DS_Store","hash":"693346292252f768199231e69e72c088b719408f","modified":1581086759414},{"_id":"themes/next/source/.DS_Store","hash":"6a579c99e7cdc3f8e09dc04c90f4160f7dff74b6","modified":1582549993121},{"_id":"source/_posts/Action_Experiment/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1582793250106},{"_id":"source/_posts/Action_Experiment/11.png","hash":"c95df8125305e1272fb6dcdd6d6bf0d50cee27c9","modified":1582776467085},{"_id":"source/_posts/Action_Experiment/13.png","hash":"be2c4a1da212ef4cb12f5060ad0b740db01e9fca","modified":1582776505035},{"_id":"source/_posts/Action_Experiment/15.png","hash":"433c4d94176a95fef94df0e7769888773a3c8c39","modified":1582776527969},{"_id":"source/_posts/Action_Experiment/19.png","hash":"51af66a58e2dceea315edf3fd4ace084a2a6db30","modified":1582777257022},{"_id":"source/_posts/Action_Experiment/21.png","hash":"ac47e797cd70becd1879609d82124e4fc70e8886","modified":1582777266471},{"_id":"source/_posts/Action_Experiment/22.png","hash":"296819fd0c0d841c210fd8b670eb37810b639898","modified":1582777273383},{"_id":"source/_posts/Action_Experiment/5.png","hash":"726a5054cfa2b47d4d598e17f0885ef8661a6acd","modified":1582776357274},{"_id":"source/_posts/Action_Experiment/6.png","hash":"7c103ab14dec169bbb25027bd60346e5db3c2061","modified":1582776368231},{"_id":"source/_posts/Action_Experiment/9.png","hash":"036e2042b95a03ff077db2cbf4300c5dd908e121","modified":1582776428288},{"_id":"source/_posts/Action_Experiment/na.png","hash":"aef201fa033a0318301a1997b8af0952ec15a5a8","modified":1582777104148},{"_id":"source/_posts/Objc_Learning_1/1.jpg","hash":"1863f70e549afdbd1838e4ba8ff5e00b3bdc7685","modified":1584760359121},{"_id":"source/_posts/OpenCV_Grayscale/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1584375206020},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1582706328018},{"_id":"source/_posts/Struts_Experiment/12.png","hash":"2a193f4c3277530433d8ca629b0d02f345fc3a7c","modified":1582710461158},{"_id":"source/_posts/Struts_Experiment/15.png","hash":"0a5b7f516385ea6c0b6d6e49b71de320295bd3ad","modified":1582710633513},{"_id":"source/_posts/Struts_Experiment/16.png","hash":"dc2a732037fad1cdcd376d93748f38f2cf0dd895","modified":1582710653676},{"_id":"source/_posts/Struts_Experiment/17.png","hash":"b749ee2c18c364178a900697bfe11750512116af","modified":1582710726504},{"_id":"source/_posts/Struts_Experiment/3.png","hash":"8ed394fa26e72c72a5e5fe9a49159d6517cc7ffc","modified":1582710136966},{"_id":"source/_posts/Struts_Experiment/8.png","hash":"70115598e49ef24895f4f37fef860de3b509d232","modified":1582710416203},{"_id":"source/_posts/media/.DS_Store","hash":"9b7c1a16b1322d45b78c1ea24cd2b4e90e05d3e0","modified":1594546506705},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"8ae029084b9ac482adf0fae2a0979dd388476513","modified":1580551872000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"7a9526f749205c882d672a4f51e6a3033c80ca6e","modified":1580551872000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"89667adbb85c25716dba607cd7a38191acf60736","modified":1580551872000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"789a3cceb8f37a4b63b1fb2452a03332a3c365ed","modified":1580551872000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1580551872000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1580551872000},{"_id":"themes/next/docs/ru/README.md","hash":"41b1bef32fb991410ebf559b4c45022549f95215","modified":1580551872000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1580551872000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1580551872000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1580551872000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"17d7203e85a8ce9760c42a853dee0f26a8f7ee4e","modified":1580551872000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1580551872000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1580551872000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"0b0b9ec6ec4a89e701a3b91f8d7d95752d3e241b","modified":1580551872000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"f0ffb74de522749c9f2fda46970a61bdafbfbc24","modified":1580551872000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"b6a3611d40863c12804c5846994786119ce3b79f","modified":1580551872000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"7f37327bbcae7ed7d04d187fd5e9bc6bbf14926a","modified":1580551872000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1580551872000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1580551872000},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"6caac36c93a506d0bb0cad99e3f9d7382fe5891e","modified":1584879658101},{"_id":"themes/next/layout/_macro/post.swig","hash":"9768317d19fda6eecc62d0d04bc884edaaaf3c55","modified":1584892294553},{"_id":"themes/next/layout/_partials/comments.swig","hash":"0c4914a5fd08f15beec71940218c814ad9a89f3f","modified":1580551872000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"468aa84849d1513c62e1c95147cc84729936b497","modified":1584879460065},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1580551872000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1580551872000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1580551872000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1580551872000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"a3462c37ab6d7642b1e95860ea5c4cfbac78efab","modified":1580551872000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1580551872000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1580551872000},{"_id":"themes/next/layout/_third-party/.DS_Store","hash":"af991a7218b9544ea0df21e18fb29aeafd2b31f5","modified":1585234880047},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1580551872000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1580551872000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1580551872000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1580551872000},{"_id":"themes/next/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1580551872000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1580551872000},{"_id":"themes/next/scripts/events/.DS_Store","hash":"7b038f0dd00ba68949ed021d10a028c4cd912aab","modified":1581086342646},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1580551872000},{"_id":"themes/next/scripts/filters/locals.js","hash":"5bbfdc1c373542159660b7a68ed0b57ca18ad10b","modified":1580551872000},{"_id":"themes/next/scripts/filters/post.js","hash":"f2f566f2577c554377fd704442399acdd14a8118","modified":1580551872000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1580551872000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cb211b6b50913454b1737782e9e2af96cfa40448","modified":1580551872000},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1580551872000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1580551872000},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1580551872000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1580551872000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1580551872000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1580551872000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1580551872000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1580551872000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1580551872000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1580551872000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1580551872000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1580551872000},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1580551872000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1580551872000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1580551872000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1580551872000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1580551872000},{"_id":"themes/next/source/images/apple-touch-icon.png","hash":"87a5cb9ef565d1566ccf04e4596955f07f22fc2d","modified":1581081842417},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1580551872000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1580551872000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1580551872000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1580551872000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1580551872000},{"_id":"themes/next/source/images/favicon-16x16.png","hash":"45cb5124a39b8882339664bb451896da23b9e45c","modified":1581081756838},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1580551872000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1580551872000},{"_id":"themes/next/source/images/favicon-32x32.png","hash":"c0a61653ba05b4bb269a6f3ee89e9895f2aeb9b8","modified":1581081705660},{"_id":"themes/next/source/js/.DS_Store","hash":"8faa1a9bdb5310d67ce94ae474adae79c92927f5","modified":1581086493125},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1580551872000},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1580551872000},{"_id":"themes/next/source/js/local-search.js","hash":"f2e568298c71d2417a1a1c7e56025ce5842b1220","modified":1580551872000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1580551872000},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1580551872000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1580551872000},{"_id":"source/_posts/Action_Experiment/1.png","hash":"6d3fa203d8998ae1ab5ea253392ec776257b43b4","modified":1582770885871},{"_id":"themes/next/source/js/utils.js","hash":"a1e70ac9d32697907d5d78f2533d627f4df8ebcb","modified":1580551872000},{"_id":"source/_posts/Action_Experiment/10.png","hash":"361007ca5b06a9bd7e043d9f9a8dcc38ba76de42","modified":1582776454989},{"_id":"source/_posts/Action_Experiment/12.png","hash":"392a11879adf7b088dcc740642679cf32806f3a5","modified":1582776494261},{"_id":"source/_posts/Action_Experiment/17.png","hash":"8cece424a0b670955abd695f49b4fa9b30a92318","modified":1582777229343},{"_id":"source/_posts/Action_Experiment/16.png","hash":"cf63a5f128126e7f11f2e9fb47f3734322ee9df6","modified":1582777211863},{"_id":"source/_posts/Action_Experiment/18.png","hash":"efabf500ead9e7e3e2ff4fa09e5f5565c9bb12fc","modified":1582777245545},{"_id":"source/_posts/Action_Experiment/2.png","hash":"398a42e48ce1cd2f2b5d93c5eff48842ed6a5155","modified":1582771415865},{"_id":"source/_posts/Action_Experiment/20.png","hash":"ed66f254efff53298eebe8ee3b0c075ea7a14a10","modified":1582777261291},{"_id":"source/_posts/Action_Experiment/3.png","hash":"7e47504846ffed31d7622ed437f8f3700d5e7f5e","modified":1582771538107},{"_id":"source/_posts/Action_Experiment/4.png","hash":"168a80763fd2d388f417d3601e55787717497ee0","modified":1582771585819},{"_id":"source/_posts/Action_Experiment/7.png","hash":"1aeb0ffb4e873da6a79fe27a9c70617cc0c9e094","modified":1582776377452},{"_id":"source/_posts/Action_Experiment/8.png","hash":"c7d8e8cf73a769390a567822e8a453669901d5e3","modified":1582776390395},{"_id":"source/_posts/OpenCV_Grayscale/equa.jpg","hash":"51f70cd867b8baf1d644a3020156fc7d3d1d2d4d","modified":1584372958349},{"_id":"source/_posts/OpenCV_Grayscale/calcHist.jpg","hash":"f25f5e23c8e7f1a962807aa4977c18f65f852e5c","modified":1584374011025},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/Project.png","hash":"3380d8c5aafa8333fd92a0f35353c67d2888de59","modified":1582700763694},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/dir.png","hash":"68adbe30d9138ac21549356934866712ae8d6e77","modified":1582702252219},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/signature.png","hash":"9636884a131af89198e98f2e62822ff6163a1f66","modified":1582703111997},{"_id":"source/_posts/Struts_Experiment/1.png","hash":"d7eb2bc35abc97cd95329bc49bb401e9f61239b0","modified":1582710080170},{"_id":"source/_posts/Struts_Experiment/11.png","hash":"b98c505b83772f2cd7fa077fa8364590ae540069","modified":1582710449161},{"_id":"source/_posts/Struts_Experiment/13.png","hash":"ae7f800dbe302632b4e780ebd946e33907d06ee2","modified":1582710472775},{"_id":"source/_posts/Struts_Experiment/14.png","hash":"98a27d750c7f4a92dd3d35c22d717813183367d3","modified":1582710503515},{"_id":"source/_posts/Struts_Experiment/19.png","hash":"09517d00a79e34c8b80592a4be975e856e0cd886","modified":1582710757958},{"_id":"source/_posts/Struts_Experiment/18.png","hash":"4f97101c6640207342eebe013bc237930cc1c9f6","modified":1582710711821},{"_id":"source/_posts/Struts_Experiment/2.png","hash":"1704b133a68c645c8bec5f663fef7329c2cf98f2","modified":1582710129067},{"_id":"source/_posts/Struts_Experiment/20.png","hash":"ed64abab800afadbcf93e265bcce5b3f0bcb5eb4","modified":1582710765518},{"_id":"source/_posts/Struts_Experiment/4.png","hash":"63b7c1b0aaf05bbd219156b694b10b12985f4af1","modified":1582710146287},{"_id":"source/_posts/Struts_Experiment/5.png","hash":"f0dc42bd0706e658ea3168dd2be50014118d2017","modified":1582710160412},{"_id":"source/_posts/Struts_Experiment/6.png","hash":"dc3d7595e3e18d9056a390d4b868649f195b6d92","modified":1582710168429},{"_id":"source/_posts/Struts_Experiment/7.png","hash":"ba150ac99e12159c1bf64edc3e37a5f2be8fe7df","modified":1582710110853},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1580551872000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1580551872000},{"_id":"themes/next/source/images/wechat_account.jpg","hash":"371020e1948f149afa6e350e8e66b11609033b81","modified":1581082600000},{"_id":"source/_posts/OpenCV_Grayscale/直方图.png","hash":"86844d000c519cb8e2e77058512f8d25805c8f29","modified":1584371962935},{"_id":"source/_posts/Struts_Experiment/9.png","hash":"836684a889d211df549c8fb6f90a689d20d59f34","modified":1582710424749},{"_id":"source/_posts/media/15945371393906/截图2020-07-12 at 16.48.46.png","hash":"54ae98bd5341e1750d22f16c40b6e9134b53b701","modified":1594543727468},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1580551872000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"1638483d2d2dad1da4c841a6fb9f6ee96b850187","modified":1580551872000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"0172055d118d1d7f4c8379c8495c1ee1aa50c7d9","modified":1580551872000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1580551872000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"e6076865dba066c5f0008e22217efb850d5af69c","modified":1580551872000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"bbf0c8e42491fac70f4f8165224f1d7d92a040d7","modified":1580551872000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"54ba9508a901c295a02c8e34e9cece7c7dcad518","modified":1580551872000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1580551872000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1580551872000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1580551872000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"14c33bd544903e74388739599fffe3ecb66ed4b0","modified":1580551872000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1580551872000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1580551872000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"1b7faa20a458b46369779b57bcc695bbc5d1c13a","modified":1580551872000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1580551872000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1580551872000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1580551872000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"716b78cd90addc4216413719554721cb362b0c18","modified":1580551872000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"a2bb0bec243685e670b60a3d54142950adc03af0","modified":1580551872000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1580551872000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1580551872000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1580551872000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1580551872000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1580551872000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1580551872000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1580551872000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1580551872000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1580551872000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1580551872000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1580551872000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1580551872000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"d3dc3e051e6816cdd576d00cc70b18b8a4c6a495","modified":1580551872000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"ed236103bccbcf608f7d5d5b33b9f995d2f1a7de","modified":1580551872000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1580551872000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1580551872000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1580551872000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1580551872000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4d952f1597af4ff1a0e67791f6e99b27666f50f1","modified":1585754923291},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1580551872000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1580551872000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1580551872000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1580551872000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1580551872000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"0ea0bac09b0747bc16fde852164c0eaab2efe02c","modified":1580551872000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1580551872000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"801e1d2f59f7d2db4096c4788b8469b4165f4965","modified":1580551872000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1580551872000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1580551872000},{"_id":"themes/next/layout/_third-party/statistics/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1585274310353},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b205d72a56b1827681f0a260c266e0c02065fd08","modified":1580551872000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1580551872000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1580551872000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1580551872000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1580551872000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1580551872000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"19cbd24880d0fbbd4d5698cd54da598f03b942da","modified":1580551872000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1580551872000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1580551872000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1580551872000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6a72b5928cdab9526a288177991e4b2aedd028cf","modified":1580551872000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1580551872000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1580551872000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1580551872000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1580551872000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1580551872000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1580551872000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1580551872000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d4e817e2b238ace5d7ac568ce0c5380196a6d039","modified":1580551872000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ae2a2502b77203e83f75a040c43e86a7ecb4873c","modified":1580551872000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"f068b46f8c305c7436c2767492a6bed42dcd764c","modified":1580551872000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1580551872000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1580551872000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1580551872000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1580551872000},{"_id":"themes/next/source/images/favicon.png","hash":"e9194790400e5c55019076a58646a7bbcc3b908d","modified":1581081285644},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1580551872000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1580551872000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1580551872000},{"_id":"source/_posts/Action_Experiment/14.png","hash":"c0fca01de3a897b124b1926441c4e9805a19def3","modified":1582776519083},{"_id":"source/_posts/OpenCV_Grayscale/cvcolor.png","hash":"39c4fc9704c802244f70b67b82a00c368606b342","modified":1584373777101},{"_id":"source/_posts/media/15847260620015/15847603591154.jpg","hash":"1863f70e549afdbd1838e4ba8ff5e00b3bdc7685","modified":1584760359121},{"_id":"source/_posts/Action_Experiment/uni.png","hash":"b2c0c57f17e1e8a5d392951857af5afbc69517d1","modified":1582771236872},{"_id":"source/_posts/Action_Experiment/DMI.png","hash":"a918906603948105b53c64572ab32bd701dccdf7","modified":1582771203923},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4f7879a50d4608c46cc2061c725a2564597a45bd","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"bc87cea0b534f2d75db60f300b069456f6516d1b","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"8e1cc5e3b20d804a7265f945b877388bffee39eb","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4fb385d8533877678440c8faa08b68fa793cb1a2","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"5adf2fdea25630893283e1ad5ba1721b698d6e95","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a54662bd4cbbe316048a811d3b5c83fb6df63739","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"b797c693378d94160121a2b8d9df0622a76cdbda","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"71a3d7f2242706f7a6b79933a67ef3664cca3a24","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"84a3b8fe07fc790082ee988dd8f6c2536fde72de","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1580551872000},{"_id":"themes/next/source/images/logo.svg","hash":"916ac3850fbad6339fe94e7d19aaee001a5ac309","modified":1581081162171},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1580551872000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1580551872000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1580551872000},{"_id":"source/_posts/Struts_Experiment/10.png","hash":"c4d4808354668716e312dc618fc88ef9f27aa4e5","modified":1582710437096},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1580551872000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"3496dc2ca5647bbf6a827f991d61849205a5955a","modified":1584879745311},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"af182c0d1e52f94280f6108936914f04ed541eee","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"60ed14e9ddcb138837ca22efb8886f9bff2a3dd2","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"a48ed1dc9978b1b621f0e12664738c0d855d8013","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4376db4b449bbc1547e0fb219bb5e4267bdc581b","modified":1584880362888},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f5821481440a0624c8aec5fc85f093de1527095f","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"c27b3056d5e22d3c66d8a152a23634314d5c4a60","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"6d8680894e24a516e2b5263af86b485767c3be63","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"521534f483440434e808f92377bc3fc73667c89a","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"b492a45422773ab2af06ee345d527ba4c6bbc608","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"b4923515ca8e44aa62e839ce948f759cfd1f896f","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"d2f0f2171722533bba308f944a2ec727b083582c","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1580551872000},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/documention.png","hash":"e201a80d02b33f656d4eaee3d5e9da613977dc96","modified":1582701640812},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/Library.png","hash":"6f138c35396034992c24bedcdefa9598d5d3f9f9","modified":1582701774032},{"_id":"source/_posts/media/15945371393906/截图2020-07-12 at 15.18.30.png","hash":"bc38f608b748c5e75862d3902a0fdd8f38e05cf9","modified":1594538316159},{"_id":"source/_posts/Action_Experiment/button.png","hash":"34d252f467c88ffa17d85c0bf16c865884f96487","modified":1582771221329},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1580551872000},{"_id":"source/_posts/media/15850661994034/15852287516724.jpg","hash":"8d9cc716e01b8e21628fe612089608ea6122b63f","modified":1585228751693},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/Headers.png","hash":"f55588a795de40104149d6e8472e1d4f52a8a142","modified":1582701718002},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/Xcode.png","hash":"f095051c59b4a5d86b348181bd93972522521349","modified":1582698717101},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/linker.png","hash":"72271cbf36e2e7babd0be5dcbac53e04e0848352","modified":1582702036670},{"_id":"source/_posts/OpenCV_Grayscale/result.png","hash":"90ddaf05a55219c1953d9eeda76bf13d182ceceb","modified":1584319079875},{"_id":"source/_posts/Muzik_Progress.md","hash":"6093f40292907fca1894232879f5ce85c53f5bd0","modified":1595866458559},{"_id":"source/_posts/media/15945445157264/截图2020-07-27 at 22.55.24.png","hash":"d7342f2703859249743e2f9e136aae0a712b9e17","modified":1595861727976},{"_id":"source/_posts/media/15945445157264/15958624669288.jpg","hash":"85edad354823a7804e8cfdfc9901215edc582977","modified":1595862466938},{"_id":"source/_posts/media/15945445157264/15958624596189.jpg","hash":"85edad354823a7804e8cfdfc9901215edc582977","modified":1595862459629},{"_id":"source/_posts/media/15945445157264/15958637814033.jpg","hash":"e547cf1d571aad547d84cb6ce2509509d60ee7ba","modified":1595863781420},{"_id":"source/_posts/media/15945445157264/15958640040336.jpg","hash":"b76025c2ed3bad88c133cfabe59164d7f12ae171","modified":1595864004050},{"_id":"source/_posts/media/15945445157264/15958641787194.jpg","hash":"a3098d517589aaf4c0efbeb9291e324f242174c1","modified":1595864178734},{"_id":"source/_posts/media/15945445157264/15958647723869.jpg","hash":"bb29203c06a08f39b5fe240ec8e943d5278e9cee","modified":1595864772405},{"_id":"source/_posts/media/15945445157264/15958635661133.jpg","hash":"56a849a41a094df9d19db0bcf526badb818526aa","modified":1595863566132},{"_id":"source/_posts/media/15945445157264/15958635741661.jpg","hash":"56a849a41a094df9d19db0bcf526badb818526aa","modified":1595863574184},{"_id":"source/_posts/media/15945445157264/15958640618143.jpg","hash":"59129868f5944180274f9542e7a836b54c968ec6","modified":1595864061832},{"_id":"source/_posts/media/15945445157264/15958648056682.jpg","hash":"fdff36a82e379163612112530196c8d7a53c0538","modified":1595864805685},{"_id":"source/_posts/media/15945445157264/15958650862897.jpg","hash":"2156020a44518d2b11f9777e14a0343d4e8dc229","modified":1595865086309},{"_id":"source/_posts/media/15945445157264/15958655245499.jpg","hash":"9223323879ef0cebd42bd2912d1f2ea3d9383cdb","modified":1595865524567},{"_id":"source/_posts/media/15945445157264/15958633632257.jpg","hash":"645904920abaa242307d9a5f1c3305c4b17aab82","modified":1595863363242},{"_id":"source/_posts/media/15945445157264/截图2020-07-27 at 22.58.20.png","hash":"a4ece7a75fd69947207e22ab17fd61e474e2f4b8","modified":1595861903415},{"_id":"source/_posts/media/15945445157264/15958623328077.png","hash":"33c4d6e8359c7f1b74f18f253b904435ec88aab8","modified":1595862332881},{"_id":"source/_posts/media/15945445157264/15958622925026.png","hash":"4710922c164939a88cb334b5e841f6d7e4d6fc52","modified":1595862292675},{"_id":"source/_posts/EffectiveObjcTips.md","hash":"414b97abd6ea0d9404b6e5feb9bea964f1d00601","modified":1627289060385},{"_id":"source/_posts/SwiftUIExploration.md","hash":"373835408c66f87b6481151adf07eab51c35a9d0","modified":1627287357651},{"_id":"source/_posts/EffectiveObjcTips/Untitled 1.png","hash":"95c7d9f69a086a3a63b15594a9c81bcccdbc0368","modified":1626060872000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 12.png","hash":"23d847debb4bc061d17c7dc5733d991deac8dd12","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 11.png","hash":"b26811fb534e4fd8859f54a72a67f495c208509b","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 10.png","hash":"6b7fb6e39792631e2c1b609dc2bae92827da5c56","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 13.png","hash":"15b726e8b2704d4484fbc27342e306f8568dee25","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 14.png","hash":"f6f07756a0c0f313ef46bc7bc84c07034d62677f","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 15.png","hash":"1260fb8747555a514c9987352fd701c837bb70fe","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 17.png","hash":"b9d4a960387b9de7d58aa414b2fabbb81e5fed8a","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 2.png","hash":"026817ec5d76f25627675fa7048887307043071b","modified":1626060872000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 16.png","hash":"00e2735781a80b0a4439c8577292f52444e276d8","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 20.png","hash":"be5e80c6a9575ec0dfd119b113e81a1796a4d99c","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 22.png","hash":"b708901d7cff461cd1d512449402a946674a816d","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 21.png","hash":"57d225e48414b97db85652972715f10f3f2a47b2","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 24.png","hash":"9c5f9a6a628b4d143ad707539a73b6d0cc76ba8f","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 26.png","hash":"25ccdaae10c37d31565595a0e198a375c3755b47","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 28.png","hash":"3d7d11823218c067b2eb30d9afdc0711ebb0dbdb","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 29.png","hash":"4d32979c01f0118e01855b42f01e791356a3f9f0","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 3.png","hash":"506a901ec617750dd618d19173441b2c214766d6","modified":1626060872000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 31.png","hash":"b5fcb8a64f024e416c938d1b20247f553c35e617","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 34.png","hash":"7c0597239ff5574694b98bca0593258a8ee53d28","modified":1626060876000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 36.png","hash":"ff122ecd213550310270df464c37f1a641a0552e","modified":1626060876000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 4.png","hash":"d280ee6e115e5d0f15295c3360fac8efd2b89d55","modified":1626060872000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 37.png","hash":"b58b7e60adca34e6ce52f3f48cd876a05a61b77b","modified":1626060876000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 39.png","hash":"724616c546497a45c4461221d52fcca9d7838565","modified":1626060876000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 40.png","hash":"436a5d8f446e408eeabfdcb9440bcb0dbd7a3e27","modified":1626060876000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 42.png","hash":"7d9c7dea67816ee9d5e97df6f364fb20f3d0cc34","modified":1626060876000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 41.png","hash":"c24ccbc4f9dce0dec445d8a27c127c94e604af52","modified":1626060876000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 43.png","hash":"2a57f01a2a666073a70eca7c078de78dce3ebdb2","modified":1626060876000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 45.png","hash":"b200ae3009ba594ee1abbcb8a08bcb88e2d3e96e","modified":1626060876000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 46.png","hash":"d897b17bee7a5cc03a22a0dc11ea877c672bc7ad","modified":1626060876000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 47.png","hash":"3229b8a513bd465d79b3354b35e18fb80316a55e","modified":1626060876000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 49.png","hash":"a333f86ac67906bf720d635a7e64bf584033a666","modified":1626060876000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 48.png","hash":"d2c11501ee9ea59cb3a5a4355ba7c13a9388be76","modified":1626060876000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 52.png","hash":"ca201a828fef7248e01c3210abde3a3b0343fd14","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 54.png","hash":"9bf6047840ea2f7090cab94feb72dfa63f7cfaa3","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 53.png","hash":"397916900ac9cc41a0220a7da7def474e0cb262e","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 55.png","hash":"3496a9c939c7b2bf472c179c7c1d0bd8ff032c6c","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 56.png","hash":"015a33f17ef4e0977ccd5199d4bb13d1e1963033","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 57.png","hash":"ae3b990f17d095236dc4557610492a799c873b1e","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 59.png","hash":"c395a9e5116718ca3da172e9ec308cd559e2f16f","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 50.png","hash":"c65367f24acbf0373a02363f3be50ea6b60de0b6","modified":1626060876000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 61.png","hash":"6b7825dbf3fb5f96e4dcf0fcbab36b74b3548156","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 60.png","hash":"cd112ae2f23bdc0d88a34e073b3cdacfa9a39a79","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 65.png","hash":"54f3a05deb153d549a5620e1b18ee49d1b1d018b","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 67.png","hash":"198d2f1e218de458b13120d8873f8b1593c16f63","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 7.png","hash":"ae4cc9fde3046674c461eb0f8b94a40e04b9c5ae","modified":1626060872000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 68.png","hash":"53f9fa42b6a90bddb829128c0aa7a49a9aa1b24f","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 69.png","hash":"f047d324de2d0ac9f3264e1487ca603e50e6bde3","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 70.png","hash":"83e85f0042361ef39e7594436200272c3c14834e","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 72.png","hash":"44cfb4806ee2083572f622de439367a21a3f7e28","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 73.png","hash":"0bdf2902b46fbbcddbbe3fb621b9e58d2a5741ce","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 75.png","hash":"67f0053bb9d78c386f0f76451fddba76cfeb7fdc","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 74.png","hash":"ab2724e3416506d332037e1ac2fec9bd3a5c9b4a","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 78.png","hash":"115b04be5e9ed1f6c02762d0a2370bc0aab1f10a","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 76.png","hash":"e74f321d0e43696dda70ad68c9fa622813efeab6","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 79.png","hash":"975c7cccf13318c3fd0db17f226dbace909d8147","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 81.png","hash":"f3c302e0cb1cd205607fc476ca39b71cdee957a1","modified":1626060880000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 82.png","hash":"93d27138c92b5c020ffa5c228a802cdc84575aec","modified":1626060880000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 84.png","hash":"d164e5de2df947e832f8abeca63d549f00af37a3","modified":1626060880000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 83.png","hash":"27c79b8da915b97a9e08c8654d50286777826865","modified":1626060880000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 85.png","hash":"465fa735efcf864e3b96ba995d248add5e8385ee","modified":1626060880000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 8.png","hash":"ab7379ed0a50a32b18592c5f6bb3bb13f461e13a","modified":1626060872000},{"_id":"source/_posts/EffectiveObjcTips/Untitled.png","hash":"21278d461798c3f6fcdf234883e2b06c3b41283a","modified":1626060872000},{"_id":"source/_posts/SwiftUIExploration/Untitled 10.png","hash":"1b99ddac941134da293e02afe7d1379254bca965","modified":1626300900000},{"_id":"source/_posts/SwiftUIExploration/Untitled 11.png","hash":"9812b2552d8034fd9407b8d9daffede45b095f2c","modified":1626300900000},{"_id":"source/_posts/SwiftUIExploration/Untitled 5.png","hash":"d753eaa925ca3f6649892adb25d483ef487b53c0","modified":1626300898000},{"_id":"source/_posts/SwiftUIExploration/Untitled 9.png","hash":"b2021ec773c6a6adca78af009da501245617839a","modified":1626300900000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 25.png","hash":"e263e89f634bf418d4a61156df84ea71b4083845","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 27.png","hash":"e2f9e4ca94f8dfd925c10442f608e35cf13d1abe","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 30.png","hash":"951c80cc09902d73615819d226b26ff47c254c93","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 19.png","hash":"c65592f520bbd9dfb04dfd538fb9f6f53fc98ce0","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 18.png","hash":"a914acbe058a2ddadf804caf9873818fc04d1fba","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 33.png","hash":"0882d180ca30f79d12635af74b815e3e41d6e415","modified":1626060876000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 32.png","hash":"54ab2fe063e8764c735a6c8429d56dcd26b185aa","modified":1626060876000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 38.png","hash":"5dc0a92d9a59adf9cbf5114b750061342ca4ec89","modified":1626060876000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 44.png","hash":"5c090a521b9267945b84d06de0af49c5a356ef98","modified":1626060876000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 58.png","hash":"f83e91488a443ba2a9c3a02f8494ecee06bfed49","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 51.png","hash":"eaef8445231e45e39d4ccd02ab44e09aaae831b7","modified":1626060876000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 66.png","hash":"052ee9728e6c6f68a915d87c99db9752ce9b2b17","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 80.png","hash":"9f19abf4da5572203edcb1815556d91ce578adad","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 9.png","hash":"200e380b248cc9d5ee68aa706bfebf2d2db90c1c","modified":1626060872000},{"_id":"source/_posts/SwiftUIExploration/Untitled.png","hash":"e14f959f13402caf18ac680943d8c84d5ae84668","modified":1626300898000},{"_id":"source/_posts/SwiftUIExploration/Untitled 6.png","hash":"10d40f7dc87d7a7efa143cc55b357452eb714186","modified":1626300898000},{"_id":"source/_posts/SwiftUIExploration/Untitled 7.png","hash":"cefc4c013aa68f64cc2c8c5d94a6ceb629d2c12d","modified":1626300898000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 23.png","hash":"02d733519c13ff752565e435f23aa549735edbb7","modified":1626060874000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 5.png","hash":"71806d20a223648849a2f05ffd2341d09f8cbc72","modified":1626060872000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 6.png","hash":"6c4fa80638a77493ab211dc5a81829dcaa07dbd0","modified":1626060872000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 62.png","hash":"2a70492f432c15e9fc375e7827712832a8d9862b","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 64.png","hash":"45097a4cacfcf7890f4f194606795d713b2b8627","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 71.png","hash":"6139a603d0b4e2de61e4cef8d69edd4a65de3a0a","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 77.png","hash":"d912d27067d6ebd26c8498b12300f97f311e472c","modified":1626060878000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 35.png","hash":"1407cee2a111df1b8b5a0cd3125945526cd903a1","modified":1626060876000},{"_id":"source/_posts/EffectiveObjcTips/Untitled 63.png","hash":"d75096548d68f3e856f608aa8cd4b3117e4b543c","modified":1626060878000},{"_id":"source/_posts/SwiftUIExploration/Untitled 12.png","hash":"d9beb155bb3a15921c7eb77356d0458e4404476b","modified":1626300900000},{"_id":"source/_posts/SwiftUIExploration/Untitled 2.png","hash":"443c51bf7a93ad3b426d5a7aae4f16e9e9c50f9f","modified":1626300898000},{"_id":"source/_posts/SwiftUIExploration/Untitled 4.png","hash":"d68f418d9c289d556cb83742fe6d960bc6fa7aa2","modified":1626300898000},{"_id":"source/_posts/SwiftUIExploration/Untitled 8.png","hash":"41758de261b1efef81fbb48cc8ad9fc0cda3111f","modified":1626300898000},{"_id":"source/_posts/SwiftUIExploration/Untitled 1.png","hash":"76b0c68916bdd4357236826985ea923fa5a30347","modified":1626300898000},{"_id":"source/_posts/SwiftUIExploration/Untitled 3.png","hash":"ab96a8a1b05f936fb0c617a3b2c0b4e3b1873f84","modified":1626300898000},{"_id":"source/_posts/EffectiveObjcTips/Effective_Objective-C_2.0.pdf","hash":"1e55bcb234b8ffb9ef18772cbdc05b8118e69c7c","modified":1626060872000},{"_id":"public/atom.xml","hash":"d4f8a113ea4854c7cf46155aae7dd24402d8d5a4","modified":1627404638069},{"_id":"public/sitemap.xml","hash":"1b42a9c0191382554bdc33311df19358965ef1d1","modified":1627404638069},{"_id":"public/baidusitemap.xml","hash":"b8b71a0ddb6e7e9cd3e00efa8b9b6d15ae105fc1","modified":1627404638069},{"_id":"public/about/index.html","hash":"6733b8263d2b64e85a8aa832fc596c315a5ae670","modified":1627404638069},{"_id":"public/categories/index.html","hash":"c972aeac2e5bd952bdd3122ef5dac7b29ffb5a3d","modified":1627404638069},{"_id":"public/archives/2020/03/index.html","hash":"9387a51464422617825c21ab9b5b53e2f52243f7","modified":1627404638069},{"_id":"public/archives/2020/06/index.html","hash":"845bdaadb08c69d4c3c89a93a01e0579aca793e3","modified":1627404638069},{"_id":"public/archives/2021/index.html","hash":"d5b79a1e589527f3ae5119d184e18df476ee88bc","modified":1627404638069},{"_id":"public/archives/2021/07/index.html","hash":"fbb1efc87e361aec4e9234da62081e905ef0ec33","modified":1627404638069},{"_id":"public/categories/design/index.html","hash":"d7d4aeb2e7311f6f280ffcbe16f816f4d3a32c8a","modified":1627404638069},{"_id":"public/tags/Apple/index.html","hash":"4c36ad4c89d210e9fa3190e9735be426162b4cc8","modified":1627404638069},{"_id":"public/tags/Xcode/page/2/index.html","hash":"df752c4874175caa287d7d8eb0bdf180f1787c8c","modified":1627404638069},{"_id":"public/tags/UI/index.html","hash":"f79b66dbea4041648eb284559ad3582c6b9fea1b","modified":1627404638069},{"_id":"public/tags/struts/index.html","hash":"40b94d0a9db97d26e285ea1c0546d53227e3747e","modified":1627404638069},{"_id":"public/tags/Action/index.html","hash":"9ed8f10a789607dd756e94ae653767b9ccfbcb5c","modified":1627404638069},{"_id":"public/tags/实验/index.html","hash":"2f78db18665943b6109939b0ea5327f8278c6b68","modified":1627404638069},{"_id":"public/tags/数字生活/index.html","hash":"9c94b991f4ebf30041c33eaab1e5ed90d51e9699","modified":1627404638069},{"_id":"public/tags/杂文/index.html","hash":"6bffdc7b114bcd69cbdf3e756a557f72be0daf21","modified":1627404638069},{"_id":"public/tags/AudioPlayer/index.html","hash":"5ee162dcd775092af7a9814b8b2eab235ccbf6be","modified":1627404638069},{"_id":"public/tags/Vue-js/index.html","hash":"35becd430838c29a6e29182b68c1144d9f98ebc6","modified":1627404638069},{"_id":"public/tags/前端框架/index.html","hash":"417c99fe1bdc6670e3271df8b6ed2db5c92d4cd2","modified":1627404638069},{"_id":"public/tags/Hibernate/index.html","hash":"831b3cbd6f0554c813d7d4c927a8cb2ce14446b3","modified":1627404638069},{"_id":"public/tags/设计模式/index.html","hash":"62eef464b6cb87c66e08c05180fefb3d257ba61a","modified":1627404638069},{"_id":"public/tags/Java/index.html","hash":"f670df3321ce83573e8ab26ceee5a48c52bbe9e1","modified":1627404638069},{"_id":"public/tags/ARC/index.html","hash":"cc17c74a0a60ad2b70837a80ce7d9313ff856bf2","modified":1627404638069},{"_id":"public/tags/Grayscale/index.html","hash":"dc78f4f5657030b7a4d68d8143f500c90f22360a","modified":1627404638069},{"_id":"public/tags/workflow/index.html","hash":"8ad72e8682ff900f21221be516ba63111355fe24","modified":1627404638069},{"_id":"public/tags/数据挖掘/index.html","hash":"77d7abbebb2b6fee579bfa20fcf3839411d14716","modified":1627404638069},{"_id":"public/tags/关联算法/index.html","hash":"426b9eef2fe383e292cc668636601331ddde88aa","modified":1627404638069},{"_id":"public/tags/WEKA/index.html","hash":"ea6ac2662742f262670f4dc707c26e80c7c27ef7","modified":1627404638069},{"_id":"public/tags/Music/index.html","hash":"2c21a868c32a84dd543a454ab9f1200dec5c2074","modified":1627404638069},{"_id":"public/tags/SwiftUI/index.html","hash":"674a02008aa7f8e01c891ac662bfa0b7145bb6a1","modified":1627404638069},{"_id":"public/archives/index.html","hash":"9243b03a0269d99b3aa69787804af1ba4a2e1cec","modified":1627404638069},{"_id":"public/tags/index.html","hash":"f2ac11586db8c0ef517d011e28cd17a666dfb8bf","modified":1627404638069},{"_id":"public/2021/07/15/SwiftUIExploration/index.html","hash":"075e3ea049660cf0fdbd048fff3a7205070a4068","modified":1627404638069},{"_id":"public/2021/07/14/EffectiveObjcTips/index.html","hash":"6cd981f5e5855aa8c09e4b881c12f9fe91aa1a4b","modified":1627286211306},{"_id":"public/2020/07/15/Muzik_Progress/index.html","hash":"248d06789132abb7ff7ba48aeeca7ac3cdba8370","modified":1627404638069},{"_id":"public/2020/07/08/Muzik_GettingStarted/index.html","hash":"ca7e82ccdf1a334c485a60bd44b38c4f035b9ea5","modified":1627404638069},{"_id":"public/2020/07/05/Design_Thoughts/index.html","hash":"4c16bf31cbce7bd6e0f836bc60626cbd7b7f5316","modified":1627404638069},{"_id":"public/2020/07/01/Haze-Free/index.html","hash":"ff254e61a08d4bf36f33c47e0eb2a70a0ce17e31","modified":1627404638069},{"_id":"public/2020/06/07/Singleton_Pattern/index.html","hash":"3e6885c748df37d141b8b261ffc382430c8fa8cb","modified":1627404638069},{"_id":"public/2020/06/03/Mediator_Pattern/index.html","hash":"a96839ed6dd6e2d2c66668d895a2bdc461e4284f","modified":1627404638069},{"_id":"public/2020/04/24/Objc_Learning_8/index.html","hash":"66cd97fad2b111f13011486da09d08730aec5510","modified":1627404638069},{"_id":"public/2020/04/22/WEKA_Association/index.html","hash":"6ec8e7530cf84d6ebda34e17f646b706dd839152","modified":1627404638069},{"_id":"public/2020/04/19/Objc_Learning_7/index.html","hash":"638074572c64f94b6f2c8ba46ac41fb89204c551","modified":1627404638069},{"_id":"public/2020/04/17/Objc_Learning_6/index.html","hash":"a9a60b63e90d93f6b1afbd80df5dcee6eb7bf403","modified":1627404638069},{"_id":"public/2020/04/13/Objc_Learning_5/index.html","hash":"a97c7db15294dcc8bcb1fc1d0584c83f9c95dfa3","modified":1627404638069},{"_id":"public/2020/04/12/Digital_Life/index.html","hash":"0dbaad190f2d9eb864be7e7160cdb91411b5f3ed","modified":1627404638069},{"_id":"public/2020/04/11/Objc_Learning_4/index.html","hash":"31ee9b6e8e8b206bf9245cbdd8b76c5f55a6fe90","modified":1627404638069},{"_id":"public/2020/04/05/Objc_Learning_3/index.html","hash":"f80f1bfbd35c1af996c5b06b2660012bb894a68f","modified":1627404638069},{"_id":"public/2020/04/01/OpenCV_Filter/index.html","hash":"e5d89906704335d8f8a7ce4f025e7afb2e7e4ab2","modified":1627404638069},{"_id":"public/2020/03/26/Objc_Learning_2/index.html","hash":"d7abd0e84b538521599aced1104240d4ce4e453b","modified":1627404638069},{"_id":"public/2020/03/21/Objc_Learning_1/index.html","hash":"6b82dfb61fef65530c919411393c0b77ba626f83","modified":1627404638069},{"_id":"public/2020/03/16/OpenCV_Grayscale/index.html","hash":"7f778dae355b391b782969f0eb47519611fbc5f0","modified":1627404638069},{"_id":"public/2020/02/26/OpenCV_Xcode/index.html","hash":"74d3aa4ae83f64e5a61bd1418197b229baa36db7","modified":1627404638069},{"_id":"public/2020/02/26/Action_Experiment/index.html","hash":"c45198303903785557f07357219f364e85bfac7e","modified":1627404638069},{"_id":"public/2020/02/25/Hibernate_Basic/index.html","hash":"68cc4e45c777ee7826efd0f78dcd75df5bb3e00c","modified":1627404638069},{"_id":"public/2020/02/24/Struts_Workflow/index.html","hash":"7b2e99da33361e1a5a9b7f36b84a6e00a20ebe8c","modified":1627404638069},{"_id":"public/2020/02/23/Struts_Experiment/index.html","hash":"d07849c7022502528b07f1cdb390f8b98a82417d","modified":1627404638069},{"_id":"public/2020/02/11/Design+Code_Vue.js_Learning/index.html","hash":"2fb95ea398f8e5482405f7b7af283592485d4f18","modified":1627404638069},{"_id":"public/2020/02/07/Apple Watch/index.html","hash":"46bc352410aa4e544c99f89c241a92ccd6701091","modified":1627404638069},{"_id":"public/archives/page/2/index.html","hash":"9dc7c62aafb29752f9a20763333e38cbc82c54e6","modified":1627404638069},{"_id":"public/archives/page/3/index.html","hash":"fc2038763f454bb9bb84352b45f93f9b4e7f3835","modified":1627404638069},{"_id":"public/archives/2020/index.html","hash":"4a927d3147c98ac8c67818f9e8c22dd054c5f906","modified":1627404638069},{"_id":"public/archives/2020/page/2/index.html","hash":"4b07349ddee7f50319cc20b55c52d4d64e730994","modified":1627404638069},{"_id":"public/archives/2020/page/3/index.html","hash":"c586c9412e7f20fd944620dac86374be9ce4cbf5","modified":1627404638069},{"_id":"public/archives/2020/02/index.html","hash":"1f38c155cf3cd660ac2109944f9844c072a3a29d","modified":1627404638069},{"_id":"public/archives/2020/04/index.html","hash":"c53e0a450dfd8cb20cca431190a25c3ea002d5f8","modified":1627404638069},{"_id":"public/archives/2020/07/index.html","hash":"4b8a4b643595e1aeccf1236820f7b79182923605","modified":1627404638069},{"_id":"public/page/2/index.html","hash":"0ba010f76cdfa3431a94d67a482e637ee43761d7","modified":1627404638069},{"_id":"public/index.html","hash":"911664ce02da6bf2d545771a5eafbc13b7b7d289","modified":1627404638069},{"_id":"public/page/3/index.html","hash":"114542dac712f101e83bc39c68f1975ffb8f0d84","modified":1627404638069},{"_id":"public/categories/tech/index.html","hash":"594d8a486ba81caafc968b4428339b01b7c12988","modified":1627404638069},{"_id":"public/categories/tech/page/2/index.html","hash":"4dcd0e98a9a069b00955b3da5591a49fc71a1725","modified":1627404638069},{"_id":"public/categories/tech/page/3/index.html","hash":"9950f0bbf681143d74f02e9a0032101849eeb0d8","modified":1627404638069},{"_id":"public/tags/Xcode/index.html","hash":"3b82462edd11a8a2b2679b4ce2db5b47ba0cdf2b","modified":1627404638069},{"_id":"public/tags/iOS/index.html","hash":"cc111d2fc753c10b62c89d92ca3dd79820bec7d7","modified":1627404638069},{"_id":"public/tags/iOS/page/2/index.html","hash":"772431d57adad3bdcb8f73a3fc52e5f6c7906e92","modified":1627404638069},{"_id":"public/tags/JavaEE/index.html","hash":"5e3766de750168f526c23ef5f24796eaeefde9cb","modified":1627404638069},{"_id":"public/tags/总结/index.html","hash":"61b25db6d92f2d6774538a0c124471d8c6cce2fd","modified":1627404638069},{"_id":"public/tags/OpenCV/index.html","hash":"67cc54ad63b266fb93f260f2d0e2eac4a3d986d4","modified":1627404638069},{"_id":"public/tags/Swift/index.html","hash":"6ea7a4d809cad81deb5452685a905db1eae081f7","modified":1627404638069},{"_id":"public/tags/Objective-C/index.html","hash":"dece93801ad5dac6cca2df70227bd9c9ba9abfa9","modified":1627404638069},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1626712397473},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1626712397473},{"_id":"public/images/apple-touch-icon.png","hash":"87a5cb9ef565d1566ccf04e4596955f07f22fc2d","modified":1626712397473},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1626712397473},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1626712397473},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1626712397473},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1626712397473},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1626712397473},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1626712397473},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1626712397473},{"_id":"public/images/favicon-16x16.png","hash":"45cb5124a39b8882339664bb451896da23b9e45c","modified":1626712397473},{"_id":"public/images/favicon-32x32.png","hash":"c0a61653ba05b4bb269a6f3ee89e9895f2aeb9b8","modified":1626712397473},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1626712397473},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1626712397473},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1626712397473},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1626712397473},{"_id":"public/2020/03/16/OpenCV_Grayscale/calcHist.jpg","hash":"f25f5e23c8e7f1a962807aa4977c18f65f852e5c","modified":1626712397473},{"_id":"public/2020/02/23/Struts_Experiment/12.png","hash":"2a193f4c3277530433d8ca629b0d02f345fc3a7c","modified":1626712397473},{"_id":"public/2020/02/23/Struts_Experiment/16.png","hash":"dc2a732037fad1cdcd376d93748f38f2cf0dd895","modified":1626712397473},{"_id":"public/2020/02/23/Struts_Experiment/15.png","hash":"0a5b7f516385ea6c0b6d6e49b71de320295bd3ad","modified":1626712397473},{"_id":"public/2020/02/23/Struts_Experiment/17.png","hash":"b749ee2c18c364178a900697bfe11750512116af","modified":1626712397473},{"_id":"public/2020/02/23/Struts_Experiment/3.png","hash":"8ed394fa26e72c72a5e5fe9a49159d6517cc7ffc","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/11.png","hash":"c95df8125305e1272fb6dcdd6d6bf0d50cee27c9","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/15.png","hash":"433c4d94176a95fef94df0e7769888773a3c8c39","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/13.png","hash":"be2c4a1da212ef4cb12f5060ad0b740db01e9fca","modified":1626712397473},{"_id":"public/2020/02/23/Struts_Experiment/8.png","hash":"70115598e49ef24895f4f37fef860de3b509d232","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/19.png","hash":"51af66a58e2dceea315edf3fd4ace084a2a6db30","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/21.png","hash":"ac47e797cd70becd1879609d82124e4fc70e8886","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/22.png","hash":"296819fd0c0d841c210fd8b670eb37810b639898","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/5.png","hash":"726a5054cfa2b47d4d598e17f0885ef8661a6acd","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/6.png","hash":"7c103ab14dec169bbb25027bd60346e5db3c2061","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/9.png","hash":"036e2042b95a03ff077db2cbf4300c5dd908e121","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/na.png","hash":"aef201fa033a0318301a1997b8af0952ec15a5a8","modified":1626712397473},{"_id":"public/2021/07/15/SwiftUIExploration/Untitled 11.png","hash":"9812b2552d8034fd9407b8d9daffede45b095f2c","modified":1626712397473},{"_id":"public/2021/07/15/SwiftUIExploration/Untitled 10.png","hash":"1b99ddac941134da293e02afe7d1379254bca965","modified":1626712397473},{"_id":"public/2021/07/15/SwiftUIExploration/Untitled 5.png","hash":"d753eaa925ca3f6649892adb25d483ef487b53c0","modified":1626712397473},{"_id":"public/2021/07/15/SwiftUIExploration/Untitled 9.png","hash":"b2021ec773c6a6adca78af009da501245617839a","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 11.png","hash":"b26811fb534e4fd8859f54a72a67f495c208509b","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 10.png","hash":"6b7fb6e39792631e2c1b609dc2bae92827da5c56","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 12.png","hash":"23d847debb4bc061d17c7dc5733d991deac8dd12","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 1.png","hash":"95c7d9f69a086a3a63b15594a9c81bcccdbc0368","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 13.png","hash":"15b726e8b2704d4484fbc27342e306f8568dee25","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 15.png","hash":"1260fb8747555a514c9987352fd701c837bb70fe","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 14.png","hash":"f6f07756a0c0f313ef46bc7bc84c07034d62677f","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 16.png","hash":"00e2735781a80b0a4439c8577292f52444e276d8","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 17.png","hash":"b9d4a960387b9de7d58aa414b2fabbb81e5fed8a","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 2.png","hash":"026817ec5d76f25627675fa7048887307043071b","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 22.png","hash":"b708901d7cff461cd1d512449402a946674a816d","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 20.png","hash":"be5e80c6a9575ec0dfd119b113e81a1796a4d99c","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 21.png","hash":"57d225e48414b97db85652972715f10f3f2a47b2","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 26.png","hash":"25ccdaae10c37d31565595a0e198a375c3755b47","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 24.png","hash":"9c5f9a6a628b4d143ad707539a73b6d0cc76ba8f","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 28.png","hash":"3d7d11823218c067b2eb30d9afdc0711ebb0dbdb","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 3.png","hash":"506a901ec617750dd618d19173441b2c214766d6","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 29.png","hash":"4d32979c01f0118e01855b42f01e791356a3f9f0","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 34.png","hash":"7c0597239ff5574694b98bca0593258a8ee53d28","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 31.png","hash":"b5fcb8a64f024e416c938d1b20247f553c35e617","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 36.png","hash":"ff122ecd213550310270df464c37f1a641a0552e","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 37.png","hash":"b58b7e60adca34e6ce52f3f48cd876a05a61b77b","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 40.png","hash":"436a5d8f446e408eeabfdcb9440bcb0dbd7a3e27","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 39.png","hash":"724616c546497a45c4461221d52fcca9d7838565","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 42.png","hash":"7d9c7dea67816ee9d5e97df6f364fb20f3d0cc34","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 43.png","hash":"2a57f01a2a666073a70eca7c078de78dce3ebdb2","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 4.png","hash":"d280ee6e115e5d0f15295c3360fac8efd2b89d55","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 41.png","hash":"c24ccbc4f9dce0dec445d8a27c127c94e604af52","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 47.png","hash":"3229b8a513bd465d79b3354b35e18fb80316a55e","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 45.png","hash":"b200ae3009ba594ee1abbcb8a08bcb88e2d3e96e","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 46.png","hash":"d897b17bee7a5cc03a22a0dc11ea877c672bc7ad","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 49.png","hash":"a333f86ac67906bf720d635a7e64bf584033a666","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 48.png","hash":"d2c11501ee9ea59cb3a5a4355ba7c13a9388be76","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 52.png","hash":"ca201a828fef7248e01c3210abde3a3b0343fd14","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 50.png","hash":"c65367f24acbf0373a02363f3be50ea6b60de0b6","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 54.png","hash":"9bf6047840ea2f7090cab94feb72dfa63f7cfaa3","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 56.png","hash":"015a33f17ef4e0977ccd5199d4bb13d1e1963033","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 53.png","hash":"397916900ac9cc41a0220a7da7def474e0cb262e","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 55.png","hash":"3496a9c939c7b2bf472c179c7c1d0bd8ff032c6c","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 59.png","hash":"c395a9e5116718ca3da172e9ec308cd559e2f16f","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 61.png","hash":"6b7825dbf3fb5f96e4dcf0fcbab36b74b3548156","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 60.png","hash":"cd112ae2f23bdc0d88a34e073b3cdacfa9a39a79","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 57.png","hash":"ae3b990f17d095236dc4557610492a799c873b1e","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 68.png","hash":"53f9fa42b6a90bddb829128c0aa7a49a9aa1b24f","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 65.png","hash":"54f3a05deb153d549a5620e1b18ee49d1b1d018b","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 67.png","hash":"198d2f1e218de458b13120d8873f8b1593c16f63","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 69.png","hash":"f047d324de2d0ac9f3264e1487ca603e50e6bde3","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 7.png","hash":"ae4cc9fde3046674c461eb0f8b94a40e04b9c5ae","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 70.png","hash":"83e85f0042361ef39e7594436200272c3c14834e","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 74.png","hash":"ab2724e3416506d332037e1ac2fec9bd3a5c9b4a","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 72.png","hash":"44cfb4806ee2083572f622de439367a21a3f7e28","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 73.png","hash":"0bdf2902b46fbbcddbbe3fb621b9e58d2a5741ce","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 75.png","hash":"67f0053bb9d78c386f0f76451fddba76cfeb7fdc","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 76.png","hash":"e74f321d0e43696dda70ad68c9fa622813efeab6","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 79.png","hash":"975c7cccf13318c3fd0db17f226dbace909d8147","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 8.png","hash":"ab7379ed0a50a32b18592c5f6bb3bb13f461e13a","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 81.png","hash":"f3c302e0cb1cd205607fc476ca39b71cdee957a1","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 84.png","hash":"d164e5de2df947e832f8abeca63d549f00af37a3","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 83.png","hash":"27c79b8da915b97a9e08c8654d50286777826865","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 82.png","hash":"93d27138c92b5c020ffa5c228a802cdc84575aec","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 78.png","hash":"115b04be5e9ed1f6c02762d0a2370bc0aab1f10a","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled.png","hash":"21278d461798c3f6fcdf234883e2b06c3b41283a","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 85.png","hash":"465fa735efcf864e3b96ba995d248add5e8385ee","modified":1626712397473},{"_id":"public/images/wechat_account.jpg","hash":"371020e1948f149afa6e350e8e66b11609033b81","modified":1626712397473},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1626712397473},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1626712397473},{"_id":"public/2020/03/16/OpenCV_Grayscale/equa.jpg","hash":"51f70cd867b8baf1d644a3020156fc7d3d1d2d4d","modified":1626712397473},{"_id":"public/2020/02/23/Struts_Experiment/1.png","hash":"d7eb2bc35abc97cd95329bc49bb401e9f61239b0","modified":1626712397473},{"_id":"public/2020/02/23/Struts_Experiment/11.png","hash":"b98c505b83772f2cd7fa077fa8364590ae540069","modified":1626712397473},{"_id":"public/2020/02/23/Struts_Experiment/14.png","hash":"98a27d750c7f4a92dd3d35c22d717813183367d3","modified":1626712397473},{"_id":"public/2020/02/23/Struts_Experiment/13.png","hash":"ae7f800dbe302632b4e780ebd946e33907d06ee2","modified":1626712397473},{"_id":"public/2020/02/23/Struts_Experiment/19.png","hash":"09517d00a79e34c8b80592a4be975e856e0cd886","modified":1626712397473},{"_id":"public/2020/02/23/Struts_Experiment/18.png","hash":"4f97101c6640207342eebe013bc237930cc1c9f6","modified":1626712397473},{"_id":"public/2020/02/23/Struts_Experiment/2.png","hash":"1704b133a68c645c8bec5f663fef7329c2cf98f2","modified":1626712397473},{"_id":"public/2020/02/23/Struts_Experiment/20.png","hash":"ed64abab800afadbcf93e265bcce5b3f0bcb5eb4","modified":1626712397473},{"_id":"public/2020/02/23/Struts_Experiment/4.png","hash":"63b7c1b0aaf05bbd219156b694b10b12985f4af1","modified":1626712397473},{"_id":"public/2020/02/23/Struts_Experiment/6.png","hash":"dc3d7595e3e18d9056a390d4b868649f195b6d92","modified":1626712397473},{"_id":"public/2020/02/23/Struts_Experiment/5.png","hash":"f0dc42bd0706e658ea3168dd2be50014118d2017","modified":1626712397473},{"_id":"public/2020/02/23/Struts_Experiment/7.png","hash":"ba150ac99e12159c1bf64edc3e37a5f2be8fe7df","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/1.png","hash":"6d3fa203d8998ae1ab5ea253392ec776257b43b4","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/10.png","hash":"361007ca5b06a9bd7e043d9f9a8dcc38ba76de42","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/12.png","hash":"392a11879adf7b088dcc740642679cf32806f3a5","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/18.png","hash":"efabf500ead9e7e3e2ff4fa09e5f5565c9bb12fc","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/16.png","hash":"cf63a5f128126e7f11f2e9fb47f3734322ee9df6","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/17.png","hash":"8cece424a0b670955abd695f49b4fa9b30a92318","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/3.png","hash":"7e47504846ffed31d7622ed437f8f3700d5e7f5e","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/20.png","hash":"ed66f254efff53298eebe8ee3b0c075ea7a14a10","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/4.png","hash":"168a80763fd2d388f417d3601e55787717497ee0","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/2.png","hash":"398a42e48ce1cd2f2b5d93c5eff48842ed6a5155","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/8.png","hash":"c7d8e8cf73a769390a567822e8a453669901d5e3","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/7.png","hash":"1aeb0ffb4e873da6a79fe27a9c70617cc0c9e094","modified":1626712397473},{"_id":"public/2021/07/15/SwiftUIExploration/Untitled 6.png","hash":"10d40f7dc87d7a7efa143cc55b357452eb714186","modified":1626712397473},{"_id":"public/2021/07/15/SwiftUIExploration/Untitled 7.png","hash":"cefc4c013aa68f64cc2c8c5d94a6ceb629d2c12d","modified":1626712397473},{"_id":"public/2021/07/15/SwiftUIExploration/Untitled.png","hash":"e14f959f13402caf18ac680943d8c84d5ae84668","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 18.png","hash":"a914acbe058a2ddadf804caf9873818fc04d1fba","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 19.png","hash":"c65592f520bbd9dfb04dfd538fb9f6f53fc98ce0","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 25.png","hash":"e263e89f634bf418d4a61156df84ea71b4083845","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 27.png","hash":"e2f9e4ca94f8dfd925c10442f608e35cf13d1abe","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 32.png","hash":"54ab2fe063e8764c735a6c8429d56dcd26b185aa","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 30.png","hash":"951c80cc09902d73615819d226b26ff47c254c93","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 33.png","hash":"0882d180ca30f79d12635af74b815e3e41d6e415","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 38.png","hash":"5dc0a92d9a59adf9cbf5114b750061342ca4ec89","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 44.png","hash":"5c090a521b9267945b84d06de0af49c5a356ef98","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 51.png","hash":"eaef8445231e45e39d4ccd02ab44e09aaae831b7","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 58.png","hash":"f83e91488a443ba2a9c3a02f8494ecee06bfed49","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 66.png","hash":"052ee9728e6c6f68a915d87c99db9752ce9b2b17","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 80.png","hash":"9f19abf4da5572203edcb1815556d91ce578adad","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 9.png","hash":"200e380b248cc9d5ee68aa706bfebf2d2db90c1c","modified":1626712397473},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1626712397473},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1626712397473},{"_id":"public/js/local-search.js","hash":"f2e568298c71d2417a1a1c7e56025ce5842b1220","modified":1626712397473},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1626712397473},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1626712397473},{"_id":"public/js/schemes/muse.js","hash":"ae2a2502b77203e83f75a040c43e86a7ecb4873c","modified":1626712397473},{"_id":"public/js/schemes/pisces.js","hash":"f068b46f8c305c7436c2767492a6bed42dcd764c","modified":1626712397473},{"_id":"public/js/utils.js","hash":"a1e70ac9d32697907d5d78f2533d627f4df8ebcb","modified":1626712397473},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1626712397473},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1626712397473},{"_id":"public/css/main.css","hash":"221712a1e5ef966330623e0091acbbaf4c2c703d","modified":1626712397473},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1626712397473},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1626712397473},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1626712397473},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1626712397473},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/14.png","hash":"c0fca01de3a897b124b1926441c4e9805a19def3","modified":1626712397473},{"_id":"public/images/favicon.png","hash":"e9194790400e5c55019076a58646a7bbcc3b908d","modified":1626712397473},{"_id":"public/2020/03/16/OpenCV_Grayscale/直方图.png","hash":"86844d000c519cb8e2e77058512f8d25805c8f29","modified":1626712397473},{"_id":"public/2020/02/23/Struts_Experiment/9.png","hash":"836684a889d211df549c8fb6f90a689d20d59f34","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 23.png","hash":"02d733519c13ff752565e435f23aa549735edbb7","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 5.png","hash":"71806d20a223648849a2f05ffd2341d09f8cbc72","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 64.png","hash":"45097a4cacfcf7890f4f194606795d713b2b8627","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 62.png","hash":"2a70492f432c15e9fc375e7827712832a8d9862b","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 71.png","hash":"6139a603d0b4e2de61e4cef8d69edd4a65de3a0a","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 6.png","hash":"6c4fa80638a77493ab211dc5a81829dcaa07dbd0","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 77.png","hash":"d912d27067d6ebd26c8498b12300f97f311e472c","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/DMI.png","hash":"a918906603948105b53c64572ab32bd701dccdf7","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/uni.png","hash":"b2c0c57f17e1e8a5d392951857af5afbc69517d1","modified":1626712397473},{"_id":"public/2020/03/16/OpenCV_Grayscale/cvcolor.png","hash":"39c4fc9704c802244f70b67b82a00c368606b342","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 35.png","hash":"1407cee2a111df1b8b5a0cd3125945526cd903a1","modified":1626712397473},{"_id":"public/2021/07/15/SwiftUIExploration/Untitled 2.png","hash":"443c51bf7a93ad3b426d5a7aae4f16e9e9c50f9f","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Untitled 63.png","hash":"d75096548d68f3e856f608aa8cd4b3117e4b543c","modified":1626712397473},{"_id":"public/2021/07/15/SwiftUIExploration/Untitled 12.png","hash":"d9beb155bb3a15921c7eb77356d0458e4404476b","modified":1626712397473},{"_id":"public/2021/07/15/SwiftUIExploration/Untitled 4.png","hash":"d68f418d9c289d556cb83742fe6d960bc6fa7aa2","modified":1626712397473},{"_id":"public/2021/07/15/SwiftUIExploration/Untitled 8.png","hash":"41758de261b1efef81fbb48cc8ad9fc0cda3111f","modified":1626712397473},{"_id":"public/images/logo.svg","hash":"916ac3850fbad6339fe94e7d19aaee001a5ac309","modified":1626712397473},{"_id":"public/2020/02/23/Struts_Experiment/10.png","hash":"c4d4808354668716e312dc618fc88ef9f27aa4e5","modified":1626712397473},{"_id":"public/2020/02/26/Action_Experiment/button.png","hash":"34d252f467c88ffa17d85c0bf16c865884f96487","modified":1626712397473},{"_id":"public/2021/07/15/SwiftUIExploration/Untitled 1.png","hash":"76b0c68916bdd4357236826985ea923fa5a30347","modified":1626712397473},{"_id":"public/2021/07/15/SwiftUIExploration/Untitled 3.png","hash":"ab96a8a1b05f936fb0c617a3b2c0b4e3b1873f84","modified":1626712397473},{"_id":"public/2020/03/16/OpenCV_Grayscale/result.png","hash":"90ddaf05a55219c1953d9eeda76bf13d182ceceb","modified":1626712397473},{"_id":"public/2021/07/14/EffectiveObjcTips/Effective_Objective-C_2.0.pdf","hash":"1e55bcb234b8ffb9ef18772cbdc05b8118e69c7c","modified":1626712397473},{"_id":"source/_posts/EffectiveObjcTips/Untitled1.png","hash":"95c7d9f69a086a3a63b15594a9c81bcccdbc0368","modified":1627286458634},{"_id":"source/_posts/EffectiveObjcTips/Untitled10.png","hash":"6b7fb6e39792631e2c1b609dc2bae92827da5c56","modified":1627286528594},{"_id":"source/_posts/EffectiveObjcTips/Untitled11.png","hash":"b26811fb534e4fd8859f54a72a67f495c208509b","modified":1627286536932},{"_id":"source/_posts/EffectiveObjcTips/Untitled12.png","hash":"23d847debb4bc061d17c7dc5733d991deac8dd12","modified":1627286541552},{"_id":"source/_posts/EffectiveObjcTips/Untitled13.png","hash":"15b726e8b2704d4484fbc27342e306f8568dee25","modified":1627286545347},{"_id":"source/_posts/EffectiveObjcTips/Untitled14.png","hash":"f6f07756a0c0f313ef46bc7bc84c07034d62677f","modified":1627286549517},{"_id":"source/_posts/EffectiveObjcTips/Untitled15.png","hash":"1260fb8747555a514c9987352fd701c837bb70fe","modified":1627286552683},{"_id":"source/_posts/EffectiveObjcTips/Untitled16.png","hash":"00e2735781a80b0a4439c8577292f52444e276d8","modified":1627286556296},{"_id":"source/_posts/EffectiveObjcTips/Untitled17.png","hash":"b9d4a960387b9de7d58aa414b2fabbb81e5fed8a","modified":1627286560646},{"_id":"source/_posts/EffectiveObjcTips/Untitled2.png","hash":"026817ec5d76f25627675fa7048887307043071b","modified":1627286462606},{"_id":"source/_posts/EffectiveObjcTips/Untitled20.png","hash":"be5e80c6a9575ec0dfd119b113e81a1796a4d99c","modified":1627286578528},{"_id":"source/_posts/EffectiveObjcTips/Untitled21.png","hash":"57d225e48414b97db85652972715f10f3f2a47b2","modified":1627286590244},{"_id":"source/_posts/EffectiveObjcTips/Untitled22.png","hash":"b708901d7cff461cd1d512449402a946674a816d","modified":1627286607704},{"_id":"source/_posts/EffectiveObjcTips/Untitled24.png","hash":"9c5f9a6a628b4d143ad707539a73b6d0cc76ba8f","modified":1627286615175},{"_id":"source/_posts/EffectiveObjcTips/Untitled26.png","hash":"25ccdaae10c37d31565595a0e198a375c3755b47","modified":1627286621354},{"_id":"source/_posts/EffectiveObjcTips/Untitled28.png","hash":"3d7d11823218c067b2eb30d9afdc0711ebb0dbdb","modified":1627286627294},{"_id":"source/_posts/EffectiveObjcTips/Untitled29.png","hash":"4d32979c01f0118e01855b42f01e791356a3f9f0","modified":1627286631014},{"_id":"source/_posts/EffectiveObjcTips/Untitled3.png","hash":"506a901ec617750dd618d19173441b2c214766d6","modified":1627286466565},{"_id":"source/_posts/EffectiveObjcTips/Untitled31.png","hash":"b5fcb8a64f024e416c938d1b20247f553c35e617","modified":1627286638198},{"_id":"source/_posts/EffectiveObjcTips/Untitled34.png","hash":"7c0597239ff5574694b98bca0593258a8ee53d28","modified":1627286648023},{"_id":"source/_posts/EffectiveObjcTips/Untitled36.png","hash":"ff122ecd213550310270df464c37f1a641a0552e","modified":1627286657640},{"_id":"source/_posts/EffectiveObjcTips/Untitled37.png","hash":"b58b7e60adca34e6ce52f3f48cd876a05a61b77b","modified":1627286660625},{"_id":"source/_posts/EffectiveObjcTips/Untitled39.png","hash":"724616c546497a45c4461221d52fcca9d7838565","modified":1627286665919},{"_id":"source/_posts/EffectiveObjcTips/Untitled4.png","hash":"d280ee6e115e5d0f15295c3360fac8efd2b89d55","modified":1627286485736},{"_id":"source/_posts/EffectiveObjcTips/Untitled40.png","hash":"436a5d8f446e408eeabfdcb9440bcb0dbd7a3e27","modified":1627286670763},{"_id":"source/_posts/EffectiveObjcTips/Untitled41.png","hash":"c24ccbc4f9dce0dec445d8a27c127c94e604af52","modified":1627286674035},{"_id":"source/_posts/EffectiveObjcTips/Untitled42.png","hash":"7d9c7dea67816ee9d5e97df6f364fb20f3d0cc34","modified":1627286677035},{"_id":"source/_posts/EffectiveObjcTips/Untitled43.png","hash":"2a57f01a2a666073a70eca7c078de78dce3ebdb2","modified":1627286680755},{"_id":"source/_posts/EffectiveObjcTips/Untitled45.png","hash":"b200ae3009ba594ee1abbcb8a08bcb88e2d3e96e","modified":1627286736742},{"_id":"source/_posts/EffectiveObjcTips/Untitled46.png","hash":"d897b17bee7a5cc03a22a0dc11ea877c672bc7ad","modified":1627286742301},{"_id":"source/_posts/EffectiveObjcTips/Untitled47.png","hash":"3229b8a513bd465d79b3354b35e18fb80316a55e","modified":1627286756434},{"_id":"source/_posts/EffectiveObjcTips/Untitled48.png","hash":"d2c11501ee9ea59cb3a5a4355ba7c13a9388be76","modified":1627286759237},{"_id":"source/_posts/EffectiveObjcTips/Untitled49.png","hash":"a333f86ac67906bf720d635a7e64bf584033a666","modified":1627286762658},{"_id":"source/_posts/EffectiveObjcTips/Untitled50.png","hash":"c65367f24acbf0373a02363f3be50ea6b60de0b6","modified":1627286766561},{"_id":"source/_posts/EffectiveObjcTips/Untitled52.png","hash":"ca201a828fef7248e01c3210abde3a3b0343fd14","modified":1627286772723},{"_id":"source/_posts/EffectiveObjcTips/Untitled54.png","hash":"9bf6047840ea2f7090cab94feb72dfa63f7cfaa3","modified":1627286778888},{"_id":"source/_posts/EffectiveObjcTips/Untitled53.png","hash":"397916900ac9cc41a0220a7da7def474e0cb262e","modified":1627286775709},{"_id":"source/_posts/EffectiveObjcTips/Untitled55.png","hash":"3496a9c939c7b2bf472c179c7c1d0bd8ff032c6c","modified":1627286782248},{"_id":"source/_posts/EffectiveObjcTips/Untitled56.png","hash":"015a33f17ef4e0977ccd5199d4bb13d1e1963033","modified":1627286785937},{"_id":"source/_posts/EffectiveObjcTips/Untitled57.png","hash":"ae3b990f17d095236dc4557610492a799c873b1e","modified":1627286789914},{"_id":"source/_posts/EffectiveObjcTips/Untitled59.png","hash":"c395a9e5116718ca3da172e9ec308cd559e2f16f","modified":1627286838664},{"_id":"source/_posts/EffectiveObjcTips/Untitled60.png","hash":"cd112ae2f23bdc0d88a34e073b3cdacfa9a39a79","modified":1627286841516},{"_id":"source/_posts/EffectiveObjcTips/Untitled61.png","hash":"6b7825dbf3fb5f96e4dcf0fcbab36b74b3548156","modified":1627286844605},{"_id":"source/_posts/EffectiveObjcTips/Untitled65.png","hash":"54f3a05deb153d549a5620e1b18ee49d1b1d018b","modified":1627286856755},{"_id":"source/_posts/EffectiveObjcTips/Untitled67.png","hash":"198d2f1e218de458b13120d8873f8b1593c16f63","modified":1627286866506},{"_id":"source/_posts/EffectiveObjcTips/Untitled68.png","hash":"53f9fa42b6a90bddb829128c0aa7a49a9aa1b24f","modified":1627286870165},{"_id":"source/_posts/EffectiveObjcTips/Untitled69.png","hash":"f047d324de2d0ac9f3264e1487ca603e50e6bde3","modified":1627286872698},{"_id":"source/_posts/EffectiveObjcTips/Untitled7.png","hash":"ae4cc9fde3046674c461eb0f8b94a40e04b9c5ae","modified":1627286519095},{"_id":"source/_posts/EffectiveObjcTips/Untitled70.png","hash":"83e85f0042361ef39e7594436200272c3c14834e","modified":1627286875370},{"_id":"source/_posts/EffectiveObjcTips/Untitled72.png","hash":"44cfb4806ee2083572f622de439367a21a3f7e28","modified":1627286882347},{"_id":"source/_posts/EffectiveObjcTips/Untitled73.png","hash":"0bdf2902b46fbbcddbbe3fb621b9e58d2a5741ce","modified":1627286885796},{"_id":"source/_posts/EffectiveObjcTips/Untitled74.png","hash":"ab2724e3416506d332037e1ac2fec9bd3a5c9b4a","modified":1627286889756},{"_id":"source/_posts/EffectiveObjcTips/Untitled75.png","hash":"67f0053bb9d78c386f0f76451fddba76cfeb7fdc","modified":1627286892577},{"_id":"source/_posts/EffectiveObjcTips/Untitled76.png","hash":"e74f321d0e43696dda70ad68c9fa622813efeab6","modified":1627286895310},{"_id":"source/_posts/EffectiveObjcTips/Untitled78.png","hash":"115b04be5e9ed1f6c02762d0a2370bc0aab1f10a","modified":1627286902239},{"_id":"source/_posts/EffectiveObjcTips/Untitled79.png","hash":"975c7cccf13318c3fd0db17f226dbace909d8147","modified":1627286905630},{"_id":"source/_posts/EffectiveObjcTips/Untitled8.png","hash":"ab7379ed0a50a32b18592c5f6bb3bb13f461e13a","modified":1627286522258},{"_id":"source/_posts/EffectiveObjcTips/Untitled81.png","hash":"f3c302e0cb1cd205607fc476ca39b71cdee957a1","modified":1627286911465},{"_id":"source/_posts/EffectiveObjcTips/Untitled82.png","hash":"93d27138c92b5c020ffa5c228a802cdc84575aec","modified":1627286915185},{"_id":"source/_posts/EffectiveObjcTips/Untitled83.png","hash":"27c79b8da915b97a9e08c8654d50286777826865","modified":1627286602424},{"_id":"source/_posts/EffectiveObjcTips/Untitled84.png","hash":"d164e5de2df947e832f8abeca63d549f00af37a3","modified":1627286597698},{"_id":"source/_posts/EffectiveObjcTips/Untitled85.png","hash":"465fa735efcf864e3b96ba995d248add5e8385ee","modified":1627286495096},{"_id":"source/_posts/SwiftUIExploration/Code3.png","hash":"b2021ec773c6a6adca78af009da501245617839a","modified":1627287128534},{"_id":"source/_posts/SwiftUIExploration/Fin2.png","hash":"1b99ddac941134da293e02afe7d1379254bca965","modified":1627287136139},{"_id":"source/_posts/SwiftUIExploration/Fin3.png","hash":"9812b2552d8034fd9407b8d9daffede45b095f2c","modified":1627287140564},{"_id":"source/_posts/SwiftUIExploration/PG.png","hash":"d753eaa925ca3f6649892adb25d483ef487b53c0","modified":1627287103664},{"_id":"source/_posts/EffectiveObjcTips/Untitled18.png","hash":"a914acbe058a2ddadf804caf9873818fc04d1fba","modified":1627286564202},{"_id":"source/_posts/EffectiveObjcTips/Untitled19.png","hash":"c65592f520bbd9dfb04dfd538fb9f6f53fc98ce0","modified":1627286571213},{"_id":"source/_posts/EffectiveObjcTips/Untitled25.png","hash":"e263e89f634bf418d4a61156df84ea71b4083845","modified":1627286618098},{"_id":"source/_posts/EffectiveObjcTips/Untitled27.png","hash":"e2f9e4ca94f8dfd925c10442f608e35cf13d1abe","modified":1627286624082},{"_id":"source/_posts/EffectiveObjcTips/Untitled30.png","hash":"951c80cc09902d73615819d226b26ff47c254c93","modified":1627286634767},{"_id":"source/_posts/EffectiveObjcTips/Untitled32.png","hash":"54ab2fe063e8764c735a6c8429d56dcd26b185aa","modified":1627286641710},{"_id":"source/_posts/EffectiveObjcTips/Untitled33.png","hash":"0882d180ca30f79d12635af74b815e3e41d6e415","modified":1627286644516},{"_id":"source/_posts/EffectiveObjcTips/Untitled38.png","hash":"5dc0a92d9a59adf9cbf5114b750061342ca4ec89","modified":1627286663296},{"_id":"source/_posts/EffectiveObjcTips/Untitled44.png","hash":"5c090a521b9267945b84d06de0af49c5a356ef98","modified":1627286684432},{"_id":"source/_posts/EffectiveObjcTips/Untitled51.png","hash":"eaef8445231e45e39d4ccd02ab44e09aaae831b7","modified":1627286769721},{"_id":"source/_posts/EffectiveObjcTips/Untitled58.png","hash":"f83e91488a443ba2a9c3a02f8494ecee06bfed49","modified":1627286835199},{"_id":"source/_posts/EffectiveObjcTips/Untitled66.png","hash":"052ee9728e6c6f68a915d87c99db9752ce9b2b17","modified":1627286860506},{"_id":"source/_posts/EffectiveObjcTips/Untitled80.png","hash":"9f19abf4da5572203edcb1815556d91ce578adad","modified":1627286908674},{"_id":"source/_posts/SwiftUIExploration/CP.png","hash":"cefc4c013aa68f64cc2c8c5d94a6ceb629d2c12d","modified":1627287117031},{"_id":"source/_posts/SwiftUIExploration/Demo.png","hash":"10d40f7dc87d7a7efa143cc55b357452eb714186","modified":1627287108253},{"_id":"source/_posts/EffectiveObjcTips/Untitled9.png","hash":"200e380b248cc9d5ee68aa706bfebf2d2db90c1c","modified":1627286481238},{"_id":"source/_posts/SwiftUIExploration/Recommender.png","hash":"e14f959f13402caf18ac680943d8c84d5ae84668","modified":1627286981877},{"_id":"source/_posts/EffectiveObjcTips/Untitled23.png","hash":"02d733519c13ff752565e435f23aa549735edbb7","modified":1627286610838},{"_id":"source/_posts/EffectiveObjcTips/Untitled5.png","hash":"71806d20a223648849a2f05ffd2341d09f8cbc72","modified":1627286510873},{"_id":"source/_posts/EffectiveObjcTips/Untitled6.png","hash":"6c4fa80638a77493ab211dc5a81829dcaa07dbd0","modified":1627286515121},{"_id":"source/_posts/EffectiveObjcTips/Untitled62.png","hash":"2a70492f432c15e9fc375e7827712832a8d9862b","modified":1627286847605},{"_id":"source/_posts/EffectiveObjcTips/Untitled64.png","hash":"45097a4cacfcf7890f4f194606795d713b2b8627","modified":1627286853875},{"_id":"source/_posts/EffectiveObjcTips/Untitled71.png","hash":"6139a603d0b4e2de61e4cef8d69edd4a65de3a0a","modified":1627286879211},{"_id":"source/_posts/EffectiveObjcTips/Untitled77.png","hash":"d912d27067d6ebd26c8498b12300f97f311e472c","modified":1627286898393},{"_id":"source/_posts/EffectiveObjcTips/Untitled35.png","hash":"1407cee2a111df1b8b5a0cd3125945526cd903a1","modified":1627286652419},{"_id":"source/_posts/EffectiveObjcTips/Untitled63.png","hash":"d75096548d68f3e856f608aa8cd4b3117e4b543c","modified":1627286850814},{"_id":"source/_posts/SwiftUIExploration/Code1.png","hash":"d68f418d9c289d556cb83742fe6d960bc6fa7aa2","modified":1627287095654},{"_id":"source/_posts/SwiftUIExploration/Code2.png","hash":"41758de261b1efef81fbb48cc8ad9fc0cda3111f","modified":1627287123838},{"_id":"source/_posts/SwiftUIExploration/Code4.png","hash":"d9beb155bb3a15921c7eb77356d0458e4404476b","modified":1627287145965},{"_id":"source/_posts/SwiftUIExploration/KG.png","hash":"443c51bf7a93ad3b426d5a7aae4f16e9e9c50f9f","modified":1627287086827},{"_id":"source/_posts/SwiftUIExploration/Structure.png","hash":"76b0c68916bdd4357236826985ea923fa5a30347","modified":1627287009242},{"_id":"source/_posts/SwiftUIExploration/Fin.png","hash":"ab96a8a1b05f936fb0c617a3b2c0b4e3b1873f84","modified":1627287090373},{"_id":"public/2021/07/12/EffectiveObjcTips/index.html","hash":"4d08160127757e2c396c76dad79d41b8d4b251bc","modified":1627404638069},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled.png","hash":"21278d461798c3f6fcdf234883e2b06c3b41283a","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled3.png","hash":"506a901ec617750dd618d19173441b2c214766d6","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled1.png","hash":"95c7d9f69a086a3a63b15594a9c81bcccdbc0368","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled2.png","hash":"026817ec5d76f25627675fa7048887307043071b","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled4.png","hash":"d280ee6e115e5d0f15295c3360fac8efd2b89d55","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled7.png","hash":"ae4cc9fde3046674c461eb0f8b94a40e04b9c5ae","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled85.png","hash":"465fa735efcf864e3b96ba995d248add5e8385ee","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled13.png","hash":"15b726e8b2704d4484fbc27342e306f8568dee25","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled10.png","hash":"6b7fb6e39792631e2c1b609dc2bae92827da5c56","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled14.png","hash":"f6f07756a0c0f313ef46bc7bc84c07034d62677f","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled8.png","hash":"ab7379ed0a50a32b18592c5f6bb3bb13f461e13a","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled12.png","hash":"23d847debb4bc061d17c7dc5733d991deac8dd12","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled11.png","hash":"b26811fb534e4fd8859f54a72a67f495c208509b","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled15.png","hash":"1260fb8747555a514c9987352fd701c837bb70fe","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled16.png","hash":"00e2735781a80b0a4439c8577292f52444e276d8","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled17.png","hash":"b9d4a960387b9de7d58aa414b2fabbb81e5fed8a","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled84.png","hash":"d164e5de2df947e832f8abeca63d549f00af37a3","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled21.png","hash":"57d225e48414b97db85652972715f10f3f2a47b2","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled20.png","hash":"be5e80c6a9575ec0dfd119b113e81a1796a4d99c","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled83.png","hash":"27c79b8da915b97a9e08c8654d50286777826865","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled22.png","hash":"b708901d7cff461cd1d512449402a946674a816d","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled24.png","hash":"9c5f9a6a628b4d143ad707539a73b6d0cc76ba8f","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled26.png","hash":"25ccdaae10c37d31565595a0e198a375c3755b47","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled28.png","hash":"3d7d11823218c067b2eb30d9afdc0711ebb0dbdb","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled29.png","hash":"4d32979c01f0118e01855b42f01e791356a3f9f0","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled31.png","hash":"b5fcb8a64f024e416c938d1b20247f553c35e617","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled36.png","hash":"ff122ecd213550310270df464c37f1a641a0552e","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled34.png","hash":"7c0597239ff5574694b98bca0593258a8ee53d28","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled37.png","hash":"b58b7e60adca34e6ce52f3f48cd876a05a61b77b","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled39.png","hash":"724616c546497a45c4461221d52fcca9d7838565","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled40.png","hash":"436a5d8f446e408eeabfdcb9440bcb0dbd7a3e27","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled42.png","hash":"7d9c7dea67816ee9d5e97df6f364fb20f3d0cc34","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled41.png","hash":"c24ccbc4f9dce0dec445d8a27c127c94e604af52","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled43.png","hash":"2a57f01a2a666073a70eca7c078de78dce3ebdb2","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled45.png","hash":"b200ae3009ba594ee1abbcb8a08bcb88e2d3e96e","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled46.png","hash":"d897b17bee7a5cc03a22a0dc11ea877c672bc7ad","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled49.png","hash":"a333f86ac67906bf720d635a7e64bf584033a666","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled47.png","hash":"3229b8a513bd465d79b3354b35e18fb80316a55e","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled48.png","hash":"d2c11501ee9ea59cb3a5a4355ba7c13a9388be76","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled50.png","hash":"c65367f24acbf0373a02363f3be50ea6b60de0b6","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled52.png","hash":"ca201a828fef7248e01c3210abde3a3b0343fd14","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled53.png","hash":"397916900ac9cc41a0220a7da7def474e0cb262e","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled54.png","hash":"9bf6047840ea2f7090cab94feb72dfa63f7cfaa3","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled56.png","hash":"015a33f17ef4e0977ccd5199d4bb13d1e1963033","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled57.png","hash":"ae3b990f17d095236dc4557610492a799c873b1e","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled55.png","hash":"3496a9c939c7b2bf472c179c7c1d0bd8ff032c6c","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled60.png","hash":"cd112ae2f23bdc0d88a34e073b3cdacfa9a39a79","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled61.png","hash":"6b7825dbf3fb5f96e4dcf0fcbab36b74b3548156","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled59.png","hash":"c395a9e5116718ca3da172e9ec308cd559e2f16f","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled65.png","hash":"54f3a05deb153d549a5620e1b18ee49d1b1d018b","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled67.png","hash":"198d2f1e218de458b13120d8873f8b1593c16f63","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled69.png","hash":"f047d324de2d0ac9f3264e1487ca603e50e6bde3","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled68.png","hash":"53f9fa42b6a90bddb829128c0aa7a49a9aa1b24f","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled70.png","hash":"83e85f0042361ef39e7594436200272c3c14834e","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled75.png","hash":"67f0053bb9d78c386f0f76451fddba76cfeb7fdc","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled72.png","hash":"44cfb4806ee2083572f622de439367a21a3f7e28","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled74.png","hash":"ab2724e3416506d332037e1ac2fec9bd3a5c9b4a","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled73.png","hash":"0bdf2902b46fbbcddbbe3fb621b9e58d2a5741ce","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled79.png","hash":"975c7cccf13318c3fd0db17f226dbace909d8147","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled76.png","hash":"e74f321d0e43696dda70ad68c9fa622813efeab6","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled78.png","hash":"115b04be5e9ed1f6c02762d0a2370bc0aab1f10a","modified":1627403404213},{"_id":"public/2021/07/15/SwiftUIExploration/PG.png","hash":"d753eaa925ca3f6649892adb25d483ef487b53c0","modified":1627403404213},{"_id":"public/2021/07/15/SwiftUIExploration/Code3.png","hash":"b2021ec773c6a6adca78af009da501245617839a","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled82.png","hash":"93d27138c92b5c020ffa5c228a802cdc84575aec","modified":1627403404213},{"_id":"public/2021/07/15/SwiftUIExploration/Fin2.png","hash":"1b99ddac941134da293e02afe7d1379254bca965","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled81.png","hash":"f3c302e0cb1cd205607fc476ca39b71cdee957a1","modified":1627403404213},{"_id":"public/2021/07/15/SwiftUIExploration/Fin3.png","hash":"9812b2552d8034fd9407b8d9daffede45b095f2c","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled9.png","hash":"200e380b248cc9d5ee68aa706bfebf2d2db90c1c","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled19.png","hash":"c65592f520bbd9dfb04dfd538fb9f6f53fc98ce0","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled18.png","hash":"a914acbe058a2ddadf804caf9873818fc04d1fba","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled25.png","hash":"e263e89f634bf418d4a61156df84ea71b4083845","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled27.png","hash":"e2f9e4ca94f8dfd925c10442f608e35cf13d1abe","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled30.png","hash":"951c80cc09902d73615819d226b26ff47c254c93","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled32.png","hash":"54ab2fe063e8764c735a6c8429d56dcd26b185aa","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled33.png","hash":"0882d180ca30f79d12635af74b815e3e41d6e415","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled38.png","hash":"5dc0a92d9a59adf9cbf5114b750061342ca4ec89","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled51.png","hash":"eaef8445231e45e39d4ccd02ab44e09aaae831b7","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled44.png","hash":"5c090a521b9267945b84d06de0af49c5a356ef98","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled58.png","hash":"f83e91488a443ba2a9c3a02f8494ecee06bfed49","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled66.png","hash":"052ee9728e6c6f68a915d87c99db9752ce9b2b17","modified":1627403404213},{"_id":"public/2021/07/15/SwiftUIExploration/Recommender.png","hash":"e14f959f13402caf18ac680943d8c84d5ae84668","modified":1627403404213},{"_id":"public/2021/07/15/SwiftUIExploration/Demo.png","hash":"10d40f7dc87d7a7efa143cc55b357452eb714186","modified":1627403404213},{"_id":"public/2021/07/15/SwiftUIExploration/CP.png","hash":"cefc4c013aa68f64cc2c8c5d94a6ceb629d2c12d","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled80.png","hash":"9f19abf4da5572203edcb1815556d91ce578adad","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled6.png","hash":"6c4fa80638a77493ab211dc5a81829dcaa07dbd0","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled5.png","hash":"71806d20a223648849a2f05ffd2341d09f8cbc72","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled23.png","hash":"02d733519c13ff752565e435f23aa549735edbb7","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled62.png","hash":"2a70492f432c15e9fc375e7827712832a8d9862b","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled64.png","hash":"45097a4cacfcf7890f4f194606795d713b2b8627","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled71.png","hash":"6139a603d0b4e2de61e4cef8d69edd4a65de3a0a","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled77.png","hash":"d912d27067d6ebd26c8498b12300f97f311e472c","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled35.png","hash":"1407cee2a111df1b8b5a0cd3125945526cd903a1","modified":1627403404213},{"_id":"public/2021/07/12/EffectiveObjcTips/Untitled63.png","hash":"d75096548d68f3e856f608aa8cd4b3117e4b543c","modified":1627403404213},{"_id":"public/2021/07/15/SwiftUIExploration/KG.png","hash":"443c51bf7a93ad3b426d5a7aae4f16e9e9c50f9f","modified":1627403404213},{"_id":"public/2021/07/15/SwiftUIExploration/Code1.png","hash":"d68f418d9c289d556cb83742fe6d960bc6fa7aa2","modified":1627403404213},{"_id":"public/2021/07/15/SwiftUIExploration/Code2.png","hash":"41758de261b1efef81fbb48cc8ad9fc0cda3111f","modified":1627403404213},{"_id":"public/2021/07/15/SwiftUIExploration/Code4.png","hash":"d9beb155bb3a15921c7eb77356d0458e4404476b","modified":1627403404213},{"_id":"public/2021/07/15/SwiftUIExploration/Structure.png","hash":"76b0c68916bdd4357236826985ea923fa5a30347","modified":1627403404213},{"_id":"public/2021/07/15/SwiftUIExploration/Fin.png","hash":"ab96a8a1b05f936fb0c617a3b2c0b4e3b1873f84","modified":1627403404213}],"Category":[{"name":"design","_id":"ckcive9my0004cv6b4cyyg1em"},{"name":"tech","_id":"ckcive9n7000ecv6b7dbo0vfz"},{"name":"design","parent":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckd4pn52d0006hw6b8lt1095m"},{"name":"life","parent":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckd4pnkoe0008hw6bf4ncbqdw"}],"Data":[],"Page":[{"title":"关于本站","date":"2020-02-07T13:52:18.000Z","type":"about","comments":0,"_content":"[StephenFang](https://github.com/iamStephenFang) 使用 [Hexo](https://hexo.io/zh-cn/docs/)  搭建的 [GitHub Pages](https://pages.github.com/)，主要分享技术与设计方面的内容。\n\n如果您对我的博文感兴趣，可以通过以下几种方式与我保持联系。\n\n- GitHub: [iamStephenFang](https://github.com/iamstephenfang) \n- Dribbble: [stephenfang](https://dribbble.com/stephenfang)\n- Unsplash: [stephenfang](https://unsplash.com/@stephenfang)\n- E-Mail: [StephenFang](mailto:fangxuanmiao@gmail.com) \n  \n- Instagram: [iamStephenFang](https://instagram.com/iamstephenfang) \n- Weibo: [iamStephenFang](https://weibo.com/iamstephenfang) \n- Twitter: [Fangxuanmiao](https://twitter.com/fangxuanmiao) ","source":"about/index.md","raw":"---\ntitle: 关于本站\ndate: 2020-02-07 21:52:18\ntype: about\ncomments: false\n---\n[StephenFang](https://github.com/iamStephenFang) 使用 [Hexo](https://hexo.io/zh-cn/docs/)  搭建的 [GitHub Pages](https://pages.github.com/)，主要分享技术与设计方面的内容。\n\n如果您对我的博文感兴趣，可以通过以下几种方式与我保持联系。\n\n- GitHub: [iamStephenFang](https://github.com/iamstephenfang) \n- Dribbble: [stephenfang](https://dribbble.com/stephenfang)\n- Unsplash: [stephenfang](https://unsplash.com/@stephenfang)\n- E-Mail: [StephenFang](mailto:fangxuanmiao@gmail.com) \n  \n- Instagram: [iamStephenFang](https://instagram.com/iamstephenfang) \n- Weibo: [iamStephenFang](https://weibo.com/iamstephenfang) \n- Twitter: [Fangxuanmiao](https://twitter.com/fangxuanmiao) ","updated":"2020-07-12T09:23:01.853Z","path":"about/index.html","layout":"page","_id":"ckcive9ms0000cv6b3gtnd263","content":"<p><a href=\"https://github.com/iamStephenFang\" target=\"_blank\" rel=\"noopener\">StephenFang</a> 使用 <a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo</a>  搭建的 <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Pages</a>，主要分享技术与设计方面的内容。</p>\n<p>如果您对我的博文感兴趣，可以通过以下几种方式与我保持联系。</p>\n<ul>\n<li><p>GitHub: <a href=\"https://github.com/iamstephenfang\" target=\"_blank\" rel=\"noopener\">iamStephenFang</a> </p>\n</li>\n<li><p>Dribbble: <a href=\"https://dribbble.com/stephenfang\" target=\"_blank\" rel=\"noopener\">stephenfang</a></p>\n</li>\n<li><p>Unsplash: <a href=\"https://unsplash.com/@stephenfang\" target=\"_blank\" rel=\"noopener\">stephenfang</a></p>\n</li>\n<li><p>E-Mail: <a href=\"mailto:fangxuanmiao@gmail.com\">StephenFang</a> </p>\n</li>\n<li><p>Instagram: <a href=\"https://instagram.com/iamstephenfang\" target=\"_blank\" rel=\"noopener\">iamStephenFang</a> </p>\n</li>\n<li><p>Weibo: <a href=\"https://weibo.com/iamstephenfang\" target=\"_blank\" rel=\"noopener\">iamStephenFang</a> </p>\n</li>\n<li><p>Twitter: <a href=\"https://twitter.com/fangxuanmiao\" target=\"_blank\" rel=\"noopener\">Fangxuanmiao</a> </p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/iamStephenFang\" target=\"_blank\" rel=\"noopener\">StephenFang</a> 使用 <a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo</a>  搭建的 <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Pages</a>，主要分享技术与设计方面的内容。</p>\n<p>如果您对我的博文感兴趣，可以通过以下几种方式与我保持联系。</p>\n<ul>\n<li><p>GitHub: <a href=\"https://github.com/iamstephenfang\" target=\"_blank\" rel=\"noopener\">iamStephenFang</a> </p>\n</li>\n<li><p>Dribbble: <a href=\"https://dribbble.com/stephenfang\" target=\"_blank\" rel=\"noopener\">stephenfang</a></p>\n</li>\n<li><p>Unsplash: <a href=\"https://unsplash.com/@stephenfang\" target=\"_blank\" rel=\"noopener\">stephenfang</a></p>\n</li>\n<li><p>E-Mail: <a href=\"mailto:fangxuanmiao@gmail.com\">StephenFang</a> </p>\n</li>\n<li><p>Instagram: <a href=\"https://instagram.com/iamstephenfang\" target=\"_blank\" rel=\"noopener\">iamStephenFang</a> </p>\n</li>\n<li><p>Weibo: <a href=\"https://weibo.com/iamstephenfang\" target=\"_blank\" rel=\"noopener\">iamStephenFang</a> </p>\n</li>\n<li><p>Twitter: <a href=\"https://twitter.com/fangxuanmiao\" target=\"_blank\" rel=\"noopener\">Fangxuanmiao</a> </p>\n</li>\n</ul>\n"},{"title":"文章分类","date":"2020-02-07T13:56:26.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2020-02-07 21:56:26\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-04-04T15:35:50.727Z","path":"categories/index.html","layout":"page","_id":"ckcive9mx0002cv6b5lzp3jkz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"归档","date":"2020-02-07T13:55:29.000Z","type":"archive","comments":0,"_content":"","source":"archives/index.md","raw":"---\ntitle: 归档\ndate: 2020-02-07 21:55:29\ntype: \"archive\"\ncomments: false\n---\n","updated":"2020-04-04T15:36:00.247Z","path":"archives/index.html","layout":"page","_id":"ckcive9n00006cv6bd6iv2o4a","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2020-02-07T13:26:23.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-02-07 21:26:23\ntype: \"tags\"\ncomments: false\n---\n","updated":"2020-04-04T15:35:39.795Z","path":"tags/index.html","layout":"page","_id":"ckcive9om004tcv6baoyy9te3","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Apple Watch程序设计","date":"2020-02-07T08:45:28.000Z","_content":"\n收录Apple Watch程序设计学习中的若干收获，有基本原则、体验权衡点等。\n<!--more-->\n\n## 基本原则\n\n设计Apple Watch应用程序与设计iOS程序存在很大不同，我们需要了解其是iPhone的功能拓展，它的尺寸带来了新的手势操作和UI/UX 设计。\n\n### **私人联系**\n\nApple Watch可能是第一个与用户建立紧密联系的设备，因此您在设计过程中需要利用这种独特的结合。\n\n### **整体化设计**\n\nForce Touch和Digital Crown是使用户与屏幕上的内容无缝交互的关键组件。在设计应用程序时，目标应该是增强用户的认识，即它们之间的硬件和软件是无法区分的。\n\n### **轻量化交互**\n\nApple Watch中的快速交互对于体验至关重要。动画和声音之间的同步对于用户至关重要。重要的是要考虑到显示的信息应该快速浏览并易于消除。\n\n## Apple Watch体验的权衡点\n\n苹果官方提供了[视频](https://developer.apple.com/videos/play/wwdc2017/808/)讲解了一些技巧。\n\n评估您的应用的最佳方法是考虑实现以下4点\n\n![Apple官方参考](https://images.ctfassets.net/ooa29xqb8tix/6MDnChHFUkSoASwSWm6Woq/cd8c7dfdb89088677467edf5bd21a5a6/Qualities_20of_20Apple_20Watch_20Experiences.jpg)\n\n### **清晰**\n\n用户第一眼就能了解界面所显示的信息。\n\n### **简洁**\n\n直截了当。请记住，您的用户收到应用程序通知并举起手腕之间的时间只有几秒钟。\n\n### **及时**\n\n在尽可能短的时间内向用户显示最相关的信息。这样，您正在使您的应用与用户更加相关。\n\n### **客制化**\n\n如果您的应用程序完成了前三个要素，那么您的用户将感到个人联系。理想情况下，尝试加深与用户的这种关系。","source":"_posts/Apple Watch.md","raw":"---\ntitle: Apple Watch程序设计\ndate: 2020-02-07 16:45:28\ncategories: \n- design\ntags: \n- Apple\n- Xcode\n---\n\n收录Apple Watch程序设计学习中的若干收获，有基本原则、体验权衡点等。\n<!--more-->\n\n## 基本原则\n\n设计Apple Watch应用程序与设计iOS程序存在很大不同，我们需要了解其是iPhone的功能拓展，它的尺寸带来了新的手势操作和UI/UX 设计。\n\n### **私人联系**\n\nApple Watch可能是第一个与用户建立紧密联系的设备，因此您在设计过程中需要利用这种独特的结合。\n\n### **整体化设计**\n\nForce Touch和Digital Crown是使用户与屏幕上的内容无缝交互的关键组件。在设计应用程序时，目标应该是增强用户的认识，即它们之间的硬件和软件是无法区分的。\n\n### **轻量化交互**\n\nApple Watch中的快速交互对于体验至关重要。动画和声音之间的同步对于用户至关重要。重要的是要考虑到显示的信息应该快速浏览并易于消除。\n\n## Apple Watch体验的权衡点\n\n苹果官方提供了[视频](https://developer.apple.com/videos/play/wwdc2017/808/)讲解了一些技巧。\n\n评估您的应用的最佳方法是考虑实现以下4点\n\n![Apple官方参考](https://images.ctfassets.net/ooa29xqb8tix/6MDnChHFUkSoASwSWm6Woq/cd8c7dfdb89088677467edf5bd21a5a6/Qualities_20of_20Apple_20Watch_20Experiences.jpg)\n\n### **清晰**\n\n用户第一眼就能了解界面所显示的信息。\n\n### **简洁**\n\n直截了当。请记住，您的用户收到应用程序通知并举起手腕之间的时间只有几秒钟。\n\n### **及时**\n\n在尽可能短的时间内向用户显示最相关的信息。这样，您正在使您的应用与用户更加相关。\n\n### **客制化**\n\n如果您的应用程序完成了前三个要素，那么您的用户将感到个人联系。理想情况下，尝试加深与用户的这种关系。","slug":"Apple Watch","published":1,"updated":"2020-03-22T13:01:24.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcive9mu0001cv6b9cwu0p6m","content":"<p>收录Apple Watch程序设计学习中的若干收获，有基本原则、体验权衡点等。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"基本原则\"><a href=\"#基本原则\" class=\"headerlink\" title=\"基本原则\"></a>基本原则</h2><p>设计Apple Watch应用程序与设计iOS程序存在很大不同，我们需要了解其是iPhone的功能拓展，它的尺寸带来了新的手势操作和UI/UX 设计。</p>\n<h3 id=\"私人联系\"><a href=\"#私人联系\" class=\"headerlink\" title=\"私人联系\"></a><strong>私人联系</strong></h3><p>Apple Watch可能是第一个与用户建立紧密联系的设备，因此您在设计过程中需要利用这种独特的结合。</p>\n<h3 id=\"整体化设计\"><a href=\"#整体化设计\" class=\"headerlink\" title=\"整体化设计\"></a><strong>整体化设计</strong></h3><p>Force Touch和Digital Crown是使用户与屏幕上的内容无缝交互的关键组件。在设计应用程序时，目标应该是增强用户的认识，即它们之间的硬件和软件是无法区分的。</p>\n<h3 id=\"轻量化交互\"><a href=\"#轻量化交互\" class=\"headerlink\" title=\"轻量化交互\"></a><strong>轻量化交互</strong></h3><p>Apple Watch中的快速交互对于体验至关重要。动画和声音之间的同步对于用户至关重要。重要的是要考虑到显示的信息应该快速浏览并易于消除。</p>\n<h2 id=\"Apple-Watch体验的权衡点\"><a href=\"#Apple-Watch体验的权衡点\" class=\"headerlink\" title=\"Apple Watch体验的权衡点\"></a>Apple Watch体验的权衡点</h2><p>苹果官方提供了<a href=\"https://developer.apple.com/videos/play/wwdc2017/808/\" target=\"_blank\" rel=\"noopener\">视频</a>讲解了一些技巧。</p>\n<p>评估您的应用的最佳方法是考虑实现以下4点</p>\n<p><img src=\"https://images.ctfassets.net/ooa29xqb8tix/6MDnChHFUkSoASwSWm6Woq/cd8c7dfdb89088677467edf5bd21a5a6/Qualities_20of_20Apple_20Watch_20Experiences.jpg\" alt=\"Apple官方参考\"></p>\n<h3 id=\"清晰\"><a href=\"#清晰\" class=\"headerlink\" title=\"清晰\"></a><strong>清晰</strong></h3><p>用户第一眼就能了解界面所显示的信息。</p>\n<h3 id=\"简洁\"><a href=\"#简洁\" class=\"headerlink\" title=\"简洁\"></a><strong>简洁</strong></h3><p>直截了当。请记住，您的用户收到应用程序通知并举起手腕之间的时间只有几秒钟。</p>\n<h3 id=\"及时\"><a href=\"#及时\" class=\"headerlink\" title=\"及时\"></a><strong>及时</strong></h3><p>在尽可能短的时间内向用户显示最相关的信息。这样，您正在使您的应用与用户更加相关。</p>\n<h3 id=\"客制化\"><a href=\"#客制化\" class=\"headerlink\" title=\"客制化\"></a><strong>客制化</strong></h3><p>如果您的应用程序完成了前三个要素，那么您的用户将感到个人联系。理想情况下，尝试加深与用户的这种关系。</p>\n","site":{"data":{}},"excerpt":"<p>收录Apple Watch程序设计学习中的若干收获，有基本原则、体验权衡点等。</p>","more":"<h2 id=\"基本原则\"><a href=\"#基本原则\" class=\"headerlink\" title=\"基本原则\"></a>基本原则</h2><p>设计Apple Watch应用程序与设计iOS程序存在很大不同，我们需要了解其是iPhone的功能拓展，它的尺寸带来了新的手势操作和UI/UX 设计。</p>\n<h3 id=\"私人联系\"><a href=\"#私人联系\" class=\"headerlink\" title=\"私人联系\"></a><strong>私人联系</strong></h3><p>Apple Watch可能是第一个与用户建立紧密联系的设备，因此您在设计过程中需要利用这种独特的结合。</p>\n<h3 id=\"整体化设计\"><a href=\"#整体化设计\" class=\"headerlink\" title=\"整体化设计\"></a><strong>整体化设计</strong></h3><p>Force Touch和Digital Crown是使用户与屏幕上的内容无缝交互的关键组件。在设计应用程序时，目标应该是增强用户的认识，即它们之间的硬件和软件是无法区分的。</p>\n<h3 id=\"轻量化交互\"><a href=\"#轻量化交互\" class=\"headerlink\" title=\"轻量化交互\"></a><strong>轻量化交互</strong></h3><p>Apple Watch中的快速交互对于体验至关重要。动画和声音之间的同步对于用户至关重要。重要的是要考虑到显示的信息应该快速浏览并易于消除。</p>\n<h2 id=\"Apple-Watch体验的权衡点\"><a href=\"#Apple-Watch体验的权衡点\" class=\"headerlink\" title=\"Apple Watch体验的权衡点\"></a>Apple Watch体验的权衡点</h2><p>苹果官方提供了<a href=\"https://developer.apple.com/videos/play/wwdc2017/808/\" target=\"_blank\" rel=\"noopener\">视频</a>讲解了一些技巧。</p>\n<p>评估您的应用的最佳方法是考虑实现以下4点</p>\n<p><img src=\"https://images.ctfassets.net/ooa29xqb8tix/6MDnChHFUkSoASwSWm6Woq/cd8c7dfdb89088677467edf5bd21a5a6/Qualities_20of_20Apple_20Watch_20Experiences.jpg\" alt=\"Apple官方参考\"></p>\n<h3 id=\"清晰\"><a href=\"#清晰\" class=\"headerlink\" title=\"清晰\"></a><strong>清晰</strong></h3><p>用户第一眼就能了解界面所显示的信息。</p>\n<h3 id=\"简洁\"><a href=\"#简洁\" class=\"headerlink\" title=\"简洁\"></a><strong>简洁</strong></h3><p>直截了当。请记住，您的用户收到应用程序通知并举起手腕之间的时间只有几秒钟。</p>\n<h3 id=\"及时\"><a href=\"#及时\" class=\"headerlink\" title=\"及时\"></a><strong>及时</strong></h3><p>在尽可能短的时间内向用户显示最相关的信息。这样，您正在使您的应用与用户更加相关。</p>\n<h3 id=\"客制化\"><a href=\"#客制化\" class=\"headerlink\" title=\"客制化\"></a><strong>客制化</strong></h3><p>如果您的应用程序完成了前三个要素，那么您的用户将感到个人联系。理想情况下，尝试加深与用户的这种关系。</p>"},{"title":"设计、摄影与编码的碎碎念","date":"2020-07-04T17:20:20.000Z","copyright":true,"_content":"\n学习了一部分 Design + Code 课程，在 Dribbble 发布了一部分用 Sketch 设计的东西，加之十分喜欢 Notion 这款笔记应用，使得我产生了对于设计与编码的一些零碎的思考。\nNotion招聘的标准为“Designer Who Can Code”，我将其视为也是一种社会需求的反馈，相较于强调编码的能力，他们的团队更强调设计师的属性。随着应用程序的同质化越来越明显，优秀的设计、优秀的交互能够给用户带来耳目一新的体验，有时能够获得更好的回报。\n\n<!--more-->\n\n## 最近的定位\n在学习前端课程的时候，我看到身边的同学虽然掌握着编码的技能却把页面写得一团糟。对于设计师而言，从事前端工程师或许是一个不错的选择，事实也确实如此。如果希望成为一名独立开发者，那么设计的技能更是不可或缺。\n随着 iOS 14 的推出，SwiftUI更是被推到了一个更高优先级的位置上，甚至对于新版本的小部件的适配都需要使用 SwiftUI。上学期自学了 iOS 相关的课程，当时的 SwiftUI 并未完善，在编码的过程中还能遇到 bug，这一点暂且不提，我仍然期待 SwiftUI 的新表现，可以说对于设计师乃至独立开发者而言 SwiftUI 绝对是一个重大利好，开发的门槛进一步降低。\n我的计算机学习生涯带给我的优势又体现在哪里呢，可能是更好的计算机基础，可能是对于算法优化的了解。如果我将自己定位于独立开发者，我会更倾向于做设计导向的App而不是算法导向的App，虽然其中的技术含量可能看起来捉襟见愁，但我认为优秀的设计（不仅仅是界面设计，也包括组织设计）是驱使用户选择的更大诱因。意思并不是算法不重要，而是要对内容进行良好的包装，这一点将用于指导我未来App的开发。\n\n## 最近的设计\n由于并不是设计出身，我自学了 Design + Code 的设计课程，包括Sketch的使用、字体、动画的应用等等，并且学习了少数派的「比身边人多懂一点设计」课程，后者非常推荐没有设计基础的人仔细阅读。目前能做出一些符合我想发的、并不蹩脚的设计，如 App 的 icon 设计、UI设计等等。\n列举两个我发布在 Dribbble 上的作品，第一个是对 Notion 图标的重新设计。由于 Notion 是一款笔记应用，我能够联想到彩色的便签与装帧精美的册子，那如何体现 Notion 的品牌意义呢？我参考了原版 Notion 的图标，为了使得大写字母显得不那么突兀，我为其加上了阴影。最后参照 Logic Pro X等 App 给予其一个恰到好处的倾角。该图标被 Andreas Storm 等人Rebound，也算是一个不小的成就。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2001.21.51.png)\n另一个设计方案就是我的音乐播放器设计，目前编码已经完成了1/2，是我目前完成的第一个“有设计”的App，至少MockUp看起来还不错。其设计理念十分简洁，一个页面只完成一个类别的功能，充分利用 UIKit，目前仍然有不少功能想做，包括接入 Apple Music、从LyricsKit获取歌词等等，无法确定何时上架。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2001.33.30.png)\n最后放出我在 Dribbble 的地址： https://dribbble.com/stephenfang\n\n## 最近的摄影\n因为疫情缘故今年并没有出门，连寒假旅行也连带取消了，只能通过 Unsplash 发一些先前的照片，我所理解的低阶摄影（也就是我目前实践的）满足于把画面交代清楚，以不一样的构图拍出比游客照更具有感觉的东西。好的照片应该是能够讲述故事的，这也是街头摄影之所以能打动人的原因，显然我并没有做到，但是我仍在不断尝试让平凡的照片看起来具有不平凡的内容。例如对于物体的拍摄，我希望画面能够传递一定的感情信息，例如以下的猫狗照片，你可能会思考它们此刻在想些什么。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.52.32.png)\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.54.52.png)\n另一个要点就是构图，简单的构图方式可能得到不同的效果。构图方式可以简单复制，而建筑和你的视角则不会。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.56.52.png)\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.59.12.png)\n罗伯特·卡帕说过“如果你拍得不够好，是因为你离得不够近”，不做这句话的过分解读，但我确实能够以此作为我玩摄影的一条箴言。以下为在上海人民英雄纪念碑下拍摄的照片，当时只是感觉自己被震撼到了就按下了快门，没有想到登上了 Unsplash 的信息流推荐，这也促使着我业余时间在该平台下继续深耕。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2014.00.55.png)\n最后放出我在 Unsplash 的地址： https://unsplash.com/@stephenfang","source":"_posts/Design_Thoughts.md","raw":"---\ntitle: 设计、摄影与编码的碎碎念\ndate: 2020-07-05 01:20:20\ncategories: \n- design\ntags: \n- iOS\n- UI\ncopyright: true\n---\n\n学习了一部分 Design + Code 课程，在 Dribbble 发布了一部分用 Sketch 设计的东西，加之十分喜欢 Notion 这款笔记应用，使得我产生了对于设计与编码的一些零碎的思考。\nNotion招聘的标准为“Designer Who Can Code”，我将其视为也是一种社会需求的反馈，相较于强调编码的能力，他们的团队更强调设计师的属性。随着应用程序的同质化越来越明显，优秀的设计、优秀的交互能够给用户带来耳目一新的体验，有时能够获得更好的回报。\n\n<!--more-->\n\n## 最近的定位\n在学习前端课程的时候，我看到身边的同学虽然掌握着编码的技能却把页面写得一团糟。对于设计师而言，从事前端工程师或许是一个不错的选择，事实也确实如此。如果希望成为一名独立开发者，那么设计的技能更是不可或缺。\n随着 iOS 14 的推出，SwiftUI更是被推到了一个更高优先级的位置上，甚至对于新版本的小部件的适配都需要使用 SwiftUI。上学期自学了 iOS 相关的课程，当时的 SwiftUI 并未完善，在编码的过程中还能遇到 bug，这一点暂且不提，我仍然期待 SwiftUI 的新表现，可以说对于设计师乃至独立开发者而言 SwiftUI 绝对是一个重大利好，开发的门槛进一步降低。\n我的计算机学习生涯带给我的优势又体现在哪里呢，可能是更好的计算机基础，可能是对于算法优化的了解。如果我将自己定位于独立开发者，我会更倾向于做设计导向的App而不是算法导向的App，虽然其中的技术含量可能看起来捉襟见愁，但我认为优秀的设计（不仅仅是界面设计，也包括组织设计）是驱使用户选择的更大诱因。意思并不是算法不重要，而是要对内容进行良好的包装，这一点将用于指导我未来App的开发。\n\n## 最近的设计\n由于并不是设计出身，我自学了 Design + Code 的设计课程，包括Sketch的使用、字体、动画的应用等等，并且学习了少数派的「比身边人多懂一点设计」课程，后者非常推荐没有设计基础的人仔细阅读。目前能做出一些符合我想发的、并不蹩脚的设计，如 App 的 icon 设计、UI设计等等。\n列举两个我发布在 Dribbble 上的作品，第一个是对 Notion 图标的重新设计。由于 Notion 是一款笔记应用，我能够联想到彩色的便签与装帧精美的册子，那如何体现 Notion 的品牌意义呢？我参考了原版 Notion 的图标，为了使得大写字母显得不那么突兀，我为其加上了阴影。最后参照 Logic Pro X等 App 给予其一个恰到好处的倾角。该图标被 Andreas Storm 等人Rebound，也算是一个不小的成就。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2001.21.51.png)\n另一个设计方案就是我的音乐播放器设计，目前编码已经完成了1/2，是我目前完成的第一个“有设计”的App，至少MockUp看起来还不错。其设计理念十分简洁，一个页面只完成一个类别的功能，充分利用 UIKit，目前仍然有不少功能想做，包括接入 Apple Music、从LyricsKit获取歌词等等，无法确定何时上架。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2001.33.30.png)\n最后放出我在 Dribbble 的地址： https://dribbble.com/stephenfang\n\n## 最近的摄影\n因为疫情缘故今年并没有出门，连寒假旅行也连带取消了，只能通过 Unsplash 发一些先前的照片，我所理解的低阶摄影（也就是我目前实践的）满足于把画面交代清楚，以不一样的构图拍出比游客照更具有感觉的东西。好的照片应该是能够讲述故事的，这也是街头摄影之所以能打动人的原因，显然我并没有做到，但是我仍在不断尝试让平凡的照片看起来具有不平凡的内容。例如对于物体的拍摄，我希望画面能够传递一定的感情信息，例如以下的猫狗照片，你可能会思考它们此刻在想些什么。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.52.32.png)\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.54.52.png)\n另一个要点就是构图，简单的构图方式可能得到不同的效果。构图方式可以简单复制，而建筑和你的视角则不会。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.56.52.png)\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.59.12.png)\n罗伯特·卡帕说过“如果你拍得不够好，是因为你离得不够近”，不做这句话的过分解读，但我确实能够以此作为我玩摄影的一条箴言。以下为在上海人民英雄纪念碑下拍摄的照片，当时只是感觉自己被震撼到了就按下了快门，没有想到登上了 Unsplash 的信息流推荐，这也促使着我业余时间在该平台下继续深耕。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2014.00.55.png)\n最后放出我在 Unsplash 的地址： https://unsplash.com/@stephenfang","slug":"Design_Thoughts","published":1,"updated":"2020-07-12T09:24:13.951Z","_id":"ckcive9mx0003cv6b2sg1he46","comments":1,"layout":"post","photos":[],"link":"","content":"<p>学习了一部分 Design + Code 课程，在 Dribbble 发布了一部分用 Sketch 设计的东西，加之十分喜欢 Notion 这款笔记应用，使得我产生了对于设计与编码的一些零碎的思考。<br>Notion招聘的标准为“Designer Who Can Code”，我将其视为也是一种社会需求的反馈，相较于强调编码的能力，他们的团队更强调设计师的属性。随着应用程序的同质化越来越明显，优秀的设计、优秀的交互能够给用户带来耳目一新的体验，有时能够获得更好的回报。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"最近的定位\"><a href=\"#最近的定位\" class=\"headerlink\" title=\"最近的定位\"></a>最近的定位</h2><p>在学习前端课程的时候，我看到身边的同学虽然掌握着编码的技能却把页面写得一团糟。对于设计师而言，从事前端工程师或许是一个不错的选择，事实也确实如此。如果希望成为一名独立开发者，那么设计的技能更是不可或缺。<br>随着 iOS 14 的推出，SwiftUI更是被推到了一个更高优先级的位置上，甚至对于新版本的小部件的适配都需要使用 SwiftUI。上学期自学了 iOS 相关的课程，当时的 SwiftUI 并未完善，在编码的过程中还能遇到 bug，这一点暂且不提，我仍然期待 SwiftUI 的新表现，可以说对于设计师乃至独立开发者而言 SwiftUI 绝对是一个重大利好，开发的门槛进一步降低。<br>我的计算机学习生涯带给我的优势又体现在哪里呢，可能是更好的计算机基础，可能是对于算法优化的了解。如果我将自己定位于独立开发者，我会更倾向于做设计导向的App而不是算法导向的App，虽然其中的技术含量可能看起来捉襟见愁，但我认为优秀的设计（不仅仅是界面设计，也包括组织设计）是驱使用户选择的更大诱因。意思并不是算法不重要，而是要对内容进行良好的包装，这一点将用于指导我未来App的开发。</p>\n<h2 id=\"最近的设计\"><a href=\"#最近的设计\" class=\"headerlink\" title=\"最近的设计\"></a>最近的设计</h2><p>由于并不是设计出身，我自学了 Design + Code 的设计课程，包括Sketch的使用、字体、动画的应用等等，并且学习了少数派的「比身边人多懂一点设计」课程，后者非常推荐没有设计基础的人仔细阅读。目前能做出一些符合我想发的、并不蹩脚的设计，如 App 的 icon 设计、UI设计等等。<br>列举两个我发布在 Dribbble 上的作品，第一个是对 Notion 图标的重新设计。由于 Notion 是一款笔记应用，我能够联想到彩色的便签与装帧精美的册子，那如何体现 Notion 的品牌意义呢？我参考了原版 Notion 的图标，为了使得大写字母显得不那么突兀，我为其加上了阴影。最后参照 Logic Pro X等 App 给予其一个恰到好处的倾角。该图标被 Andreas Storm 等人Rebound，也算是一个不小的成就。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2001.21.51.png\" alt=\"\"><br>另一个设计方案就是我的音乐播放器设计，目前编码已经完成了1/2，是我目前完成的第一个“有设计”的App，至少MockUp看起来还不错。其设计理念十分简洁，一个页面只完成一个类别的功能，充分利用 UIKit，目前仍然有不少功能想做，包括接入 Apple Music、从LyricsKit获取歌词等等，无法确定何时上架。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2001.33.30.png\" alt=\"\"><br>最后放出我在 Dribbble 的地址： <a href=\"https://dribbble.com/stephenfang\" target=\"_blank\" rel=\"noopener\">https://dribbble.com/stephenfang</a></p>\n<h2 id=\"最近的摄影\"><a href=\"#最近的摄影\" class=\"headerlink\" title=\"最近的摄影\"></a>最近的摄影</h2><p>因为疫情缘故今年并没有出门，连寒假旅行也连带取消了，只能通过 Unsplash 发一些先前的照片，我所理解的低阶摄影（也就是我目前实践的）满足于把画面交代清楚，以不一样的构图拍出比游客照更具有感觉的东西。好的照片应该是能够讲述故事的，这也是街头摄影之所以能打动人的原因，显然我并没有做到，但是我仍在不断尝试让平凡的照片看起来具有不平凡的内容。例如对于物体的拍摄，我希望画面能够传递一定的感情信息，例如以下的猫狗照片，你可能会思考它们此刻在想些什么。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.52.32.png\" alt=\"\"><br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.54.52.png\" alt=\"\"><br>另一个要点就是构图，简单的构图方式可能得到不同的效果。构图方式可以简单复制，而建筑和你的视角则不会。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.56.52.png\" alt=\"\"><br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.59.12.png\" alt=\"\"><br>罗伯特·卡帕说过“如果你拍得不够好，是因为你离得不够近”，不做这句话的过分解读，但我确实能够以此作为我玩摄影的一条箴言。以下为在上海人民英雄纪念碑下拍摄的照片，当时只是感觉自己被震撼到了就按下了快门，没有想到登上了 Unsplash 的信息流推荐，这也促使着我业余时间在该平台下继续深耕。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2014.00.55.png\" alt=\"\"><br>最后放出我在 Unsplash 的地址： <a href=\"https://unsplash.com/@stephenfang\" target=\"_blank\" rel=\"noopener\">https://unsplash.com/@stephenfang</a></p>\n","site":{"data":{}},"excerpt":"<p>学习了一部分 Design + Code 课程，在 Dribbble 发布了一部分用 Sketch 设计的东西，加之十分喜欢 Notion 这款笔记应用，使得我产生了对于设计与编码的一些零碎的思考。<br>Notion招聘的标准为“Designer Who Can Code”，我将其视为也是一种社会需求的反馈，相较于强调编码的能力，他们的团队更强调设计师的属性。随着应用程序的同质化越来越明显，优秀的设计、优秀的交互能够给用户带来耳目一新的体验，有时能够获得更好的回报。</p>","more":"<h2 id=\"最近的定位\"><a href=\"#最近的定位\" class=\"headerlink\" title=\"最近的定位\"></a>最近的定位</h2><p>在学习前端课程的时候，我看到身边的同学虽然掌握着编码的技能却把页面写得一团糟。对于设计师而言，从事前端工程师或许是一个不错的选择，事实也确实如此。如果希望成为一名独立开发者，那么设计的技能更是不可或缺。<br>随着 iOS 14 的推出，SwiftUI更是被推到了一个更高优先级的位置上，甚至对于新版本的小部件的适配都需要使用 SwiftUI。上学期自学了 iOS 相关的课程，当时的 SwiftUI 并未完善，在编码的过程中还能遇到 bug，这一点暂且不提，我仍然期待 SwiftUI 的新表现，可以说对于设计师乃至独立开发者而言 SwiftUI 绝对是一个重大利好，开发的门槛进一步降低。<br>我的计算机学习生涯带给我的优势又体现在哪里呢，可能是更好的计算机基础，可能是对于算法优化的了解。如果我将自己定位于独立开发者，我会更倾向于做设计导向的App而不是算法导向的App，虽然其中的技术含量可能看起来捉襟见愁，但我认为优秀的设计（不仅仅是界面设计，也包括组织设计）是驱使用户选择的更大诱因。意思并不是算法不重要，而是要对内容进行良好的包装，这一点将用于指导我未来App的开发。</p>\n<h2 id=\"最近的设计\"><a href=\"#最近的设计\" class=\"headerlink\" title=\"最近的设计\"></a>最近的设计</h2><p>由于并不是设计出身，我自学了 Design + Code 的设计课程，包括Sketch的使用、字体、动画的应用等等，并且学习了少数派的「比身边人多懂一点设计」课程，后者非常推荐没有设计基础的人仔细阅读。目前能做出一些符合我想发的、并不蹩脚的设计，如 App 的 icon 设计、UI设计等等。<br>列举两个我发布在 Dribbble 上的作品，第一个是对 Notion 图标的重新设计。由于 Notion 是一款笔记应用，我能够联想到彩色的便签与装帧精美的册子，那如何体现 Notion 的品牌意义呢？我参考了原版 Notion 的图标，为了使得大写字母显得不那么突兀，我为其加上了阴影。最后参照 Logic Pro X等 App 给予其一个恰到好处的倾角。该图标被 Andreas Storm 等人Rebound，也算是一个不小的成就。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2001.21.51.png\" alt=\"\"><br>另一个设计方案就是我的音乐播放器设计，目前编码已经完成了1/2，是我目前完成的第一个“有设计”的App，至少MockUp看起来还不错。其设计理念十分简洁，一个页面只完成一个类别的功能，充分利用 UIKit，目前仍然有不少功能想做，包括接入 Apple Music、从LyricsKit获取歌词等等，无法确定何时上架。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2001.33.30.png\" alt=\"\"><br>最后放出我在 Dribbble 的地址： <a href=\"https://dribbble.com/stephenfang\" target=\"_blank\" rel=\"noopener\">https://dribbble.com/stephenfang</a></p>\n<h2 id=\"最近的摄影\"><a href=\"#最近的摄影\" class=\"headerlink\" title=\"最近的摄影\"></a>最近的摄影</h2><p>因为疫情缘故今年并没有出门，连寒假旅行也连带取消了，只能通过 Unsplash 发一些先前的照片，我所理解的低阶摄影（也就是我目前实践的）满足于把画面交代清楚，以不一样的构图拍出比游客照更具有感觉的东西。好的照片应该是能够讲述故事的，这也是街头摄影之所以能打动人的原因，显然我并没有做到，但是我仍在不断尝试让平凡的照片看起来具有不平凡的内容。例如对于物体的拍摄，我希望画面能够传递一定的感情信息，例如以下的猫狗照片，你可能会思考它们此刻在想些什么。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.52.32.png\" alt=\"\"><br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.54.52.png\" alt=\"\"><br>另一个要点就是构图，简单的构图方式可能得到不同的效果。构图方式可以简单复制，而建筑和你的视角则不会。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.56.52.png\" alt=\"\"><br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.59.12.png\" alt=\"\"><br>罗伯特·卡帕说过“如果你拍得不够好，是因为你离得不够近”，不做这句话的过分解读，但我确实能够以此作为我玩摄影的一条箴言。以下为在上海人民英雄纪念碑下拍摄的照片，当时只是感觉自己被震撼到了就按下了快门，没有想到登上了 Unsplash 的信息流推荐，这也促使着我业余时间在该平台下继续深耕。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2014.00.55.png\" alt=\"\"><br>最后放出我在 Unsplash 的地址： <a href=\"https://unsplash.com/@stephenfang\" target=\"_blank\" rel=\"noopener\">https://unsplash.com/@stephenfang</a></p>"},{"title":"控制器组件 Action 实验","date":"2020-02-26T03:10:20.000Z","_content":"包含 控制器组件 Action 知识梳理、实验步骤、实验整理方面的总结。\n<!--more-->\n\n## 知识梳理\n\n1、Action 类中的默认方法名是 execute()方法，可以被自动调用； \n\n2、在 Action 中也允许定义其它方法名，可以同时定义多个方法，分别处理不同的逻辑；\n\n3、当 Action 中使用了自定义方法，则该 Action 就需要特定的配置，一般有四种调用方式： \n\n- 在 struts.xml 文件中通过 method 属性指定方法名； \n- 使用动态方法调用方式（DMI）； \n- 使用提交按钮的 method 属性； \n- 使用通配符配置 Action； \n\n4、Action 类是多实例的，Action 类的属性是线程安全的； \n\n5、在 JSP 页面中，可以通过 Struts2 标签调用 Action 中对应的 getter 方法，从而输出 Action 的属性值； \n\n6、当一个 Action 处理用户请求结束后，返回一个字符串作为逻辑视图名，再通过 `struts.xml` 文件中的配置将逻辑视图名与物理视图资源关联起来；Struts2默认提供了一系列的结果类型（`struts-default.xml` 配置文件的 result-types 标签里列出了所支持的结果类型），结果类型决定了 Action 处理结束后，将调用哪种视图资源来呈现处理结果。\n\n7、为了让用户开发的 Action 类更规范，Struts2 提供了一个 Action 接口，该接口定义了 Struts2 的 Action 处理类应该实现的规范； \n\n8、Struts2 还为 Action 接口提供了一个实现类：ActionSupport，该类提供了若干默认方法，包括：默认的处理用户请求的方法（excute()方法）、数据校验的方法、添加校验错误信息的方法、获取国际化信息的方法等，部分重要方法列表如下：\n\n![](1.png)\n \n9、Struts2 框架提供了校验器和手工编码两种方式对请求参数进行数据校验，当 Action 类继承了 ActionSupport 类，就可以通过定义名为“<ActionClassName>- <ActionAliasName>-validation.xml”的校验规则文件的方法进行校验器校验， 也可以通过重写 ActionSupport 类的 validate()方法或 validateXxx()方法进行手动校验； \n\n10、在 JSP 页面中使用 Struts2 标签生成的表单，能将域级别的错误信息将自动显示到表单元素处； \n\n11、在 JSP 页面中使用 fielderror 标签，可以集中显示所有的域级错误信息；使用 actionerror 标签，可以显示所有的 Action 级别错误信息；使用 actionmessage 标签，可以显示 Action 消息； \n\n12、Struts2 框架中提供了部分内置的类型转换器，可以将请求参数的 String 类型转换成基本数据类型及对应的包装器类型、日期类型、数组类型、集合类型等，当 Action 类继承了 ActionSupport 类，则内置的类型转换器将默认生效，可以直接使用； \n\n13、如需修改默认的类型转换校验信息，则要在 Action 类的包中声明名为“Action 类名.properties”的局部属性文件； \n\n14、Struts2 框架同时支持自定义类型转换器，将请求参数转换成任意一种类型。\n\n15、Struts2 框架中的 Action 类没有与任何 Servlet API 耦合，因此 Action 类可以脱 离 Servlet 容器环境进行单元测试； \n\n16、ActionContext 是 `com.opensymphony.xwork2` 包中的一个类，该类表示一个 Action 运行时的上下文；\n\n17、当 Action 类需要通过请求、会话或上下文存取属性时，可以通过 ActionContext 类完成， 也可以通过实现 Struts 提供的接口：RequestAware、SessionAware 和 ApplicationAware 完成，而不必调用 Servlet API 中的 HttpServletRequest、 HttpSession 和 ServletContext 对象，从而保持 Action 与 Servlet API 的解耦； \n\n18、在 Action 类中直接访问 Servlet API， 可以通过实现 Struts2 提供的接口： ServletContextAware、ServletRequestAware、ServletResponseAware 完成，也可以通过 ServletActionContext 工具类实现，但 Action 将与 Servlet API 直接耦合。\n\n## 实验总结\n**1、总结 Action 自定义方法的四种调用和配置方式**\n\n- 在 `struts.xml` 文件中通过method属性指定方法名：以actionName.action形式访问，但是要配置多个action较为麻烦\n- 使用动态方法调用方式：以 actionName!methodName.action 形式访问，要注意UserAction下的login和register方法不能有相同的result返回值\n- 使用提交按钮的method属性：以actionName!methodName.action形式访问，但是需要在.jsp页面中配置，只能用于表单中\n- 使用通配符配置Action：以actionName.action形式访问，相对更为普遍的方式\n\n**2、Action 的实例化情况，将 Action 与 Servlet 在实例化情况上进行对比**\n\n在Struts2中每提交一次表单数据Action就被实例化一次，而Servlet在被创建时就被实例化，多次访问页面Servlet不会被多次实例化。\n\n**3、分析 JSP 文件中获取 Action 属性的主要过程**\n\nJSP 文件中获取 Action 属性以JavaBean来实现，所封装的属性和表单的属性一一对应，JavaBean将成为数据传递的载体来进行数据的传递。\n\n**4、观察两次 `loginSuccess.jsp` 页面输出上的区别，分析原因并记录下来**\nredirect采用客户端重定向的方式，而默认的dispatcher采用服务器内部跳转的方式，所以当result的type属性被设置为redirect时无法获取到Action中的count属性而dispatcher的方式可以。\n\n**5、解压缩 Struts2 的核心包 struts2-core-2.3.15.1.jar，找到 struts-`default.xml` 配置文件，在其中的 result-types 标签里列出了 Struts2 所支持的结果类型，查找相关资料，总结这些结果类型的作用和特点，并记录下来；**\n \n- chain：服务器内部跳转，调用其他action,完成自定义的拦截器堆栈和结果。只能请求action,如果请求视图资源会报错。\n- dispatcher: 默认值，服务器内部跳转(跳转到web组件)\n- freemarker：使用Freemarker模板引擎呈现一个视图\n- httpheader：通过设置HTTP headers和status的值来发送错误信息给客户端。\n- redirect: 作客户端重定向(重定向到web组件)\n- redirectAction: 作客户端重定向(重定向到其他Action)\n- stream:用作下载文件或者在浏览器上显示PDF等文档\n- velocity:使用Servlet容器的JspFactory,模拟JSP执行环境,显示Velocity模板,将直接传输到Servlet输出。\n- plaintext:响应以plain形式返回给客户端,相当于`response.setContentType(\"text/plain; charset=\"+charSet);`\n\n**6、总结 Action 类中 validate()方法和 validateXxx()方法的作用**\n\n-  validate()方法：将对页面表单验证的内容写到validate()方法中，实现验证和业务处理内容的分离，validate()方法会对Action类中所有业务方法起作用\n-  validateXxx()方法：当多个表单提交到同一个action页面是，validate()方法对所有表单生效，可以使用validateXxx()方法实现对某一个业务的验证，validate()方法和 validateXxx()方法同时存在时都会起作用；validateXxx()方法的调用优于validate()方法\n\n**7、总结使用校验器校验的方法；在 Struts2 的核心包 xwork-core-**\n**2.3.15.1.jar\\com\\opensymphony\\xwork2\\validator\\validators路径下找到 default.xml 文件，总结校验规则文件中主要元素的作用和配置方法**\n\n- required：必填校验器  \n- requiredstring：必填字符串校验器  \n- stringlength:字符串长度校验器 \n- date:日期校验器  \n- expression：表达式校验器  \n- int:整数校验器 \n- fieldexpression：字段表达式校验器\n- url:网址校验器  \n- regex：正则表达式校验器 \n\n```xml\n<validators>\n  <field name=\"被校验的字段\">\n     <field-validator type=\"校验器的类型\">\n        <param name=\"参数名\">参数值</param>\n         <message> 提示信息</message>\n     </field-validator>\n  </field>\n  <!--下一个要验证的字段--> \n</validators>\n```\n\n```xml\n<valiators>\n  <validator type=\"校验器类型名\">\n     <!--fieldName固定的 N必须大写-->\n     <param name=\"fieldName\">需要被校验的字段</param>\n      <!--下面的param元素可以有0个或者多个--> \n     <param name=\"参数名\">参数值</param>\n    <message key=\"I18NKey\">提示信息</message>\n  </validator>\n</validators>\n```\n\n**8、总结在 Action 中使用国际化资源文件的步骤及方法**\n\n首先创建不同语言环境下的.properties文件，在文件中写入不同key字段的国际化资源，使用ActionSupport类的getText方法，该方法可以接受一个name参数，指定国际化资源文件中的key数值，最后使用native2ascii工具进行处理。\n\n**9、总结 Struts2 中常用的内置类型转换器及其使用方法**\n\n- String:将int,double,boolean,String类型的数组或java.util.Date类型转换成字符串。\n- boolean和Boolean:在字符串与boolean之间转换\n- char/Character:在字符串和字符之间转换\n- int/Integer,float/Float,long/Long,double/Double:在字符串与数值类型之间进行转换 \n- date:在字符串和日期类型之间进行转换，默认格式是:YYYY-MM-DD\n- 数组:由于数组本身就有类型，可以将多个同名参数，转换到数组中(在之前总结的兴趣爱好多选择，如果你选择多个，同时他们name属性相同就自动变为数组)\n- 集合:支持将数据保存到List或者Map集合\n\n**10、观察 Action 中访问 Servlet API 的四种方法，总结四种方法的区别，并记录下来**\n\n- 通过ActionContext类访问：\n使用这种方法访问的前提是必须先要获取ActionContext对象，优点是Action和Servlet API完全解耦，缺点是并不能调用原生的Servlet API\n\n- Action直接访问:\n使用这种方法可以调用原生的Servlet API，但是需要实现对应的接口\n\n- \t通过ServletActionContext访问:\n使用ServletActionContext工具类无需实现接口，就可以直接访问Servlet API，但是会加强Action和Servlet API的耦合，不利于Action的再利用。\n\n- 实现ServletContextAware、ServletRequestAware、ServletResponseAware接口访问:\nAction与Servlet API直接耦合，需要调用ServletContext和ServletRequest等set方法。\n\n## 实验步骤\n### 基础实验\n\n1、新建 Web 工程 struts-prj2，并将 Struts2 中的 8 个核心包添加到工程中； \n\n2、在 struts-prj2 中新建 login.jsp 页面，作为用户登录的视图；新建 loginFail.jsp 页面，作为登录失败的视图；新建 loginSuccess.jsp 页面，作为登录成功的视图;\n\n3、在 struts-prj2 中新建 register.jsp 页面，作为用户注册的视图；新建regFail.jsp 页面，作为注册失败的视图；新建 regSuccess.jsp 页面，作为注册成功的视图;\n\n4、在 struts-prj2 中新建 cn.edu.zjut.bean 包，并在其中创建 UserBean.java，用于 记录用户信息 （可重用“实验二 Struts 基础应用 ”中提高实验里的 UserBean.java 代码）； \n\n5、在 struts-prj2 中新建 cn.edu.zjut.service 包，并在其中创UserService.java， 用于实现登录逻辑和注册逻辑;\n\n6、在 struts-prj2 中新建 cn.edu.zjut.action 包，并在其中创建 UserAction.java，定义login()方法和 register()方法\n\n7、在工程struts-prj2 的 src 目录中创建 struts.xml 文件，用于配置 Action 并设置 页面导航，通过 action 标签中 method 属性指定方法名；\n\n8、编辑 Web 应用的 web.xml 文件，增加 Struts2 核心 Filter 的配置； \n\n9、将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 与 register.jsp页面，并记录运行结果； \n\n10、查找相关资料， 尝试使用 Action 自定义方法的其它三种调用和配置方式：动态方法调用方式（DMI）、提交按钮的 method 属性、通配符配置 Action，并记录关键配置和运行结果； \n \n![](DMI.png)\n  \n![](button.png)\n \n![](uni.png)\n\n11、修改 UserAction.java，增加 UserAction 类的构造方法 UserAction()，增加 count属性，用于测试 Action 的实例化情况\n\n![](2.png)\n\n12、修改 `loginSuccess.jsp`，在页面中使用<s:property>标签输出 Action 中的 count 值； \n\n```\n<s:property value=\"count\" />\n```\n\n13、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 并刷新多次，记录运行结果； \n\n![](3.png)\n\n14、修改 struts.xml 文件，将 UserAction 的页面导航设置为 redirect 结果类型；\n\n```\n<result name=\"success\" type=\"redirect\">/loginSuccess.jsp</result>\n```\n\n15、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察登录成功后 loginSuccess.jsp 页面的输出，并记录下来。\n\n![](4.png)\n\n### 提高实验\n1、在 struts-prj2 中修改 UserAction 类，使其继承 ActionSupport 类，并在 UserAction 类中覆盖 ActionSupport 类的 validate()方法， 用于对用户登录的请求参 数 account 和 password 进行校验：若用户名或密码为空，则使用 addFieldError （域 级）添加错误信息。\n\n![](5.png)\n\n2、修改 `struts.xml` 文件，在 Action 的配置中增加 validate()方法校验出错时的页面导航`<result name=\"input\">`\n\n![](6.png)\n\n3、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `login.jsp` 页面，观察并记录运行结果；\n\n![](7.png)\n\n4、修改 `login.jsp` 页面，在表单前增加 fielderror 标签：`<s:fielderror/>`，再通过浏览器访问 login.jsp 页面，观察并记录运行结果\n\n![](8.png)\n\n5、修改 UserAction.java，在调用登录逻辑的 login()方法中，对登录情况进行校验： 若登录成功，使用 addActionMessage()方法添加“登录成功！”的 Action 提示消息，若 登录失败，使用 addActionError()方法添加 Action 级别的错误信息\n\n![](9.png)\n\n6、修改 login.jsp 页面，增加 actionerror 标签（<s:actionerror/>）Action 级别的 错 误信息；修改 `loginSuccess.jsp`，使用 actionmessage 标签`<s:actionmessage/>` 显示 Action 提示消息； \n\n7、修改 `struts.xml` 文件中用户登录的页面导航设置，将登录失败时转向的页面从 loginFail.jsp 修改为 login.jsp； \n\n8、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察并记录运行结果；\n\n![](10.png)\n\n9、在工程 struts-prj2 中创建“UserAction-login-validation.xml”校验规则文件，使 其与 UserAction 类位于同一目录下，配置校验信息，使用校验器对请求参数进行校验 \n\n10、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察并记录运行结果；\n\n![](11.png)\n\n11、将 login.jsp、 loginSuccess.jsp、 loginFail.jsp 三个页面进行国际化处理，把需要进行国际化的内容 以键值对的形式写入资源文件 `message_zh_CN.properties` 和 `message_en_US.properties` 中； \n\n12、在资源文件中添加校验信息的键值对， 并使用 native2ASCII 工具，将 `message_zh_CN.properties` 重新编码，将中文字符都转化为 unicode 码 \n\n13、在工程 struts-prj2 的 src 目录中创建 `struts.properties` 文件，通过它加载资源文件 \n\n14、修改 `UserAction.java`，使用 ActionSupport 类的 getText()方法，获取国际化资 源文件中的信息 \n\n15、修改 `UserAction-login-validation.xml`，获取国际化资源文件中的信息 \n\n16、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `login.jsp` 页面， 观察并记录运行结果；\n\n![](12.png)\n\n17、修改 `UserBean.java`，将用于保存注册用户生日的变量类型改为 Date 类型，使用 Struts2 内置的类型转换器对请求参数进行校验； \n\n18、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `register.jsp` 页 面，当用户输入的生日不合法时，观察并记录运行结果；\n\n![](13.png)\n\n19、在工程 struts-prj2 的 cn.edu.zjut.action 包中创建局部属性文件`UserAction.properties`，修改类型转换的校验信息，并使用 native2ASCII 工具将 `UserAction.properties` 重新编码 \n\n20、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `register.jsp` 页 面，当用户输入的生日不合法时，观察并记录运行结果；\n\n![](na.png)\n\n21、参考实验步骤 9，在工程 struts-prj2 的 cn.edu.zjut.action 包中创建 `UserAction-register-validation.xml` 文件，增加校验信息的配置，使用校验器对用户 注册的请求参数进行校验，要求注册时两次密码输入相同、email 地址格式符合要求等； \n\n22、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `register.jsp` 页 面，观察并记录运行结果；\n\n![](14.png)\n\n23、修改 UserAction 类， 将 validate()的方法名改为 validateLogin()， 并增加 validateRegister()方法，参考实验步骤 1，使用手工编码方式对请求参数进行数据校验； \n\n24、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `register.jsp` 页 面，观察并记录运行结果。\n\n![](15.png)\n\n### 拓展实验\n\n1、在 struts-prj2 中修改 UserAction 类，通过 ActionContext 获取请求、会话和上下文对象相关联的 Map 对象来实现存取属性的功能 \n\n2、修改 `loginSuccess.jsp` 页面，从请求、会话和上下文对象中获取属性值并显示 在页面中 \n\n3、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `login.jsp` 页面，观察并记录运行结果；\n\n![](16.png)\n\n**每提交一次刷新，次数就会增加一次，只有重新部署访问次数才会重置** \n\n4、修改 UserAction 类，通过实现 Struts 提供的接口：RequestAware、SessionAware 和 ApplicationAware，获取请求、会话和上下文对象相关联的 Map 对象来实现存取属性的功能 \n\n5、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `login.jsp` 页面，观察并记录运行结果；\n\n![](17.png)\n\n6、修改 UserAction 类，查找相关资料，尝试通过接口：ServletContextAware、 ServletRequestAware、ServletResponseAware 直接访问 Servlet API，实现以上实验步骤 1-3 的相同功能，重新运行并记录结果；\n\n![](18.png)\n\n![](19.png)\n\n\n7、修改 UserAction 类，查找相关资料，尝试通过 ServletActionContext 工具类直接访 问 Servlet API，实现以上实验步骤 1-3 的相同功能，重新运行并记录结果；\n\n![](20.png)\n\n![](21.png)\n\n8、尝试利用 Servlet API 添加购物车功能，在工程 struts-prj2 的 cn.edu.zjut.bean 包中创建 `Item.java` 用于记录商品信息\n\n9、在工程 struts-prj2 的 cn.edu.zjut.bean 包中创建 `ShopppingCart.java` 用于记录用户的购物车信息，为简化操作，在购物车的构造函数中加入商品信息 \n\n10、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `login.jsp `页面， 观察并记录运行结果。\n\n![](22.png)\n","source":"_posts/Action_Experiment.md","raw":"---\ntitle: 控制器组件 Action 实验\ndate: 2020-02-26 11:10:20\ncategories: \n- tech\ntags: \n- struts\n- Action\n- JavaEE\n- 总结\n- 实验\n---\n包含 控制器组件 Action 知识梳理、实验步骤、实验整理方面的总结。\n<!--more-->\n\n## 知识梳理\n\n1、Action 类中的默认方法名是 execute()方法，可以被自动调用； \n\n2、在 Action 中也允许定义其它方法名，可以同时定义多个方法，分别处理不同的逻辑；\n\n3、当 Action 中使用了自定义方法，则该 Action 就需要特定的配置，一般有四种调用方式： \n\n- 在 struts.xml 文件中通过 method 属性指定方法名； \n- 使用动态方法调用方式（DMI）； \n- 使用提交按钮的 method 属性； \n- 使用通配符配置 Action； \n\n4、Action 类是多实例的，Action 类的属性是线程安全的； \n\n5、在 JSP 页面中，可以通过 Struts2 标签调用 Action 中对应的 getter 方法，从而输出 Action 的属性值； \n\n6、当一个 Action 处理用户请求结束后，返回一个字符串作为逻辑视图名，再通过 `struts.xml` 文件中的配置将逻辑视图名与物理视图资源关联起来；Struts2默认提供了一系列的结果类型（`struts-default.xml` 配置文件的 result-types 标签里列出了所支持的结果类型），结果类型决定了 Action 处理结束后，将调用哪种视图资源来呈现处理结果。\n\n7、为了让用户开发的 Action 类更规范，Struts2 提供了一个 Action 接口，该接口定义了 Struts2 的 Action 处理类应该实现的规范； \n\n8、Struts2 还为 Action 接口提供了一个实现类：ActionSupport，该类提供了若干默认方法，包括：默认的处理用户请求的方法（excute()方法）、数据校验的方法、添加校验错误信息的方法、获取国际化信息的方法等，部分重要方法列表如下：\n\n![](1.png)\n \n9、Struts2 框架提供了校验器和手工编码两种方式对请求参数进行数据校验，当 Action 类继承了 ActionSupport 类，就可以通过定义名为“<ActionClassName>- <ActionAliasName>-validation.xml”的校验规则文件的方法进行校验器校验， 也可以通过重写 ActionSupport 类的 validate()方法或 validateXxx()方法进行手动校验； \n\n10、在 JSP 页面中使用 Struts2 标签生成的表单，能将域级别的错误信息将自动显示到表单元素处； \n\n11、在 JSP 页面中使用 fielderror 标签，可以集中显示所有的域级错误信息；使用 actionerror 标签，可以显示所有的 Action 级别错误信息；使用 actionmessage 标签，可以显示 Action 消息； \n\n12、Struts2 框架中提供了部分内置的类型转换器，可以将请求参数的 String 类型转换成基本数据类型及对应的包装器类型、日期类型、数组类型、集合类型等，当 Action 类继承了 ActionSupport 类，则内置的类型转换器将默认生效，可以直接使用； \n\n13、如需修改默认的类型转换校验信息，则要在 Action 类的包中声明名为“Action 类名.properties”的局部属性文件； \n\n14、Struts2 框架同时支持自定义类型转换器，将请求参数转换成任意一种类型。\n\n15、Struts2 框架中的 Action 类没有与任何 Servlet API 耦合，因此 Action 类可以脱 离 Servlet 容器环境进行单元测试； \n\n16、ActionContext 是 `com.opensymphony.xwork2` 包中的一个类，该类表示一个 Action 运行时的上下文；\n\n17、当 Action 类需要通过请求、会话或上下文存取属性时，可以通过 ActionContext 类完成， 也可以通过实现 Struts 提供的接口：RequestAware、SessionAware 和 ApplicationAware 完成，而不必调用 Servlet API 中的 HttpServletRequest、 HttpSession 和 ServletContext 对象，从而保持 Action 与 Servlet API 的解耦； \n\n18、在 Action 类中直接访问 Servlet API， 可以通过实现 Struts2 提供的接口： ServletContextAware、ServletRequestAware、ServletResponseAware 完成，也可以通过 ServletActionContext 工具类实现，但 Action 将与 Servlet API 直接耦合。\n\n## 实验总结\n**1、总结 Action 自定义方法的四种调用和配置方式**\n\n- 在 `struts.xml` 文件中通过method属性指定方法名：以actionName.action形式访问，但是要配置多个action较为麻烦\n- 使用动态方法调用方式：以 actionName!methodName.action 形式访问，要注意UserAction下的login和register方法不能有相同的result返回值\n- 使用提交按钮的method属性：以actionName!methodName.action形式访问，但是需要在.jsp页面中配置，只能用于表单中\n- 使用通配符配置Action：以actionName.action形式访问，相对更为普遍的方式\n\n**2、Action 的实例化情况，将 Action 与 Servlet 在实例化情况上进行对比**\n\n在Struts2中每提交一次表单数据Action就被实例化一次，而Servlet在被创建时就被实例化，多次访问页面Servlet不会被多次实例化。\n\n**3、分析 JSP 文件中获取 Action 属性的主要过程**\n\nJSP 文件中获取 Action 属性以JavaBean来实现，所封装的属性和表单的属性一一对应，JavaBean将成为数据传递的载体来进行数据的传递。\n\n**4、观察两次 `loginSuccess.jsp` 页面输出上的区别，分析原因并记录下来**\nredirect采用客户端重定向的方式，而默认的dispatcher采用服务器内部跳转的方式，所以当result的type属性被设置为redirect时无法获取到Action中的count属性而dispatcher的方式可以。\n\n**5、解压缩 Struts2 的核心包 struts2-core-2.3.15.1.jar，找到 struts-`default.xml` 配置文件，在其中的 result-types 标签里列出了 Struts2 所支持的结果类型，查找相关资料，总结这些结果类型的作用和特点，并记录下来；**\n \n- chain：服务器内部跳转，调用其他action,完成自定义的拦截器堆栈和结果。只能请求action,如果请求视图资源会报错。\n- dispatcher: 默认值，服务器内部跳转(跳转到web组件)\n- freemarker：使用Freemarker模板引擎呈现一个视图\n- httpheader：通过设置HTTP headers和status的值来发送错误信息给客户端。\n- redirect: 作客户端重定向(重定向到web组件)\n- redirectAction: 作客户端重定向(重定向到其他Action)\n- stream:用作下载文件或者在浏览器上显示PDF等文档\n- velocity:使用Servlet容器的JspFactory,模拟JSP执行环境,显示Velocity模板,将直接传输到Servlet输出。\n- plaintext:响应以plain形式返回给客户端,相当于`response.setContentType(\"text/plain; charset=\"+charSet);`\n\n**6、总结 Action 类中 validate()方法和 validateXxx()方法的作用**\n\n-  validate()方法：将对页面表单验证的内容写到validate()方法中，实现验证和业务处理内容的分离，validate()方法会对Action类中所有业务方法起作用\n-  validateXxx()方法：当多个表单提交到同一个action页面是，validate()方法对所有表单生效，可以使用validateXxx()方法实现对某一个业务的验证，validate()方法和 validateXxx()方法同时存在时都会起作用；validateXxx()方法的调用优于validate()方法\n\n**7、总结使用校验器校验的方法；在 Struts2 的核心包 xwork-core-**\n**2.3.15.1.jar\\com\\opensymphony\\xwork2\\validator\\validators路径下找到 default.xml 文件，总结校验规则文件中主要元素的作用和配置方法**\n\n- required：必填校验器  \n- requiredstring：必填字符串校验器  \n- stringlength:字符串长度校验器 \n- date:日期校验器  \n- expression：表达式校验器  \n- int:整数校验器 \n- fieldexpression：字段表达式校验器\n- url:网址校验器  \n- regex：正则表达式校验器 \n\n```xml\n<validators>\n  <field name=\"被校验的字段\">\n     <field-validator type=\"校验器的类型\">\n        <param name=\"参数名\">参数值</param>\n         <message> 提示信息</message>\n     </field-validator>\n  </field>\n  <!--下一个要验证的字段--> \n</validators>\n```\n\n```xml\n<valiators>\n  <validator type=\"校验器类型名\">\n     <!--fieldName固定的 N必须大写-->\n     <param name=\"fieldName\">需要被校验的字段</param>\n      <!--下面的param元素可以有0个或者多个--> \n     <param name=\"参数名\">参数值</param>\n    <message key=\"I18NKey\">提示信息</message>\n  </validator>\n</validators>\n```\n\n**8、总结在 Action 中使用国际化资源文件的步骤及方法**\n\n首先创建不同语言环境下的.properties文件，在文件中写入不同key字段的国际化资源，使用ActionSupport类的getText方法，该方法可以接受一个name参数，指定国际化资源文件中的key数值，最后使用native2ascii工具进行处理。\n\n**9、总结 Struts2 中常用的内置类型转换器及其使用方法**\n\n- String:将int,double,boolean,String类型的数组或java.util.Date类型转换成字符串。\n- boolean和Boolean:在字符串与boolean之间转换\n- char/Character:在字符串和字符之间转换\n- int/Integer,float/Float,long/Long,double/Double:在字符串与数值类型之间进行转换 \n- date:在字符串和日期类型之间进行转换，默认格式是:YYYY-MM-DD\n- 数组:由于数组本身就有类型，可以将多个同名参数，转换到数组中(在之前总结的兴趣爱好多选择，如果你选择多个，同时他们name属性相同就自动变为数组)\n- 集合:支持将数据保存到List或者Map集合\n\n**10、观察 Action 中访问 Servlet API 的四种方法，总结四种方法的区别，并记录下来**\n\n- 通过ActionContext类访问：\n使用这种方法访问的前提是必须先要获取ActionContext对象，优点是Action和Servlet API完全解耦，缺点是并不能调用原生的Servlet API\n\n- Action直接访问:\n使用这种方法可以调用原生的Servlet API，但是需要实现对应的接口\n\n- \t通过ServletActionContext访问:\n使用ServletActionContext工具类无需实现接口，就可以直接访问Servlet API，但是会加强Action和Servlet API的耦合，不利于Action的再利用。\n\n- 实现ServletContextAware、ServletRequestAware、ServletResponseAware接口访问:\nAction与Servlet API直接耦合，需要调用ServletContext和ServletRequest等set方法。\n\n## 实验步骤\n### 基础实验\n\n1、新建 Web 工程 struts-prj2，并将 Struts2 中的 8 个核心包添加到工程中； \n\n2、在 struts-prj2 中新建 login.jsp 页面，作为用户登录的视图；新建 loginFail.jsp 页面，作为登录失败的视图；新建 loginSuccess.jsp 页面，作为登录成功的视图;\n\n3、在 struts-prj2 中新建 register.jsp 页面，作为用户注册的视图；新建regFail.jsp 页面，作为注册失败的视图；新建 regSuccess.jsp 页面，作为注册成功的视图;\n\n4、在 struts-prj2 中新建 cn.edu.zjut.bean 包，并在其中创建 UserBean.java，用于 记录用户信息 （可重用“实验二 Struts 基础应用 ”中提高实验里的 UserBean.java 代码）； \n\n5、在 struts-prj2 中新建 cn.edu.zjut.service 包，并在其中创UserService.java， 用于实现登录逻辑和注册逻辑;\n\n6、在 struts-prj2 中新建 cn.edu.zjut.action 包，并在其中创建 UserAction.java，定义login()方法和 register()方法\n\n7、在工程struts-prj2 的 src 目录中创建 struts.xml 文件，用于配置 Action 并设置 页面导航，通过 action 标签中 method 属性指定方法名；\n\n8、编辑 Web 应用的 web.xml 文件，增加 Struts2 核心 Filter 的配置； \n\n9、将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 与 register.jsp页面，并记录运行结果； \n\n10、查找相关资料， 尝试使用 Action 自定义方法的其它三种调用和配置方式：动态方法调用方式（DMI）、提交按钮的 method 属性、通配符配置 Action，并记录关键配置和运行结果； \n \n![](DMI.png)\n  \n![](button.png)\n \n![](uni.png)\n\n11、修改 UserAction.java，增加 UserAction 类的构造方法 UserAction()，增加 count属性，用于测试 Action 的实例化情况\n\n![](2.png)\n\n12、修改 `loginSuccess.jsp`，在页面中使用<s:property>标签输出 Action 中的 count 值； \n\n```\n<s:property value=\"count\" />\n```\n\n13、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 并刷新多次，记录运行结果； \n\n![](3.png)\n\n14、修改 struts.xml 文件，将 UserAction 的页面导航设置为 redirect 结果类型；\n\n```\n<result name=\"success\" type=\"redirect\">/loginSuccess.jsp</result>\n```\n\n15、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察登录成功后 loginSuccess.jsp 页面的输出，并记录下来。\n\n![](4.png)\n\n### 提高实验\n1、在 struts-prj2 中修改 UserAction 类，使其继承 ActionSupport 类，并在 UserAction 类中覆盖 ActionSupport 类的 validate()方法， 用于对用户登录的请求参 数 account 和 password 进行校验：若用户名或密码为空，则使用 addFieldError （域 级）添加错误信息。\n\n![](5.png)\n\n2、修改 `struts.xml` 文件，在 Action 的配置中增加 validate()方法校验出错时的页面导航`<result name=\"input\">`\n\n![](6.png)\n\n3、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `login.jsp` 页面，观察并记录运行结果；\n\n![](7.png)\n\n4、修改 `login.jsp` 页面，在表单前增加 fielderror 标签：`<s:fielderror/>`，再通过浏览器访问 login.jsp 页面，观察并记录运行结果\n\n![](8.png)\n\n5、修改 UserAction.java，在调用登录逻辑的 login()方法中，对登录情况进行校验： 若登录成功，使用 addActionMessage()方法添加“登录成功！”的 Action 提示消息，若 登录失败，使用 addActionError()方法添加 Action 级别的错误信息\n\n![](9.png)\n\n6、修改 login.jsp 页面，增加 actionerror 标签（<s:actionerror/>）Action 级别的 错 误信息；修改 `loginSuccess.jsp`，使用 actionmessage 标签`<s:actionmessage/>` 显示 Action 提示消息； \n\n7、修改 `struts.xml` 文件中用户登录的页面导航设置，将登录失败时转向的页面从 loginFail.jsp 修改为 login.jsp； \n\n8、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察并记录运行结果；\n\n![](10.png)\n\n9、在工程 struts-prj2 中创建“UserAction-login-validation.xml”校验规则文件，使 其与 UserAction 类位于同一目录下，配置校验信息，使用校验器对请求参数进行校验 \n\n10、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察并记录运行结果；\n\n![](11.png)\n\n11、将 login.jsp、 loginSuccess.jsp、 loginFail.jsp 三个页面进行国际化处理，把需要进行国际化的内容 以键值对的形式写入资源文件 `message_zh_CN.properties` 和 `message_en_US.properties` 中； \n\n12、在资源文件中添加校验信息的键值对， 并使用 native2ASCII 工具，将 `message_zh_CN.properties` 重新编码，将中文字符都转化为 unicode 码 \n\n13、在工程 struts-prj2 的 src 目录中创建 `struts.properties` 文件，通过它加载资源文件 \n\n14、修改 `UserAction.java`，使用 ActionSupport 类的 getText()方法，获取国际化资 源文件中的信息 \n\n15、修改 `UserAction-login-validation.xml`，获取国际化资源文件中的信息 \n\n16、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `login.jsp` 页面， 观察并记录运行结果；\n\n![](12.png)\n\n17、修改 `UserBean.java`，将用于保存注册用户生日的变量类型改为 Date 类型，使用 Struts2 内置的类型转换器对请求参数进行校验； \n\n18、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `register.jsp` 页 面，当用户输入的生日不合法时，观察并记录运行结果；\n\n![](13.png)\n\n19、在工程 struts-prj2 的 cn.edu.zjut.action 包中创建局部属性文件`UserAction.properties`，修改类型转换的校验信息，并使用 native2ASCII 工具将 `UserAction.properties` 重新编码 \n\n20、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `register.jsp` 页 面，当用户输入的生日不合法时，观察并记录运行结果；\n\n![](na.png)\n\n21、参考实验步骤 9，在工程 struts-prj2 的 cn.edu.zjut.action 包中创建 `UserAction-register-validation.xml` 文件，增加校验信息的配置，使用校验器对用户 注册的请求参数进行校验，要求注册时两次密码输入相同、email 地址格式符合要求等； \n\n22、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `register.jsp` 页 面，观察并记录运行结果；\n\n![](14.png)\n\n23、修改 UserAction 类， 将 validate()的方法名改为 validateLogin()， 并增加 validateRegister()方法，参考实验步骤 1，使用手工编码方式对请求参数进行数据校验； \n\n24、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `register.jsp` 页 面，观察并记录运行结果。\n\n![](15.png)\n\n### 拓展实验\n\n1、在 struts-prj2 中修改 UserAction 类，通过 ActionContext 获取请求、会话和上下文对象相关联的 Map 对象来实现存取属性的功能 \n\n2、修改 `loginSuccess.jsp` 页面，从请求、会话和上下文对象中获取属性值并显示 在页面中 \n\n3、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `login.jsp` 页面，观察并记录运行结果；\n\n![](16.png)\n\n**每提交一次刷新，次数就会增加一次，只有重新部署访问次数才会重置** \n\n4、修改 UserAction 类，通过实现 Struts 提供的接口：RequestAware、SessionAware 和 ApplicationAware，获取请求、会话和上下文对象相关联的 Map 对象来实现存取属性的功能 \n\n5、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `login.jsp` 页面，观察并记录运行结果；\n\n![](17.png)\n\n6、修改 UserAction 类，查找相关资料，尝试通过接口：ServletContextAware、 ServletRequestAware、ServletResponseAware 直接访问 Servlet API，实现以上实验步骤 1-3 的相同功能，重新运行并记录结果；\n\n![](18.png)\n\n![](19.png)\n\n\n7、修改 UserAction 类，查找相关资料，尝试通过 ServletActionContext 工具类直接访 问 Servlet API，实现以上实验步骤 1-3 的相同功能，重新运行并记录结果；\n\n![](20.png)\n\n![](21.png)\n\n8、尝试利用 Servlet API 添加购物车功能，在工程 struts-prj2 的 cn.edu.zjut.bean 包中创建 `Item.java` 用于记录商品信息\n\n9、在工程 struts-prj2 的 cn.edu.zjut.bean 包中创建 `ShopppingCart.java` 用于记录用户的购物车信息，为简化操作，在购物车的构造函数中加入商品信息 \n\n10、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `login.jsp `页面， 观察并记录运行结果。\n\n![](22.png)\n","slug":"Action_Experiment","published":1,"updated":"2020-03-22T12:57:22.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcive9n00007cv6b644bavw1","content":"<p>包含 控制器组件 Action 知识梳理、实验步骤、实验整理方面的总结。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"知识梳理\"><a href=\"#知识梳理\" class=\"headerlink\" title=\"知识梳理\"></a>知识梳理</h2><p>1、Action 类中的默认方法名是 execute()方法，可以被自动调用； </p>\n<p>2、在 Action 中也允许定义其它方法名，可以同时定义多个方法，分别处理不同的逻辑；</p>\n<p>3、当 Action 中使用了自定义方法，则该 Action 就需要特定的配置，一般有四种调用方式： </p>\n<ul>\n<li>在 struts.xml 文件中通过 method 属性指定方法名； </li>\n<li>使用动态方法调用方式（DMI）； </li>\n<li>使用提交按钮的 method 属性； </li>\n<li>使用通配符配置 Action； </li>\n</ul>\n<p>4、Action 类是多实例的，Action 类的属性是线程安全的； </p>\n<p>5、在 JSP 页面中，可以通过 Struts2 标签调用 Action 中对应的 getter 方法，从而输出 Action 的属性值； </p>\n<p>6、当一个 Action 处理用户请求结束后，返回一个字符串作为逻辑视图名，再通过 <code>struts.xml</code> 文件中的配置将逻辑视图名与物理视图资源关联起来；Struts2默认提供了一系列的结果类型（<code>struts-default.xml</code> 配置文件的 result-types 标签里列出了所支持的结果类型），结果类型决定了 Action 处理结束后，将调用哪种视图资源来呈现处理结果。</p>\n<p>7、为了让用户开发的 Action 类更规范，Struts2 提供了一个 Action 接口，该接口定义了 Struts2 的 Action 处理类应该实现的规范； </p>\n<p>8、Struts2 还为 Action 接口提供了一个实现类：ActionSupport，该类提供了若干默认方法，包括：默认的处理用户请求的方法（excute()方法）、数据校验的方法、添加校验错误信息的方法、获取国际化信息的方法等，部分重要方法列表如下：</p>\n<p><img src=\"1.png\" alt=\"\"></p>\n<p>9、Struts2 框架提供了校验器和手工编码两种方式对请求参数进行数据校验，当 Action 类继承了 ActionSupport 类，就可以通过定义名为“<ActionClassName>- <ActionAliasName>-validation.xml”的校验规则文件的方法进行校验器校验， 也可以通过重写 ActionSupport 类的 validate()方法或 validateXxx()方法进行手动校验； </p>\n<p>10、在 JSP 页面中使用 Struts2 标签生成的表单，能将域级别的错误信息将自动显示到表单元素处； </p>\n<p>11、在 JSP 页面中使用 fielderror 标签，可以集中显示所有的域级错误信息；使用 actionerror 标签，可以显示所有的 Action 级别错误信息；使用 actionmessage 标签，可以显示 Action 消息； </p>\n<p>12、Struts2 框架中提供了部分内置的类型转换器，可以将请求参数的 String 类型转换成基本数据类型及对应的包装器类型、日期类型、数组类型、集合类型等，当 Action 类继承了 ActionSupport 类，则内置的类型转换器将默认生效，可以直接使用； </p>\n<p>13、如需修改默认的类型转换校验信息，则要在 Action 类的包中声明名为“Action 类名.properties”的局部属性文件； </p>\n<p>14、Struts2 框架同时支持自定义类型转换器，将请求参数转换成任意一种类型。</p>\n<p>15、Struts2 框架中的 Action 类没有与任何 Servlet API 耦合，因此 Action 类可以脱 离 Servlet 容器环境进行单元测试； </p>\n<p>16、ActionContext 是 <code>com.opensymphony.xwork2</code> 包中的一个类，该类表示一个 Action 运行时的上下文；</p>\n<p>17、当 Action 类需要通过请求、会话或上下文存取属性时，可以通过 ActionContext 类完成， 也可以通过实现 Struts 提供的接口：RequestAware、SessionAware 和 ApplicationAware 完成，而不必调用 Servlet API 中的 HttpServletRequest、 HttpSession 和 ServletContext 对象，从而保持 Action 与 Servlet API 的解耦； </p>\n<p>18、在 Action 类中直接访问 Servlet API， 可以通过实现 Struts2 提供的接口： ServletContextAware、ServletRequestAware、ServletResponseAware 完成，也可以通过 ServletActionContext 工具类实现，但 Action 将与 Servlet API 直接耦合。</p>\n<h2 id=\"实验总结\"><a href=\"#实验总结\" class=\"headerlink\" title=\"实验总结\"></a>实验总结</h2><p><strong>1、总结 Action 自定义方法的四种调用和配置方式</strong></p>\n<ul>\n<li>在 <code>struts.xml</code> 文件中通过method属性指定方法名：以actionName.action形式访问，但是要配置多个action较为麻烦</li>\n<li>使用动态方法调用方式：以 actionName!methodName.action 形式访问，要注意UserAction下的login和register方法不能有相同的result返回值</li>\n<li>使用提交按钮的method属性：以actionName!methodName.action形式访问，但是需要在.jsp页面中配置，只能用于表单中</li>\n<li>使用通配符配置Action：以actionName.action形式访问，相对更为普遍的方式</li>\n</ul>\n<p><strong>2、Action 的实例化情况，将 Action 与 Servlet 在实例化情况上进行对比</strong></p>\n<p>在Struts2中每提交一次表单数据Action就被实例化一次，而Servlet在被创建时就被实例化，多次访问页面Servlet不会被多次实例化。</p>\n<p><strong>3、分析 JSP 文件中获取 Action 属性的主要过程</strong></p>\n<p>JSP 文件中获取 Action 属性以JavaBean来实现，所封装的属性和表单的属性一一对应，JavaBean将成为数据传递的载体来进行数据的传递。</p>\n<p><strong>4、观察两次 <code>loginSuccess.jsp</code> 页面输出上的区别，分析原因并记录下来</strong><br>redirect采用客户端重定向的方式，而默认的dispatcher采用服务器内部跳转的方式，所以当result的type属性被设置为redirect时无法获取到Action中的count属性而dispatcher的方式可以。</p>\n<p><strong>5、解压缩 Struts2 的核心包 struts2-core-2.3.15.1.jar，找到 struts-<code>default.xml</code> 配置文件，在其中的 result-types 标签里列出了 Struts2 所支持的结果类型，查找相关资料，总结这些结果类型的作用和特点，并记录下来；</strong></p>\n<ul>\n<li>chain：服务器内部跳转，调用其他action,完成自定义的拦截器堆栈和结果。只能请求action,如果请求视图资源会报错。</li>\n<li>dispatcher: 默认值，服务器内部跳转(跳转到web组件)</li>\n<li>freemarker：使用Freemarker模板引擎呈现一个视图</li>\n<li>httpheader：通过设置HTTP headers和status的值来发送错误信息给客户端。</li>\n<li>redirect: 作客户端重定向(重定向到web组件)</li>\n<li>redirectAction: 作客户端重定向(重定向到其他Action)</li>\n<li>stream:用作下载文件或者在浏览器上显示PDF等文档</li>\n<li>velocity:使用Servlet容器的JspFactory,模拟JSP执行环境,显示Velocity模板,将直接传输到Servlet输出。</li>\n<li>plaintext:响应以plain形式返回给客户端,相当于<code>response.setContentType(&quot;text/plain; charset=&quot;+charSet);</code></li>\n</ul>\n<p><strong>6、总结 Action 类中 validate()方法和 validateXxx()方法的作用</strong></p>\n<ul>\n<li>validate()方法：将对页面表单验证的内容写到validate()方法中，实现验证和业务处理内容的分离，validate()方法会对Action类中所有业务方法起作用</li>\n<li>validateXxx()方法：当多个表单提交到同一个action页面是，validate()方法对所有表单生效，可以使用validateXxx()方法实现对某一个业务的验证，validate()方法和 validateXxx()方法同时存在时都会起作用；validateXxx()方法的调用优于validate()方法</li>\n</ul>\n<p><strong>7、总结使用校验器校验的方法；在 Struts2 的核心包 xwork-core-</strong><br><strong>2.3.15.1.jar\\com\\opensymphony\\xwork2\\validator\\validators路径下找到 default.xml 文件，总结校验规则文件中主要元素的作用和配置方法</strong></p>\n<ul>\n<li>required：必填校验器  </li>\n<li>requiredstring：必填字符串校验器  </li>\n<li>stringlength:字符串长度校验器 </li>\n<li>date:日期校验器  </li>\n<li>expression：表达式校验器  </li>\n<li>int:整数校验器 </li>\n<li>fieldexpression：字段表达式校验器</li>\n<li>url:网址校验器  </li>\n<li>regex：正则表达式校验器 </li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">validators</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">field</span> <span class=\"attr\">name</span>=<span class=\"string\">\"被校验的字段\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">field-validator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"校验器的类型\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"参数名\"</span>&gt;</span>参数值<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">message</span>&gt;</span> 提示信息<span class=\"tag\">&lt;/<span class=\"name\">message</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">field-validator</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">field</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--下一个要验证的字段--&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">validators</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">valiators</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"校验器类型名\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--fieldName固定的 N必须大写--&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fieldName\"</span>&gt;</span>需要被校验的字段<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--下面的param元素可以有0个或者多个--&gt;</span> </span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"参数名\"</span>&gt;</span>参数值<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">message</span> <span class=\"attr\">key</span>=<span class=\"string\">\"I18NKey\"</span>&gt;</span>提示信息<span class=\"tag\">&lt;/<span class=\"name\">message</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">validator</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">validators</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>8、总结在 Action 中使用国际化资源文件的步骤及方法</strong></p>\n<p>首先创建不同语言环境下的.properties文件，在文件中写入不同key字段的国际化资源，使用ActionSupport类的getText方法，该方法可以接受一个name参数，指定国际化资源文件中的key数值，最后使用native2ascii工具进行处理。</p>\n<p><strong>9、总结 Struts2 中常用的内置类型转换器及其使用方法</strong></p>\n<ul>\n<li>String:将int,double,boolean,String类型的数组或java.util.Date类型转换成字符串。</li>\n<li>boolean和Boolean:在字符串与boolean之间转换</li>\n<li>char/Character:在字符串和字符之间转换</li>\n<li>int/Integer,float/Float,long/Long,double/Double:在字符串与数值类型之间进行转换 </li>\n<li>date:在字符串和日期类型之间进行转换，默认格式是:YYYY-MM-DD</li>\n<li>数组:由于数组本身就有类型，可以将多个同名参数，转换到数组中(在之前总结的兴趣爱好多选择，如果你选择多个，同时他们name属性相同就自动变为数组)</li>\n<li>集合:支持将数据保存到List或者Map集合</li>\n</ul>\n<p><strong>10、观察 Action 中访问 Servlet API 的四种方法，总结四种方法的区别，并记录下来</strong></p>\n<ul>\n<li><p>通过ActionContext类访问：<br>使用这种方法访问的前提是必须先要获取ActionContext对象，优点是Action和Servlet API完全解耦，缺点是并不能调用原生的Servlet API</p>\n</li>\n<li><p>Action直接访问:<br>使用这种方法可以调用原生的Servlet API，但是需要实现对应的接口</p>\n</li>\n<li><p>通过ServletActionContext访问:<br>使用ServletActionContext工具类无需实现接口，就可以直接访问Servlet API，但是会加强Action和Servlet API的耦合，不利于Action的再利用。</p>\n</li>\n<li><p>实现ServletContextAware、ServletRequestAware、ServletResponseAware接口访问:<br>Action与Servlet API直接耦合，需要调用ServletContext和ServletRequest等set方法。</p>\n</li>\n</ul>\n<h2 id=\"实验步骤\"><a href=\"#实验步骤\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h2><h3 id=\"基础实验\"><a href=\"#基础实验\" class=\"headerlink\" title=\"基础实验\"></a>基础实验</h3><p>1、新建 Web 工程 struts-prj2，并将 Struts2 中的 8 个核心包添加到工程中； </p>\n<p>2、在 struts-prj2 中新建 login.jsp 页面，作为用户登录的视图；新建 loginFail.jsp 页面，作为登录失败的视图；新建 loginSuccess.jsp 页面，作为登录成功的视图;</p>\n<p>3、在 struts-prj2 中新建 register.jsp 页面，作为用户注册的视图；新建regFail.jsp 页面，作为注册失败的视图；新建 regSuccess.jsp 页面，作为注册成功的视图;</p>\n<p>4、在 struts-prj2 中新建 cn.edu.zjut.bean 包，并在其中创建 UserBean.java，用于 记录用户信息 （可重用“实验二 Struts 基础应用 ”中提高实验里的 UserBean.java 代码）； </p>\n<p>5、在 struts-prj2 中新建 cn.edu.zjut.service 包，并在其中创UserService.java， 用于实现登录逻辑和注册逻辑;</p>\n<p>6、在 struts-prj2 中新建 cn.edu.zjut.action 包，并在其中创建 UserAction.java，定义login()方法和 register()方法</p>\n<p>7、在工程struts-prj2 的 src 目录中创建 struts.xml 文件，用于配置 Action 并设置 页面导航，通过 action 标签中 method 属性指定方法名；</p>\n<p>8、编辑 Web 应用的 web.xml 文件，增加 Struts2 核心 Filter 的配置； </p>\n<p>9、将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 与 register.jsp页面，并记录运行结果； </p>\n<p>10、查找相关资料， 尝试使用 Action 自定义方法的其它三种调用和配置方式：动态方法调用方式（DMI）、提交按钮的 method 属性、通配符配置 Action，并记录关键配置和运行结果； </p>\n<p><img src=\"DMI.png\" alt=\"\"></p>\n<p><img src=\"button.png\" alt=\"\"></p>\n<p><img src=\"uni.png\" alt=\"\"></p>\n<p>11、修改 UserAction.java，增加 UserAction 类的构造方法 UserAction()，增加 count属性，用于测试 Action 的实例化情况</p>\n<p><img src=\"2.png\" alt=\"\"></p>\n<p>12、修改 <code>loginSuccess.jsp</code>，在页面中使用&lt;s:property&gt;标签输出 Action 中的 count 值； </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;s:property value&#x3D;&quot;count&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>13、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 并刷新多次，记录运行结果； </p>\n<p><img src=\"3.png\" alt=\"\"></p>\n<p>14、修改 struts.xml 文件，将 UserAction 的页面导航设置为 redirect 结果类型；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;redirect&quot;&gt;&#x2F;loginSuccess.jsp&lt;&#x2F;result&gt;</span><br></pre></td></tr></table></figure>\n\n<p>15、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察登录成功后 loginSuccess.jsp 页面的输出，并记录下来。</p>\n<p><img src=\"4.png\" alt=\"\"></p>\n<h3 id=\"提高实验\"><a href=\"#提高实验\" class=\"headerlink\" title=\"提高实验\"></a>提高实验</h3><p>1、在 struts-prj2 中修改 UserAction 类，使其继承 ActionSupport 类，并在 UserAction 类中覆盖 ActionSupport 类的 validate()方法， 用于对用户登录的请求参 数 account 和 password 进行校验：若用户名或密码为空，则使用 addFieldError （域 级）添加错误信息。</p>\n<p><img src=\"5.png\" alt=\"\"></p>\n<p>2、修改 <code>struts.xml</code> 文件，在 Action 的配置中增加 validate()方法校验出错时的页面导航<code>&lt;result name=&quot;input&quot;&gt;</code></p>\n<p><img src=\"6.png\" alt=\"\"></p>\n<p>3、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>login.jsp</code> 页面，观察并记录运行结果；</p>\n<p><img src=\"7.png\" alt=\"\"></p>\n<p>4、修改 <code>login.jsp</code> 页面，在表单前增加 fielderror 标签：<code>&lt;s:fielderror/&gt;</code>，再通过浏览器访问 login.jsp 页面，观察并记录运行结果</p>\n<p><img src=\"8.png\" alt=\"\"></p>\n<p>5、修改 UserAction.java，在调用登录逻辑的 login()方法中，对登录情况进行校验： 若登录成功，使用 addActionMessage()方法添加“登录成功！”的 Action 提示消息，若 登录失败，使用 addActionError()方法添加 Action 级别的错误信息</p>\n<p><img src=\"9.png\" alt=\"\"></p>\n<p>6、修改 login.jsp 页面，增加 actionerror 标签（&lt;s:actionerror/&gt;）Action 级别的 错 误信息；修改 <code>loginSuccess.jsp</code>，使用 actionmessage 标签<code>&lt;s:actionmessage/&gt;</code> 显示 Action 提示消息； </p>\n<p>7、修改 <code>struts.xml</code> 文件中用户登录的页面导航设置，将登录失败时转向的页面从 loginFail.jsp 修改为 login.jsp； </p>\n<p>8、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察并记录运行结果；</p>\n<p><img src=\"10.png\" alt=\"\"></p>\n<p>9、在工程 struts-prj2 中创建“UserAction-login-validation.xml”校验规则文件，使 其与 UserAction 类位于同一目录下，配置校验信息，使用校验器对请求参数进行校验 </p>\n<p>10、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察并记录运行结果；</p>\n<p><img src=\"11.png\" alt=\"\"></p>\n<p>11、将 login.jsp、 loginSuccess.jsp、 loginFail.jsp 三个页面进行国际化处理，把需要进行国际化的内容 以键值对的形式写入资源文件 <code>message_zh_CN.properties</code> 和 <code>message_en_US.properties</code> 中； </p>\n<p>12、在资源文件中添加校验信息的键值对， 并使用 native2ASCII 工具，将 <code>message_zh_CN.properties</code> 重新编码，将中文字符都转化为 unicode 码 </p>\n<p>13、在工程 struts-prj2 的 src 目录中创建 <code>struts.properties</code> 文件，通过它加载资源文件 </p>\n<p>14、修改 <code>UserAction.java</code>，使用 ActionSupport 类的 getText()方法，获取国际化资 源文件中的信息 </p>\n<p>15、修改 <code>UserAction-login-validation.xml</code>，获取国际化资源文件中的信息 </p>\n<p>16、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>login.jsp</code> 页面， 观察并记录运行结果；</p>\n<p><img src=\"12.png\" alt=\"\"></p>\n<p>17、修改 <code>UserBean.java</code>，将用于保存注册用户生日的变量类型改为 Date 类型，使用 Struts2 内置的类型转换器对请求参数进行校验； </p>\n<p>18、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>register.jsp</code> 页 面，当用户输入的生日不合法时，观察并记录运行结果；</p>\n<p><img src=\"13.png\" alt=\"\"></p>\n<p>19、在工程 struts-prj2 的 cn.edu.zjut.action 包中创建局部属性文件<code>UserAction.properties</code>，修改类型转换的校验信息，并使用 native2ASCII 工具将 <code>UserAction.properties</code> 重新编码 </p>\n<p>20、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>register.jsp</code> 页 面，当用户输入的生日不合法时，观察并记录运行结果；</p>\n<p><img src=\"na.png\" alt=\"\"></p>\n<p>21、参考实验步骤 9，在工程 struts-prj2 的 cn.edu.zjut.action 包中创建 <code>UserAction-register-validation.xml</code> 文件，增加校验信息的配置，使用校验器对用户 注册的请求参数进行校验，要求注册时两次密码输入相同、email 地址格式符合要求等； </p>\n<p>22、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>register.jsp</code> 页 面，观察并记录运行结果；</p>\n<p><img src=\"14.png\" alt=\"\"></p>\n<p>23、修改 UserAction 类， 将 validate()的方法名改为 validateLogin()， 并增加 validateRegister()方法，参考实验步骤 1，使用手工编码方式对请求参数进行数据校验； </p>\n<p>24、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>register.jsp</code> 页 面，观察并记录运行结果。</p>\n<p><img src=\"15.png\" alt=\"\"></p>\n<h3 id=\"拓展实验\"><a href=\"#拓展实验\" class=\"headerlink\" title=\"拓展实验\"></a>拓展实验</h3><p>1、在 struts-prj2 中修改 UserAction 类，通过 ActionContext 获取请求、会话和上下文对象相关联的 Map 对象来实现存取属性的功能 </p>\n<p>2、修改 <code>loginSuccess.jsp</code> 页面，从请求、会话和上下文对象中获取属性值并显示 在页面中 </p>\n<p>3、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>login.jsp</code> 页面，观察并记录运行结果；</p>\n<p><img src=\"16.png\" alt=\"\"></p>\n<p><strong>每提交一次刷新，次数就会增加一次，只有重新部署访问次数才会重置</strong> </p>\n<p>4、修改 UserAction 类，通过实现 Struts 提供的接口：RequestAware、SessionAware 和 ApplicationAware，获取请求、会话和上下文对象相关联的 Map 对象来实现存取属性的功能 </p>\n<p>5、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>login.jsp</code> 页面，观察并记录运行结果；</p>\n<p><img src=\"17.png\" alt=\"\"></p>\n<p>6、修改 UserAction 类，查找相关资料，尝试通过接口：ServletContextAware、 ServletRequestAware、ServletResponseAware 直接访问 Servlet API，实现以上实验步骤 1-3 的相同功能，重新运行并记录结果；</p>\n<p><img src=\"18.png\" alt=\"\"></p>\n<p><img src=\"19.png\" alt=\"\"></p>\n<p>7、修改 UserAction 类，查找相关资料，尝试通过 ServletActionContext 工具类直接访 问 Servlet API，实现以上实验步骤 1-3 的相同功能，重新运行并记录结果；</p>\n<p><img src=\"20.png\" alt=\"\"></p>\n<p><img src=\"21.png\" alt=\"\"></p>\n<p>8、尝试利用 Servlet API 添加购物车功能，在工程 struts-prj2 的 cn.edu.zjut.bean 包中创建 <code>Item.java</code> 用于记录商品信息</p>\n<p>9、在工程 struts-prj2 的 cn.edu.zjut.bean 包中创建 <code>ShopppingCart.java</code> 用于记录用户的购物车信息，为简化操作，在购物车的构造函数中加入商品信息 </p>\n<p>10、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>login.jsp</code>页面， 观察并记录运行结果。</p>\n<p><img src=\"22.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>包含 控制器组件 Action 知识梳理、实验步骤、实验整理方面的总结。</p>","more":"<h2 id=\"知识梳理\"><a href=\"#知识梳理\" class=\"headerlink\" title=\"知识梳理\"></a>知识梳理</h2><p>1、Action 类中的默认方法名是 execute()方法，可以被自动调用； </p>\n<p>2、在 Action 中也允许定义其它方法名，可以同时定义多个方法，分别处理不同的逻辑；</p>\n<p>3、当 Action 中使用了自定义方法，则该 Action 就需要特定的配置，一般有四种调用方式： </p>\n<ul>\n<li>在 struts.xml 文件中通过 method 属性指定方法名； </li>\n<li>使用动态方法调用方式（DMI）； </li>\n<li>使用提交按钮的 method 属性； </li>\n<li>使用通配符配置 Action； </li>\n</ul>\n<p>4、Action 类是多实例的，Action 类的属性是线程安全的； </p>\n<p>5、在 JSP 页面中，可以通过 Struts2 标签调用 Action 中对应的 getter 方法，从而输出 Action 的属性值； </p>\n<p>6、当一个 Action 处理用户请求结束后，返回一个字符串作为逻辑视图名，再通过 <code>struts.xml</code> 文件中的配置将逻辑视图名与物理视图资源关联起来；Struts2默认提供了一系列的结果类型（<code>struts-default.xml</code> 配置文件的 result-types 标签里列出了所支持的结果类型），结果类型决定了 Action 处理结束后，将调用哪种视图资源来呈现处理结果。</p>\n<p>7、为了让用户开发的 Action 类更规范，Struts2 提供了一个 Action 接口，该接口定义了 Struts2 的 Action 处理类应该实现的规范； </p>\n<p>8、Struts2 还为 Action 接口提供了一个实现类：ActionSupport，该类提供了若干默认方法，包括：默认的处理用户请求的方法（excute()方法）、数据校验的方法、添加校验错误信息的方法、获取国际化信息的方法等，部分重要方法列表如下：</p>\n<p><img src=\"1.png\" alt=\"\"></p>\n<p>9、Struts2 框架提供了校验器和手工编码两种方式对请求参数进行数据校验，当 Action 类继承了 ActionSupport 类，就可以通过定义名为“<ActionClassName>- <ActionAliasName>-validation.xml”的校验规则文件的方法进行校验器校验， 也可以通过重写 ActionSupport 类的 validate()方法或 validateXxx()方法进行手动校验； </p>\n<p>10、在 JSP 页面中使用 Struts2 标签生成的表单，能将域级别的错误信息将自动显示到表单元素处； </p>\n<p>11、在 JSP 页面中使用 fielderror 标签，可以集中显示所有的域级错误信息；使用 actionerror 标签，可以显示所有的 Action 级别错误信息；使用 actionmessage 标签，可以显示 Action 消息； </p>\n<p>12、Struts2 框架中提供了部分内置的类型转换器，可以将请求参数的 String 类型转换成基本数据类型及对应的包装器类型、日期类型、数组类型、集合类型等，当 Action 类继承了 ActionSupport 类，则内置的类型转换器将默认生效，可以直接使用； </p>\n<p>13、如需修改默认的类型转换校验信息，则要在 Action 类的包中声明名为“Action 类名.properties”的局部属性文件； </p>\n<p>14、Struts2 框架同时支持自定义类型转换器，将请求参数转换成任意一种类型。</p>\n<p>15、Struts2 框架中的 Action 类没有与任何 Servlet API 耦合，因此 Action 类可以脱 离 Servlet 容器环境进行单元测试； </p>\n<p>16、ActionContext 是 <code>com.opensymphony.xwork2</code> 包中的一个类，该类表示一个 Action 运行时的上下文；</p>\n<p>17、当 Action 类需要通过请求、会话或上下文存取属性时，可以通过 ActionContext 类完成， 也可以通过实现 Struts 提供的接口：RequestAware、SessionAware 和 ApplicationAware 完成，而不必调用 Servlet API 中的 HttpServletRequest、 HttpSession 和 ServletContext 对象，从而保持 Action 与 Servlet API 的解耦； </p>\n<p>18、在 Action 类中直接访问 Servlet API， 可以通过实现 Struts2 提供的接口： ServletContextAware、ServletRequestAware、ServletResponseAware 完成，也可以通过 ServletActionContext 工具类实现，但 Action 将与 Servlet API 直接耦合。</p>\n<h2 id=\"实验总结\"><a href=\"#实验总结\" class=\"headerlink\" title=\"实验总结\"></a>实验总结</h2><p><strong>1、总结 Action 自定义方法的四种调用和配置方式</strong></p>\n<ul>\n<li>在 <code>struts.xml</code> 文件中通过method属性指定方法名：以actionName.action形式访问，但是要配置多个action较为麻烦</li>\n<li>使用动态方法调用方式：以 actionName!methodName.action 形式访问，要注意UserAction下的login和register方法不能有相同的result返回值</li>\n<li>使用提交按钮的method属性：以actionName!methodName.action形式访问，但是需要在.jsp页面中配置，只能用于表单中</li>\n<li>使用通配符配置Action：以actionName.action形式访问，相对更为普遍的方式</li>\n</ul>\n<p><strong>2、Action 的实例化情况，将 Action 与 Servlet 在实例化情况上进行对比</strong></p>\n<p>在Struts2中每提交一次表单数据Action就被实例化一次，而Servlet在被创建时就被实例化，多次访问页面Servlet不会被多次实例化。</p>\n<p><strong>3、分析 JSP 文件中获取 Action 属性的主要过程</strong></p>\n<p>JSP 文件中获取 Action 属性以JavaBean来实现，所封装的属性和表单的属性一一对应，JavaBean将成为数据传递的载体来进行数据的传递。</p>\n<p><strong>4、观察两次 <code>loginSuccess.jsp</code> 页面输出上的区别，分析原因并记录下来</strong><br>redirect采用客户端重定向的方式，而默认的dispatcher采用服务器内部跳转的方式，所以当result的type属性被设置为redirect时无法获取到Action中的count属性而dispatcher的方式可以。</p>\n<p><strong>5、解压缩 Struts2 的核心包 struts2-core-2.3.15.1.jar，找到 struts-<code>default.xml</code> 配置文件，在其中的 result-types 标签里列出了 Struts2 所支持的结果类型，查找相关资料，总结这些结果类型的作用和特点，并记录下来；</strong></p>\n<ul>\n<li>chain：服务器内部跳转，调用其他action,完成自定义的拦截器堆栈和结果。只能请求action,如果请求视图资源会报错。</li>\n<li>dispatcher: 默认值，服务器内部跳转(跳转到web组件)</li>\n<li>freemarker：使用Freemarker模板引擎呈现一个视图</li>\n<li>httpheader：通过设置HTTP headers和status的值来发送错误信息给客户端。</li>\n<li>redirect: 作客户端重定向(重定向到web组件)</li>\n<li>redirectAction: 作客户端重定向(重定向到其他Action)</li>\n<li>stream:用作下载文件或者在浏览器上显示PDF等文档</li>\n<li>velocity:使用Servlet容器的JspFactory,模拟JSP执行环境,显示Velocity模板,将直接传输到Servlet输出。</li>\n<li>plaintext:响应以plain形式返回给客户端,相当于<code>response.setContentType(&quot;text/plain; charset=&quot;+charSet);</code></li>\n</ul>\n<p><strong>6、总结 Action 类中 validate()方法和 validateXxx()方法的作用</strong></p>\n<ul>\n<li>validate()方法：将对页面表单验证的内容写到validate()方法中，实现验证和业务处理内容的分离，validate()方法会对Action类中所有业务方法起作用</li>\n<li>validateXxx()方法：当多个表单提交到同一个action页面是，validate()方法对所有表单生效，可以使用validateXxx()方法实现对某一个业务的验证，validate()方法和 validateXxx()方法同时存在时都会起作用；validateXxx()方法的调用优于validate()方法</li>\n</ul>\n<p><strong>7、总结使用校验器校验的方法；在 Struts2 的核心包 xwork-core-</strong><br><strong>2.3.15.1.jar\\com\\opensymphony\\xwork2\\validator\\validators路径下找到 default.xml 文件，总结校验规则文件中主要元素的作用和配置方法</strong></p>\n<ul>\n<li>required：必填校验器  </li>\n<li>requiredstring：必填字符串校验器  </li>\n<li>stringlength:字符串长度校验器 </li>\n<li>date:日期校验器  </li>\n<li>expression：表达式校验器  </li>\n<li>int:整数校验器 </li>\n<li>fieldexpression：字段表达式校验器</li>\n<li>url:网址校验器  </li>\n<li>regex：正则表达式校验器 </li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">validators</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">field</span> <span class=\"attr\">name</span>=<span class=\"string\">\"被校验的字段\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">field-validator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"校验器的类型\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"参数名\"</span>&gt;</span>参数值<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">message</span>&gt;</span> 提示信息<span class=\"tag\">&lt;/<span class=\"name\">message</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">field-validator</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">field</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--下一个要验证的字段--&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">validators</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">valiators</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"校验器类型名\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--fieldName固定的 N必须大写--&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fieldName\"</span>&gt;</span>需要被校验的字段<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--下面的param元素可以有0个或者多个--&gt;</span> </span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"参数名\"</span>&gt;</span>参数值<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">message</span> <span class=\"attr\">key</span>=<span class=\"string\">\"I18NKey\"</span>&gt;</span>提示信息<span class=\"tag\">&lt;/<span class=\"name\">message</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">validator</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">validators</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>8、总结在 Action 中使用国际化资源文件的步骤及方法</strong></p>\n<p>首先创建不同语言环境下的.properties文件，在文件中写入不同key字段的国际化资源，使用ActionSupport类的getText方法，该方法可以接受一个name参数，指定国际化资源文件中的key数值，最后使用native2ascii工具进行处理。</p>\n<p><strong>9、总结 Struts2 中常用的内置类型转换器及其使用方法</strong></p>\n<ul>\n<li>String:将int,double,boolean,String类型的数组或java.util.Date类型转换成字符串。</li>\n<li>boolean和Boolean:在字符串与boolean之间转换</li>\n<li>char/Character:在字符串和字符之间转换</li>\n<li>int/Integer,float/Float,long/Long,double/Double:在字符串与数值类型之间进行转换 </li>\n<li>date:在字符串和日期类型之间进行转换，默认格式是:YYYY-MM-DD</li>\n<li>数组:由于数组本身就有类型，可以将多个同名参数，转换到数组中(在之前总结的兴趣爱好多选择，如果你选择多个，同时他们name属性相同就自动变为数组)</li>\n<li>集合:支持将数据保存到List或者Map集合</li>\n</ul>\n<p><strong>10、观察 Action 中访问 Servlet API 的四种方法，总结四种方法的区别，并记录下来</strong></p>\n<ul>\n<li><p>通过ActionContext类访问：<br>使用这种方法访问的前提是必须先要获取ActionContext对象，优点是Action和Servlet API完全解耦，缺点是并不能调用原生的Servlet API</p>\n</li>\n<li><p>Action直接访问:<br>使用这种方法可以调用原生的Servlet API，但是需要实现对应的接口</p>\n</li>\n<li><p>通过ServletActionContext访问:<br>使用ServletActionContext工具类无需实现接口，就可以直接访问Servlet API，但是会加强Action和Servlet API的耦合，不利于Action的再利用。</p>\n</li>\n<li><p>实现ServletContextAware、ServletRequestAware、ServletResponseAware接口访问:<br>Action与Servlet API直接耦合，需要调用ServletContext和ServletRequest等set方法。</p>\n</li>\n</ul>\n<h2 id=\"实验步骤\"><a href=\"#实验步骤\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h2><h3 id=\"基础实验\"><a href=\"#基础实验\" class=\"headerlink\" title=\"基础实验\"></a>基础实验</h3><p>1、新建 Web 工程 struts-prj2，并将 Struts2 中的 8 个核心包添加到工程中； </p>\n<p>2、在 struts-prj2 中新建 login.jsp 页面，作为用户登录的视图；新建 loginFail.jsp 页面，作为登录失败的视图；新建 loginSuccess.jsp 页面，作为登录成功的视图;</p>\n<p>3、在 struts-prj2 中新建 register.jsp 页面，作为用户注册的视图；新建regFail.jsp 页面，作为注册失败的视图；新建 regSuccess.jsp 页面，作为注册成功的视图;</p>\n<p>4、在 struts-prj2 中新建 cn.edu.zjut.bean 包，并在其中创建 UserBean.java，用于 记录用户信息 （可重用“实验二 Struts 基础应用 ”中提高实验里的 UserBean.java 代码）； </p>\n<p>5、在 struts-prj2 中新建 cn.edu.zjut.service 包，并在其中创UserService.java， 用于实现登录逻辑和注册逻辑;</p>\n<p>6、在 struts-prj2 中新建 cn.edu.zjut.action 包，并在其中创建 UserAction.java，定义login()方法和 register()方法</p>\n<p>7、在工程struts-prj2 的 src 目录中创建 struts.xml 文件，用于配置 Action 并设置 页面导航，通过 action 标签中 method 属性指定方法名；</p>\n<p>8、编辑 Web 应用的 web.xml 文件，增加 Struts2 核心 Filter 的配置； </p>\n<p>9、将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 与 register.jsp页面，并记录运行结果； </p>\n<p>10、查找相关资料， 尝试使用 Action 自定义方法的其它三种调用和配置方式：动态方法调用方式（DMI）、提交按钮的 method 属性、通配符配置 Action，并记录关键配置和运行结果； </p>\n<p><img src=\"DMI.png\" alt=\"\"></p>\n<p><img src=\"button.png\" alt=\"\"></p>\n<p><img src=\"uni.png\" alt=\"\"></p>\n<p>11、修改 UserAction.java，增加 UserAction 类的构造方法 UserAction()，增加 count属性，用于测试 Action 的实例化情况</p>\n<p><img src=\"2.png\" alt=\"\"></p>\n<p>12、修改 <code>loginSuccess.jsp</code>，在页面中使用&lt;s:property&gt;标签输出 Action 中的 count 值； </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;s:property value&#x3D;&quot;count&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>13、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 并刷新多次，记录运行结果； </p>\n<p><img src=\"3.png\" alt=\"\"></p>\n<p>14、修改 struts.xml 文件，将 UserAction 的页面导航设置为 redirect 结果类型；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;redirect&quot;&gt;&#x2F;loginSuccess.jsp&lt;&#x2F;result&gt;</span><br></pre></td></tr></table></figure>\n\n<p>15、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察登录成功后 loginSuccess.jsp 页面的输出，并记录下来。</p>\n<p><img src=\"4.png\" alt=\"\"></p>\n<h3 id=\"提高实验\"><a href=\"#提高实验\" class=\"headerlink\" title=\"提高实验\"></a>提高实验</h3><p>1、在 struts-prj2 中修改 UserAction 类，使其继承 ActionSupport 类，并在 UserAction 类中覆盖 ActionSupport 类的 validate()方法， 用于对用户登录的请求参 数 account 和 password 进行校验：若用户名或密码为空，则使用 addFieldError （域 级）添加错误信息。</p>\n<p><img src=\"5.png\" alt=\"\"></p>\n<p>2、修改 <code>struts.xml</code> 文件，在 Action 的配置中增加 validate()方法校验出错时的页面导航<code>&lt;result name=&quot;input&quot;&gt;</code></p>\n<p><img src=\"6.png\" alt=\"\"></p>\n<p>3、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>login.jsp</code> 页面，观察并记录运行结果；</p>\n<p><img src=\"7.png\" alt=\"\"></p>\n<p>4、修改 <code>login.jsp</code> 页面，在表单前增加 fielderror 标签：<code>&lt;s:fielderror/&gt;</code>，再通过浏览器访问 login.jsp 页面，观察并记录运行结果</p>\n<p><img src=\"8.png\" alt=\"\"></p>\n<p>5、修改 UserAction.java，在调用登录逻辑的 login()方法中，对登录情况进行校验： 若登录成功，使用 addActionMessage()方法添加“登录成功！”的 Action 提示消息，若 登录失败，使用 addActionError()方法添加 Action 级别的错误信息</p>\n<p><img src=\"9.png\" alt=\"\"></p>\n<p>6、修改 login.jsp 页面，增加 actionerror 标签（&lt;s:actionerror/&gt;）Action 级别的 错 误信息；修改 <code>loginSuccess.jsp</code>，使用 actionmessage 标签<code>&lt;s:actionmessage/&gt;</code> 显示 Action 提示消息； </p>\n<p>7、修改 <code>struts.xml</code> 文件中用户登录的页面导航设置，将登录失败时转向的页面从 loginFail.jsp 修改为 login.jsp； </p>\n<p>8、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察并记录运行结果；</p>\n<p><img src=\"10.png\" alt=\"\"></p>\n<p>9、在工程 struts-prj2 中创建“UserAction-login-validation.xml”校验规则文件，使 其与 UserAction 类位于同一目录下，配置校验信息，使用校验器对请求参数进行校验 </p>\n<p>10、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察并记录运行结果；</p>\n<p><img src=\"11.png\" alt=\"\"></p>\n<p>11、将 login.jsp、 loginSuccess.jsp、 loginFail.jsp 三个页面进行国际化处理，把需要进行国际化的内容 以键值对的形式写入资源文件 <code>message_zh_CN.properties</code> 和 <code>message_en_US.properties</code> 中； </p>\n<p>12、在资源文件中添加校验信息的键值对， 并使用 native2ASCII 工具，将 <code>message_zh_CN.properties</code> 重新编码，将中文字符都转化为 unicode 码 </p>\n<p>13、在工程 struts-prj2 的 src 目录中创建 <code>struts.properties</code> 文件，通过它加载资源文件 </p>\n<p>14、修改 <code>UserAction.java</code>，使用 ActionSupport 类的 getText()方法，获取国际化资 源文件中的信息 </p>\n<p>15、修改 <code>UserAction-login-validation.xml</code>，获取国际化资源文件中的信息 </p>\n<p>16、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>login.jsp</code> 页面， 观察并记录运行结果；</p>\n<p><img src=\"12.png\" alt=\"\"></p>\n<p>17、修改 <code>UserBean.java</code>，将用于保存注册用户生日的变量类型改为 Date 类型，使用 Struts2 内置的类型转换器对请求参数进行校验； </p>\n<p>18、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>register.jsp</code> 页 面，当用户输入的生日不合法时，观察并记录运行结果；</p>\n<p><img src=\"13.png\" alt=\"\"></p>\n<p>19、在工程 struts-prj2 的 cn.edu.zjut.action 包中创建局部属性文件<code>UserAction.properties</code>，修改类型转换的校验信息，并使用 native2ASCII 工具将 <code>UserAction.properties</code> 重新编码 </p>\n<p>20、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>register.jsp</code> 页 面，当用户输入的生日不合法时，观察并记录运行结果；</p>\n<p><img src=\"na.png\" alt=\"\"></p>\n<p>21、参考实验步骤 9，在工程 struts-prj2 的 cn.edu.zjut.action 包中创建 <code>UserAction-register-validation.xml</code> 文件，增加校验信息的配置，使用校验器对用户 注册的请求参数进行校验，要求注册时两次密码输入相同、email 地址格式符合要求等； </p>\n<p>22、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>register.jsp</code> 页 面，观察并记录运行结果；</p>\n<p><img src=\"14.png\" alt=\"\"></p>\n<p>23、修改 UserAction 类， 将 validate()的方法名改为 validateLogin()， 并增加 validateRegister()方法，参考实验步骤 1，使用手工编码方式对请求参数进行数据校验； </p>\n<p>24、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>register.jsp</code> 页 面，观察并记录运行结果。</p>\n<p><img src=\"15.png\" alt=\"\"></p>\n<h3 id=\"拓展实验\"><a href=\"#拓展实验\" class=\"headerlink\" title=\"拓展实验\"></a>拓展实验</h3><p>1、在 struts-prj2 中修改 UserAction 类，通过 ActionContext 获取请求、会话和上下文对象相关联的 Map 对象来实现存取属性的功能 </p>\n<p>2、修改 <code>loginSuccess.jsp</code> 页面，从请求、会话和上下文对象中获取属性值并显示 在页面中 </p>\n<p>3、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>login.jsp</code> 页面，观察并记录运行结果；</p>\n<p><img src=\"16.png\" alt=\"\"></p>\n<p><strong>每提交一次刷新，次数就会增加一次，只有重新部署访问次数才会重置</strong> </p>\n<p>4、修改 UserAction 类，通过实现 Struts 提供的接口：RequestAware、SessionAware 和 ApplicationAware，获取请求、会话和上下文对象相关联的 Map 对象来实现存取属性的功能 </p>\n<p>5、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>login.jsp</code> 页面，观察并记录运行结果；</p>\n<p><img src=\"17.png\" alt=\"\"></p>\n<p>6、修改 UserAction 类，查找相关资料，尝试通过接口：ServletContextAware、 ServletRequestAware、ServletResponseAware 直接访问 Servlet API，实现以上实验步骤 1-3 的相同功能，重新运行并记录结果；</p>\n<p><img src=\"18.png\" alt=\"\"></p>\n<p><img src=\"19.png\" alt=\"\"></p>\n<p>7、修改 UserAction 类，查找相关资料，尝试通过 ServletActionContext 工具类直接访 问 Servlet API，实现以上实验步骤 1-3 的相同功能，重新运行并记录结果；</p>\n<p><img src=\"20.png\" alt=\"\"></p>\n<p><img src=\"21.png\" alt=\"\"></p>\n<p>8、尝试利用 Servlet API 添加购物车功能，在工程 struts-prj2 的 cn.edu.zjut.bean 包中创建 <code>Item.java</code> 用于记录商品信息</p>\n<p>9、在工程 struts-prj2 的 cn.edu.zjut.bean 包中创建 <code>ShopppingCart.java</code> 用于记录用户的购物车信息，为简化操作，在购物车的构造函数中加入商品信息 </p>\n<p>10、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>login.jsp</code>页面， 观察并记录运行结果。</p>\n<p><img src=\"22.png\" alt=\"\"></p>"},{"title":"数字生活启示录","date":"2020-04-11T18:43:20.000Z","copyright":true,"_content":"\n\n\n尼古拉·尼葛洛庞帝在他1995年发布的的著作《Being Digital》中描绘了未来数字生活的诸多情景，其中VR、AI、智能家居、个人助理等，无一不是近几年研究的热门领域，这些技术的出现深深影响了现代人的日常生活，换句话说，数字生活成为了当今时代人们生活的一部分。\n\n<!--more-->\n\n![images.stephenfang.xyz/mweb/s1496668.jpg](http://images.stephenfang.xyz/mweb/s1496668.jpg)\n\n尼古拉·尼葛洛庞帝的《数字化生存》封面\n\n## 拥抱数字生活\n\n当我和朋友谈及「数字生活」这个话题的时候，我们认为，每个人都有自己处理数字生活的方式，但没有一个客观固定的标准。我们每天都会在数码设备上花费不少的时间，但如何妥善安排自己的数码生活却不被重视。\n\n本文开篇之所以用拥抱一词，是因为笔者认为在当今时代，大部分人对于数字内容的汲取和吸收并不是一个被动的过程，相反，是一个开放、主动接受的过程。如何让自己个性化的需求得到满足，其背后的思路是拥抱数字生活的关键。\n\n本文将以乱序的方式回忆和总结我所体验过的数字生活，希望我的这篇文章能给予你一点启发，让你能够以正确的打开方式享受数字时代带来的便利。当然，你完全可以把本文看作敝人的碎碎念，若有不合您想法的观点还请包容。\n\n## 开始数字生活\n\n作为一个平凡人，我勉强认为自己比较擅长鼓捣手机，并在鼓捣的过程中有所感悟。然而我也走过一些弯路，曾经下载过盗版的App，执着于哪款手机更优，庆幸的是这些我的行为或想法能够得到纠正，日常使用习惯也进而得到了培养。\n\n![images.stephenfang.xyz/mweb/C68FD435-10A6-449C-8DEB-329A9F4BEC24.jpeg](http://images.stephenfang.xyz/mweb/C68FD435-10A6-449C-8DEB-329A9F4BEC24.jpeg)\n\n我所折腾过的一些数码物件\n\n![images.stephenfang.xyz/mweb/Untitled.png](http://images.stephenfang.xyz/mweb/Untitled.png)\n\n我所折腾过的一些数码物件\n\n引用经济学的一个重要原则，\n\n> “Rational people think at the margin“\n\n即理性的人会从边际去考虑问题。假设你是理性的人，当你在决定更新一台设备时。会尝试从边际成本考虑它会带给你的价值，若你的手头不充裕且更新只能给你的工作流带来5%的提升，那大可不必做这样的决断。手机就是现代人的工具，其最大的价值为其存储的数据带来的价值，你应该做的是让你的手机为你创造价值，而不是被其禁锢。\n\n作为一个工具，那手机必然存在其好处及劣处，且每个人对于手机都有不同的使用习惯和评价标准，你完全可以认为某手机是你当下最好的选择，但他人也完全有理由认为你的看法是错误的。即使你是某个品牌的死忠，也应该客观看待其他厂商推出的各类产品，所谓“信仰”只是一种调侃，而为黑而黑更是没有意义。手机是如此，生活中的许多琐事亦是如此。\n\n![images.stephenfang.xyz/mweb/IMG_1485.jpeg](http://images.stephenfang.xyz/mweb/IMG_1485.jpeg)\n\n我的iPod touch\n\n我的真正意义上的数字生活起始于2010年购买的一台iPod touch (4th genration)。我至今仍清楚记得它的配置：阉割版的A4 芯片、3.5 英寸 Retina 屏幕、iOS 4、聊胜于无的摄像头、8GB的存储空间。当时的我对于 Apple 生态一无所知，同步iPod中的内容也是由一家Apple授权店的小哥帮忙完成。\n\n在使用iPod touch的过程中，我逐渐熟悉Apple的生态系统，令我记忆深刻的体验有第一次购买付费App，第一次给设备越狱，第一次在设备上玩在线联机游戏、第一次使用云服务等等。在iPod touch之后我对数码产品的兴趣愈发浓厚，且不仅仅限于iOS设备、Android设备，几年间，手中的设备换了一台又一台，安装的App换了一批又一批，我也逐步走进与计算机打交道的行业。\n\n## 关于App的回忆\n\nApp Store是Apple生态的一个重要组成部分，相当一部分人选择Apple的平台看重的是优秀的iOS独占App。和很多人一样，我购买iPod touch的理由很大程度上是为了游戏。十年后的今天，我的手机中鲜有游戏，虽然有时也会在闲暇时间与朋友来上两把吃鸡，但是再也不会像以前一样为了打通Angry Birds费尽心思。\n\n![images.stephenfang.xyz/mweb/06CBDF84-B70A-4412-8F67-2D3C7CFD4E85.jpeg](http://images.stephenfang.xyz/mweb/06CBDF84-B70A-4412-8F67-2D3C7CFD4E85.jpeg)\n\niOS 4时代的 App Store\n\niOS 4时代的游戏以单机、逻辑简单的小游戏为主，但也不乏许多知名的大作，较为出名的有Infinity Blade系列、Asphalt系列，我当时最喜欢的是Gameloft开发的Rainbow Six手游，其最大的特色就是能够以蓝牙联机的方式与好友对战，还记得每天中午都会和班上的同学去学校的阁楼玩几盘联机游戏。然而Cut the Rope、Fruit Ninja、Angry Birds、Doodle Jump才是我对于那个时期最真实的回忆。\n\n## 关于效率\n\n现在的我会仍会刻意给所有的App分门别类，然而刚接触 iOS 时我总把首屏留给系统默认App，并且总是在结束App的使用后习惯性将它在后台清除，同时我还会出于自己对 Google 的向往，在自己的手机中安装所有 Google 系的App，这些行为在现在看来是相当愚蠢。\n\n![images.stephenfang.xyz/mweb/0A5E372C-83FF-429D-8B1D-12749EEB60DE.jpeg](http://images.stephenfang.xyz/mweb/0A5E372C-83FF-429D-8B1D-12749EEB60DE.jpeg)\n\niOS 6时代我的 iPod touch\n\n![images.stephenfang.xyz/mweb/604EE641-9BC7-48BA-BC4B-06DE45144E0A.jpeg](http://images.stephenfang.xyz/mweb/604EE641-9BC7-48BA-BC4B-06DE45144E0A.jpeg)\n\n装满所有 Google 系 App 的 iPhone\n\n首先，更好的应用排布会带来更高的利用效率，试想一下你需要使用某个App记录信息，然而在不使用搜索的情况下每次都要滚动到第二屏，甚至还需要点开一个文件夹才能打开它，还有找不到App的风险，这势必会浪费一部分时间，让你显得手忙脚乱，可能你连需要记录什么都忘了。\n\n![images.stephenfang.xyz/mweb/s26872396.jpg](http://images.stephenfang.xyz/mweb/s26872396.jpg)\n\n山下英子的断舍离封面\n\n另外一种想法是我在读了《断舍离》这本书后感悟的，首先简要说明这本书的一个重要观点：\n\n- 断舍离非常简单，只需要以自己而不是物品为主角，去思考什么东西最适合现在的自己。只要是不符合这两个标准的东西，就立即淘汰或是送人。\n\n反映在数字生活中即为保留最近需要用到的App，删除不必须要的内容。目前我在我的手机上保留了80个左右的App，显然我不可能每天用到其中的绝大多数App。有统计学的数据显示，智能手机用户平均每个月将会使用超过30个软件，而平均到每天，将会有10个软件被用户登录。\n\n对于我而言，不会用到的App可以看作是手机的一种“负担”，把它们从我的主屏幕中删除可以看似一种“解脱”，你可以将其看做为一种“伪哲学“，正如许多人对于《断舍离》这本书的看法。时刻保持自己的设备有最高的效率面对工作或学习有如时刻使自己保持清醒的头脑面对生活。\n\n## 关于正版\n\n前几天听说最新版本的 iOS 系统再次能够「越狱」了，然而对此新闻感到兴奋的人寥寥无几。从某种角度来说，「越狱」也是当时导致盗版猖獗的一大原因，然而「越狱」的最重要意义却是让 iOS 设备更具个性化，如 iOS 5 时期我会通过「越狱」去为自己的设备增加通知中心的功能，在 iOS 4 时期我会通过「越狱」给我的iPod touch增加虚拟内存。\n\n![http://images.stephenfang.xyz/mweb/223F237B-B3BB-4BF5-8361-F037537C98EC.jpeg](http://images.stephenfang.xyz/mweb/223F237B-B3BB-4BF5-8361-F037537C98EC.jpeg)\n\n“Jailbreak”界面\n\n![http://images.stephenfang.xyz/mweb/C215DC38-4A0D-42F6-94A8-37EEE9EBD3C6.jpeg](http://images.stephenfang.xyz/mweb/C215DC38-4A0D-42F6-94A8-37EEE9EBD3C6.jpeg)\n\n“奔跑的大菠萝”\n\niOS 的付费购买体系目前已经十分成熟，你可以通过各种支付方式获得你需要的App。在没有支付能力的小学时期我可能会为了一款想玩的游戏下载盗版，但我深知这样的想法是错误的，我会告诉自己我需要某一个APP，它为我创造了价值，我乐意为其付费，于是具备消费能力之后我督促自己禁止使用盗版的内容。\n\n为内容付费是一种闭环，没有投入就没有产出，如果开发者的投入没有回报，很可能导致的结果就是软件停止更新，或比喻为劣币驱逐良币，试想一下应用商店充斥着隐含各种广告的App，相信这种局面都是你我所不愿意看到的。自然，我不会去鄙视用盗版的人，他们很可能是迫不得已，诚然，一些大公司的营收不会因为缺少了一部分人的支出而受重大影响，但我认为用着盗版还大肆夸耀就有些不合情理了。\n\n微软推出的 Office 365 是一个很有趣的例子，在高中的时候我开始每年为 Office 365 付费，我完全厌倦了 WPS 恼人的广告机制，能够用到正版 Office 令我十分开心，然而这样的行为当时为许多人所不解。近年来使用正版 Office 的成本不断降低，愿意使用正版的人群也逐渐壮大，微软也在努力提升该产品的价值，现在你能够以每年 70多元的价格购买到 Office 套件的全部功能，如果你确定Office能够提供你工作中的便利，那么其价格完全不构成经济上的负担，何况这其中还包括完善的云服务，我认为这是消费者与产品提供商实现的一种协调。当然如果你使用的是Mac，你完全可以用 Apple 的 iWork 套件替代 Office 的工作流，总是有合适的方案替代最坏的使用盗版的方案。你如果觉得购买 Mac 上的 Apps 太贵，可以选择订阅性质的 Setapp，只要你对于设备生产力的界定在“爱奇艺“之上，这些举措都是有意义的。\n\n![http://images.stephenfang.xyz/mweb/Xnip2020-04-12_00-33-00.png](http://images.stephenfang.xyz/mweb/Xnip2020-04-12_00-33-00.png)\n\n采用订阅收费制度的Setapp\n\n我想表达的并不是一种说教，更多的是一种意识。你可能喜欢观看美剧，但出于各方面原因你无法使用到网飞等平台的服务，但你可以选择的是想办法使用到这种服务，正可谓“办法总比困难多”，或者你可以在某些方面支持你所喜爱的作品。最次的方案则是“偷偷地看“，不是为自己享有盗版而感到自豪。你愿意为一杯奶茶带来的味蕾刺激付费，却不愿意为能够提升你的效率、生活品质的内容而付费，这听起来是不是很荒谬？\n\n## 关于多样性\n\n“如果你想要学习一些自己感兴趣的内容，你必须经历一段痛苦的，学习自己不想学习内容的经历。“这是我对于学习这一件事最真切的感悟。在互联网时代，互联网就是你最好的老师，你可以通过互联网检索到你任何感兴趣的问题的答案，同时你也可以通过互联网学习到任何你想学习的内容，尽管你搜索到的内容很大几率是错误的，且检索到的课程质量可能良莠不齐，但并不影响这个结论的正确性，你需要做的是提高自己辨别正误信息的能力以及提高自己接受新事物的能力。\n\n回到这段开头这一句话，当你拥有了学习自己所喜欢内容的时间和机会，不应该以“没有空”等类似理由搪塞自己，而应该通过互联网的力量让自己的求知欲得到满足。当你不理解思维导图如何完成就尝试去学习和实践它，当你对咖啡文化感兴趣就去了解它的历史和发展状况，当你充满求知欲时就刷上一天的维基百科。\n\n我的一位高中同学对任何知识都满怀好奇，无论是他所不熟悉的电竞领域还是他所了解的电影市场，凡是能够引起讨论的内容他都略知一二，我暂且认定他的学习方法称之为“杂学”。起初我对这种学习方式不以为然，认为学习的重要方法在于精而不是杂，渐渐地，我开始觉得这种方式在信息爆炸的年代存在其合理性。\n\n![http://images.stephenfang.xyz/mweb/s1429010.jpg](http://images.stephenfang.xyz/mweb/s1429010.jpg)\n\n许多人的理财启蒙读物——《富爸爸，穷爸爸》\n\n首先，他的学习内容仍然是以兴趣为第一导向，对于乏味、无用的内容他一概不学，确保了学习过程的积极性和主动性；其次，在阅读了《富爸爸穷爸爸》这本书后，我认为当时我当时的观点与书中穷爸爸对于停留在某种体制内、在某一方面成为专家的观点无异，而书中的富爸爸则倡导学习各方的知识，如财务知识、交谈经验等，这一出发点对该书的作者产生了深刻的影响，促成了其人生中的诸多机会，同时也造就了该书作者的经济地位——这也就是我想说的，求知欲以及交叉学科知识产生的影响。\n\n![http://images.stephenfang.xyz/mweb/999FB844-A92A-4852-BA27-6BC0091DCB8C.jpg](http://images.stephenfang.xyz/mweb/999FB844-A92A-4852-BA27-6BC0091DCB8C.jpg)\n\n12年我的音乐资料库\n\n人在学习和探索的过程中很可能会推翻许多固有的认知，很多年以前，我曾对日本的音乐抱有偏见，但通过数年对于日本音乐、文化的学习，我了解到坂本龙一、玉置浩二这样的大师，喜爱上re:plus这样的小众乐队，痴迷于押尾光太郎的指弹，见证过Aimer的迅速发展，我所学到的一切都引起了我对日本音乐的尊重。然而不仅仅是音乐，我对很多事物的看法都在互联网的影响下产生很大改观。我在本文最后呼吁大家走出“XX无用论”的泥淖，大胆拥抱新鲜事物，积极表达求知欲望，如尝试「GTD工作法」、「量化自我」等方法将大有裨益，至于某些具体的方法论不在此文中引述，读者可以期待本人未来的分享。\n\n## 尾声\n\n本文至此就告一段落了，显然，笔者想表达的观点和内容还有很多，对于具体的方法论会在之后的文章阐述，还请继续期待和支持。\n\n### 引用\n\n[https://bi.qq.com/a/20170613/059340.htm](https://bi.qq.com/a/20170613/059340.htm)\n\n[https://en.wikiversity.org/wiki/10_Principles_of_Economics](https://en.wikiversity.org/wiki/10_Principles_of_Economics)\n\n[https://www.ifanr.com/app/727935](https://www.ifanr.com/app/727935)","source":"_posts/Digital_Life.md","raw":"---\ntitle: 数字生活启示录\ndate: 2020-04-12 02:43:20\ncategories: \n- tech\ntags: \n- iOS\n- 数字生活\n- 杂文\ncopyright: true\n---\n\n\n\n尼古拉·尼葛洛庞帝在他1995年发布的的著作《Being Digital》中描绘了未来数字生活的诸多情景，其中VR、AI、智能家居、个人助理等，无一不是近几年研究的热门领域，这些技术的出现深深影响了现代人的日常生活，换句话说，数字生活成为了当今时代人们生活的一部分。\n\n<!--more-->\n\n![images.stephenfang.xyz/mweb/s1496668.jpg](http://images.stephenfang.xyz/mweb/s1496668.jpg)\n\n尼古拉·尼葛洛庞帝的《数字化生存》封面\n\n## 拥抱数字生活\n\n当我和朋友谈及「数字生活」这个话题的时候，我们认为，每个人都有自己处理数字生活的方式，但没有一个客观固定的标准。我们每天都会在数码设备上花费不少的时间，但如何妥善安排自己的数码生活却不被重视。\n\n本文开篇之所以用拥抱一词，是因为笔者认为在当今时代，大部分人对于数字内容的汲取和吸收并不是一个被动的过程，相反，是一个开放、主动接受的过程。如何让自己个性化的需求得到满足，其背后的思路是拥抱数字生活的关键。\n\n本文将以乱序的方式回忆和总结我所体验过的数字生活，希望我的这篇文章能给予你一点启发，让你能够以正确的打开方式享受数字时代带来的便利。当然，你完全可以把本文看作敝人的碎碎念，若有不合您想法的观点还请包容。\n\n## 开始数字生活\n\n作为一个平凡人，我勉强认为自己比较擅长鼓捣手机，并在鼓捣的过程中有所感悟。然而我也走过一些弯路，曾经下载过盗版的App，执着于哪款手机更优，庆幸的是这些我的行为或想法能够得到纠正，日常使用习惯也进而得到了培养。\n\n![images.stephenfang.xyz/mweb/C68FD435-10A6-449C-8DEB-329A9F4BEC24.jpeg](http://images.stephenfang.xyz/mweb/C68FD435-10A6-449C-8DEB-329A9F4BEC24.jpeg)\n\n我所折腾过的一些数码物件\n\n![images.stephenfang.xyz/mweb/Untitled.png](http://images.stephenfang.xyz/mweb/Untitled.png)\n\n我所折腾过的一些数码物件\n\n引用经济学的一个重要原则，\n\n> “Rational people think at the margin“\n\n即理性的人会从边际去考虑问题。假设你是理性的人，当你在决定更新一台设备时。会尝试从边际成本考虑它会带给你的价值，若你的手头不充裕且更新只能给你的工作流带来5%的提升，那大可不必做这样的决断。手机就是现代人的工具，其最大的价值为其存储的数据带来的价值，你应该做的是让你的手机为你创造价值，而不是被其禁锢。\n\n作为一个工具，那手机必然存在其好处及劣处，且每个人对于手机都有不同的使用习惯和评价标准，你完全可以认为某手机是你当下最好的选择，但他人也完全有理由认为你的看法是错误的。即使你是某个品牌的死忠，也应该客观看待其他厂商推出的各类产品，所谓“信仰”只是一种调侃，而为黑而黑更是没有意义。手机是如此，生活中的许多琐事亦是如此。\n\n![images.stephenfang.xyz/mweb/IMG_1485.jpeg](http://images.stephenfang.xyz/mweb/IMG_1485.jpeg)\n\n我的iPod touch\n\n我的真正意义上的数字生活起始于2010年购买的一台iPod touch (4th genration)。我至今仍清楚记得它的配置：阉割版的A4 芯片、3.5 英寸 Retina 屏幕、iOS 4、聊胜于无的摄像头、8GB的存储空间。当时的我对于 Apple 生态一无所知，同步iPod中的内容也是由一家Apple授权店的小哥帮忙完成。\n\n在使用iPod touch的过程中，我逐渐熟悉Apple的生态系统，令我记忆深刻的体验有第一次购买付费App，第一次给设备越狱，第一次在设备上玩在线联机游戏、第一次使用云服务等等。在iPod touch之后我对数码产品的兴趣愈发浓厚，且不仅仅限于iOS设备、Android设备，几年间，手中的设备换了一台又一台，安装的App换了一批又一批，我也逐步走进与计算机打交道的行业。\n\n## 关于App的回忆\n\nApp Store是Apple生态的一个重要组成部分，相当一部分人选择Apple的平台看重的是优秀的iOS独占App。和很多人一样，我购买iPod touch的理由很大程度上是为了游戏。十年后的今天，我的手机中鲜有游戏，虽然有时也会在闲暇时间与朋友来上两把吃鸡，但是再也不会像以前一样为了打通Angry Birds费尽心思。\n\n![images.stephenfang.xyz/mweb/06CBDF84-B70A-4412-8F67-2D3C7CFD4E85.jpeg](http://images.stephenfang.xyz/mweb/06CBDF84-B70A-4412-8F67-2D3C7CFD4E85.jpeg)\n\niOS 4时代的 App Store\n\niOS 4时代的游戏以单机、逻辑简单的小游戏为主，但也不乏许多知名的大作，较为出名的有Infinity Blade系列、Asphalt系列，我当时最喜欢的是Gameloft开发的Rainbow Six手游，其最大的特色就是能够以蓝牙联机的方式与好友对战，还记得每天中午都会和班上的同学去学校的阁楼玩几盘联机游戏。然而Cut the Rope、Fruit Ninja、Angry Birds、Doodle Jump才是我对于那个时期最真实的回忆。\n\n## 关于效率\n\n现在的我会仍会刻意给所有的App分门别类，然而刚接触 iOS 时我总把首屏留给系统默认App，并且总是在结束App的使用后习惯性将它在后台清除，同时我还会出于自己对 Google 的向往，在自己的手机中安装所有 Google 系的App，这些行为在现在看来是相当愚蠢。\n\n![images.stephenfang.xyz/mweb/0A5E372C-83FF-429D-8B1D-12749EEB60DE.jpeg](http://images.stephenfang.xyz/mweb/0A5E372C-83FF-429D-8B1D-12749EEB60DE.jpeg)\n\niOS 6时代我的 iPod touch\n\n![images.stephenfang.xyz/mweb/604EE641-9BC7-48BA-BC4B-06DE45144E0A.jpeg](http://images.stephenfang.xyz/mweb/604EE641-9BC7-48BA-BC4B-06DE45144E0A.jpeg)\n\n装满所有 Google 系 App 的 iPhone\n\n首先，更好的应用排布会带来更高的利用效率，试想一下你需要使用某个App记录信息，然而在不使用搜索的情况下每次都要滚动到第二屏，甚至还需要点开一个文件夹才能打开它，还有找不到App的风险，这势必会浪费一部分时间，让你显得手忙脚乱，可能你连需要记录什么都忘了。\n\n![images.stephenfang.xyz/mweb/s26872396.jpg](http://images.stephenfang.xyz/mweb/s26872396.jpg)\n\n山下英子的断舍离封面\n\n另外一种想法是我在读了《断舍离》这本书后感悟的，首先简要说明这本书的一个重要观点：\n\n- 断舍离非常简单，只需要以自己而不是物品为主角，去思考什么东西最适合现在的自己。只要是不符合这两个标准的东西，就立即淘汰或是送人。\n\n反映在数字生活中即为保留最近需要用到的App，删除不必须要的内容。目前我在我的手机上保留了80个左右的App，显然我不可能每天用到其中的绝大多数App。有统计学的数据显示，智能手机用户平均每个月将会使用超过30个软件，而平均到每天，将会有10个软件被用户登录。\n\n对于我而言，不会用到的App可以看作是手机的一种“负担”，把它们从我的主屏幕中删除可以看似一种“解脱”，你可以将其看做为一种“伪哲学“，正如许多人对于《断舍离》这本书的看法。时刻保持自己的设备有最高的效率面对工作或学习有如时刻使自己保持清醒的头脑面对生活。\n\n## 关于正版\n\n前几天听说最新版本的 iOS 系统再次能够「越狱」了，然而对此新闻感到兴奋的人寥寥无几。从某种角度来说，「越狱」也是当时导致盗版猖獗的一大原因，然而「越狱」的最重要意义却是让 iOS 设备更具个性化，如 iOS 5 时期我会通过「越狱」去为自己的设备增加通知中心的功能，在 iOS 4 时期我会通过「越狱」给我的iPod touch增加虚拟内存。\n\n![http://images.stephenfang.xyz/mweb/223F237B-B3BB-4BF5-8361-F037537C98EC.jpeg](http://images.stephenfang.xyz/mweb/223F237B-B3BB-4BF5-8361-F037537C98EC.jpeg)\n\n“Jailbreak”界面\n\n![http://images.stephenfang.xyz/mweb/C215DC38-4A0D-42F6-94A8-37EEE9EBD3C6.jpeg](http://images.stephenfang.xyz/mweb/C215DC38-4A0D-42F6-94A8-37EEE9EBD3C6.jpeg)\n\n“奔跑的大菠萝”\n\niOS 的付费购买体系目前已经十分成熟，你可以通过各种支付方式获得你需要的App。在没有支付能力的小学时期我可能会为了一款想玩的游戏下载盗版，但我深知这样的想法是错误的，我会告诉自己我需要某一个APP，它为我创造了价值，我乐意为其付费，于是具备消费能力之后我督促自己禁止使用盗版的内容。\n\n为内容付费是一种闭环，没有投入就没有产出，如果开发者的投入没有回报，很可能导致的结果就是软件停止更新，或比喻为劣币驱逐良币，试想一下应用商店充斥着隐含各种广告的App，相信这种局面都是你我所不愿意看到的。自然，我不会去鄙视用盗版的人，他们很可能是迫不得已，诚然，一些大公司的营收不会因为缺少了一部分人的支出而受重大影响，但我认为用着盗版还大肆夸耀就有些不合情理了。\n\n微软推出的 Office 365 是一个很有趣的例子，在高中的时候我开始每年为 Office 365 付费，我完全厌倦了 WPS 恼人的广告机制，能够用到正版 Office 令我十分开心，然而这样的行为当时为许多人所不解。近年来使用正版 Office 的成本不断降低，愿意使用正版的人群也逐渐壮大，微软也在努力提升该产品的价值，现在你能够以每年 70多元的价格购买到 Office 套件的全部功能，如果你确定Office能够提供你工作中的便利，那么其价格完全不构成经济上的负担，何况这其中还包括完善的云服务，我认为这是消费者与产品提供商实现的一种协调。当然如果你使用的是Mac，你完全可以用 Apple 的 iWork 套件替代 Office 的工作流，总是有合适的方案替代最坏的使用盗版的方案。你如果觉得购买 Mac 上的 Apps 太贵，可以选择订阅性质的 Setapp，只要你对于设备生产力的界定在“爱奇艺“之上，这些举措都是有意义的。\n\n![http://images.stephenfang.xyz/mweb/Xnip2020-04-12_00-33-00.png](http://images.stephenfang.xyz/mweb/Xnip2020-04-12_00-33-00.png)\n\n采用订阅收费制度的Setapp\n\n我想表达的并不是一种说教，更多的是一种意识。你可能喜欢观看美剧，但出于各方面原因你无法使用到网飞等平台的服务，但你可以选择的是想办法使用到这种服务，正可谓“办法总比困难多”，或者你可以在某些方面支持你所喜爱的作品。最次的方案则是“偷偷地看“，不是为自己享有盗版而感到自豪。你愿意为一杯奶茶带来的味蕾刺激付费，却不愿意为能够提升你的效率、生活品质的内容而付费，这听起来是不是很荒谬？\n\n## 关于多样性\n\n“如果你想要学习一些自己感兴趣的内容，你必须经历一段痛苦的，学习自己不想学习内容的经历。“这是我对于学习这一件事最真切的感悟。在互联网时代，互联网就是你最好的老师，你可以通过互联网检索到你任何感兴趣的问题的答案，同时你也可以通过互联网学习到任何你想学习的内容，尽管你搜索到的内容很大几率是错误的，且检索到的课程质量可能良莠不齐，但并不影响这个结论的正确性，你需要做的是提高自己辨别正误信息的能力以及提高自己接受新事物的能力。\n\n回到这段开头这一句话，当你拥有了学习自己所喜欢内容的时间和机会，不应该以“没有空”等类似理由搪塞自己，而应该通过互联网的力量让自己的求知欲得到满足。当你不理解思维导图如何完成就尝试去学习和实践它，当你对咖啡文化感兴趣就去了解它的历史和发展状况，当你充满求知欲时就刷上一天的维基百科。\n\n我的一位高中同学对任何知识都满怀好奇，无论是他所不熟悉的电竞领域还是他所了解的电影市场，凡是能够引起讨论的内容他都略知一二，我暂且认定他的学习方法称之为“杂学”。起初我对这种学习方式不以为然，认为学习的重要方法在于精而不是杂，渐渐地，我开始觉得这种方式在信息爆炸的年代存在其合理性。\n\n![http://images.stephenfang.xyz/mweb/s1429010.jpg](http://images.stephenfang.xyz/mweb/s1429010.jpg)\n\n许多人的理财启蒙读物——《富爸爸，穷爸爸》\n\n首先，他的学习内容仍然是以兴趣为第一导向，对于乏味、无用的内容他一概不学，确保了学习过程的积极性和主动性；其次，在阅读了《富爸爸穷爸爸》这本书后，我认为当时我当时的观点与书中穷爸爸对于停留在某种体制内、在某一方面成为专家的观点无异，而书中的富爸爸则倡导学习各方的知识，如财务知识、交谈经验等，这一出发点对该书的作者产生了深刻的影响，促成了其人生中的诸多机会，同时也造就了该书作者的经济地位——这也就是我想说的，求知欲以及交叉学科知识产生的影响。\n\n![http://images.stephenfang.xyz/mweb/999FB844-A92A-4852-BA27-6BC0091DCB8C.jpg](http://images.stephenfang.xyz/mweb/999FB844-A92A-4852-BA27-6BC0091DCB8C.jpg)\n\n12年我的音乐资料库\n\n人在学习和探索的过程中很可能会推翻许多固有的认知，很多年以前，我曾对日本的音乐抱有偏见，但通过数年对于日本音乐、文化的学习，我了解到坂本龙一、玉置浩二这样的大师，喜爱上re:plus这样的小众乐队，痴迷于押尾光太郎的指弹，见证过Aimer的迅速发展，我所学到的一切都引起了我对日本音乐的尊重。然而不仅仅是音乐，我对很多事物的看法都在互联网的影响下产生很大改观。我在本文最后呼吁大家走出“XX无用论”的泥淖，大胆拥抱新鲜事物，积极表达求知欲望，如尝试「GTD工作法」、「量化自我」等方法将大有裨益，至于某些具体的方法论不在此文中引述，读者可以期待本人未来的分享。\n\n## 尾声\n\n本文至此就告一段落了，显然，笔者想表达的观点和内容还有很多，对于具体的方法论会在之后的文章阐述，还请继续期待和支持。\n\n### 引用\n\n[https://bi.qq.com/a/20170613/059340.htm](https://bi.qq.com/a/20170613/059340.htm)\n\n[https://en.wikiversity.org/wiki/10_Principles_of_Economics](https://en.wikiversity.org/wiki/10_Principles_of_Economics)\n\n[https://www.ifanr.com/app/727935](https://www.ifanr.com/app/727935)","slug":"Digital_Life","published":1,"updated":"2020-07-27T16:14:14.942Z","_id":"ckcive9n10008cv6b9o6jbs9m","comments":1,"layout":"post","photos":[],"link":"","content":"<p>尼古拉·尼葛洛庞帝在他1995年发布的的著作《Being Digital》中描绘了未来数字生活的诸多情景，其中VR、AI、智能家居、个人助理等，无一不是近几年研究的热门领域，这些技术的出现深深影响了现代人的日常生活，换句话说，数字生活成为了当今时代人们生活的一部分。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"http://images.stephenfang.xyz/mweb/s1496668.jpg\" alt=\"images.stephenfang.xyz/mweb/s1496668.jpg\"></p>\n<p>尼古拉·尼葛洛庞帝的《数字化生存》封面</p>\n<h2 id=\"拥抱数字生活\"><a href=\"#拥抱数字生活\" class=\"headerlink\" title=\"拥抱数字生活\"></a>拥抱数字生活</h2><p>当我和朋友谈及「数字生活」这个话题的时候，我们认为，每个人都有自己处理数字生活的方式，但没有一个客观固定的标准。我们每天都会在数码设备上花费不少的时间，但如何妥善安排自己的数码生活却不被重视。</p>\n<p>本文开篇之所以用拥抱一词，是因为笔者认为在当今时代，大部分人对于数字内容的汲取和吸收并不是一个被动的过程，相反，是一个开放、主动接受的过程。如何让自己个性化的需求得到满足，其背后的思路是拥抱数字生活的关键。</p>\n<p>本文将以乱序的方式回忆和总结我所体验过的数字生活，希望我的这篇文章能给予你一点启发，让你能够以正确的打开方式享受数字时代带来的便利。当然，你完全可以把本文看作敝人的碎碎念，若有不合您想法的观点还请包容。</p>\n<h2 id=\"开始数字生活\"><a href=\"#开始数字生活\" class=\"headerlink\" title=\"开始数字生活\"></a>开始数字生活</h2><p>作为一个平凡人，我勉强认为自己比较擅长鼓捣手机，并在鼓捣的过程中有所感悟。然而我也走过一些弯路，曾经下载过盗版的App，执着于哪款手机更优，庆幸的是这些我的行为或想法能够得到纠正，日常使用习惯也进而得到了培养。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/C68FD435-10A6-449C-8DEB-329A9F4BEC24.jpeg\" alt=\"images.stephenfang.xyz/mweb/C68FD435-10A6-449C-8DEB-329A9F4BEC24.jpeg\"></p>\n<p>我所折腾过的一些数码物件</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/Untitled.png\" alt=\"images.stephenfang.xyz/mweb/Untitled.png\"></p>\n<p>我所折腾过的一些数码物件</p>\n<p>引用经济学的一个重要原则，</p>\n<blockquote>\n<p>“Rational people think at the margin“</p>\n</blockquote>\n<p>即理性的人会从边际去考虑问题。假设你是理性的人，当你在决定更新一台设备时。会尝试从边际成本考虑它会带给你的价值，若你的手头不充裕且更新只能给你的工作流带来5%的提升，那大可不必做这样的决断。手机就是现代人的工具，其最大的价值为其存储的数据带来的价值，你应该做的是让你的手机为你创造价值，而不是被其禁锢。</p>\n<p>作为一个工具，那手机必然存在其好处及劣处，且每个人对于手机都有不同的使用习惯和评价标准，你完全可以认为某手机是你当下最好的选择，但他人也完全有理由认为你的看法是错误的。即使你是某个品牌的死忠，也应该客观看待其他厂商推出的各类产品，所谓“信仰”只是一种调侃，而为黑而黑更是没有意义。手机是如此，生活中的许多琐事亦是如此。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/IMG_1485.jpeg\" alt=\"images.stephenfang.xyz/mweb/IMG_1485.jpeg\"></p>\n<p>我的iPod touch</p>\n<p>我的真正意义上的数字生活起始于2010年购买的一台iPod touch (4th genration)。我至今仍清楚记得它的配置：阉割版的A4 芯片、3.5 英寸 Retina 屏幕、iOS 4、聊胜于无的摄像头、8GB的存储空间。当时的我对于 Apple 生态一无所知，同步iPod中的内容也是由一家Apple授权店的小哥帮忙完成。</p>\n<p>在使用iPod touch的过程中，我逐渐熟悉Apple的生态系统，令我记忆深刻的体验有第一次购买付费App，第一次给设备越狱，第一次在设备上玩在线联机游戏、第一次使用云服务等等。在iPod touch之后我对数码产品的兴趣愈发浓厚，且不仅仅限于iOS设备、Android设备，几年间，手中的设备换了一台又一台，安装的App换了一批又一批，我也逐步走进与计算机打交道的行业。</p>\n<h2 id=\"关于App的回忆\"><a href=\"#关于App的回忆\" class=\"headerlink\" title=\"关于App的回忆\"></a>关于App的回忆</h2><p>App Store是Apple生态的一个重要组成部分，相当一部分人选择Apple的平台看重的是优秀的iOS独占App。和很多人一样，我购买iPod touch的理由很大程度上是为了游戏。十年后的今天，我的手机中鲜有游戏，虽然有时也会在闲暇时间与朋友来上两把吃鸡，但是再也不会像以前一样为了打通Angry Birds费尽心思。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/06CBDF84-B70A-4412-8F67-2D3C7CFD4E85.jpeg\" alt=\"images.stephenfang.xyz/mweb/06CBDF84-B70A-4412-8F67-2D3C7CFD4E85.jpeg\"></p>\n<p>iOS 4时代的 App Store</p>\n<p>iOS 4时代的游戏以单机、逻辑简单的小游戏为主，但也不乏许多知名的大作，较为出名的有Infinity Blade系列、Asphalt系列，我当时最喜欢的是Gameloft开发的Rainbow Six手游，其最大的特色就是能够以蓝牙联机的方式与好友对战，还记得每天中午都会和班上的同学去学校的阁楼玩几盘联机游戏。然而Cut the Rope、Fruit Ninja、Angry Birds、Doodle Jump才是我对于那个时期最真实的回忆。</p>\n<h2 id=\"关于效率\"><a href=\"#关于效率\" class=\"headerlink\" title=\"关于效率\"></a>关于效率</h2><p>现在的我会仍会刻意给所有的App分门别类，然而刚接触 iOS 时我总把首屏留给系统默认App，并且总是在结束App的使用后习惯性将它在后台清除，同时我还会出于自己对 Google 的向往，在自己的手机中安装所有 Google 系的App，这些行为在现在看来是相当愚蠢。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/0A5E372C-83FF-429D-8B1D-12749EEB60DE.jpeg\" alt=\"images.stephenfang.xyz/mweb/0A5E372C-83FF-429D-8B1D-12749EEB60DE.jpeg\"></p>\n<p>iOS 6时代我的 iPod touch</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/604EE641-9BC7-48BA-BC4B-06DE45144E0A.jpeg\" alt=\"images.stephenfang.xyz/mweb/604EE641-9BC7-48BA-BC4B-06DE45144E0A.jpeg\"></p>\n<p>装满所有 Google 系 App 的 iPhone</p>\n<p>首先，更好的应用排布会带来更高的利用效率，试想一下你需要使用某个App记录信息，然而在不使用搜索的情况下每次都要滚动到第二屏，甚至还需要点开一个文件夹才能打开它，还有找不到App的风险，这势必会浪费一部分时间，让你显得手忙脚乱，可能你连需要记录什么都忘了。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/s26872396.jpg\" alt=\"images.stephenfang.xyz/mweb/s26872396.jpg\"></p>\n<p>山下英子的断舍离封面</p>\n<p>另外一种想法是我在读了《断舍离》这本书后感悟的，首先简要说明这本书的一个重要观点：</p>\n<ul>\n<li>断舍离非常简单，只需要以自己而不是物品为主角，去思考什么东西最适合现在的自己。只要是不符合这两个标准的东西，就立即淘汰或是送人。</li>\n</ul>\n<p>反映在数字生活中即为保留最近需要用到的App，删除不必须要的内容。目前我在我的手机上保留了80个左右的App，显然我不可能每天用到其中的绝大多数App。有统计学的数据显示，智能手机用户平均每个月将会使用超过30个软件，而平均到每天，将会有10个软件被用户登录。</p>\n<p>对于我而言，不会用到的App可以看作是手机的一种“负担”，把它们从我的主屏幕中删除可以看似一种“解脱”，你可以将其看做为一种“伪哲学“，正如许多人对于《断舍离》这本书的看法。时刻保持自己的设备有最高的效率面对工作或学习有如时刻使自己保持清醒的头脑面对生活。</p>\n<h2 id=\"关于正版\"><a href=\"#关于正版\" class=\"headerlink\" title=\"关于正版\"></a>关于正版</h2><p>前几天听说最新版本的 iOS 系统再次能够「越狱」了，然而对此新闻感到兴奋的人寥寥无几。从某种角度来说，「越狱」也是当时导致盗版猖獗的一大原因，然而「越狱」的最重要意义却是让 iOS 设备更具个性化，如 iOS 5 时期我会通过「越狱」去为自己的设备增加通知中心的功能，在 iOS 4 时期我会通过「越狱」给我的iPod touch增加虚拟内存。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/223F237B-B3BB-4BF5-8361-F037537C98EC.jpeg\" alt=\"http://images.stephenfang.xyz/mweb/223F237B-B3BB-4BF5-8361-F037537C98EC.jpeg\"></p>\n<p>“Jailbreak”界面</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/C215DC38-4A0D-42F6-94A8-37EEE9EBD3C6.jpeg\" alt=\"http://images.stephenfang.xyz/mweb/C215DC38-4A0D-42F6-94A8-37EEE9EBD3C6.jpeg\"></p>\n<p>“奔跑的大菠萝”</p>\n<p>iOS 的付费购买体系目前已经十分成熟，你可以通过各种支付方式获得你需要的App。在没有支付能力的小学时期我可能会为了一款想玩的游戏下载盗版，但我深知这样的想法是错误的，我会告诉自己我需要某一个APP，它为我创造了价值，我乐意为其付费，于是具备消费能力之后我督促自己禁止使用盗版的内容。</p>\n<p>为内容付费是一种闭环，没有投入就没有产出，如果开发者的投入没有回报，很可能导致的结果就是软件停止更新，或比喻为劣币驱逐良币，试想一下应用商店充斥着隐含各种广告的App，相信这种局面都是你我所不愿意看到的。自然，我不会去鄙视用盗版的人，他们很可能是迫不得已，诚然，一些大公司的营收不会因为缺少了一部分人的支出而受重大影响，但我认为用着盗版还大肆夸耀就有些不合情理了。</p>\n<p>微软推出的 Office 365 是一个很有趣的例子，在高中的时候我开始每年为 Office 365 付费，我完全厌倦了 WPS 恼人的广告机制，能够用到正版 Office 令我十分开心，然而这样的行为当时为许多人所不解。近年来使用正版 Office 的成本不断降低，愿意使用正版的人群也逐渐壮大，微软也在努力提升该产品的价值，现在你能够以每年 70多元的价格购买到 Office 套件的全部功能，如果你确定Office能够提供你工作中的便利，那么其价格完全不构成经济上的负担，何况这其中还包括完善的云服务，我认为这是消费者与产品提供商实现的一种协调。当然如果你使用的是Mac，你完全可以用 Apple 的 iWork 套件替代 Office 的工作流，总是有合适的方案替代最坏的使用盗版的方案。你如果觉得购买 Mac 上的 Apps 太贵，可以选择订阅性质的 Setapp，只要你对于设备生产力的界定在“爱奇艺“之上，这些举措都是有意义的。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/Xnip2020-04-12_00-33-00.png\" alt=\"http://images.stephenfang.xyz/mweb/Xnip2020-04-12_00-33-00.png\"></p>\n<p>采用订阅收费制度的Setapp</p>\n<p>我想表达的并不是一种说教，更多的是一种意识。你可能喜欢观看美剧，但出于各方面原因你无法使用到网飞等平台的服务，但你可以选择的是想办法使用到这种服务，正可谓“办法总比困难多”，或者你可以在某些方面支持你所喜爱的作品。最次的方案则是“偷偷地看“，不是为自己享有盗版而感到自豪。你愿意为一杯奶茶带来的味蕾刺激付费，却不愿意为能够提升你的效率、生活品质的内容而付费，这听起来是不是很荒谬？</p>\n<h2 id=\"关于多样性\"><a href=\"#关于多样性\" class=\"headerlink\" title=\"关于多样性\"></a>关于多样性</h2><p>“如果你想要学习一些自己感兴趣的内容，你必须经历一段痛苦的，学习自己不想学习内容的经历。“这是我对于学习这一件事最真切的感悟。在互联网时代，互联网就是你最好的老师，你可以通过互联网检索到你任何感兴趣的问题的答案，同时你也可以通过互联网学习到任何你想学习的内容，尽管你搜索到的内容很大几率是错误的，且检索到的课程质量可能良莠不齐，但并不影响这个结论的正确性，你需要做的是提高自己辨别正误信息的能力以及提高自己接受新事物的能力。</p>\n<p>回到这段开头这一句话，当你拥有了学习自己所喜欢内容的时间和机会，不应该以“没有空”等类似理由搪塞自己，而应该通过互联网的力量让自己的求知欲得到满足。当你不理解思维导图如何完成就尝试去学习和实践它，当你对咖啡文化感兴趣就去了解它的历史和发展状况，当你充满求知欲时就刷上一天的维基百科。</p>\n<p>我的一位高中同学对任何知识都满怀好奇，无论是他所不熟悉的电竞领域还是他所了解的电影市场，凡是能够引起讨论的内容他都略知一二，我暂且认定他的学习方法称之为“杂学”。起初我对这种学习方式不以为然，认为学习的重要方法在于精而不是杂，渐渐地，我开始觉得这种方式在信息爆炸的年代存在其合理性。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/s1429010.jpg\" alt=\"http://images.stephenfang.xyz/mweb/s1429010.jpg\"></p>\n<p>许多人的理财启蒙读物——《富爸爸，穷爸爸》</p>\n<p>首先，他的学习内容仍然是以兴趣为第一导向，对于乏味、无用的内容他一概不学，确保了学习过程的积极性和主动性；其次，在阅读了《富爸爸穷爸爸》这本书后，我认为当时我当时的观点与书中穷爸爸对于停留在某种体制内、在某一方面成为专家的观点无异，而书中的富爸爸则倡导学习各方的知识，如财务知识、交谈经验等，这一出发点对该书的作者产生了深刻的影响，促成了其人生中的诸多机会，同时也造就了该书作者的经济地位——这也就是我想说的，求知欲以及交叉学科知识产生的影响。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/999FB844-A92A-4852-BA27-6BC0091DCB8C.jpg\" alt=\"http://images.stephenfang.xyz/mweb/999FB844-A92A-4852-BA27-6BC0091DCB8C.jpg\"></p>\n<p>12年我的音乐资料库</p>\n<p>人在学习和探索的过程中很可能会推翻许多固有的认知，很多年以前，我曾对日本的音乐抱有偏见，但通过数年对于日本音乐、文化的学习，我了解到坂本龙一、玉置浩二这样的大师，喜爱上re:plus这样的小众乐队，痴迷于押尾光太郎的指弹，见证过Aimer的迅速发展，我所学到的一切都引起了我对日本音乐的尊重。然而不仅仅是音乐，我对很多事物的看法都在互联网的影响下产生很大改观。我在本文最后呼吁大家走出“XX无用论”的泥淖，大胆拥抱新鲜事物，积极表达求知欲望，如尝试「GTD工作法」、「量化自我」等方法将大有裨益，至于某些具体的方法论不在此文中引述，读者可以期待本人未来的分享。</p>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><p>本文至此就告一段落了，显然，笔者想表达的观点和内容还有很多，对于具体的方法论会在之后的文章阐述，还请继续期待和支持。</p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p><a href=\"https://bi.qq.com/a/20170613/059340.htm\" target=\"_blank\" rel=\"noopener\">https://bi.qq.com/a/20170613/059340.htm</a></p>\n<p><a href=\"https://en.wikiversity.org/wiki/10_Principles_of_Economics\" target=\"_blank\" rel=\"noopener\">https://en.wikiversity.org/wiki/10_Principles_of_Economics</a></p>\n<p><a href=\"https://www.ifanr.com/app/727935\" target=\"_blank\" rel=\"noopener\">https://www.ifanr.com/app/727935</a></p>\n","site":{"data":{}},"excerpt":"<p>尼古拉·尼葛洛庞帝在他1995年发布的的著作《Being Digital》中描绘了未来数字生活的诸多情景，其中VR、AI、智能家居、个人助理等，无一不是近几年研究的热门领域，这些技术的出现深深影响了现代人的日常生活，换句话说，数字生活成为了当今时代人们生活的一部分。</p>","more":"<p><img src=\"http://images.stephenfang.xyz/mweb/s1496668.jpg\" alt=\"images.stephenfang.xyz/mweb/s1496668.jpg\"></p>\n<p>尼古拉·尼葛洛庞帝的《数字化生存》封面</p>\n<h2 id=\"拥抱数字生活\"><a href=\"#拥抱数字生活\" class=\"headerlink\" title=\"拥抱数字生活\"></a>拥抱数字生活</h2><p>当我和朋友谈及「数字生活」这个话题的时候，我们认为，每个人都有自己处理数字生活的方式，但没有一个客观固定的标准。我们每天都会在数码设备上花费不少的时间，但如何妥善安排自己的数码生活却不被重视。</p>\n<p>本文开篇之所以用拥抱一词，是因为笔者认为在当今时代，大部分人对于数字内容的汲取和吸收并不是一个被动的过程，相反，是一个开放、主动接受的过程。如何让自己个性化的需求得到满足，其背后的思路是拥抱数字生活的关键。</p>\n<p>本文将以乱序的方式回忆和总结我所体验过的数字生活，希望我的这篇文章能给予你一点启发，让你能够以正确的打开方式享受数字时代带来的便利。当然，你完全可以把本文看作敝人的碎碎念，若有不合您想法的观点还请包容。</p>\n<h2 id=\"开始数字生活\"><a href=\"#开始数字生活\" class=\"headerlink\" title=\"开始数字生活\"></a>开始数字生活</h2><p>作为一个平凡人，我勉强认为自己比较擅长鼓捣手机，并在鼓捣的过程中有所感悟。然而我也走过一些弯路，曾经下载过盗版的App，执着于哪款手机更优，庆幸的是这些我的行为或想法能够得到纠正，日常使用习惯也进而得到了培养。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/C68FD435-10A6-449C-8DEB-329A9F4BEC24.jpeg\" alt=\"images.stephenfang.xyz/mweb/C68FD435-10A6-449C-8DEB-329A9F4BEC24.jpeg\"></p>\n<p>我所折腾过的一些数码物件</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/Untitled.png\" alt=\"images.stephenfang.xyz/mweb/Untitled.png\"></p>\n<p>我所折腾过的一些数码物件</p>\n<p>引用经济学的一个重要原则，</p>\n<blockquote>\n<p>“Rational people think at the margin“</p>\n</blockquote>\n<p>即理性的人会从边际去考虑问题。假设你是理性的人，当你在决定更新一台设备时。会尝试从边际成本考虑它会带给你的价值，若你的手头不充裕且更新只能给你的工作流带来5%的提升，那大可不必做这样的决断。手机就是现代人的工具，其最大的价值为其存储的数据带来的价值，你应该做的是让你的手机为你创造价值，而不是被其禁锢。</p>\n<p>作为一个工具，那手机必然存在其好处及劣处，且每个人对于手机都有不同的使用习惯和评价标准，你完全可以认为某手机是你当下最好的选择，但他人也完全有理由认为你的看法是错误的。即使你是某个品牌的死忠，也应该客观看待其他厂商推出的各类产品，所谓“信仰”只是一种调侃，而为黑而黑更是没有意义。手机是如此，生活中的许多琐事亦是如此。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/IMG_1485.jpeg\" alt=\"images.stephenfang.xyz/mweb/IMG_1485.jpeg\"></p>\n<p>我的iPod touch</p>\n<p>我的真正意义上的数字生活起始于2010年购买的一台iPod touch (4th genration)。我至今仍清楚记得它的配置：阉割版的A4 芯片、3.5 英寸 Retina 屏幕、iOS 4、聊胜于无的摄像头、8GB的存储空间。当时的我对于 Apple 生态一无所知，同步iPod中的内容也是由一家Apple授权店的小哥帮忙完成。</p>\n<p>在使用iPod touch的过程中，我逐渐熟悉Apple的生态系统，令我记忆深刻的体验有第一次购买付费App，第一次给设备越狱，第一次在设备上玩在线联机游戏、第一次使用云服务等等。在iPod touch之后我对数码产品的兴趣愈发浓厚，且不仅仅限于iOS设备、Android设备，几年间，手中的设备换了一台又一台，安装的App换了一批又一批，我也逐步走进与计算机打交道的行业。</p>\n<h2 id=\"关于App的回忆\"><a href=\"#关于App的回忆\" class=\"headerlink\" title=\"关于App的回忆\"></a>关于App的回忆</h2><p>App Store是Apple生态的一个重要组成部分，相当一部分人选择Apple的平台看重的是优秀的iOS独占App。和很多人一样，我购买iPod touch的理由很大程度上是为了游戏。十年后的今天，我的手机中鲜有游戏，虽然有时也会在闲暇时间与朋友来上两把吃鸡，但是再也不会像以前一样为了打通Angry Birds费尽心思。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/06CBDF84-B70A-4412-8F67-2D3C7CFD4E85.jpeg\" alt=\"images.stephenfang.xyz/mweb/06CBDF84-B70A-4412-8F67-2D3C7CFD4E85.jpeg\"></p>\n<p>iOS 4时代的 App Store</p>\n<p>iOS 4时代的游戏以单机、逻辑简单的小游戏为主，但也不乏许多知名的大作，较为出名的有Infinity Blade系列、Asphalt系列，我当时最喜欢的是Gameloft开发的Rainbow Six手游，其最大的特色就是能够以蓝牙联机的方式与好友对战，还记得每天中午都会和班上的同学去学校的阁楼玩几盘联机游戏。然而Cut the Rope、Fruit Ninja、Angry Birds、Doodle Jump才是我对于那个时期最真实的回忆。</p>\n<h2 id=\"关于效率\"><a href=\"#关于效率\" class=\"headerlink\" title=\"关于效率\"></a>关于效率</h2><p>现在的我会仍会刻意给所有的App分门别类，然而刚接触 iOS 时我总把首屏留给系统默认App，并且总是在结束App的使用后习惯性将它在后台清除，同时我还会出于自己对 Google 的向往，在自己的手机中安装所有 Google 系的App，这些行为在现在看来是相当愚蠢。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/0A5E372C-83FF-429D-8B1D-12749EEB60DE.jpeg\" alt=\"images.stephenfang.xyz/mweb/0A5E372C-83FF-429D-8B1D-12749EEB60DE.jpeg\"></p>\n<p>iOS 6时代我的 iPod touch</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/604EE641-9BC7-48BA-BC4B-06DE45144E0A.jpeg\" alt=\"images.stephenfang.xyz/mweb/604EE641-9BC7-48BA-BC4B-06DE45144E0A.jpeg\"></p>\n<p>装满所有 Google 系 App 的 iPhone</p>\n<p>首先，更好的应用排布会带来更高的利用效率，试想一下你需要使用某个App记录信息，然而在不使用搜索的情况下每次都要滚动到第二屏，甚至还需要点开一个文件夹才能打开它，还有找不到App的风险，这势必会浪费一部分时间，让你显得手忙脚乱，可能你连需要记录什么都忘了。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/s26872396.jpg\" alt=\"images.stephenfang.xyz/mweb/s26872396.jpg\"></p>\n<p>山下英子的断舍离封面</p>\n<p>另外一种想法是我在读了《断舍离》这本书后感悟的，首先简要说明这本书的一个重要观点：</p>\n<ul>\n<li>断舍离非常简单，只需要以自己而不是物品为主角，去思考什么东西最适合现在的自己。只要是不符合这两个标准的东西，就立即淘汰或是送人。</li>\n</ul>\n<p>反映在数字生活中即为保留最近需要用到的App，删除不必须要的内容。目前我在我的手机上保留了80个左右的App，显然我不可能每天用到其中的绝大多数App。有统计学的数据显示，智能手机用户平均每个月将会使用超过30个软件，而平均到每天，将会有10个软件被用户登录。</p>\n<p>对于我而言，不会用到的App可以看作是手机的一种“负担”，把它们从我的主屏幕中删除可以看似一种“解脱”，你可以将其看做为一种“伪哲学“，正如许多人对于《断舍离》这本书的看法。时刻保持自己的设备有最高的效率面对工作或学习有如时刻使自己保持清醒的头脑面对生活。</p>\n<h2 id=\"关于正版\"><a href=\"#关于正版\" class=\"headerlink\" title=\"关于正版\"></a>关于正版</h2><p>前几天听说最新版本的 iOS 系统再次能够「越狱」了，然而对此新闻感到兴奋的人寥寥无几。从某种角度来说，「越狱」也是当时导致盗版猖獗的一大原因，然而「越狱」的最重要意义却是让 iOS 设备更具个性化，如 iOS 5 时期我会通过「越狱」去为自己的设备增加通知中心的功能，在 iOS 4 时期我会通过「越狱」给我的iPod touch增加虚拟内存。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/223F237B-B3BB-4BF5-8361-F037537C98EC.jpeg\" alt=\"http://images.stephenfang.xyz/mweb/223F237B-B3BB-4BF5-8361-F037537C98EC.jpeg\"></p>\n<p>“Jailbreak”界面</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/C215DC38-4A0D-42F6-94A8-37EEE9EBD3C6.jpeg\" alt=\"http://images.stephenfang.xyz/mweb/C215DC38-4A0D-42F6-94A8-37EEE9EBD3C6.jpeg\"></p>\n<p>“奔跑的大菠萝”</p>\n<p>iOS 的付费购买体系目前已经十分成熟，你可以通过各种支付方式获得你需要的App。在没有支付能力的小学时期我可能会为了一款想玩的游戏下载盗版，但我深知这样的想法是错误的，我会告诉自己我需要某一个APP，它为我创造了价值，我乐意为其付费，于是具备消费能力之后我督促自己禁止使用盗版的内容。</p>\n<p>为内容付费是一种闭环，没有投入就没有产出，如果开发者的投入没有回报，很可能导致的结果就是软件停止更新，或比喻为劣币驱逐良币，试想一下应用商店充斥着隐含各种广告的App，相信这种局面都是你我所不愿意看到的。自然，我不会去鄙视用盗版的人，他们很可能是迫不得已，诚然，一些大公司的营收不会因为缺少了一部分人的支出而受重大影响，但我认为用着盗版还大肆夸耀就有些不合情理了。</p>\n<p>微软推出的 Office 365 是一个很有趣的例子，在高中的时候我开始每年为 Office 365 付费，我完全厌倦了 WPS 恼人的广告机制，能够用到正版 Office 令我十分开心，然而这样的行为当时为许多人所不解。近年来使用正版 Office 的成本不断降低，愿意使用正版的人群也逐渐壮大，微软也在努力提升该产品的价值，现在你能够以每年 70多元的价格购买到 Office 套件的全部功能，如果你确定Office能够提供你工作中的便利，那么其价格完全不构成经济上的负担，何况这其中还包括完善的云服务，我认为这是消费者与产品提供商实现的一种协调。当然如果你使用的是Mac，你完全可以用 Apple 的 iWork 套件替代 Office 的工作流，总是有合适的方案替代最坏的使用盗版的方案。你如果觉得购买 Mac 上的 Apps 太贵，可以选择订阅性质的 Setapp，只要你对于设备生产力的界定在“爱奇艺“之上，这些举措都是有意义的。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/Xnip2020-04-12_00-33-00.png\" alt=\"http://images.stephenfang.xyz/mweb/Xnip2020-04-12_00-33-00.png\"></p>\n<p>采用订阅收费制度的Setapp</p>\n<p>我想表达的并不是一种说教，更多的是一种意识。你可能喜欢观看美剧，但出于各方面原因你无法使用到网飞等平台的服务，但你可以选择的是想办法使用到这种服务，正可谓“办法总比困难多”，或者你可以在某些方面支持你所喜爱的作品。最次的方案则是“偷偷地看“，不是为自己享有盗版而感到自豪。你愿意为一杯奶茶带来的味蕾刺激付费，却不愿意为能够提升你的效率、生活品质的内容而付费，这听起来是不是很荒谬？</p>\n<h2 id=\"关于多样性\"><a href=\"#关于多样性\" class=\"headerlink\" title=\"关于多样性\"></a>关于多样性</h2><p>“如果你想要学习一些自己感兴趣的内容，你必须经历一段痛苦的，学习自己不想学习内容的经历。“这是我对于学习这一件事最真切的感悟。在互联网时代，互联网就是你最好的老师，你可以通过互联网检索到你任何感兴趣的问题的答案，同时你也可以通过互联网学习到任何你想学习的内容，尽管你搜索到的内容很大几率是错误的，且检索到的课程质量可能良莠不齐，但并不影响这个结论的正确性，你需要做的是提高自己辨别正误信息的能力以及提高自己接受新事物的能力。</p>\n<p>回到这段开头这一句话，当你拥有了学习自己所喜欢内容的时间和机会，不应该以“没有空”等类似理由搪塞自己，而应该通过互联网的力量让自己的求知欲得到满足。当你不理解思维导图如何完成就尝试去学习和实践它，当你对咖啡文化感兴趣就去了解它的历史和发展状况，当你充满求知欲时就刷上一天的维基百科。</p>\n<p>我的一位高中同学对任何知识都满怀好奇，无论是他所不熟悉的电竞领域还是他所了解的电影市场，凡是能够引起讨论的内容他都略知一二，我暂且认定他的学习方法称之为“杂学”。起初我对这种学习方式不以为然，认为学习的重要方法在于精而不是杂，渐渐地，我开始觉得这种方式在信息爆炸的年代存在其合理性。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/s1429010.jpg\" alt=\"http://images.stephenfang.xyz/mweb/s1429010.jpg\"></p>\n<p>许多人的理财启蒙读物——《富爸爸，穷爸爸》</p>\n<p>首先，他的学习内容仍然是以兴趣为第一导向，对于乏味、无用的内容他一概不学，确保了学习过程的积极性和主动性；其次，在阅读了《富爸爸穷爸爸》这本书后，我认为当时我当时的观点与书中穷爸爸对于停留在某种体制内、在某一方面成为专家的观点无异，而书中的富爸爸则倡导学习各方的知识，如财务知识、交谈经验等，这一出发点对该书的作者产生了深刻的影响，促成了其人生中的诸多机会，同时也造就了该书作者的经济地位——这也就是我想说的，求知欲以及交叉学科知识产生的影响。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/999FB844-A92A-4852-BA27-6BC0091DCB8C.jpg\" alt=\"http://images.stephenfang.xyz/mweb/999FB844-A92A-4852-BA27-6BC0091DCB8C.jpg\"></p>\n<p>12年我的音乐资料库</p>\n<p>人在学习和探索的过程中很可能会推翻许多固有的认知，很多年以前，我曾对日本的音乐抱有偏见，但通过数年对于日本音乐、文化的学习，我了解到坂本龙一、玉置浩二这样的大师，喜爱上re:plus这样的小众乐队，痴迷于押尾光太郎的指弹，见证过Aimer的迅速发展，我所学到的一切都引起了我对日本音乐的尊重。然而不仅仅是音乐，我对很多事物的看法都在互联网的影响下产生很大改观。我在本文最后呼吁大家走出“XX无用论”的泥淖，大胆拥抱新鲜事物，积极表达求知欲望，如尝试「GTD工作法」、「量化自我」等方法将大有裨益，至于某些具体的方法论不在此文中引述，读者可以期待本人未来的分享。</p>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><p>本文至此就告一段落了，显然，笔者想表达的观点和内容还有很多，对于具体的方法论会在之后的文章阐述，还请继续期待和支持。</p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p><a href=\"https://bi.qq.com/a/20170613/059340.htm\" target=\"_blank\" rel=\"noopener\">https://bi.qq.com/a/20170613/059340.htm</a></p>\n<p><a href=\"https://en.wikiversity.org/wiki/10_Principles_of_Economics\" target=\"_blank\" rel=\"noopener\">https://en.wikiversity.org/wiki/10_Principles_of_Economics</a></p>\n<p><a href=\"https://www.ifanr.com/app/727935\" target=\"_blank\" rel=\"noopener\">https://www.ifanr.com/app/727935</a></p>"},{"title":"iOS 图像处理 App - OpenCV 与 Swift 开发","date":"2020-07-01T01:20:20.000Z","copyright":true,"_content":"\n本篇内容主要包含在 iOS 项目项目中添加 OpenCV 库、Objective-C++ 与 Swift 的结合使用，及桥接文件的添加等等，为 OpenCV 系列的第四篇文章。\n<!--more-->\n\n## 目的\n本学期选修了 OpenCV 相关课程，最后课程设计为完成一个图像去雾功能的小程序。作为一个具备 iOS 相关基础的程序员，我没有选用老师推荐的 Qt 平台，而是选择在 iOS 平台上实现算法的应用。最终实现效果还不错，而其中去雾算法参考了何凯明博士的论文[Kaiming He. Single Image Haze Removal Using Dark Channel Prior](http://kaiminghe.com/publications/cvpr09.pdf)，不在本文的讨论范畴，本文主要对Objective-C++ 与 Swift 的结合开发做一个总结。\n\n## 环境\n- Swift 5\n- iOS 13.4\n- Xcode 11.5\n- OpenCV Framework 4.3.0\n\n## 配置\nOpenCV Package 可以通过以下两种方式添加到 iOS 项目当中：\n\n1. 使用 CocoaPods 添加\nProfile 中添加 OpenCV：\n\n```\ntarget 'Haze-Free' do\n  use_frameworks!\n  pod 'OpenCV'\nend\n```\n\n2.自行下载并添加\n在官网下载相应版本的[iOS Pack](https://opencv.org/releases/)，解压后得到一个 opencv2.framework 库，创建项目并右键添加文件到项目。\n\n## 桥接\nOpenCV 框架由 C++ 进行编码，通过将 C++ 代码插入 Objective-C 就成为了 Objective-C++ 代码。但是 Swift 本身与 Objective-C / Objective-C++ 并不兼容，所以需要一个Bridging Header 将 OpenCV 的功能接口暴露给 Swift。\n以下为简单的示意图。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2015.18.30.png)\n\n添加一个 Objective-C 文件到项目中将其命名为“OpenCvWrapper”，包含```OpenCvWrapper.h```与```OpenCvWrapper.m```两个文件，需要将文件扩展名“.m”改为“.mm”。如果自动弹出提示是否添加 Bridging-Header 文件选择添加；如果没有提示，则手动添加一个 Bridging-Header 文件，即添加一个头文件（Header file），重命名为“项目名-Bridging-Header.h”（本例中为：Haze-Free-Bridging-Header.h），部分项目结构图如下。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2015.54.22.png)\n\n## 业务逻辑\n如果你对 C++ 和 Objective-C 有一定了解，那完全能够理解以下的步骤。\n其中 Bridging-Header 对 Objective-C++ 类及方法进行定义，而 OpenCVWrapper 主要面向具体定义的类及方法实现。\n假设我需要对图片进行灰度化处理，需要调用的 OpenCV 函数为\n```c++\ncvtColor(source, target, COLOR_BGR2GRAY);\n```\n我尝试在```OpenCvWrapper.h```中声明实现的方法。\n```c++\n+(UIImage *) makeGary: (UIImage *) image;\n```\n显然 Swift 无法接受 Mat 类型的数据，若需要对图像进行处理并在 View 中显示，需要的是ImageView 获取到 image，换言之，我们需要进行 UIImage 与 Mat 之间的类型转换，而 OpenCV iOS 框架中就做了这样的事情。所以我们的```OpenCvWrapper.mm```看起来会是这样。\n\n```c++\n#import <opencv2/opencv.hpp>\n#import <opencv2/imgcodecs/ios.h>\n#import \"OpenCvWrapper.h\"\n\nusing namespace cv;\n\n@implementation OpenCvWrapper\n\n+(UIImage *) makeGary: (UIImage *) image\n{\n    Mat source,target;\n    UIImageToMat(image,source);\n    \n    if(source.channels() == 1) return image;\n    cvtColor(source, target, COLOR_BGR2GRAY);\n    \n    return MatToUIImage(target);\n}\n@end\n```\n接下来需要做的事情就轻车熟路了，只需要通过```OpenCvWrapper.makeGary(image)```方法即可返回一个经过处理的 UIImage 对象。\n\n## 改进\n我给予了 Haze-Free 图像处理App三种图像处理功能，分别是去雾、灰度化与中值滤波，考虑到处理图像本身需要一定的等待时间，我添加了 UIActivityIndicatorView 并放置了一个无法交互的 UIView 在需要的时候出现，同时 GCD 也可以加以运用，以下为部分改进后的代码。\n```swift\n    private let queue = DispatchQueue(label: \"process-queue\", qos: .userInitiated)\n    \n    enum ProcessType {\n        case toGrayScale, toHazeFree, toSoftFilter\n    }\n\n   override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(true)\n        self.loadingOverlayView.isHidden = true\n    }\n    \n    @IBAction func toGrayScale(_ sender: Any) {\n        processImage(withType: .toGrayScale)\n    }\n    \n    @IBAction func toHazeFree(_ sender: Any) {\n        processImage(withType: .toHazeFree)\n    }\n    \n    @IBAction func toSoftFilter(_ sender: Any) {\n        processImage(withType: .toSoftFilter)\n    }\n    \n    private func processImage(withType type: ProcessType) {\n        self.loadingOverlayView.isHidden = false\n        let image = self.demoImageView.image!\n        queue.async {\n            let processed: UIImage\n            switch type {\n            case .toHazeFree:\n                processed = OpenCvWrapper.hazeFree(image)\n            case .toSoftFilter:\n                processed = OpenCvWrapper.softFilter(image)\n            case .toGrayScale:\n                processed = OpenCvWrapper.makeGary(image)\n            }\n            self.processed = processed\n            DispatchQueue.main.async {\n                self.performSegue(withIdentifier: \"SavingPhoto\", sender: nil)\n            }\n        }\n    }\n```\n\n## 错误\n在写 App 的过程中遇到了一个重大问题，去雾算法验证无误后始终无法得到正确的去雾图像，于是开始对去雾步骤中所有的阶段性图像打断点，一一验证得到的图像结果。最后根据StackOverFlow 上的解释以及断点结果查明了原因，原因出在 ```UIImageToMat``` 方法返回的Mat 类型上。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.40.11.png)\n```UIImageToMat``` 方法返回的Mat类型为 ```CV_8UC4```，而程序中需要的 Mat 格式为 ```CV_8UC3```，需要使用```cvtColor()``` 方法对其进行转换，改正后程序正常运行。\n在使用 SFSymbols 时遇到了一些bug，UIButton的 image 使用 SFSymbol出现了无法显示Background 的问题，Debug View Hierarchy也看不出来名堂，最后只好换了自定义的icon。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.51.25.png)\n\n\n## App 总结\n### UI总结\n研究了iOS的设计原则后，针对该程序设计了以下页面，包含欢迎页面、权限获取页面、图像浏览页面、图像处理页面与图像分享页面，尽最大程度减少不同页面之间的耦合，使整体的页面逻辑更加清晰。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.56.25.png)\n在对iOS开发框架进行实践后，为 App 增加了中值滤波和灰度转换的功能，同时嵌入了Unsplash 获取图像的SDK，使得程序不仅能够从相册、相机获取图像，还能够直接从 Unsplash 无版权图像网站通过关键字检索获取图像。同时新增了图像分享的入口。为了适应新的变化将页面进行了部分重组，使其更加符合开发需求。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.58.22.png)\n未来可能会考虑将该项目进行开源，现阶段仍然希望其具备更多的功能，以下为软件的运行测试。\n\n### 页面逻辑\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.44.23.png)\n- 开启App后进入引导页面，提示用户使用该App需遵守相关用户协议。\n- 点击开始处理后跳转至第二个页面，页面显示提示需要选择图像\n- 点击选择图像后，用户需要在三种图像获取图形中做出选择，或选择取消\n\n### 运行测试\n\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.46.41.png)\n- 处理相册图片实例，点选最近拍摄的照片，程序在本视图中加载此图像\n- 点击三个处理按钮中的最右者，即中值滤波效果，视图会进行跳转\n- 新的视图包含了保存和分享图像的功能，若点击保存，程序会将图像写入相册并告知用户\n\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.51.50.png)\n- 尝试从相册加载一张新图像，可以看到图像中的树林被雾霾覆盖\n- 点击最左侧的去雾操作，由于去雾操作运算量较大，并且为了避免用户在运算过程中点按按钮，整个可操作区域不可点按，同时有活动指示环展示加载进度\n- 需要注意的是三个图像操作都采用了多线程的方式\n- 处理完成图像后可以点击分享按钮使用系统内建的分享服务进行图像的分享\n\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.54.28.png)\n- 尝试从相机拍摄一张图像\n- 点击拍摄按钮后图像被获取，可以使用该图像进行处理\n- 在视图中加载图像后尝试点击中间的灰度化图像处理\n- 图像灰度化操作完成可以预览效果和保存、分享\n\n\n\n## 参考\n[1] Kaiming He. Single Image Haze Removal Using Dark Channel Prior [D]. 2009,CVPR\n[2] Alexander Shishkov, Kirill Kornyakov. Instant OpenCV for iOS (English Edition) [M]. Packt Publishing, 2013\n[3] Matthijs Hollemans. The iOS Apprentice [M]. Razeware LLC, 2014\n","source":"_posts/Haze-Free.md","raw":"---\ntitle: iOS 图像处理 App - OpenCV 与 Swift 开发\ndate: 2020-07-01 09:20:20\ncategories: \n- tech\ntags: \n- iOS\n- OpenCV\n- Swift\ncopyright: true\n---\n\n本篇内容主要包含在 iOS 项目项目中添加 OpenCV 库、Objective-C++ 与 Swift 的结合使用，及桥接文件的添加等等，为 OpenCV 系列的第四篇文章。\n<!--more-->\n\n## 目的\n本学期选修了 OpenCV 相关课程，最后课程设计为完成一个图像去雾功能的小程序。作为一个具备 iOS 相关基础的程序员，我没有选用老师推荐的 Qt 平台，而是选择在 iOS 平台上实现算法的应用。最终实现效果还不错，而其中去雾算法参考了何凯明博士的论文[Kaiming He. Single Image Haze Removal Using Dark Channel Prior](http://kaiminghe.com/publications/cvpr09.pdf)，不在本文的讨论范畴，本文主要对Objective-C++ 与 Swift 的结合开发做一个总结。\n\n## 环境\n- Swift 5\n- iOS 13.4\n- Xcode 11.5\n- OpenCV Framework 4.3.0\n\n## 配置\nOpenCV Package 可以通过以下两种方式添加到 iOS 项目当中：\n\n1. 使用 CocoaPods 添加\nProfile 中添加 OpenCV：\n\n```\ntarget 'Haze-Free' do\n  use_frameworks!\n  pod 'OpenCV'\nend\n```\n\n2.自行下载并添加\n在官网下载相应版本的[iOS Pack](https://opencv.org/releases/)，解压后得到一个 opencv2.framework 库，创建项目并右键添加文件到项目。\n\n## 桥接\nOpenCV 框架由 C++ 进行编码，通过将 C++ 代码插入 Objective-C 就成为了 Objective-C++ 代码。但是 Swift 本身与 Objective-C / Objective-C++ 并不兼容，所以需要一个Bridging Header 将 OpenCV 的功能接口暴露给 Swift。\n以下为简单的示意图。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2015.18.30.png)\n\n添加一个 Objective-C 文件到项目中将其命名为“OpenCvWrapper”，包含```OpenCvWrapper.h```与```OpenCvWrapper.m```两个文件，需要将文件扩展名“.m”改为“.mm”。如果自动弹出提示是否添加 Bridging-Header 文件选择添加；如果没有提示，则手动添加一个 Bridging-Header 文件，即添加一个头文件（Header file），重命名为“项目名-Bridging-Header.h”（本例中为：Haze-Free-Bridging-Header.h），部分项目结构图如下。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2015.54.22.png)\n\n## 业务逻辑\n如果你对 C++ 和 Objective-C 有一定了解，那完全能够理解以下的步骤。\n其中 Bridging-Header 对 Objective-C++ 类及方法进行定义，而 OpenCVWrapper 主要面向具体定义的类及方法实现。\n假设我需要对图片进行灰度化处理，需要调用的 OpenCV 函数为\n```c++\ncvtColor(source, target, COLOR_BGR2GRAY);\n```\n我尝试在```OpenCvWrapper.h```中声明实现的方法。\n```c++\n+(UIImage *) makeGary: (UIImage *) image;\n```\n显然 Swift 无法接受 Mat 类型的数据，若需要对图像进行处理并在 View 中显示，需要的是ImageView 获取到 image，换言之，我们需要进行 UIImage 与 Mat 之间的类型转换，而 OpenCV iOS 框架中就做了这样的事情。所以我们的```OpenCvWrapper.mm```看起来会是这样。\n\n```c++\n#import <opencv2/opencv.hpp>\n#import <opencv2/imgcodecs/ios.h>\n#import \"OpenCvWrapper.h\"\n\nusing namespace cv;\n\n@implementation OpenCvWrapper\n\n+(UIImage *) makeGary: (UIImage *) image\n{\n    Mat source,target;\n    UIImageToMat(image,source);\n    \n    if(source.channels() == 1) return image;\n    cvtColor(source, target, COLOR_BGR2GRAY);\n    \n    return MatToUIImage(target);\n}\n@end\n```\n接下来需要做的事情就轻车熟路了，只需要通过```OpenCvWrapper.makeGary(image)```方法即可返回一个经过处理的 UIImage 对象。\n\n## 改进\n我给予了 Haze-Free 图像处理App三种图像处理功能，分别是去雾、灰度化与中值滤波，考虑到处理图像本身需要一定的等待时间，我添加了 UIActivityIndicatorView 并放置了一个无法交互的 UIView 在需要的时候出现，同时 GCD 也可以加以运用，以下为部分改进后的代码。\n```swift\n    private let queue = DispatchQueue(label: \"process-queue\", qos: .userInitiated)\n    \n    enum ProcessType {\n        case toGrayScale, toHazeFree, toSoftFilter\n    }\n\n   override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(true)\n        self.loadingOverlayView.isHidden = true\n    }\n    \n    @IBAction func toGrayScale(_ sender: Any) {\n        processImage(withType: .toGrayScale)\n    }\n    \n    @IBAction func toHazeFree(_ sender: Any) {\n        processImage(withType: .toHazeFree)\n    }\n    \n    @IBAction func toSoftFilter(_ sender: Any) {\n        processImage(withType: .toSoftFilter)\n    }\n    \n    private func processImage(withType type: ProcessType) {\n        self.loadingOverlayView.isHidden = false\n        let image = self.demoImageView.image!\n        queue.async {\n            let processed: UIImage\n            switch type {\n            case .toHazeFree:\n                processed = OpenCvWrapper.hazeFree(image)\n            case .toSoftFilter:\n                processed = OpenCvWrapper.softFilter(image)\n            case .toGrayScale:\n                processed = OpenCvWrapper.makeGary(image)\n            }\n            self.processed = processed\n            DispatchQueue.main.async {\n                self.performSegue(withIdentifier: \"SavingPhoto\", sender: nil)\n            }\n        }\n    }\n```\n\n## 错误\n在写 App 的过程中遇到了一个重大问题，去雾算法验证无误后始终无法得到正确的去雾图像，于是开始对去雾步骤中所有的阶段性图像打断点，一一验证得到的图像结果。最后根据StackOverFlow 上的解释以及断点结果查明了原因，原因出在 ```UIImageToMat``` 方法返回的Mat 类型上。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.40.11.png)\n```UIImageToMat``` 方法返回的Mat类型为 ```CV_8UC4```，而程序中需要的 Mat 格式为 ```CV_8UC3```，需要使用```cvtColor()``` 方法对其进行转换，改正后程序正常运行。\n在使用 SFSymbols 时遇到了一些bug，UIButton的 image 使用 SFSymbol出现了无法显示Background 的问题，Debug View Hierarchy也看不出来名堂，最后只好换了自定义的icon。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.51.25.png)\n\n\n## App 总结\n### UI总结\n研究了iOS的设计原则后，针对该程序设计了以下页面，包含欢迎页面、权限获取页面、图像浏览页面、图像处理页面与图像分享页面，尽最大程度减少不同页面之间的耦合，使整体的页面逻辑更加清晰。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.56.25.png)\n在对iOS开发框架进行实践后，为 App 增加了中值滤波和灰度转换的功能，同时嵌入了Unsplash 获取图像的SDK，使得程序不仅能够从相册、相机获取图像，还能够直接从 Unsplash 无版权图像网站通过关键字检索获取图像。同时新增了图像分享的入口。为了适应新的变化将页面进行了部分重组，使其更加符合开发需求。\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.58.22.png)\n未来可能会考虑将该项目进行开源，现阶段仍然希望其具备更多的功能，以下为软件的运行测试。\n\n### 页面逻辑\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.44.23.png)\n- 开启App后进入引导页面，提示用户使用该App需遵守相关用户协议。\n- 点击开始处理后跳转至第二个页面，页面显示提示需要选择图像\n- 点击选择图像后，用户需要在三种图像获取图形中做出选择，或选择取消\n\n### 运行测试\n\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.46.41.png)\n- 处理相册图片实例，点选最近拍摄的照片，程序在本视图中加载此图像\n- 点击三个处理按钮中的最右者，即中值滤波效果，视图会进行跳转\n- 新的视图包含了保存和分享图像的功能，若点击保存，程序会将图像写入相册并告知用户\n\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.51.50.png)\n- 尝试从相册加载一张新图像，可以看到图像中的树林被雾霾覆盖\n- 点击最左侧的去雾操作，由于去雾操作运算量较大，并且为了避免用户在运算过程中点按按钮，整个可操作区域不可点按，同时有活动指示环展示加载进度\n- 需要注意的是三个图像操作都采用了多线程的方式\n- 处理完成图像后可以点击分享按钮使用系统内建的分享服务进行图像的分享\n\n![](http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.54.28.png)\n- 尝试从相机拍摄一张图像\n- 点击拍摄按钮后图像被获取，可以使用该图像进行处理\n- 在视图中加载图像后尝试点击中间的灰度化图像处理\n- 图像灰度化操作完成可以预览效果和保存、分享\n\n\n\n## 参考\n[1] Kaiming He. Single Image Haze Removal Using Dark Channel Prior [D]. 2009,CVPR\n[2] Alexander Shishkov, Kirill Kornyakov. Instant OpenCV for iOS (English Edition) [M]. Packt Publishing, 2013\n[3] Matthijs Hollemans. The iOS Apprentice [M]. Razeware LLC, 2014\n","slug":"Haze-Free","published":1,"updated":"2020-07-12T09:32:08.120Z","_id":"ckcive9n20009cv6bfh8rg6bi","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本篇内容主要包含在 iOS 项目项目中添加 OpenCV 库、Objective-C++ 与 Swift 的结合使用，及桥接文件的添加等等，为 OpenCV 系列的第四篇文章。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>本学期选修了 OpenCV 相关课程，最后课程设计为完成一个图像去雾功能的小程序。作为一个具备 iOS 相关基础的程序员，我没有选用老师推荐的 Qt 平台，而是选择在 iOS 平台上实现算法的应用。最终实现效果还不错，而其中去雾算法参考了何凯明博士的论文<a href=\"http://kaiminghe.com/publications/cvpr09.pdf\" target=\"_blank\" rel=\"noopener\">Kaiming He. Single Image Haze Removal Using Dark Channel Prior</a>，不在本文的讨论范畴，本文主要对Objective-C++ 与 Swift 的结合开发做一个总结。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>Swift 5</li>\n<li>iOS 13.4</li>\n<li>Xcode 11.5</li>\n<li>OpenCV Framework 4.3.0</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>OpenCV Package 可以通过以下两种方式添加到 iOS 项目当中：</p>\n<ol>\n<li>使用 CocoaPods 添加<br>Profile 中添加 OpenCV：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target &#39;Haze-Free&#39; do</span><br><span class=\"line\">  use_frameworks!</span><br><span class=\"line\">  pod &#39;OpenCV&#39;</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>2.自行下载并添加<br>在官网下载相应版本的<a href=\"https://opencv.org/releases/\" target=\"_blank\" rel=\"noopener\">iOS Pack</a>，解压后得到一个 opencv2.framework 库，创建项目并右键添加文件到项目。</p>\n<h2 id=\"桥接\"><a href=\"#桥接\" class=\"headerlink\" title=\"桥接\"></a>桥接</h2><p>OpenCV 框架由 C++ 进行编码，通过将 C++ 代码插入 Objective-C 就成为了 Objective-C++ 代码。但是 Swift 本身与 Objective-C / Objective-C++ 并不兼容，所以需要一个Bridging Header 将 OpenCV 的功能接口暴露给 Swift。<br>以下为简单的示意图。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2015.18.30.png\" alt=\"\"></p>\n<p>添加一个 Objective-C 文件到项目中将其命名为“OpenCvWrapper”，包含<code>OpenCvWrapper.h</code>与<code>OpenCvWrapper.m</code>两个文件，需要将文件扩展名“.m”改为“.mm”。如果自动弹出提示是否添加 Bridging-Header 文件选择添加；如果没有提示，则手动添加一个 Bridging-Header 文件，即添加一个头文件（Header file），重命名为“项目名-Bridging-Header.h”（本例中为：Haze-Free-Bridging-Header.h），部分项目结构图如下。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2015.54.22.png\" alt=\"\"></p>\n<h2 id=\"业务逻辑\"><a href=\"#业务逻辑\" class=\"headerlink\" title=\"业务逻辑\"></a>业务逻辑</h2><p>如果你对 C++ 和 Objective-C 有一定了解，那完全能够理解以下的步骤。<br>其中 Bridging-Header 对 Objective-C++ 类及方法进行定义，而 OpenCVWrapper 主要面向具体定义的类及方法实现。<br>假设我需要对图片进行灰度化处理，需要调用的 OpenCV 函数为</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cvtColor(source, target, COLOR_BGR2GRAY);</span><br></pre></td></tr></table></figure>\n<p>我尝试在<code>OpenCvWrapper.h</code>中声明实现的方法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(UIImage *) makeGary: (UIImage *) <span class=\"built_in\">image</span>;</span><br></pre></td></tr></table></figure>\n<p>显然 Swift 无法接受 Mat 类型的数据，若需要对图像进行处理并在 View 中显示，需要的是ImageView 获取到 image，换言之，我们需要进行 UIImage 与 Mat 之间的类型转换，而 OpenCV iOS 框架中就做了这样的事情。所以我们的<code>OpenCvWrapper.mm</code>看起来会是这样。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;opencv2/imgcodecs/ios.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"OpenCvWrapper.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation OpenCvWrapper</span><br><span class=\"line\"></span><br><span class=\"line\">+(UIImage *) makeGary: (UIImage *) <span class=\"built_in\">image</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Mat source,target;</span><br><span class=\"line\">    UIImageToMat(<span class=\"built_in\">image</span>,source);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(source.channels() == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">image</span>;</span><br><span class=\"line\">    cvtColor(source, target, COLOR_BGR2GRAY);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> MatToUIImage(target);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"built_in\">end</span></span><br></pre></td></tr></table></figure>\n<p>接下来需要做的事情就轻车熟路了，只需要通过<code>OpenCvWrapper.makeGary(image)</code>方法即可返回一个经过处理的 UIImage 对象。</p>\n<h2 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h2><p>我给予了 Haze-Free 图像处理App三种图像处理功能，分别是去雾、灰度化与中值滤波，考虑到处理图像本身需要一定的等待时间，我添加了 UIActivityIndicatorView 并放置了一个无法交互的 UIView 在需要的时候出现，同时 GCD 也可以加以运用，以下为部分改进后的代码。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> queue = <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">\"process-queue\"</span>, qos: .userInitiated)</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">ProcessType</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">case</span> toGrayScale, toHazeFree, toSoftFilter</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewWillAppear</span><span class=\"params\">(<span class=\"number\">_</span> animated: Bool)</span></span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">super</span>.viewWillAppear(<span class=\"literal\">true</span>)</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.loadingOverlayView.isHidden = <span class=\"literal\">true</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">toGrayScale</span><span class=\"params\">(<span class=\"number\">_</span> sender: <span class=\"keyword\">Any</span>)</span></span> &#123;</span><br><span class=\"line\">     processImage(withType: .toGrayScale)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">toHazeFree</span><span class=\"params\">(<span class=\"number\">_</span> sender: <span class=\"keyword\">Any</span>)</span></span> &#123;</span><br><span class=\"line\">     processImage(withType: .toHazeFree)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">toSoftFilter</span><span class=\"params\">(<span class=\"number\">_</span> sender: <span class=\"keyword\">Any</span>)</span></span> &#123;</span><br><span class=\"line\">     processImage(withType: .toSoftFilter)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">processImage</span><span class=\"params\">(withType type: ProcessType)</span></span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.loadingOverlayView.isHidden = <span class=\"literal\">false</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> image = <span class=\"keyword\">self</span>.demoImageView.image!</span><br><span class=\"line\">     queue.async &#123;</span><br><span class=\"line\">         <span class=\"keyword\">let</span> processed: <span class=\"type\">UIImage</span></span><br><span class=\"line\">         <span class=\"keyword\">switch</span> type &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .toHazeFree:</span><br><span class=\"line\">             processed = <span class=\"type\">OpenCvWrapper</span>.hazeFree(image)</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .toSoftFilter:</span><br><span class=\"line\">             processed = <span class=\"type\">OpenCvWrapper</span>.softFilter(image)</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .toGrayScale:</span><br><span class=\"line\">             processed = <span class=\"type\">OpenCvWrapper</span>.makeGary(image)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">self</span>.processed = processed</span><br><span class=\"line\">         <span class=\"type\">DispatchQueue</span>.main.async &#123;</span><br><span class=\"line\">             <span class=\"keyword\">self</span>.performSegue(withIdentifier: <span class=\"string\">\"SavingPhoto\"</span>, sender: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"错误\"><a href=\"#错误\" class=\"headerlink\" title=\"错误\"></a>错误</h2><p>在写 App 的过程中遇到了一个重大问题，去雾算法验证无误后始终无法得到正确的去雾图像，于是开始对去雾步骤中所有的阶段性图像打断点，一一验证得到的图像结果。最后根据StackOverFlow 上的解释以及断点结果查明了原因，原因出在 <code>UIImageToMat</code> 方法返回的Mat 类型上。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.40.11.png\" alt=\"\"><br><code>UIImageToMat</code> 方法返回的Mat类型为 <code>CV_8UC4</code>，而程序中需要的 Mat 格式为 <code>CV_8UC3</code>，需要使用<code>cvtColor()</code> 方法对其进行转换，改正后程序正常运行。<br>在使用 SFSymbols 时遇到了一些bug，UIButton的 image 使用 SFSymbol出现了无法显示Background 的问题，Debug View Hierarchy也看不出来名堂，最后只好换了自定义的icon。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.51.25.png\" alt=\"\"></p>\n<h2 id=\"App-总结\"><a href=\"#App-总结\" class=\"headerlink\" title=\"App 总结\"></a>App 总结</h2><h3 id=\"UI总结\"><a href=\"#UI总结\" class=\"headerlink\" title=\"UI总结\"></a>UI总结</h3><p>研究了iOS的设计原则后，针对该程序设计了以下页面，包含欢迎页面、权限获取页面、图像浏览页面、图像处理页面与图像分享页面，尽最大程度减少不同页面之间的耦合，使整体的页面逻辑更加清晰。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.56.25.png\" alt=\"\"><br>在对iOS开发框架进行实践后，为 App 增加了中值滤波和灰度转换的功能，同时嵌入了Unsplash 获取图像的SDK，使得程序不仅能够从相册、相机获取图像，还能够直接从 Unsplash 无版权图像网站通过关键字检索获取图像。同时新增了图像分享的入口。为了适应新的变化将页面进行了部分重组，使其更加符合开发需求。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.58.22.png\" alt=\"\"><br>未来可能会考虑将该项目进行开源，现阶段仍然希望其具备更多的功能，以下为软件的运行测试。</p>\n<h3 id=\"页面逻辑\"><a href=\"#页面逻辑\" class=\"headerlink\" title=\"页面逻辑\"></a>页面逻辑</h3><p><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.44.23.png\" alt=\"\"></p>\n<ul>\n<li>开启App后进入引导页面，提示用户使用该App需遵守相关用户协议。</li>\n<li>点击开始处理后跳转至第二个页面，页面显示提示需要选择图像</li>\n<li>点击选择图像后，用户需要在三种图像获取图形中做出选择，或选择取消</li>\n</ul>\n<h3 id=\"运行测试\"><a href=\"#运行测试\" class=\"headerlink\" title=\"运行测试\"></a>运行测试</h3><p><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.46.41.png\" alt=\"\"></p>\n<ul>\n<li>处理相册图片实例，点选最近拍摄的照片，程序在本视图中加载此图像</li>\n<li>点击三个处理按钮中的最右者，即中值滤波效果，视图会进行跳转</li>\n<li>新的视图包含了保存和分享图像的功能，若点击保存，程序会将图像写入相册并告知用户</li>\n</ul>\n<p><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.51.50.png\" alt=\"\"></p>\n<ul>\n<li>尝试从相册加载一张新图像，可以看到图像中的树林被雾霾覆盖</li>\n<li>点击最左侧的去雾操作，由于去雾操作运算量较大，并且为了避免用户在运算过程中点按按钮，整个可操作区域不可点按，同时有活动指示环展示加载进度</li>\n<li>需要注意的是三个图像操作都采用了多线程的方式</li>\n<li>处理完成图像后可以点击分享按钮使用系统内建的分享服务进行图像的分享</li>\n</ul>\n<p><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.54.28.png\" alt=\"\"></p>\n<ul>\n<li>尝试从相机拍摄一张图像</li>\n<li>点击拍摄按钮后图像被获取，可以使用该图像进行处理</li>\n<li>在视图中加载图像后尝试点击中间的灰度化图像处理</li>\n<li>图像灰度化操作完成可以预览效果和保存、分享</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>[1] Kaiming He. Single Image Haze Removal Using Dark Channel Prior [D]. 2009,CVPR<br>[2] Alexander Shishkov, Kirill Kornyakov. Instant OpenCV for iOS (English Edition) [M]. Packt Publishing, 2013<br>[3] Matthijs Hollemans. The iOS Apprentice [M]. Razeware LLC, 2014</p>\n","site":{"data":{}},"excerpt":"<p>本篇内容主要包含在 iOS 项目项目中添加 OpenCV 库、Objective-C++ 与 Swift 的结合使用，及桥接文件的添加等等，为 OpenCV 系列的第四篇文章。</p>","more":"<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>本学期选修了 OpenCV 相关课程，最后课程设计为完成一个图像去雾功能的小程序。作为一个具备 iOS 相关基础的程序员，我没有选用老师推荐的 Qt 平台，而是选择在 iOS 平台上实现算法的应用。最终实现效果还不错，而其中去雾算法参考了何凯明博士的论文<a href=\"http://kaiminghe.com/publications/cvpr09.pdf\" target=\"_blank\" rel=\"noopener\">Kaiming He. Single Image Haze Removal Using Dark Channel Prior</a>，不在本文的讨论范畴，本文主要对Objective-C++ 与 Swift 的结合开发做一个总结。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>Swift 5</li>\n<li>iOS 13.4</li>\n<li>Xcode 11.5</li>\n<li>OpenCV Framework 4.3.0</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>OpenCV Package 可以通过以下两种方式添加到 iOS 项目当中：</p>\n<ol>\n<li>使用 CocoaPods 添加<br>Profile 中添加 OpenCV：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target &#39;Haze-Free&#39; do</span><br><span class=\"line\">  use_frameworks!</span><br><span class=\"line\">  pod &#39;OpenCV&#39;</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>2.自行下载并添加<br>在官网下载相应版本的<a href=\"https://opencv.org/releases/\" target=\"_blank\" rel=\"noopener\">iOS Pack</a>，解压后得到一个 opencv2.framework 库，创建项目并右键添加文件到项目。</p>\n<h2 id=\"桥接\"><a href=\"#桥接\" class=\"headerlink\" title=\"桥接\"></a>桥接</h2><p>OpenCV 框架由 C++ 进行编码，通过将 C++ 代码插入 Objective-C 就成为了 Objective-C++ 代码。但是 Swift 本身与 Objective-C / Objective-C++ 并不兼容，所以需要一个Bridging Header 将 OpenCV 的功能接口暴露给 Swift。<br>以下为简单的示意图。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2015.18.30.png\" alt=\"\"></p>\n<p>添加一个 Objective-C 文件到项目中将其命名为“OpenCvWrapper”，包含<code>OpenCvWrapper.h</code>与<code>OpenCvWrapper.m</code>两个文件，需要将文件扩展名“.m”改为“.mm”。如果自动弹出提示是否添加 Bridging-Header 文件选择添加；如果没有提示，则手动添加一个 Bridging-Header 文件，即添加一个头文件（Header file），重命名为“项目名-Bridging-Header.h”（本例中为：Haze-Free-Bridging-Header.h），部分项目结构图如下。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2015.54.22.png\" alt=\"\"></p>\n<h2 id=\"业务逻辑\"><a href=\"#业务逻辑\" class=\"headerlink\" title=\"业务逻辑\"></a>业务逻辑</h2><p>如果你对 C++ 和 Objective-C 有一定了解，那完全能够理解以下的步骤。<br>其中 Bridging-Header 对 Objective-C++ 类及方法进行定义，而 OpenCVWrapper 主要面向具体定义的类及方法实现。<br>假设我需要对图片进行灰度化处理，需要调用的 OpenCV 函数为</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cvtColor(source, target, COLOR_BGR2GRAY);</span><br></pre></td></tr></table></figure>\n<p>我尝试在<code>OpenCvWrapper.h</code>中声明实现的方法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(UIImage *) makeGary: (UIImage *) <span class=\"built_in\">image</span>;</span><br></pre></td></tr></table></figure>\n<p>显然 Swift 无法接受 Mat 类型的数据，若需要对图像进行处理并在 View 中显示，需要的是ImageView 获取到 image，换言之，我们需要进行 UIImage 与 Mat 之间的类型转换，而 OpenCV iOS 框架中就做了这样的事情。所以我们的<code>OpenCvWrapper.mm</code>看起来会是这样。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;opencv2/imgcodecs/ios.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"OpenCvWrapper.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation OpenCvWrapper</span><br><span class=\"line\"></span><br><span class=\"line\">+(UIImage *) makeGary: (UIImage *) <span class=\"built_in\">image</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Mat source,target;</span><br><span class=\"line\">    UIImageToMat(<span class=\"built_in\">image</span>,source);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(source.channels() == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">image</span>;</span><br><span class=\"line\">    cvtColor(source, target, COLOR_BGR2GRAY);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> MatToUIImage(target);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"built_in\">end</span></span><br></pre></td></tr></table></figure>\n<p>接下来需要做的事情就轻车熟路了，只需要通过<code>OpenCvWrapper.makeGary(image)</code>方法即可返回一个经过处理的 UIImage 对象。</p>\n<h2 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h2><p>我给予了 Haze-Free 图像处理App三种图像处理功能，分别是去雾、灰度化与中值滤波，考虑到处理图像本身需要一定的等待时间，我添加了 UIActivityIndicatorView 并放置了一个无法交互的 UIView 在需要的时候出现，同时 GCD 也可以加以运用，以下为部分改进后的代码。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> queue = <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">\"process-queue\"</span>, qos: .userInitiated)</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">ProcessType</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">case</span> toGrayScale, toHazeFree, toSoftFilter</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewWillAppear</span><span class=\"params\">(<span class=\"number\">_</span> animated: Bool)</span></span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">super</span>.viewWillAppear(<span class=\"literal\">true</span>)</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.loadingOverlayView.isHidden = <span class=\"literal\">true</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">toGrayScale</span><span class=\"params\">(<span class=\"number\">_</span> sender: <span class=\"keyword\">Any</span>)</span></span> &#123;</span><br><span class=\"line\">     processImage(withType: .toGrayScale)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">toHazeFree</span><span class=\"params\">(<span class=\"number\">_</span> sender: <span class=\"keyword\">Any</span>)</span></span> &#123;</span><br><span class=\"line\">     processImage(withType: .toHazeFree)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">toSoftFilter</span><span class=\"params\">(<span class=\"number\">_</span> sender: <span class=\"keyword\">Any</span>)</span></span> &#123;</span><br><span class=\"line\">     processImage(withType: .toSoftFilter)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">processImage</span><span class=\"params\">(withType type: ProcessType)</span></span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.loadingOverlayView.isHidden = <span class=\"literal\">false</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> image = <span class=\"keyword\">self</span>.demoImageView.image!</span><br><span class=\"line\">     queue.async &#123;</span><br><span class=\"line\">         <span class=\"keyword\">let</span> processed: <span class=\"type\">UIImage</span></span><br><span class=\"line\">         <span class=\"keyword\">switch</span> type &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .toHazeFree:</span><br><span class=\"line\">             processed = <span class=\"type\">OpenCvWrapper</span>.hazeFree(image)</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .toSoftFilter:</span><br><span class=\"line\">             processed = <span class=\"type\">OpenCvWrapper</span>.softFilter(image)</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .toGrayScale:</span><br><span class=\"line\">             processed = <span class=\"type\">OpenCvWrapper</span>.makeGary(image)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">self</span>.processed = processed</span><br><span class=\"line\">         <span class=\"type\">DispatchQueue</span>.main.async &#123;</span><br><span class=\"line\">             <span class=\"keyword\">self</span>.performSegue(withIdentifier: <span class=\"string\">\"SavingPhoto\"</span>, sender: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"错误\"><a href=\"#错误\" class=\"headerlink\" title=\"错误\"></a>错误</h2><p>在写 App 的过程中遇到了一个重大问题，去雾算法验证无误后始终无法得到正确的去雾图像，于是开始对去雾步骤中所有的阶段性图像打断点，一一验证得到的图像结果。最后根据StackOverFlow 上的解释以及断点结果查明了原因，原因出在 <code>UIImageToMat</code> 方法返回的Mat 类型上。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.40.11.png\" alt=\"\"><br><code>UIImageToMat</code> 方法返回的Mat类型为 <code>CV_8UC4</code>，而程序中需要的 Mat 格式为 <code>CV_8UC3</code>，需要使用<code>cvtColor()</code> 方法对其进行转换，改正后程序正常运行。<br>在使用 SFSymbols 时遇到了一些bug，UIButton的 image 使用 SFSymbol出现了无法显示Background 的问题，Debug View Hierarchy也看不出来名堂，最后只好换了自定义的icon。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.51.25.png\" alt=\"\"></p>\n<h2 id=\"App-总结\"><a href=\"#App-总结\" class=\"headerlink\" title=\"App 总结\"></a>App 总结</h2><h3 id=\"UI总结\"><a href=\"#UI总结\" class=\"headerlink\" title=\"UI总结\"></a>UI总结</h3><p>研究了iOS的设计原则后，针对该程序设计了以下页面，包含欢迎页面、权限获取页面、图像浏览页面、图像处理页面与图像分享页面，尽最大程度减少不同页面之间的耦合，使整体的页面逻辑更加清晰。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.56.25.png\" alt=\"\"><br>在对iOS开发框架进行实践后，为 App 增加了中值滤波和灰度转换的功能，同时嵌入了Unsplash 获取图像的SDK，使得程序不仅能够从相册、相机获取图像，还能够直接从 Unsplash 无版权图像网站通过关键字检索获取图像。同时新增了图像分享的入口。为了适应新的变化将页面进行了部分重组，使其更加符合开发需求。<br><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.58.22.png\" alt=\"\"><br>未来可能会考虑将该项目进行开源，现阶段仍然希望其具备更多的功能，以下为软件的运行测试。</p>\n<h3 id=\"页面逻辑\"><a href=\"#页面逻辑\" class=\"headerlink\" title=\"页面逻辑\"></a>页面逻辑</h3><p><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.44.23.png\" alt=\"\"></p>\n<ul>\n<li>开启App后进入引导页面，提示用户使用该App需遵守相关用户协议。</li>\n<li>点击开始处理后跳转至第二个页面，页面显示提示需要选择图像</li>\n<li>点击选择图像后，用户需要在三种图像获取图形中做出选择，或选择取消</li>\n</ul>\n<h3 id=\"运行测试\"><a href=\"#运行测试\" class=\"headerlink\" title=\"运行测试\"></a>运行测试</h3><p><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.46.41.png\" alt=\"\"></p>\n<ul>\n<li>处理相册图片实例，点选最近拍摄的照片，程序在本视图中加载此图像</li>\n<li>点击三个处理按钮中的最右者，即中值滤波效果，视图会进行跳转</li>\n<li>新的视图包含了保存和分享图像的功能，若点击保存，程序会将图像写入相册并告知用户</li>\n</ul>\n<p><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.51.50.png\" alt=\"\"></p>\n<ul>\n<li>尝试从相册加载一张新图像，可以看到图像中的树林被雾霾覆盖</li>\n<li>点击最左侧的去雾操作，由于去雾操作运算量较大，并且为了避免用户在运算过程中点按按钮，整个可操作区域不可点按，同时有活动指示环展示加载进度</li>\n<li>需要注意的是三个图像操作都采用了多线程的方式</li>\n<li>处理完成图像后可以点击分享按钮使用系统内建的分享服务进行图像的分享</li>\n</ul>\n<p><img src=\"http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.54.28.png\" alt=\"\"></p>\n<ul>\n<li>尝试从相机拍摄一张图像</li>\n<li>点击拍摄按钮后图像被获取，可以使用该图像进行处理</li>\n<li>在视图中加载图像后尝试点击中间的灰度化图像处理</li>\n<li>图像灰度化操作完成可以预览效果和保存、分享</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>[1] Kaiming He. Single Image Haze Removal Using Dark Channel Prior [D]. 2009,CVPR<br>[2] Alexander Shishkov, Kirill Kornyakov. Instant OpenCV for iOS (English Edition) [M]. Packt Publishing, 2013<br>[3] Matthijs Hollemans. The iOS Apprentice [M]. Razeware LLC, 2014</p>"},{"title":"Muzik开发总结 — AVAudioPlayer 实践","date":"2020-07-08T11:20:20.000Z","copyright":true,"_content":"\n最近又放弃了使用 Apple Music，作为一个从音乐下载时代过来的人，我仍然保持着将歌曲同步至 iPhone 再聆听的习惯，即使我仍然无法摆脱流媒体的束缚。话说回来，Apple 原生的 Music.app 的体验除了交互，于我而言是糟糕的，我更希望有一款 Tab Based 的 iOS App 支撑这种体验，作为一个有一些 iOS 基础的人，我决定自己开发一个简单的本地音乐播放器，正好学习一些 UIKit 控件。\n\n<!--more-->\n\n## 目的\n本系列文章是开发一个简易的音乐播放器（暂时命名为“Muzik”）的博客记录，本篇目的在于实践一个简单的 AVAudioPlayer Demo 模拟 Music.app 的播放功能，内容十分基础。\n需要注意的是，此 Demo 并没有采用读取系统音乐资料库需要的 MPMediaPlayer。\n\n## 环境\n- Swift 5\n- iOS 13.5\n- Xcode 11.5\n\n在 Xcode 项目属性的 General 选项卡中点击底部的 Frameworks and Libraries，搜索AVFoundation Framework 将其添加至项目中。\n\n## 歌曲列表界面\n为了进行简单的 Demo，我将两首下载好歌曲添加到 Xcode 项目文件夹下，分别为```Song1.mp3```与```Song2.mp3```，并创建简单的结构体命名为 Song：\n```swift\nstruct Song {\n    let songName: String\n    let albumName: String\n    let artistName: String\n    let imageName: String\n    let trackName: String\n}\n```\n为了在播放时展示专辑封面，我将两首 .mp3 文件的专辑封面添加至 Assets，参照 Song 命名为 Cover1 与 Cover 2。我比较习惯于 AutoLayout 与代码布局共同使用，使用 StoryBoard 进行小项目的简单布局十分方便。\n首先，创建一个```ViewController```展示歌曲页面，添加```UITableView```并调整约束，需要将 TableView 对象的 ```Content``` 属性改为 ```Dynamic Prototypes```，将 对象的Cell的 ```Style```属性更改为```Subtitle```，至此 StoryBoard 部分已经完成。\n来到与该```ViewController```相对应的```ViewController.swift```文件，由于是在Storyboard中创建```UITableView```，所以需要通过```@IBOutlet```连接之前创建的```UITableView```，方法如Ctrl+拖拽，同时需要在```viewDidLoad()```中设置```UITableView```对象的```delegate```与```dataSource```。需要注意的是使用```UITableView```的方法需要 conforms to 相关的 protocols, 以上均为基本操作。\n我需要在```viewDidLoad()```阶段加载歌曲的相关信息，于是创建```configureSongs()```方法为```songs```数组添加相关数据（需要在之前创建）。\n尝试完成页面功能布局，作为Demo该 TableView 对象只包含一个 Section 的内容，如果需要调用系统音乐资料库的 ```MPMediaItem```，需要使用 NSRange 对不同 Section 的内容进行排序（A-Z）。为了避免列表中图片大小显示不一致问题，我将 Row 的高度更改为60。在```cellForRowAt```方法中定制 cell，在```didSelectRowAt```方法中令其 present 播放器页面，相关内容在后文中讨论，目前这个页面看起来是这样的(先忽略 Tab 的效果)。\n![](http://images.stephenfang.xyz/screen1.png)\n懒人代码如下：\n```swift\nimport UIKit\n\nclass ViewController: UIViewController, UITableViewDelegate, UITableViewDataSource{\n    \n    @IBOutlet var songTable: UITableView!\n    \n    var songs = [Song]()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        configureSongs()\n        songTable.delegate = self\n        songTable.dataSource = self\n    }\n    \n    func configureSongs() {\n        songs.append(Song(songName: \"Pretender\", albumName: \"Pretender\", artistName: \"Official鬍子男dism\", imageName: \"Cover1\", trackName: \"Song1\"))\n        songs.append(Song(songName: \"Imagine\", albumName: \"The Mango Tree\", artistName: \"Jack Johnson\", imageName: \"Cover2\", trackName: \"Song2\"))\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return songs.count\n    }\n    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {\n        return 60\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let songCell = tableView.dequeueReusableCell(withIdentifier: \"songCell\", for: indexPath)\n        let song = songs[indexPath.row]\n        \n        songCell.textLabel?.text = song.songName\n        songCell.detailTextLabel?.text = song.albumName + \"  \" + song.artistName\n        songCell.imageView?.image = UIImage(named: song.imageName)\n        \n        return songCell\n    }\n    \n    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        tableView.deselectRow(at: indexPath, animated: true)\n        \n        let position = indexPath.row\n        \n        guard let songView = storyboard?.instantiateViewController(identifier: \"player\") as? PlayerViewController else {\n            return\n        }\n        songView.position = position\n        songView.songs = songs\n        \n        present(songView,animated: true)\n    }\n    \n}\n```\n    \n## 正在播放界面\n创建```PlayerViewController```展示正在播放的页面，不需要与任何View进行连接，之后创建一个 UIView 令其紧贴 Safe Area 将其命名为 holder。这次我采用代码进行布局，最终看起来应该是这样的，虽然很不美观但是 it just works。\n![](http://images.stephenfang.xyz/screen2.png)。\n在开始代码注解前了解一下我的思路。其中```viewDidLayoutSubviews```方法在controller 的子视图的 position 和 size 被改变的时候被调用。在 view 已经被设计 subviews 并且还没有被展示在屏幕上时候，可以调用此方法改变这个view。任何依赖于 bounds 并且需要完成的操作都应该放在```viewDidLayoutSubviews```中而不是```viewDidLoad```或```viewWillAppear```中，因为 view 的 frame 和 bounds 直到 AutoLayout 完成工作的时候才会被确定，所以在执行完Auto Layout之后会调用此方法。\n当用户点击上一首歌曲或下一首歌曲按钮后，需要改变控件内容的显示，我的想法是通过调用```removeFromSuperview()```方法，该方法即进行视图节点删除的操作，执行这个方法等于在 View 的树形结构中找到该节点并删除该节点及其子节点，而并非只是删除该节点自己，同时把该对象从响应者链中移除。在ARC的情况下执行```removeFromSuperview```方法多次也没有问题因为由系统自动管理。\n那么在调用```removeFromSuperview```后势必需要重新载入页面元素，并且控制播放的过程，这个时候可以采用一个统一的方法在页面载入、切换的时候进行操作。对于 ```AVAudioPlayer```的调用方面，需要导入```AVFoundation```框架并初始化```AVAudioPlayer```对象。由于之前导入了 .mp3 文件，需要做的是让```AVAudioPlayer```获取待播放的歌曲 url，之前的 ViewController 对 Song 的具体内容有定义，而```Bundle.main.path```代表获取工程目录下的文件。系统启动时会激活 ```AVAudioSession```，通过设置```active```为\"true\"激活 Session，设置为“false”解除 Session 的激活状态，```options```使用 “.notifyOthersOnDeactivation” 使音频会话停用时其它音频会话可以返回到其它活动状态。对于```sharedInstance```包含五种设置方法，希望深入了解的参见这篇文章 [AVAudioSession - Category、Model、Options、Error参数详解](https://www.jianshu.com/p/ae843162ace1)\nInt 类型的变量```position```代表当前用户点按的歌曲在 songs 中所处下标，相关的 UIElement 配置都很容易理解不在此赘述，为了模拟 Music.app 的效果，我尝试使用\n```swift\n UIView.animate(withDuration: 0.2, animations: {\n                self.albumImageView.frame = CGRect(x: 30, y: 30, width: self.holder.frame.size.width - 60, height: self.holder.frame.size.width - 60)\n            })\n```\n实现类似的点击暂停或播放按钮后专辑封面大小变化的的效果，如果页面上已经对元素进行了大小限制使用```CGAffineTransform(scaleX: <CGFloat>, y: <CGFloat>)```也能够达到类似的效果。最后给出此次 Demo 所有的代码，对于播放器的开发进展我会持续更新，🦔本系列的第一篇文章。\n```swift\nimport UIKit\nimport AVFoundation\n\nclass PlayerViewController: UIViewController {\n    \n    public var position: Int = 0\n    public var songs: [Song] = []\n    \n    @IBOutlet weak var holder: UIView!\n    \n    var player: AVAudioPlayer?\n    let playPauseButton = UIButton()\n    \n    private let albumImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        return imageView\n    } ()\n    \n    private let nameLabel: UILabel = {\n        let label = UILabel()\n        label.textAlignment = .center\n        label.numberOfLines = 0\n        return label\n    } ()\n    \n    private let albumLabel: UILabel = {\n        let label = UILabel()\n        label.textAlignment = .center\n        label.numberOfLines = 0\n        return label\n    } ()\n    \n    private let artistLabel: UILabel = {\n        let label = UILabel()\n        label.textAlignment = .center\n        label.numberOfLines = 0\n        return label\n    } ()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    override func viewDidLayoutSubviews() {\n        super.viewDidLayoutSubviews()\n        if holder.subviews.count == 0 {\n            configurePlayer()\n        }\n    }\n    \n    override func viewWillDisappear(_ animated: Bool) {\n        super.viewWillDisappear(animated)\n        if let player = player {\n            player.stop()\n        }\n    }\n    \n    func configurePlayer() {\n        let song = songs[position]\n        let urlString = Bundle.main.path(forResource: song.trackName, ofType: \".mp3\")\n        do {\n            try AVAudioSession.sharedInstance().setMode(.default)\n            try AVAudioSession.sharedInstance().setActive(true, options: .notifyOthersOnDeactivation)\n            \n            guard let urlString = urlString else {\n                return\n            }\n            \n            player = try AVAudioPlayer(contentsOf: URL(string: urlString)!)\n            guard let player = player else {\n                return\n            }\n            player.volume = 0.5\n            \n            player.play()\n        } catch  {\n            print(\"Error occurred\")\n        }\n        \n        // UI\n        // Album\n        albumImageView.frame = CGRect(x: 10,\n                                      y: 10,\n                                      width: holder.frame.size.width - 20,\n                                      height: holder.frame.size.width - 20)\n        albumImageView.image = UIImage(named: song.imageName)\n        holder.addSubview(albumImageView)\n        \n        // Label\n        nameLabel.frame = CGRect(x: 10, y: albumImageView.frame.size.height + 10, width: holder.frame.size.width - 20 , height: 70)\n        albumLabel.frame = CGRect(x: 10, y: albumImageView.frame.size.height + 80, width: holder.frame.size.width - 20 , height: 70)\n        artistLabel.frame = CGRect(x: 10, y: albumImageView.frame.size.height + 140, width: holder.frame.size.width - 20 , height: 70)\n        \n        nameLabel.text = song.songName\n        albumLabel.text = song.albumName\n        artistLabel.text = song.artistName\n        \n        holder.addSubview(nameLabel)\n        holder.addSubview(albumLabel)\n        holder.addSubview(artistLabel)\n        \n        // Button\n        let nextButton = UIButton()\n        let backButton = UIButton()\n        \n        let buttonSize: CGFloat = 50\n        \n        playPauseButton.frame = CGRect(x: (holder.frame.size.width - buttonSize)/2.0, y: artistLabel.frame.origin.y + 90, width: buttonSize, height: buttonSize)\n        nextButton.frame = CGRect(x: holder.frame.size.width - 20 - buttonSize, y: artistLabel.frame.origin.y + 90, width: buttonSize, height: buttonSize)\n        backButton.frame = CGRect(x: 20, y: artistLabel.frame.origin.y + 90, width: buttonSize, height: buttonSize)\n        \n        playPauseButton.addTarget(self, action: #selector(didTapPauseButton), for: .touchUpInside)\n        nextButton.addTarget(self, action: #selector(didTapNextButton), for: .touchUpInside)\n        backButton.addTarget(self, action: #selector(didTapBackButton), for: .touchUpInside)\n        \n        playPauseButton.setBackgroundImage(UIImage(systemName: \"pause.fill\"), for: .normal)\n        nextButton.setBackgroundImage(UIImage(systemName: \"forward.fill\"), for: .normal)\n        backButton.setBackgroundImage(UIImage(systemName: \"backward.fill\"), for: .normal)\n        \n        playPauseButton.tintColor = .black\n        nextButton.tintColor = .black\n        backButton.tintColor = .black\n        \n        holder.addSubview(playPauseButton)\n        holder.addSubview(nextButton)\n        holder.addSubview(backButton)\n        \n        // Element\n        let slider = UISlider(frame: CGRect(x: 20, y: holder.frame.size.height - 60, width: holder.frame.size.width - 40, height: 50))\n        \n        slider.value = 50\n        slider.addTarget(self, action: #selector(didSlideSlider(_:)), for: .valueChanged)\n        holder.addSubview(slider)\n        \n    }\n    \n    @objc func didSlideSlider (_ slider: UISlider){\n        let value = slider.value\n        player?.volume = value\n    }\n    \n    @objc func didTapPauseButton (){\n        if player?.isPlaying == true {\n            player?.pause()\n            playPauseButton.setBackgroundImage(UIImage(systemName: \"play.fill\"), for: .normal)\n            UIView.animate(withDuration: 0.2, animations: {\n                self.albumImageView.frame = CGRect(x: 30, y: 30, width: self.holder.frame.size.width - 60, height: self.holder.frame.size.width - 60)\n            })\n        } else {\n            player?.play()\n            playPauseButton.setBackgroundImage(UIImage(systemName: \"pause.fill\"), for: .normal)\n            UIView.animate(withDuration: 0.2, animations: {\n                self.albumImageView.frame = CGRect(x: 10, y: 10, width: self.holder.frame.size.width - 20, height: self.holder.frame.size.width - 20)\n            })\n        }\n    }\n    \n    @objc func didTapNextButton (){\n        if position < (songs.count - 1 ){\n            position = position + 1\n            player?.stop()\n            for subview in holder.subviews {\n                subview.removeFromSuperview()\n            }\n            configurePlayer()\n        }\n    }\n    \n    @objc func didTapBackButton (){\n        if position > 0 {\n            position = position - 1\n            player?.stop()\n            for subview in holder.subviews {\n                subview.removeFromSuperview()\n            }\n            configurePlayer()\n        }\n    }\n    \n}\n```","source":"_posts/Muzik_GettingStarted.md","raw":"---\ntitle: Muzik开发总结 — AVAudioPlayer 实践\ndate: 2020-07-08 19:20:20\ncategories: \n- tech\ntags: \n- iOS\n- AudioPlayer\n- Swift\ncopyright: true\n---\n\n最近又放弃了使用 Apple Music，作为一个从音乐下载时代过来的人，我仍然保持着将歌曲同步至 iPhone 再聆听的习惯，即使我仍然无法摆脱流媒体的束缚。话说回来，Apple 原生的 Music.app 的体验除了交互，于我而言是糟糕的，我更希望有一款 Tab Based 的 iOS App 支撑这种体验，作为一个有一些 iOS 基础的人，我决定自己开发一个简单的本地音乐播放器，正好学习一些 UIKit 控件。\n\n<!--more-->\n\n## 目的\n本系列文章是开发一个简易的音乐播放器（暂时命名为“Muzik”）的博客记录，本篇目的在于实践一个简单的 AVAudioPlayer Demo 模拟 Music.app 的播放功能，内容十分基础。\n需要注意的是，此 Demo 并没有采用读取系统音乐资料库需要的 MPMediaPlayer。\n\n## 环境\n- Swift 5\n- iOS 13.5\n- Xcode 11.5\n\n在 Xcode 项目属性的 General 选项卡中点击底部的 Frameworks and Libraries，搜索AVFoundation Framework 将其添加至项目中。\n\n## 歌曲列表界面\n为了进行简单的 Demo，我将两首下载好歌曲添加到 Xcode 项目文件夹下，分别为```Song1.mp3```与```Song2.mp3```，并创建简单的结构体命名为 Song：\n```swift\nstruct Song {\n    let songName: String\n    let albumName: String\n    let artistName: String\n    let imageName: String\n    let trackName: String\n}\n```\n为了在播放时展示专辑封面，我将两首 .mp3 文件的专辑封面添加至 Assets，参照 Song 命名为 Cover1 与 Cover 2。我比较习惯于 AutoLayout 与代码布局共同使用，使用 StoryBoard 进行小项目的简单布局十分方便。\n首先，创建一个```ViewController```展示歌曲页面，添加```UITableView```并调整约束，需要将 TableView 对象的 ```Content``` 属性改为 ```Dynamic Prototypes```，将 对象的Cell的 ```Style```属性更改为```Subtitle```，至此 StoryBoard 部分已经完成。\n来到与该```ViewController```相对应的```ViewController.swift```文件，由于是在Storyboard中创建```UITableView```，所以需要通过```@IBOutlet```连接之前创建的```UITableView```，方法如Ctrl+拖拽，同时需要在```viewDidLoad()```中设置```UITableView```对象的```delegate```与```dataSource```。需要注意的是使用```UITableView```的方法需要 conforms to 相关的 protocols, 以上均为基本操作。\n我需要在```viewDidLoad()```阶段加载歌曲的相关信息，于是创建```configureSongs()```方法为```songs```数组添加相关数据（需要在之前创建）。\n尝试完成页面功能布局，作为Demo该 TableView 对象只包含一个 Section 的内容，如果需要调用系统音乐资料库的 ```MPMediaItem```，需要使用 NSRange 对不同 Section 的内容进行排序（A-Z）。为了避免列表中图片大小显示不一致问题，我将 Row 的高度更改为60。在```cellForRowAt```方法中定制 cell，在```didSelectRowAt```方法中令其 present 播放器页面，相关内容在后文中讨论，目前这个页面看起来是这样的(先忽略 Tab 的效果)。\n![](http://images.stephenfang.xyz/screen1.png)\n懒人代码如下：\n```swift\nimport UIKit\n\nclass ViewController: UIViewController, UITableViewDelegate, UITableViewDataSource{\n    \n    @IBOutlet var songTable: UITableView!\n    \n    var songs = [Song]()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        configureSongs()\n        songTable.delegate = self\n        songTable.dataSource = self\n    }\n    \n    func configureSongs() {\n        songs.append(Song(songName: \"Pretender\", albumName: \"Pretender\", artistName: \"Official鬍子男dism\", imageName: \"Cover1\", trackName: \"Song1\"))\n        songs.append(Song(songName: \"Imagine\", albumName: \"The Mango Tree\", artistName: \"Jack Johnson\", imageName: \"Cover2\", trackName: \"Song2\"))\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return songs.count\n    }\n    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {\n        return 60\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let songCell = tableView.dequeueReusableCell(withIdentifier: \"songCell\", for: indexPath)\n        let song = songs[indexPath.row]\n        \n        songCell.textLabel?.text = song.songName\n        songCell.detailTextLabel?.text = song.albumName + \"  \" + song.artistName\n        songCell.imageView?.image = UIImage(named: song.imageName)\n        \n        return songCell\n    }\n    \n    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        tableView.deselectRow(at: indexPath, animated: true)\n        \n        let position = indexPath.row\n        \n        guard let songView = storyboard?.instantiateViewController(identifier: \"player\") as? PlayerViewController else {\n            return\n        }\n        songView.position = position\n        songView.songs = songs\n        \n        present(songView,animated: true)\n    }\n    \n}\n```\n    \n## 正在播放界面\n创建```PlayerViewController```展示正在播放的页面，不需要与任何View进行连接，之后创建一个 UIView 令其紧贴 Safe Area 将其命名为 holder。这次我采用代码进行布局，最终看起来应该是这样的，虽然很不美观但是 it just works。\n![](http://images.stephenfang.xyz/screen2.png)。\n在开始代码注解前了解一下我的思路。其中```viewDidLayoutSubviews```方法在controller 的子视图的 position 和 size 被改变的时候被调用。在 view 已经被设计 subviews 并且还没有被展示在屏幕上时候，可以调用此方法改变这个view。任何依赖于 bounds 并且需要完成的操作都应该放在```viewDidLayoutSubviews```中而不是```viewDidLoad```或```viewWillAppear```中，因为 view 的 frame 和 bounds 直到 AutoLayout 完成工作的时候才会被确定，所以在执行完Auto Layout之后会调用此方法。\n当用户点击上一首歌曲或下一首歌曲按钮后，需要改变控件内容的显示，我的想法是通过调用```removeFromSuperview()```方法，该方法即进行视图节点删除的操作，执行这个方法等于在 View 的树形结构中找到该节点并删除该节点及其子节点，而并非只是删除该节点自己，同时把该对象从响应者链中移除。在ARC的情况下执行```removeFromSuperview```方法多次也没有问题因为由系统自动管理。\n那么在调用```removeFromSuperview```后势必需要重新载入页面元素，并且控制播放的过程，这个时候可以采用一个统一的方法在页面载入、切换的时候进行操作。对于 ```AVAudioPlayer```的调用方面，需要导入```AVFoundation```框架并初始化```AVAudioPlayer```对象。由于之前导入了 .mp3 文件，需要做的是让```AVAudioPlayer```获取待播放的歌曲 url，之前的 ViewController 对 Song 的具体内容有定义，而```Bundle.main.path```代表获取工程目录下的文件。系统启动时会激活 ```AVAudioSession```，通过设置```active```为\"true\"激活 Session，设置为“false”解除 Session 的激活状态，```options```使用 “.notifyOthersOnDeactivation” 使音频会话停用时其它音频会话可以返回到其它活动状态。对于```sharedInstance```包含五种设置方法，希望深入了解的参见这篇文章 [AVAudioSession - Category、Model、Options、Error参数详解](https://www.jianshu.com/p/ae843162ace1)\nInt 类型的变量```position```代表当前用户点按的歌曲在 songs 中所处下标，相关的 UIElement 配置都很容易理解不在此赘述，为了模拟 Music.app 的效果，我尝试使用\n```swift\n UIView.animate(withDuration: 0.2, animations: {\n                self.albumImageView.frame = CGRect(x: 30, y: 30, width: self.holder.frame.size.width - 60, height: self.holder.frame.size.width - 60)\n            })\n```\n实现类似的点击暂停或播放按钮后专辑封面大小变化的的效果，如果页面上已经对元素进行了大小限制使用```CGAffineTransform(scaleX: <CGFloat>, y: <CGFloat>)```也能够达到类似的效果。最后给出此次 Demo 所有的代码，对于播放器的开发进展我会持续更新，🦔本系列的第一篇文章。\n```swift\nimport UIKit\nimport AVFoundation\n\nclass PlayerViewController: UIViewController {\n    \n    public var position: Int = 0\n    public var songs: [Song] = []\n    \n    @IBOutlet weak var holder: UIView!\n    \n    var player: AVAudioPlayer?\n    let playPauseButton = UIButton()\n    \n    private let albumImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        return imageView\n    } ()\n    \n    private let nameLabel: UILabel = {\n        let label = UILabel()\n        label.textAlignment = .center\n        label.numberOfLines = 0\n        return label\n    } ()\n    \n    private let albumLabel: UILabel = {\n        let label = UILabel()\n        label.textAlignment = .center\n        label.numberOfLines = 0\n        return label\n    } ()\n    \n    private let artistLabel: UILabel = {\n        let label = UILabel()\n        label.textAlignment = .center\n        label.numberOfLines = 0\n        return label\n    } ()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    override func viewDidLayoutSubviews() {\n        super.viewDidLayoutSubviews()\n        if holder.subviews.count == 0 {\n            configurePlayer()\n        }\n    }\n    \n    override func viewWillDisappear(_ animated: Bool) {\n        super.viewWillDisappear(animated)\n        if let player = player {\n            player.stop()\n        }\n    }\n    \n    func configurePlayer() {\n        let song = songs[position]\n        let urlString = Bundle.main.path(forResource: song.trackName, ofType: \".mp3\")\n        do {\n            try AVAudioSession.sharedInstance().setMode(.default)\n            try AVAudioSession.sharedInstance().setActive(true, options: .notifyOthersOnDeactivation)\n            \n            guard let urlString = urlString else {\n                return\n            }\n            \n            player = try AVAudioPlayer(contentsOf: URL(string: urlString)!)\n            guard let player = player else {\n                return\n            }\n            player.volume = 0.5\n            \n            player.play()\n        } catch  {\n            print(\"Error occurred\")\n        }\n        \n        // UI\n        // Album\n        albumImageView.frame = CGRect(x: 10,\n                                      y: 10,\n                                      width: holder.frame.size.width - 20,\n                                      height: holder.frame.size.width - 20)\n        albumImageView.image = UIImage(named: song.imageName)\n        holder.addSubview(albumImageView)\n        \n        // Label\n        nameLabel.frame = CGRect(x: 10, y: albumImageView.frame.size.height + 10, width: holder.frame.size.width - 20 , height: 70)\n        albumLabel.frame = CGRect(x: 10, y: albumImageView.frame.size.height + 80, width: holder.frame.size.width - 20 , height: 70)\n        artistLabel.frame = CGRect(x: 10, y: albumImageView.frame.size.height + 140, width: holder.frame.size.width - 20 , height: 70)\n        \n        nameLabel.text = song.songName\n        albumLabel.text = song.albumName\n        artistLabel.text = song.artistName\n        \n        holder.addSubview(nameLabel)\n        holder.addSubview(albumLabel)\n        holder.addSubview(artistLabel)\n        \n        // Button\n        let nextButton = UIButton()\n        let backButton = UIButton()\n        \n        let buttonSize: CGFloat = 50\n        \n        playPauseButton.frame = CGRect(x: (holder.frame.size.width - buttonSize)/2.0, y: artistLabel.frame.origin.y + 90, width: buttonSize, height: buttonSize)\n        nextButton.frame = CGRect(x: holder.frame.size.width - 20 - buttonSize, y: artistLabel.frame.origin.y + 90, width: buttonSize, height: buttonSize)\n        backButton.frame = CGRect(x: 20, y: artistLabel.frame.origin.y + 90, width: buttonSize, height: buttonSize)\n        \n        playPauseButton.addTarget(self, action: #selector(didTapPauseButton), for: .touchUpInside)\n        nextButton.addTarget(self, action: #selector(didTapNextButton), for: .touchUpInside)\n        backButton.addTarget(self, action: #selector(didTapBackButton), for: .touchUpInside)\n        \n        playPauseButton.setBackgroundImage(UIImage(systemName: \"pause.fill\"), for: .normal)\n        nextButton.setBackgroundImage(UIImage(systemName: \"forward.fill\"), for: .normal)\n        backButton.setBackgroundImage(UIImage(systemName: \"backward.fill\"), for: .normal)\n        \n        playPauseButton.tintColor = .black\n        nextButton.tintColor = .black\n        backButton.tintColor = .black\n        \n        holder.addSubview(playPauseButton)\n        holder.addSubview(nextButton)\n        holder.addSubview(backButton)\n        \n        // Element\n        let slider = UISlider(frame: CGRect(x: 20, y: holder.frame.size.height - 60, width: holder.frame.size.width - 40, height: 50))\n        \n        slider.value = 50\n        slider.addTarget(self, action: #selector(didSlideSlider(_:)), for: .valueChanged)\n        holder.addSubview(slider)\n        \n    }\n    \n    @objc func didSlideSlider (_ slider: UISlider){\n        let value = slider.value\n        player?.volume = value\n    }\n    \n    @objc func didTapPauseButton (){\n        if player?.isPlaying == true {\n            player?.pause()\n            playPauseButton.setBackgroundImage(UIImage(systemName: \"play.fill\"), for: .normal)\n            UIView.animate(withDuration: 0.2, animations: {\n                self.albumImageView.frame = CGRect(x: 30, y: 30, width: self.holder.frame.size.width - 60, height: self.holder.frame.size.width - 60)\n            })\n        } else {\n            player?.play()\n            playPauseButton.setBackgroundImage(UIImage(systemName: \"pause.fill\"), for: .normal)\n            UIView.animate(withDuration: 0.2, animations: {\n                self.albumImageView.frame = CGRect(x: 10, y: 10, width: self.holder.frame.size.width - 20, height: self.holder.frame.size.width - 20)\n            })\n        }\n    }\n    \n    @objc func didTapNextButton (){\n        if position < (songs.count - 1 ){\n            position = position + 1\n            player?.stop()\n            for subview in holder.subviews {\n                subview.removeFromSuperview()\n            }\n            configurePlayer()\n        }\n    }\n    \n    @objc func didTapBackButton (){\n        if position > 0 {\n            position = position - 1\n            player?.stop()\n            for subview in holder.subviews {\n                subview.removeFromSuperview()\n            }\n            configurePlayer()\n        }\n    }\n    \n}\n```","slug":"Muzik_GettingStarted","published":1,"updated":"2020-07-12T09:30:00.212Z","_id":"ckcive9n4000ccv6bhrugcwst","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近又放弃了使用 Apple Music，作为一个从音乐下载时代过来的人，我仍然保持着将歌曲同步至 iPhone 再聆听的习惯，即使我仍然无法摆脱流媒体的束缚。话说回来，Apple 原生的 Music.app 的体验除了交互，于我而言是糟糕的，我更希望有一款 Tab Based 的 iOS App 支撑这种体验，作为一个有一些 iOS 基础的人，我决定自己开发一个简单的本地音乐播放器，正好学习一些 UIKit 控件。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>本系列文章是开发一个简易的音乐播放器（暂时命名为“Muzik”）的博客记录，本篇目的在于实践一个简单的 AVAudioPlayer Demo 模拟 Music.app 的播放功能，内容十分基础。<br>需要注意的是，此 Demo 并没有采用读取系统音乐资料库需要的 MPMediaPlayer。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>Swift 5</li>\n<li>iOS 13.5</li>\n<li>Xcode 11.5</li>\n</ul>\n<p>在 Xcode 项目属性的 General 选项卡中点击底部的 Frameworks and Libraries，搜索AVFoundation Framework 将其添加至项目中。</p>\n<h2 id=\"歌曲列表界面\"><a href=\"#歌曲列表界面\" class=\"headerlink\" title=\"歌曲列表界面\"></a>歌曲列表界面</h2><p>为了进行简单的 Demo，我将两首下载好歌曲添加到 Xcode 项目文件夹下，分别为<code>Song1.mp3</code>与<code>Song2.mp3</code>，并创建简单的结构体命名为 Song：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Song</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> songName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> albumName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> artistName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> imageName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> trackName: <span class=\"type\">String</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了在播放时展示专辑封面，我将两首 .mp3 文件的专辑封面添加至 Assets，参照 Song 命名为 Cover1 与 Cover 2。我比较习惯于 AutoLayout 与代码布局共同使用，使用 StoryBoard 进行小项目的简单布局十分方便。<br>首先，创建一个<code>ViewController</code>展示歌曲页面，添加<code>UITableView</code>并调整约束，需要将 TableView 对象的 <code>Content</code> 属性改为 <code>Dynamic Prototypes</code>，将 对象的Cell的 <code>Style</code>属性更改为<code>Subtitle</code>，至此 StoryBoard 部分已经完成。<br>来到与该<code>ViewController</code>相对应的<code>ViewController.swift</code>文件，由于是在Storyboard中创建<code>UITableView</code>，所以需要通过<code>@IBOutlet</code>连接之前创建的<code>UITableView</code>，方法如Ctrl+拖拽，同时需要在<code>viewDidLoad()</code>中设置<code>UITableView</code>对象的<code>delegate</code>与<code>dataSource</code>。需要注意的是使用<code>UITableView</code>的方法需要 conforms to 相关的 protocols, 以上均为基本操作。<br>我需要在<code>viewDidLoad()</code>阶段加载歌曲的相关信息，于是创建<code>configureSongs()</code>方法为<code>songs</code>数组添加相关数据（需要在之前创建）。<br>尝试完成页面功能布局，作为Demo该 TableView 对象只包含一个 Section 的内容，如果需要调用系统音乐资料库的 <code>MPMediaItem</code>，需要使用 NSRange 对不同 Section 的内容进行排序（A-Z）。为了避免列表中图片大小显示不一致问题，我将 Row 的高度更改为60。在<code>cellForRowAt</code>方法中定制 cell，在<code>didSelectRowAt</code>方法中令其 present 播放器页面，相关内容在后文中讨论，目前这个页面看起来是这样的(先忽略 Tab 的效果)。<br><img src=\"http://images.stephenfang.xyz/screen1.png\" alt=\"\"><br>懒人代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewController</span>: <span class=\"title\">UIViewController</span>, <span class=\"title\">UITableViewDelegate</span>, <span class=\"title\">UITableViewDataSource</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">var</span> songTable: <span class=\"type\">UITableView!</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> songs = [<span class=\"type\">Song</span>]()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">        configureSongs()</span><br><span class=\"line\">        songTable.delegate = <span class=\"keyword\">self</span></span><br><span class=\"line\">        songTable.dataSource = <span class=\"keyword\">self</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">configureSongs</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        songs.append(<span class=\"type\">Song</span>(songName: <span class=\"string\">\"Pretender\"</span>, albumName: <span class=\"string\">\"Pretender\"</span>, artistName: <span class=\"string\">\"Official鬍子男dism\"</span>, imageName: <span class=\"string\">\"Cover1\"</span>, trackName: <span class=\"string\">\"Song1\"</span>))</span><br><span class=\"line\">        songs.append(<span class=\"type\">Song</span>(songName: <span class=\"string\">\"Imagine\"</span>, albumName: <span class=\"string\">\"The Mango Tree\"</span>, artistName: <span class=\"string\">\"Jack Johnson\"</span>, imageName: <span class=\"string\">\"Cover2\"</span>, trackName: <span class=\"string\">\"Song2\"</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tableView</span><span class=\"params\">(<span class=\"number\">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> songs.<span class=\"built_in\">count</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tableView</span><span class=\"params\">(<span class=\"number\">_</span> tableView: UITableView, heightForRowAt indexPath: IndexPath)</span></span> -&gt; <span class=\"type\">CGFloat</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">60</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tableView</span><span class=\"params\">(<span class=\"number\">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class=\"type\">UITableViewCell</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> songCell = tableView.dequeueReusableCell(withIdentifier: <span class=\"string\">\"songCell\"</span>, <span class=\"keyword\">for</span>: indexPath)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> song = songs[indexPath.row]</span><br><span class=\"line\">        </span><br><span class=\"line\">        songCell.textLabel?.text = song.songName</span><br><span class=\"line\">        songCell.detailTextLabel?.text = song.albumName + <span class=\"string\">\"  \"</span> + song.artistName</span><br><span class=\"line\">        songCell.imageView?.image = <span class=\"type\">UIImage</span>(named: song.imageName)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> songCell</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tableView</span><span class=\"params\">(<span class=\"number\">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</span><br><span class=\"line\">        tableView.deselectRow(at: indexPath, animated: <span class=\"literal\">true</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> position = indexPath.row</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> songView = storyboard?.instantiateViewController(identifier: <span class=\"string\">\"player\"</span>) <span class=\"keyword\">as</span>? <span class=\"type\">PlayerViewController</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        songView.position = position</span><br><span class=\"line\">        songView.songs = songs</span><br><span class=\"line\">        </span><br><span class=\"line\">        present(songView,animated: <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"正在播放界面\"><a href=\"#正在播放界面\" class=\"headerlink\" title=\"正在播放界面\"></a>正在播放界面</h2><p>创建<code>PlayerViewController</code>展示正在播放的页面，不需要与任何View进行连接，之后创建一个 UIView 令其紧贴 Safe Area 将其命名为 holder。这次我采用代码进行布局，最终看起来应该是这样的，虽然很不美观但是 it just works。<br><img src=\"http://images.stephenfang.xyz/screen2.png\" alt=\"\">。<br>在开始代码注解前了解一下我的思路。其中<code>viewDidLayoutSubviews</code>方法在controller 的子视图的 position 和 size 被改变的时候被调用。在 view 已经被设计 subviews 并且还没有被展示在屏幕上时候，可以调用此方法改变这个view。任何依赖于 bounds 并且需要完成的操作都应该放在<code>viewDidLayoutSubviews</code>中而不是<code>viewDidLoad</code>或<code>viewWillAppear</code>中，因为 view 的 frame 和 bounds 直到 AutoLayout 完成工作的时候才会被确定，所以在执行完Auto Layout之后会调用此方法。<br>当用户点击上一首歌曲或下一首歌曲按钮后，需要改变控件内容的显示，我的想法是通过调用<code>removeFromSuperview()</code>方法，该方法即进行视图节点删除的操作，执行这个方法等于在 View 的树形结构中找到该节点并删除该节点及其子节点，而并非只是删除该节点自己，同时把该对象从响应者链中移除。在ARC的情况下执行<code>removeFromSuperview</code>方法多次也没有问题因为由系统自动管理。<br>那么在调用<code>removeFromSuperview</code>后势必需要重新载入页面元素，并且控制播放的过程，这个时候可以采用一个统一的方法在页面载入、切换的时候进行操作。对于 <code>AVAudioPlayer</code>的调用方面，需要导入<code>AVFoundation</code>框架并初始化<code>AVAudioPlayer</code>对象。由于之前导入了 .mp3 文件，需要做的是让<code>AVAudioPlayer</code>获取待播放的歌曲 url，之前的 ViewController 对 Song 的具体内容有定义，而<code>Bundle.main.path</code>代表获取工程目录下的文件。系统启动时会激活 <code>AVAudioSession</code>，通过设置<code>active</code>为”true”激活 Session，设置为“false”解除 Session 的激活状态，<code>options</code>使用 “.notifyOthersOnDeactivation” 使音频会话停用时其它音频会话可以返回到其它活动状态。对于<code>sharedInstance</code>包含五种设置方法，希望深入了解的参见这篇文章 <a href=\"https://www.jianshu.com/p/ae843162ace1\" target=\"_blank\" rel=\"noopener\">AVAudioSession - Category、Model、Options、Error参数详解</a><br>Int 类型的变量<code>position</code>代表当前用户点按的歌曲在 songs 中所处下标，相关的 UIElement 配置都很容易理解不在此赘述，为了模拟 Music.app 的效果，我尝试使用</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">UIView</span>.animate(withDuration: <span class=\"number\">0.2</span>, animations: &#123;</span><br><span class=\"line\">               <span class=\"keyword\">self</span>.albumImageView.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">30</span>, y: <span class=\"number\">30</span>, width: <span class=\"keyword\">self</span>.holder.frame.size.width - <span class=\"number\">60</span>, height: <span class=\"keyword\">self</span>.holder.frame.size.width - <span class=\"number\">60</span>)</span><br><span class=\"line\">           &#125;)</span><br></pre></td></tr></table></figure>\n<p>实现类似的点击暂停或播放按钮后专辑封面大小变化的的效果，如果页面上已经对元素进行了大小限制使用<code>CGAffineTransform(scaleX: &lt;CGFloat&gt;, y: &lt;CGFloat&gt;)</code>也能够达到类似的效果。最后给出此次 Demo 所有的代码，对于播放器的开发进展我会持续更新，🦔本系列的第一篇文章。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"><span class=\"keyword\">import</span> AVFoundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlayerViewController</span>: <span class=\"title\">UIViewController</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> position: <span class=\"type\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> songs: [<span class=\"type\">Song</span>] = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> holder: <span class=\"type\">UIView!</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> player: <span class=\"type\">AVAudioPlayer?</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> playPauseButton = <span class=\"type\">UIButton</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> albumImageView: <span class=\"type\">UIImageView</span> = &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> imageView = <span class=\"type\">UIImageView</span>()</span><br><span class=\"line\">        imageView.contentMode = .scaleAspectFill</span><br><span class=\"line\">        <span class=\"keyword\">return</span> imageView</span><br><span class=\"line\">    &#125; ()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> nameLabel: <span class=\"type\">UILabel</span> = &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> label = <span class=\"type\">UILabel</span>()</span><br><span class=\"line\">        label.textAlignment = .center</span><br><span class=\"line\">        label.numberOfLines = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> label</span><br><span class=\"line\">    &#125; ()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> albumLabel: <span class=\"type\">UILabel</span> = &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> label = <span class=\"type\">UILabel</span>()</span><br><span class=\"line\">        label.textAlignment = .center</span><br><span class=\"line\">        label.numberOfLines = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> label</span><br><span class=\"line\">    &#125; ()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> artistLabel: <span class=\"type\">UILabel</span> = &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> label = <span class=\"type\">UILabel</span>()</span><br><span class=\"line\">        label.textAlignment = .center</span><br><span class=\"line\">        label.numberOfLines = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> label</span><br><span class=\"line\">    &#125; ()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLayoutSubviews</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLayoutSubviews()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> holder.subviews.<span class=\"built_in\">count</span> == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            configurePlayer()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewWillDisappear</span><span class=\"params\">(<span class=\"number\">_</span> animated: Bool)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewWillDisappear(animated)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> player = player &#123;</span><br><span class=\"line\">            player.stop()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">configurePlayer</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> song = songs[position]</span><br><span class=\"line\">        <span class=\"keyword\">let</span> urlString = <span class=\"type\">Bundle</span>.main.path(forResource: song.trackName, ofType: <span class=\"string\">\".mp3\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> <span class=\"type\">AVAudioSession</span>.sharedInstance().setMode(.<span class=\"keyword\">default</span>)</span><br><span class=\"line\">            <span class=\"keyword\">try</span> <span class=\"type\">AVAudioSession</span>.sharedInstance().setActive(<span class=\"literal\">true</span>, options: .notifyOthersOnDeactivation)</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> urlString = urlString <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            player = <span class=\"keyword\">try</span> <span class=\"type\">AVAudioPlayer</span>(contentsOf: <span class=\"type\">URL</span>(string: urlString)!)</span><br><span class=\"line\">            <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> player = player <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            player.volume = <span class=\"number\">0.5</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            player.play()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>  &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Error occurred\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// UI</span></span><br><span class=\"line\">        <span class=\"comment\">// Album</span></span><br><span class=\"line\">        albumImageView.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">10</span>,</span><br><span class=\"line\">                                      y: <span class=\"number\">10</span>,</span><br><span class=\"line\">                                      width: holder.frame.size.width - <span class=\"number\">20</span>,</span><br><span class=\"line\">                                      height: holder.frame.size.width - <span class=\"number\">20</span>)</span><br><span class=\"line\">        albumImageView.image = <span class=\"type\">UIImage</span>(named: song.imageName)</span><br><span class=\"line\">        holder.addSubview(albumImageView)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Label</span></span><br><span class=\"line\">        nameLabel.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">10</span>, y: albumImageView.frame.size.height + <span class=\"number\">10</span>, width: holder.frame.size.width - <span class=\"number\">20</span> , height: <span class=\"number\">70</span>)</span><br><span class=\"line\">        albumLabel.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">10</span>, y: albumImageView.frame.size.height + <span class=\"number\">80</span>, width: holder.frame.size.width - <span class=\"number\">20</span> , height: <span class=\"number\">70</span>)</span><br><span class=\"line\">        artistLabel.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">10</span>, y: albumImageView.frame.size.height + <span class=\"number\">140</span>, width: holder.frame.size.width - <span class=\"number\">20</span> , height: <span class=\"number\">70</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        nameLabel.text = song.songName</span><br><span class=\"line\">        albumLabel.text = song.albumName</span><br><span class=\"line\">        artistLabel.text = song.artistName</span><br><span class=\"line\">        </span><br><span class=\"line\">        holder.addSubview(nameLabel)</span><br><span class=\"line\">        holder.addSubview(albumLabel)</span><br><span class=\"line\">        holder.addSubview(artistLabel)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Button</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> nextButton = <span class=\"type\">UIButton</span>()</span><br><span class=\"line\">        <span class=\"keyword\">let</span> backButton = <span class=\"type\">UIButton</span>()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> buttonSize: <span class=\"type\">CGFloat</span> = <span class=\"number\">50</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        playPauseButton.frame = <span class=\"type\">CGRect</span>(x: (holder.frame.size.width - buttonSize)/<span class=\"number\">2.0</span>, y: artistLabel.frame.origin.y + <span class=\"number\">90</span>, width: buttonSize, height: buttonSize)</span><br><span class=\"line\">        nextButton.frame = <span class=\"type\">CGRect</span>(x: holder.frame.size.width - <span class=\"number\">20</span> - buttonSize, y: artistLabel.frame.origin.y + <span class=\"number\">90</span>, width: buttonSize, height: buttonSize)</span><br><span class=\"line\">        backButton.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">20</span>, y: artistLabel.frame.origin.y + <span class=\"number\">90</span>, width: buttonSize, height: buttonSize)</span><br><span class=\"line\">        </span><br><span class=\"line\">        playPauseButton.addTarget(<span class=\"keyword\">self</span>, action: #selector(didTapPauseButton), <span class=\"keyword\">for</span>: .touchUpInside)</span><br><span class=\"line\">        nextButton.addTarget(<span class=\"keyword\">self</span>, action: #selector(didTapNextButton), <span class=\"keyword\">for</span>: .touchUpInside)</span><br><span class=\"line\">        backButton.addTarget(<span class=\"keyword\">self</span>, action: #selector(didTapBackButton), <span class=\"keyword\">for</span>: .touchUpInside)</span><br><span class=\"line\">        </span><br><span class=\"line\">        playPauseButton.setBackgroundImage(<span class=\"type\">UIImage</span>(systemName: <span class=\"string\">\"pause.fill\"</span>), <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">        nextButton.setBackgroundImage(<span class=\"type\">UIImage</span>(systemName: <span class=\"string\">\"forward.fill\"</span>), <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">        backButton.setBackgroundImage(<span class=\"type\">UIImage</span>(systemName: <span class=\"string\">\"backward.fill\"</span>), <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">        </span><br><span class=\"line\">        playPauseButton.tintColor = .black</span><br><span class=\"line\">        nextButton.tintColor = .black</span><br><span class=\"line\">        backButton.tintColor = .black</span><br><span class=\"line\">        </span><br><span class=\"line\">        holder.addSubview(playPauseButton)</span><br><span class=\"line\">        holder.addSubview(nextButton)</span><br><span class=\"line\">        holder.addSubview(backButton)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Element</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> slider = <span class=\"type\">UISlider</span>(frame: <span class=\"type\">CGRect</span>(x: <span class=\"number\">20</span>, y: holder.frame.size.height - <span class=\"number\">60</span>, width: holder.frame.size.width - <span class=\"number\">40</span>, height: <span class=\"number\">50</span>))</span><br><span class=\"line\">        </span><br><span class=\"line\">        slider.value = <span class=\"number\">50</span></span><br><span class=\"line\">        slider.addTarget(<span class=\"keyword\">self</span>, action: #selector(didSlideSlider(<span class=\"number\">_</span>:)), <span class=\"keyword\">for</span>: .valueChanged)</span><br><span class=\"line\">        holder.addSubview(slider)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@objc</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">didSlideSlider</span> <span class=\"params\">(<span class=\"number\">_</span> slider: UISlider)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> value = slider.value</span><br><span class=\"line\">        player?.volume = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@objc</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">didTapPauseButton</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> player?.isPlaying == <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">            player?.pause()</span><br><span class=\"line\">            playPauseButton.setBackgroundImage(<span class=\"type\">UIImage</span>(systemName: <span class=\"string\">\"play.fill\"</span>), <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">            <span class=\"type\">UIView</span>.animate(withDuration: <span class=\"number\">0.2</span>, animations: &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.albumImageView.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">30</span>, y: <span class=\"number\">30</span>, width: <span class=\"keyword\">self</span>.holder.frame.size.width - <span class=\"number\">60</span>, height: <span class=\"keyword\">self</span>.holder.frame.size.width - <span class=\"number\">60</span>)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            player?.play()</span><br><span class=\"line\">            playPauseButton.setBackgroundImage(<span class=\"type\">UIImage</span>(systemName: <span class=\"string\">\"pause.fill\"</span>), <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">            <span class=\"type\">UIView</span>.animate(withDuration: <span class=\"number\">0.2</span>, animations: &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.albumImageView.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">10</span>, y: <span class=\"number\">10</span>, width: <span class=\"keyword\">self</span>.holder.frame.size.width - <span class=\"number\">20</span>, height: <span class=\"keyword\">self</span>.holder.frame.size.width - <span class=\"number\">20</span>)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@objc</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">didTapNextButton</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> position &lt; (songs.<span class=\"built_in\">count</span> - <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">            position = position + <span class=\"number\">1</span></span><br><span class=\"line\">            player?.stop()</span><br><span class=\"line\">            <span class=\"keyword\">for</span> subview <span class=\"keyword\">in</span> holder.subviews &#123;</span><br><span class=\"line\">                subview.removeFromSuperview()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            configurePlayer()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@objc</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">didTapBackButton</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> position &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            position = position - <span class=\"number\">1</span></span><br><span class=\"line\">            player?.stop()</span><br><span class=\"line\">            <span class=\"keyword\">for</span> subview <span class=\"keyword\">in</span> holder.subviews &#123;</span><br><span class=\"line\">                subview.removeFromSuperview()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            configurePlayer()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>最近又放弃了使用 Apple Music，作为一个从音乐下载时代过来的人，我仍然保持着将歌曲同步至 iPhone 再聆听的习惯，即使我仍然无法摆脱流媒体的束缚。话说回来，Apple 原生的 Music.app 的体验除了交互，于我而言是糟糕的，我更希望有一款 Tab Based 的 iOS App 支撑这种体验，作为一个有一些 iOS 基础的人，我决定自己开发一个简单的本地音乐播放器，正好学习一些 UIKit 控件。</p>","more":"<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>本系列文章是开发一个简易的音乐播放器（暂时命名为“Muzik”）的博客记录，本篇目的在于实践一个简单的 AVAudioPlayer Demo 模拟 Music.app 的播放功能，内容十分基础。<br>需要注意的是，此 Demo 并没有采用读取系统音乐资料库需要的 MPMediaPlayer。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>Swift 5</li>\n<li>iOS 13.5</li>\n<li>Xcode 11.5</li>\n</ul>\n<p>在 Xcode 项目属性的 General 选项卡中点击底部的 Frameworks and Libraries，搜索AVFoundation Framework 将其添加至项目中。</p>\n<h2 id=\"歌曲列表界面\"><a href=\"#歌曲列表界面\" class=\"headerlink\" title=\"歌曲列表界面\"></a>歌曲列表界面</h2><p>为了进行简单的 Demo，我将两首下载好歌曲添加到 Xcode 项目文件夹下，分别为<code>Song1.mp3</code>与<code>Song2.mp3</code>，并创建简单的结构体命名为 Song：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Song</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> songName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> albumName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> artistName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> imageName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> trackName: <span class=\"type\">String</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了在播放时展示专辑封面，我将两首 .mp3 文件的专辑封面添加至 Assets，参照 Song 命名为 Cover1 与 Cover 2。我比较习惯于 AutoLayout 与代码布局共同使用，使用 StoryBoard 进行小项目的简单布局十分方便。<br>首先，创建一个<code>ViewController</code>展示歌曲页面，添加<code>UITableView</code>并调整约束，需要将 TableView 对象的 <code>Content</code> 属性改为 <code>Dynamic Prototypes</code>，将 对象的Cell的 <code>Style</code>属性更改为<code>Subtitle</code>，至此 StoryBoard 部分已经完成。<br>来到与该<code>ViewController</code>相对应的<code>ViewController.swift</code>文件，由于是在Storyboard中创建<code>UITableView</code>，所以需要通过<code>@IBOutlet</code>连接之前创建的<code>UITableView</code>，方法如Ctrl+拖拽，同时需要在<code>viewDidLoad()</code>中设置<code>UITableView</code>对象的<code>delegate</code>与<code>dataSource</code>。需要注意的是使用<code>UITableView</code>的方法需要 conforms to 相关的 protocols, 以上均为基本操作。<br>我需要在<code>viewDidLoad()</code>阶段加载歌曲的相关信息，于是创建<code>configureSongs()</code>方法为<code>songs</code>数组添加相关数据（需要在之前创建）。<br>尝试完成页面功能布局，作为Demo该 TableView 对象只包含一个 Section 的内容，如果需要调用系统音乐资料库的 <code>MPMediaItem</code>，需要使用 NSRange 对不同 Section 的内容进行排序（A-Z）。为了避免列表中图片大小显示不一致问题，我将 Row 的高度更改为60。在<code>cellForRowAt</code>方法中定制 cell，在<code>didSelectRowAt</code>方法中令其 present 播放器页面，相关内容在后文中讨论，目前这个页面看起来是这样的(先忽略 Tab 的效果)。<br><img src=\"http://images.stephenfang.xyz/screen1.png\" alt=\"\"><br>懒人代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewController</span>: <span class=\"title\">UIViewController</span>, <span class=\"title\">UITableViewDelegate</span>, <span class=\"title\">UITableViewDataSource</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">var</span> songTable: <span class=\"type\">UITableView!</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> songs = [<span class=\"type\">Song</span>]()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">        configureSongs()</span><br><span class=\"line\">        songTable.delegate = <span class=\"keyword\">self</span></span><br><span class=\"line\">        songTable.dataSource = <span class=\"keyword\">self</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">configureSongs</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        songs.append(<span class=\"type\">Song</span>(songName: <span class=\"string\">\"Pretender\"</span>, albumName: <span class=\"string\">\"Pretender\"</span>, artistName: <span class=\"string\">\"Official鬍子男dism\"</span>, imageName: <span class=\"string\">\"Cover1\"</span>, trackName: <span class=\"string\">\"Song1\"</span>))</span><br><span class=\"line\">        songs.append(<span class=\"type\">Song</span>(songName: <span class=\"string\">\"Imagine\"</span>, albumName: <span class=\"string\">\"The Mango Tree\"</span>, artistName: <span class=\"string\">\"Jack Johnson\"</span>, imageName: <span class=\"string\">\"Cover2\"</span>, trackName: <span class=\"string\">\"Song2\"</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tableView</span><span class=\"params\">(<span class=\"number\">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> songs.<span class=\"built_in\">count</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tableView</span><span class=\"params\">(<span class=\"number\">_</span> tableView: UITableView, heightForRowAt indexPath: IndexPath)</span></span> -&gt; <span class=\"type\">CGFloat</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">60</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tableView</span><span class=\"params\">(<span class=\"number\">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class=\"type\">UITableViewCell</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> songCell = tableView.dequeueReusableCell(withIdentifier: <span class=\"string\">\"songCell\"</span>, <span class=\"keyword\">for</span>: indexPath)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> song = songs[indexPath.row]</span><br><span class=\"line\">        </span><br><span class=\"line\">        songCell.textLabel?.text = song.songName</span><br><span class=\"line\">        songCell.detailTextLabel?.text = song.albumName + <span class=\"string\">\"  \"</span> + song.artistName</span><br><span class=\"line\">        songCell.imageView?.image = <span class=\"type\">UIImage</span>(named: song.imageName)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> songCell</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tableView</span><span class=\"params\">(<span class=\"number\">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</span><br><span class=\"line\">        tableView.deselectRow(at: indexPath, animated: <span class=\"literal\">true</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> position = indexPath.row</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> songView = storyboard?.instantiateViewController(identifier: <span class=\"string\">\"player\"</span>) <span class=\"keyword\">as</span>? <span class=\"type\">PlayerViewController</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        songView.position = position</span><br><span class=\"line\">        songView.songs = songs</span><br><span class=\"line\">        </span><br><span class=\"line\">        present(songView,animated: <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"正在播放界面\"><a href=\"#正在播放界面\" class=\"headerlink\" title=\"正在播放界面\"></a>正在播放界面</h2><p>创建<code>PlayerViewController</code>展示正在播放的页面，不需要与任何View进行连接，之后创建一个 UIView 令其紧贴 Safe Area 将其命名为 holder。这次我采用代码进行布局，最终看起来应该是这样的，虽然很不美观但是 it just works。<br><img src=\"http://images.stephenfang.xyz/screen2.png\" alt=\"\">。<br>在开始代码注解前了解一下我的思路。其中<code>viewDidLayoutSubviews</code>方法在controller 的子视图的 position 和 size 被改变的时候被调用。在 view 已经被设计 subviews 并且还没有被展示在屏幕上时候，可以调用此方法改变这个view。任何依赖于 bounds 并且需要完成的操作都应该放在<code>viewDidLayoutSubviews</code>中而不是<code>viewDidLoad</code>或<code>viewWillAppear</code>中，因为 view 的 frame 和 bounds 直到 AutoLayout 完成工作的时候才会被确定，所以在执行完Auto Layout之后会调用此方法。<br>当用户点击上一首歌曲或下一首歌曲按钮后，需要改变控件内容的显示，我的想法是通过调用<code>removeFromSuperview()</code>方法，该方法即进行视图节点删除的操作，执行这个方法等于在 View 的树形结构中找到该节点并删除该节点及其子节点，而并非只是删除该节点自己，同时把该对象从响应者链中移除。在ARC的情况下执行<code>removeFromSuperview</code>方法多次也没有问题因为由系统自动管理。<br>那么在调用<code>removeFromSuperview</code>后势必需要重新载入页面元素，并且控制播放的过程，这个时候可以采用一个统一的方法在页面载入、切换的时候进行操作。对于 <code>AVAudioPlayer</code>的调用方面，需要导入<code>AVFoundation</code>框架并初始化<code>AVAudioPlayer</code>对象。由于之前导入了 .mp3 文件，需要做的是让<code>AVAudioPlayer</code>获取待播放的歌曲 url，之前的 ViewController 对 Song 的具体内容有定义，而<code>Bundle.main.path</code>代表获取工程目录下的文件。系统启动时会激活 <code>AVAudioSession</code>，通过设置<code>active</code>为”true”激活 Session，设置为“false”解除 Session 的激活状态，<code>options</code>使用 “.notifyOthersOnDeactivation” 使音频会话停用时其它音频会话可以返回到其它活动状态。对于<code>sharedInstance</code>包含五种设置方法，希望深入了解的参见这篇文章 <a href=\"https://www.jianshu.com/p/ae843162ace1\" target=\"_blank\" rel=\"noopener\">AVAudioSession - Category、Model、Options、Error参数详解</a><br>Int 类型的变量<code>position</code>代表当前用户点按的歌曲在 songs 中所处下标，相关的 UIElement 配置都很容易理解不在此赘述，为了模拟 Music.app 的效果，我尝试使用</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">UIView</span>.animate(withDuration: <span class=\"number\">0.2</span>, animations: &#123;</span><br><span class=\"line\">               <span class=\"keyword\">self</span>.albumImageView.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">30</span>, y: <span class=\"number\">30</span>, width: <span class=\"keyword\">self</span>.holder.frame.size.width - <span class=\"number\">60</span>, height: <span class=\"keyword\">self</span>.holder.frame.size.width - <span class=\"number\">60</span>)</span><br><span class=\"line\">           &#125;)</span><br></pre></td></tr></table></figure>\n<p>实现类似的点击暂停或播放按钮后专辑封面大小变化的的效果，如果页面上已经对元素进行了大小限制使用<code>CGAffineTransform(scaleX: &lt;CGFloat&gt;, y: &lt;CGFloat&gt;)</code>也能够达到类似的效果。最后给出此次 Demo 所有的代码，对于播放器的开发进展我会持续更新，🦔本系列的第一篇文章。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"><span class=\"keyword\">import</span> AVFoundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlayerViewController</span>: <span class=\"title\">UIViewController</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> position: <span class=\"type\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> songs: [<span class=\"type\">Song</span>] = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> holder: <span class=\"type\">UIView!</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> player: <span class=\"type\">AVAudioPlayer?</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> playPauseButton = <span class=\"type\">UIButton</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> albumImageView: <span class=\"type\">UIImageView</span> = &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> imageView = <span class=\"type\">UIImageView</span>()</span><br><span class=\"line\">        imageView.contentMode = .scaleAspectFill</span><br><span class=\"line\">        <span class=\"keyword\">return</span> imageView</span><br><span class=\"line\">    &#125; ()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> nameLabel: <span class=\"type\">UILabel</span> = &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> label = <span class=\"type\">UILabel</span>()</span><br><span class=\"line\">        label.textAlignment = .center</span><br><span class=\"line\">        label.numberOfLines = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> label</span><br><span class=\"line\">    &#125; ()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> albumLabel: <span class=\"type\">UILabel</span> = &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> label = <span class=\"type\">UILabel</span>()</span><br><span class=\"line\">        label.textAlignment = .center</span><br><span class=\"line\">        label.numberOfLines = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> label</span><br><span class=\"line\">    &#125; ()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> artistLabel: <span class=\"type\">UILabel</span> = &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> label = <span class=\"type\">UILabel</span>()</span><br><span class=\"line\">        label.textAlignment = .center</span><br><span class=\"line\">        label.numberOfLines = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> label</span><br><span class=\"line\">    &#125; ()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLayoutSubviews</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLayoutSubviews()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> holder.subviews.<span class=\"built_in\">count</span> == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            configurePlayer()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewWillDisappear</span><span class=\"params\">(<span class=\"number\">_</span> animated: Bool)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewWillDisappear(animated)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> player = player &#123;</span><br><span class=\"line\">            player.stop()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">configurePlayer</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> song = songs[position]</span><br><span class=\"line\">        <span class=\"keyword\">let</span> urlString = <span class=\"type\">Bundle</span>.main.path(forResource: song.trackName, ofType: <span class=\"string\">\".mp3\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> <span class=\"type\">AVAudioSession</span>.sharedInstance().setMode(.<span class=\"keyword\">default</span>)</span><br><span class=\"line\">            <span class=\"keyword\">try</span> <span class=\"type\">AVAudioSession</span>.sharedInstance().setActive(<span class=\"literal\">true</span>, options: .notifyOthersOnDeactivation)</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> urlString = urlString <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            player = <span class=\"keyword\">try</span> <span class=\"type\">AVAudioPlayer</span>(contentsOf: <span class=\"type\">URL</span>(string: urlString)!)</span><br><span class=\"line\">            <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> player = player <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            player.volume = <span class=\"number\">0.5</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            player.play()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>  &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Error occurred\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// UI</span></span><br><span class=\"line\">        <span class=\"comment\">// Album</span></span><br><span class=\"line\">        albumImageView.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">10</span>,</span><br><span class=\"line\">                                      y: <span class=\"number\">10</span>,</span><br><span class=\"line\">                                      width: holder.frame.size.width - <span class=\"number\">20</span>,</span><br><span class=\"line\">                                      height: holder.frame.size.width - <span class=\"number\">20</span>)</span><br><span class=\"line\">        albumImageView.image = <span class=\"type\">UIImage</span>(named: song.imageName)</span><br><span class=\"line\">        holder.addSubview(albumImageView)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Label</span></span><br><span class=\"line\">        nameLabel.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">10</span>, y: albumImageView.frame.size.height + <span class=\"number\">10</span>, width: holder.frame.size.width - <span class=\"number\">20</span> , height: <span class=\"number\">70</span>)</span><br><span class=\"line\">        albumLabel.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">10</span>, y: albumImageView.frame.size.height + <span class=\"number\">80</span>, width: holder.frame.size.width - <span class=\"number\">20</span> , height: <span class=\"number\">70</span>)</span><br><span class=\"line\">        artistLabel.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">10</span>, y: albumImageView.frame.size.height + <span class=\"number\">140</span>, width: holder.frame.size.width - <span class=\"number\">20</span> , height: <span class=\"number\">70</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        nameLabel.text = song.songName</span><br><span class=\"line\">        albumLabel.text = song.albumName</span><br><span class=\"line\">        artistLabel.text = song.artistName</span><br><span class=\"line\">        </span><br><span class=\"line\">        holder.addSubview(nameLabel)</span><br><span class=\"line\">        holder.addSubview(albumLabel)</span><br><span class=\"line\">        holder.addSubview(artistLabel)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Button</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> nextButton = <span class=\"type\">UIButton</span>()</span><br><span class=\"line\">        <span class=\"keyword\">let</span> backButton = <span class=\"type\">UIButton</span>()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> buttonSize: <span class=\"type\">CGFloat</span> = <span class=\"number\">50</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        playPauseButton.frame = <span class=\"type\">CGRect</span>(x: (holder.frame.size.width - buttonSize)/<span class=\"number\">2.0</span>, y: artistLabel.frame.origin.y + <span class=\"number\">90</span>, width: buttonSize, height: buttonSize)</span><br><span class=\"line\">        nextButton.frame = <span class=\"type\">CGRect</span>(x: holder.frame.size.width - <span class=\"number\">20</span> - buttonSize, y: artistLabel.frame.origin.y + <span class=\"number\">90</span>, width: buttonSize, height: buttonSize)</span><br><span class=\"line\">        backButton.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">20</span>, y: artistLabel.frame.origin.y + <span class=\"number\">90</span>, width: buttonSize, height: buttonSize)</span><br><span class=\"line\">        </span><br><span class=\"line\">        playPauseButton.addTarget(<span class=\"keyword\">self</span>, action: #selector(didTapPauseButton), <span class=\"keyword\">for</span>: .touchUpInside)</span><br><span class=\"line\">        nextButton.addTarget(<span class=\"keyword\">self</span>, action: #selector(didTapNextButton), <span class=\"keyword\">for</span>: .touchUpInside)</span><br><span class=\"line\">        backButton.addTarget(<span class=\"keyword\">self</span>, action: #selector(didTapBackButton), <span class=\"keyword\">for</span>: .touchUpInside)</span><br><span class=\"line\">        </span><br><span class=\"line\">        playPauseButton.setBackgroundImage(<span class=\"type\">UIImage</span>(systemName: <span class=\"string\">\"pause.fill\"</span>), <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">        nextButton.setBackgroundImage(<span class=\"type\">UIImage</span>(systemName: <span class=\"string\">\"forward.fill\"</span>), <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">        backButton.setBackgroundImage(<span class=\"type\">UIImage</span>(systemName: <span class=\"string\">\"backward.fill\"</span>), <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">        </span><br><span class=\"line\">        playPauseButton.tintColor = .black</span><br><span class=\"line\">        nextButton.tintColor = .black</span><br><span class=\"line\">        backButton.tintColor = .black</span><br><span class=\"line\">        </span><br><span class=\"line\">        holder.addSubview(playPauseButton)</span><br><span class=\"line\">        holder.addSubview(nextButton)</span><br><span class=\"line\">        holder.addSubview(backButton)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Element</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> slider = <span class=\"type\">UISlider</span>(frame: <span class=\"type\">CGRect</span>(x: <span class=\"number\">20</span>, y: holder.frame.size.height - <span class=\"number\">60</span>, width: holder.frame.size.width - <span class=\"number\">40</span>, height: <span class=\"number\">50</span>))</span><br><span class=\"line\">        </span><br><span class=\"line\">        slider.value = <span class=\"number\">50</span></span><br><span class=\"line\">        slider.addTarget(<span class=\"keyword\">self</span>, action: #selector(didSlideSlider(<span class=\"number\">_</span>:)), <span class=\"keyword\">for</span>: .valueChanged)</span><br><span class=\"line\">        holder.addSubview(slider)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@objc</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">didSlideSlider</span> <span class=\"params\">(<span class=\"number\">_</span> slider: UISlider)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> value = slider.value</span><br><span class=\"line\">        player?.volume = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@objc</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">didTapPauseButton</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> player?.isPlaying == <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">            player?.pause()</span><br><span class=\"line\">            playPauseButton.setBackgroundImage(<span class=\"type\">UIImage</span>(systemName: <span class=\"string\">\"play.fill\"</span>), <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">            <span class=\"type\">UIView</span>.animate(withDuration: <span class=\"number\">0.2</span>, animations: &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.albumImageView.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">30</span>, y: <span class=\"number\">30</span>, width: <span class=\"keyword\">self</span>.holder.frame.size.width - <span class=\"number\">60</span>, height: <span class=\"keyword\">self</span>.holder.frame.size.width - <span class=\"number\">60</span>)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            player?.play()</span><br><span class=\"line\">            playPauseButton.setBackgroundImage(<span class=\"type\">UIImage</span>(systemName: <span class=\"string\">\"pause.fill\"</span>), <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">            <span class=\"type\">UIView</span>.animate(withDuration: <span class=\"number\">0.2</span>, animations: &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.albumImageView.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">10</span>, y: <span class=\"number\">10</span>, width: <span class=\"keyword\">self</span>.holder.frame.size.width - <span class=\"number\">20</span>, height: <span class=\"keyword\">self</span>.holder.frame.size.width - <span class=\"number\">20</span>)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@objc</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">didTapNextButton</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> position &lt; (songs.<span class=\"built_in\">count</span> - <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">            position = position + <span class=\"number\">1</span></span><br><span class=\"line\">            player?.stop()</span><br><span class=\"line\">            <span class=\"keyword\">for</span> subview <span class=\"keyword\">in</span> holder.subviews &#123;</span><br><span class=\"line\">                subview.removeFromSuperview()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            configurePlayer()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@objc</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">didTapBackButton</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> position &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            position = position - <span class=\"number\">1</span></span><br><span class=\"line\">            player?.stop()</span><br><span class=\"line\">            <span class=\"keyword\">for</span> subview <span class=\"keyword\">in</span> holder.subviews &#123;</span><br><span class=\"line\">                subview.removeFromSuperview()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            configurePlayer()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Design+Code 的 Vue.js 课程学习摘录","date":"2020-02-10T17:20:20.000Z","_content":"\n收录 Vue.js 课程学习中的若干收获，包含遇到的问题、收获总结等。\n<!--more-->\n\n## 配置组件的data属性\n\n课程初提及的定义**data**的方法经过测试不可行，即如下代码片段。\n\n\n```js\n<script>\nexport default {\n  name: \"SignIn\",\n  data: {\n    isDarkMode: true\n  },\n  methods: {\n    toggleDarkMode() {\n      this.isDarkMode = !this.isDarkMode;\n    }\n  }\n};\n</script>\n```\n\n**data** 包含可以在触发组件更新的数据。\n**methods** 包含可以触发数据更改的函数。\n\n后文中解释了需要作出的更改：\n\n>为了让效果工作，我们需要的data属性是一个函数。这是 Vue组件的规则，并不是`App.vue`的规则。因此需要将当前数据属性替换为：\n\n```js\ndata() {\n  return {\n      isDarkMode: true\n  }\n},\n```\n\n经查阅官方文档，了解到 data 必须是一个函数。\n\n>当我们定义 <button-counter> 组件时，你可能会发现它的 data 并不是直接提供一个对象，取而代之的是，一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝。如果 Vue 没有这条规则，点击一个按钮就可能会影响到其它所有实例。\n\n解释得非常清楚，学习 `Vue.js` 等前端技术或许可以速成，但文档一定是不可或缺的一块。\n\n## 配置全局样式\n\n可以在CSS `<style> `的开头导入`.css`文件，但对其进行配置可以使其用于整个项目的 Vue 文件。\n`vue.config.js` 是一个可选的配置文件，如果项目的 (和 `package.json` 同级的) 根目录中存在这个文件，那么它会被 `@vue/cli-service` 自动加载。[官方文档](https://cli.vuejs.org/zh/config/#chainwebpack)详细解释了全局 CLI 配置方法。\n教程指导做的是在项目的根目录中创建一个名为`vue.config.js`的文件，并且在此输入以下配置：\n\n```js\n// vue.config.js\nmodule.exports = {\n    css: {\n        loaderOptions: {\n            sass: {\n                data: `\n                    @import \"@/global-styles/colors.scss\";\n                    @import \"@/global-styles/typography.scss\";\n                `\n            }\n        }\n    }\n}\n```\n\n如果使用的是最新版本的 `Vue CLI`，尽管进行了到 **Vue CLI > in Project Tasks > serve** 重新运行任务，还是会提示报错无法运行。\n\n新版本的 `Vue CLI` 提供了 `Dart Sass` 与 `node-sass` 两种类型的 Sass 配置，在`sass-loader`的[implementation](https://github.com/webpack-contrib/sass-loader)中两者有所不同。\n\n原因在于在 `sass-loader ` v7 中，`prependData`选项名是 \"data”，已经不适用。\n默认情况下 `sass` 选项会同时对 `sass` 和 `scss` 语法同时生效，因为 `scss` 语法在内部也是由 sass-loader 处理的，但是在配置 `data` 选项的时候，`scss` 语法会要求语句结尾必须有分号，`sass` 则要求必须没有分号。在这种情况下，我们可以使用 `scss` 选项，对 `scss` 语法进行单独配置。实例代码来自[官方文档](https://cli.vuejs.org/zh/guide/css.html#css-modules)。\n\n```js\n// vue.config.js\nmodule.exports = {\n  css: {\n    loaderOptions: {\n      // 给 sass-loader 传递选项\n      sass: {\n        // @/ 是 src/ 的别名\n        // 假设存在 `src/variables.sass` 这个文件\n        prependData: `@import \"~@/variables.sass\"`\n      },\n      scss: {\n        prependData: `@import \"~@/variables.scss\";`\n      }\n    }\n  }\n}\n```\n","source":"_posts/Design+Code_Vue.js_Learning.md","raw":"---\ntitle: Design+Code 的 Vue.js 课程学习摘录\ndate: 2020-02-11 01:20:20\ncategories: \n- tech\ntags: \n- Vue.js\n- 前端框架\n---\n\n收录 Vue.js 课程学习中的若干收获，包含遇到的问题、收获总结等。\n<!--more-->\n\n## 配置组件的data属性\n\n课程初提及的定义**data**的方法经过测试不可行，即如下代码片段。\n\n\n```js\n<script>\nexport default {\n  name: \"SignIn\",\n  data: {\n    isDarkMode: true\n  },\n  methods: {\n    toggleDarkMode() {\n      this.isDarkMode = !this.isDarkMode;\n    }\n  }\n};\n</script>\n```\n\n**data** 包含可以在触发组件更新的数据。\n**methods** 包含可以触发数据更改的函数。\n\n后文中解释了需要作出的更改：\n\n>为了让效果工作，我们需要的data属性是一个函数。这是 Vue组件的规则，并不是`App.vue`的规则。因此需要将当前数据属性替换为：\n\n```js\ndata() {\n  return {\n      isDarkMode: true\n  }\n},\n```\n\n经查阅官方文档，了解到 data 必须是一个函数。\n\n>当我们定义 <button-counter> 组件时，你可能会发现它的 data 并不是直接提供一个对象，取而代之的是，一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝。如果 Vue 没有这条规则，点击一个按钮就可能会影响到其它所有实例。\n\n解释得非常清楚，学习 `Vue.js` 等前端技术或许可以速成，但文档一定是不可或缺的一块。\n\n## 配置全局样式\n\n可以在CSS `<style> `的开头导入`.css`文件，但对其进行配置可以使其用于整个项目的 Vue 文件。\n`vue.config.js` 是一个可选的配置文件，如果项目的 (和 `package.json` 同级的) 根目录中存在这个文件，那么它会被 `@vue/cli-service` 自动加载。[官方文档](https://cli.vuejs.org/zh/config/#chainwebpack)详细解释了全局 CLI 配置方法。\n教程指导做的是在项目的根目录中创建一个名为`vue.config.js`的文件，并且在此输入以下配置：\n\n```js\n// vue.config.js\nmodule.exports = {\n    css: {\n        loaderOptions: {\n            sass: {\n                data: `\n                    @import \"@/global-styles/colors.scss\";\n                    @import \"@/global-styles/typography.scss\";\n                `\n            }\n        }\n    }\n}\n```\n\n如果使用的是最新版本的 `Vue CLI`，尽管进行了到 **Vue CLI > in Project Tasks > serve** 重新运行任务，还是会提示报错无法运行。\n\n新版本的 `Vue CLI` 提供了 `Dart Sass` 与 `node-sass` 两种类型的 Sass 配置，在`sass-loader`的[implementation](https://github.com/webpack-contrib/sass-loader)中两者有所不同。\n\n原因在于在 `sass-loader ` v7 中，`prependData`选项名是 \"data”，已经不适用。\n默认情况下 `sass` 选项会同时对 `sass` 和 `scss` 语法同时生效，因为 `scss` 语法在内部也是由 sass-loader 处理的，但是在配置 `data` 选项的时候，`scss` 语法会要求语句结尾必须有分号，`sass` 则要求必须没有分号。在这种情况下，我们可以使用 `scss` 选项，对 `scss` 语法进行单独配置。实例代码来自[官方文档](https://cli.vuejs.org/zh/guide/css.html#css-modules)。\n\n```js\n// vue.config.js\nmodule.exports = {\n  css: {\n    loaderOptions: {\n      // 给 sass-loader 传递选项\n      sass: {\n        // @/ 是 src/ 的别名\n        // 假设存在 `src/variables.sass` 这个文件\n        prependData: `@import \"~@/variables.sass\"`\n      },\n      scss: {\n        prependData: `@import \"~@/variables.scss\";`\n      }\n    }\n  }\n}\n```\n","slug":"Design+Code_Vue.js_Learning","published":1,"updated":"2020-03-22T13:01:06.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcive9n6000dcv6bdbr3ahyi","content":"<p>收录 Vue.js 课程学习中的若干收获，包含遇到的问题、收获总结等。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"配置组件的data属性\"><a href=\"#配置组件的data属性\" class=\"headerlink\" title=\"配置组件的data属性\"></a>配置组件的data属性</h2><p>课程初提及的定义<strong>data</strong>的方法经过测试不可行，即如下代码片段。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"SignIn\"</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    isDarkMode: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    toggleDarkMode() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isDarkMode = !<span class=\"keyword\">this</span>.isDarkMode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>data</strong> 包含可以在触发组件更新的数据。<br><strong>methods</strong> 包含可以触发数据更改的函数。</p>\n<p>后文中解释了需要作出的更改：</p>\n<blockquote>\n<p>为了让效果工作，我们需要的data属性是一个函数。这是 Vue组件的规则，并不是<code>App.vue</code>的规则。因此需要将当前数据属性替换为：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      isDarkMode: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>经查阅官方文档，了解到 data 必须是一个函数。</p>\n<blockquote>\n<p>当我们定义 <button-counter> 组件时，你可能会发现它的 data 并不是直接提供一个对象，取而代之的是，一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝。如果 Vue 没有这条规则，点击一个按钮就可能会影响到其它所有实例。</p>\n</blockquote>\n<p>解释得非常清楚，学习 <code>Vue.js</code> 等前端技术或许可以速成，但文档一定是不可或缺的一块。</p>\n<h2 id=\"配置全局样式\"><a href=\"#配置全局样式\" class=\"headerlink\" title=\"配置全局样式\"></a>配置全局样式</h2><p>可以在CSS <code>&lt;style&gt;</code>的开头导入<code>.css</code>文件，但对其进行配置可以使其用于整个项目的 Vue 文件。<br><code>vue.config.js</code> 是一个可选的配置文件，如果项目的 (和 <code>package.json</code> 同级的) 根目录中存在这个文件，那么它会被 <code>@vue/cli-service</code> 自动加载。<a href=\"https://cli.vuejs.org/zh/config/#chainwebpack\" target=\"_blank\" rel=\"noopener\">官方文档</a>详细解释了全局 CLI 配置方法。<br>教程指导做的是在项目的根目录中创建一个名为<code>vue.config.js</code>的文件，并且在此输入以下配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    css: &#123;</span><br><span class=\"line\">        loaderOptions: &#123;</span><br><span class=\"line\">            sass: &#123;</span><br><span class=\"line\">                data: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">                    @import \"@/global-styles/colors.scss\";</span></span><br><span class=\"line\"><span class=\"string\">                    @import \"@/global-styles/typography.scss\";</span></span><br><span class=\"line\"><span class=\"string\">                `</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果使用的是最新版本的 <code>Vue CLI</code>，尽管进行了到 <strong>Vue CLI &gt; in Project Tasks &gt; serve</strong> 重新运行任务，还是会提示报错无法运行。</p>\n<p>新版本的 <code>Vue CLI</code> 提供了 <code>Dart Sass</code> 与 <code>node-sass</code> 两种类型的 Sass 配置，在<code>sass-loader</code>的<a href=\"https://github.com/webpack-contrib/sass-loader\" target=\"_blank\" rel=\"noopener\">implementation</a>中两者有所不同。</p>\n<p>原因在于在 <code>sass-loader</code> v7 中，<code>prependData</code>选项名是 “data”，已经不适用。<br>默认情况下 <code>sass</code> 选项会同时对 <code>sass</code> 和 <code>scss</code> 语法同时生效，因为 <code>scss</code> 语法在内部也是由 sass-loader 处理的，但是在配置 <code>data</code> 选项的时候，<code>scss</code> 语法会要求语句结尾必须有分号，<code>sass</code> 则要求必须没有分号。在这种情况下，我们可以使用 <code>scss</code> 选项，对 <code>scss</code> 语法进行单独配置。实例代码来自<a href=\"https://cli.vuejs.org/zh/guide/css.html#css-modules\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  css: &#123;</span><br><span class=\"line\">    loaderOptions: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 给 sass-loader 传递选项</span></span><br><span class=\"line\">      sass: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// @/ 是 src/ 的别名</span></span><br><span class=\"line\">        <span class=\"comment\">// 假设存在 `src/variables.sass` 这个文件</span></span><br><span class=\"line\">        prependData: <span class=\"string\">`@import \"~@/variables.sass\"`</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      scss: &#123;</span><br><span class=\"line\">        prependData: <span class=\"string\">`@import \"~@/variables.scss\";`</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>收录 Vue.js 课程学习中的若干收获，包含遇到的问题、收获总结等。</p>","more":"<h2 id=\"配置组件的data属性\"><a href=\"#配置组件的data属性\" class=\"headerlink\" title=\"配置组件的data属性\"></a>配置组件的data属性</h2><p>课程初提及的定义<strong>data</strong>的方法经过测试不可行，即如下代码片段。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"SignIn\"</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    isDarkMode: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    toggleDarkMode() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isDarkMode = !<span class=\"keyword\">this</span>.isDarkMode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>data</strong> 包含可以在触发组件更新的数据。<br><strong>methods</strong> 包含可以触发数据更改的函数。</p>\n<p>后文中解释了需要作出的更改：</p>\n<blockquote>\n<p>为了让效果工作，我们需要的data属性是一个函数。这是 Vue组件的规则，并不是<code>App.vue</code>的规则。因此需要将当前数据属性替换为：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      isDarkMode: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>经查阅官方文档，了解到 data 必须是一个函数。</p>\n<blockquote>\n<p>当我们定义 <button-counter> 组件时，你可能会发现它的 data 并不是直接提供一个对象，取而代之的是，一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝。如果 Vue 没有这条规则，点击一个按钮就可能会影响到其它所有实例。</p>\n</blockquote>\n<p>解释得非常清楚，学习 <code>Vue.js</code> 等前端技术或许可以速成，但文档一定是不可或缺的一块。</p>\n<h2 id=\"配置全局样式\"><a href=\"#配置全局样式\" class=\"headerlink\" title=\"配置全局样式\"></a>配置全局样式</h2><p>可以在CSS <code>&lt;style&gt;</code>的开头导入<code>.css</code>文件，但对其进行配置可以使其用于整个项目的 Vue 文件。<br><code>vue.config.js</code> 是一个可选的配置文件，如果项目的 (和 <code>package.json</code> 同级的) 根目录中存在这个文件，那么它会被 <code>@vue/cli-service</code> 自动加载。<a href=\"https://cli.vuejs.org/zh/config/#chainwebpack\" target=\"_blank\" rel=\"noopener\">官方文档</a>详细解释了全局 CLI 配置方法。<br>教程指导做的是在项目的根目录中创建一个名为<code>vue.config.js</code>的文件，并且在此输入以下配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    css: &#123;</span><br><span class=\"line\">        loaderOptions: &#123;</span><br><span class=\"line\">            sass: &#123;</span><br><span class=\"line\">                data: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">                    @import \"@/global-styles/colors.scss\";</span></span><br><span class=\"line\"><span class=\"string\">                    @import \"@/global-styles/typography.scss\";</span></span><br><span class=\"line\"><span class=\"string\">                `</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果使用的是最新版本的 <code>Vue CLI</code>，尽管进行了到 <strong>Vue CLI &gt; in Project Tasks &gt; serve</strong> 重新运行任务，还是会提示报错无法运行。</p>\n<p>新版本的 <code>Vue CLI</code> 提供了 <code>Dart Sass</code> 与 <code>node-sass</code> 两种类型的 Sass 配置，在<code>sass-loader</code>的<a href=\"https://github.com/webpack-contrib/sass-loader\" target=\"_blank\" rel=\"noopener\">implementation</a>中两者有所不同。</p>\n<p>原因在于在 <code>sass-loader</code> v7 中，<code>prependData</code>选项名是 “data”，已经不适用。<br>默认情况下 <code>sass</code> 选项会同时对 <code>sass</code> 和 <code>scss</code> 语法同时生效，因为 <code>scss</code> 语法在内部也是由 sass-loader 处理的，但是在配置 <code>data</code> 选项的时候，<code>scss</code> 语法会要求语句结尾必须有分号，<code>sass</code> 则要求必须没有分号。在这种情况下，我们可以使用 <code>scss</code> 选项，对 <code>scss</code> 语法进行单独配置。实例代码来自<a href=\"https://cli.vuejs.org/zh/guide/css.html#css-modules\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  css: &#123;</span><br><span class=\"line\">    loaderOptions: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 给 sass-loader 传递选项</span></span><br><span class=\"line\">      sass: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// @/ 是 src/ 的别名</span></span><br><span class=\"line\">        <span class=\"comment\">// 假设存在 `src/variables.sass` 这个文件</span></span><br><span class=\"line\">        prependData: <span class=\"string\">`@import \"~@/variables.sass\"`</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      scss: &#123;</span><br><span class=\"line\">        prependData: <span class=\"string\">`@import \"~@/variables.scss\";`</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Objective-C 学习笔记(一）","date":"2020-03-21T01:20:20.000Z","copyright":true,"_content":"\n# \n最近开始学习 Objective-C 夯实基础，并在学习基础上尝试开发出简单的 iOS 应用程序。有 C 语言基础的同学应该能够比较快上手。在此处总结可以方便本人更好地记忆。\n\n<!--more-->\n## 示例代码\n先给出第一课学习的代码。\n\n```objc\n#import <Foundation/Foundation.h>\n\n@interface Device : NSObject\n\n-(void) wakeUp;\n-(void) setPasswd: (int)input;\n-(void) verifyPasswd;\n-(int) getPasswd;\n\n@end\n\n@implementation Device {\n    int passwd;\n}\n\n- (void)wakeUp{\n    NSLog(@\"The device was woken up.\");\n}\n\n-(void)setPasswd:(int)input {\n    passwd = input;\n}\n\n-(void)verifyPasswd {\n    if( passwd == 1111 )\n        NSLog(@\"The password of this device is correct.\");\n    else\n        NSLog(@\"The password of this device is incorrect!\");\n\n}\n\n-(int) getPasswd {\n    return passwd;\n};\n\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        Device *iPhone = [[Device alloc] init];\n        Device *iPad = [[Device alloc] init];\n        \n        [iPhone wakeUp];\n        [iPhone setPasswd:1000];\n        [iPhone verifyPasswd];\n        NSLog(@\"The password of iPhone is %i.\",[iPhone getPasswd]);\n        \n        [iPad wakeUp];\n        [iPad setPasswd:1111];\n        [iPad verifyPasswd];\n        NSLog(@\"The password of iPad is %i.\",[iPad getPasswd]);\n    }\n    return 0;\n}\n```\n\n运行结果如下：\n```\n2020-03-21 12:20:14.658475+0800 DemoProgram[26195:134286] The device was woken up.\n2020-03-21 12:20:14.658766+0800 DemoProgram[26195:134286] The password of this device is incorrect!\n2020-03-21 12:20:14.658820+0800 DemoProgram[26195:134286] The password of iPhone is 1000.\n2020-03-21 12:20:14.658854+0800 DemoProgram[26195:134286] The device was woken up.\n2020-03-21 12:20:14.658875+0800 DemoProgram[26195:134286] The password of this device is correct.\n2020-03-21 12:20:14.658893+0800 DemoProgram[26195:134286] The password of iPad is 1111.\nProgram ended with exit code: 0\n```\n\n## 代码解释\n`@interface` 部分用于描述类和类的方法；`@implementation` 部分用于描述类对象的实例变量存储的数据，同时实现了接口中声明的方法；剩下代码实现了程序的功能。\n### alloc\n`alloc`即 allocate，目的是为新创建的对象分配内存存储空间。`alloc`保证对象的所有实例变量都变成初始状态，但不意味着对象完成了初始化工作，完成初始化工作需要使用`init`完成。\n`alloc` 直接调用了另一个私有方法 `id _objc_rootAlloc(Class cls)`。\n\n```objc\n+ (id)alloc {\n    return _objc_rootAlloc(self);\n}\n```\n\n `id _objc_rootAlloc(Class cls)`调用了`callAlloc(cls, false/*checkNil*/, true/*allocWithZone*/)`,即 `NSObject` 对 `callAlloc` 的实现.\n \n```objc\nid _objc_rootAlloc(Class cls) {\n    return callAlloc(cls, false/*checkNil*/, true/*allocWithZone*/);\n}\n```\n\n继续研究`callAlloc(Class cls, bool checkNil, bool allocWithZone=false)`\n\n```objc\nstatic id callAlloc(Class cls, bool checkNil, bool allocWithZone=false) {\n    id obj = class_createInstance(cls, 0);\n    return obj;\n}\n\nid class_createInstance(Class cls, size_t extraBytes) {\n    return _class_createInstanceFromZone(cls, extraBytes, nil);\n}\n```\n对象初始化中最重要的操作都在 `_class_createInstanceFromZone` 方法中执行：\n\n```objc\nstatic id _class_createInstanceFromZone(Class cls, size_t extraBytes, void *zone, bool cxxConstruct = true, size_t *outAllocatedSize = nil) {\n    size_t size = cls->instanceSize(extraBytes);\n\n    id obj = (id)calloc(1, size);\n    if (!obj) return nil;\n    obj->initInstanceIsa(cls, hasCxxDtor);\n\n    return obj;\n}\n```\n### init \n`init`用于初始化类的实例变量，`iPhone = [iPhone init];` 初始化了一个特殊的 Device 对象，然而他没有发送给类，而是发送给了类的一个实例。`init`方法也可以返回被初始化的对象。\n`NSObject` 的 `- init` 方法调用了 `_objc_rootInit` 并返回了当前对象：\n\n```objc\n- (id)init {\n    return _objc_rootInit(self);\n}\n\nid _objc_rootInit(id obj) {\n    return obj;\n}\n```\n\n## 声明方法\nObjective-C 中声明的语法较为特别，方法名以冒号结束告诉编译器该方法有参数，在一对圆括号内指定参数的类型，与指定返回值的方法类似，和 C 类似整个声明以一个分号结束，给出一张图展示声明方法。\n\n![](http://images.stephenfang.xyz/obj1.jpg)\n\n\n## 规范注意\n\n流程为在`@interface`部分声明方法,并在`@implementation`部分定义它们,可使用冒号指明`ParentClassName`，与在@interface部分使用冒号一样:\n```objc\n@implementation Device: NSObject\n```\n但通常不这么做。\n\n`new`方法可以将`alloc`和`init`的操作结合起来,用两步来实现创建和初始化的方式可以在概念上理解正在发生两个不同的事件:首先创建对象，然后对它初始化。\n即以下三种方式意义相同。\n```objc\nDevice *iPhone = [[Device alloc] init];\n\nDevice *iPhone;\niPhone = [Device alloc];\niPhone = [iPhone init];\n\nDevice *iPhone = [ Device new]；\n```\n\n## 参考\n[对象是如何初始化的（iOS）](https://draveness.me/object-init)\n[Objective-C 程序设计 (第六版)]()\n","source":"_posts/Objc_Learning_1.md","raw":"---\ntitle: Objective-C 学习笔记(一）\ndate: 2020-03-21 09:20:20\ncategories: \n- tech\ntags: \n- iOS\n- Xcode\n- Objective-C\ncopyright: true\n---\n\n# \n最近开始学习 Objective-C 夯实基础，并在学习基础上尝试开发出简单的 iOS 应用程序。有 C 语言基础的同学应该能够比较快上手。在此处总结可以方便本人更好地记忆。\n\n<!--more-->\n## 示例代码\n先给出第一课学习的代码。\n\n```objc\n#import <Foundation/Foundation.h>\n\n@interface Device : NSObject\n\n-(void) wakeUp;\n-(void) setPasswd: (int)input;\n-(void) verifyPasswd;\n-(int) getPasswd;\n\n@end\n\n@implementation Device {\n    int passwd;\n}\n\n- (void)wakeUp{\n    NSLog(@\"The device was woken up.\");\n}\n\n-(void)setPasswd:(int)input {\n    passwd = input;\n}\n\n-(void)verifyPasswd {\n    if( passwd == 1111 )\n        NSLog(@\"The password of this device is correct.\");\n    else\n        NSLog(@\"The password of this device is incorrect!\");\n\n}\n\n-(int) getPasswd {\n    return passwd;\n};\n\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        Device *iPhone = [[Device alloc] init];\n        Device *iPad = [[Device alloc] init];\n        \n        [iPhone wakeUp];\n        [iPhone setPasswd:1000];\n        [iPhone verifyPasswd];\n        NSLog(@\"The password of iPhone is %i.\",[iPhone getPasswd]);\n        \n        [iPad wakeUp];\n        [iPad setPasswd:1111];\n        [iPad verifyPasswd];\n        NSLog(@\"The password of iPad is %i.\",[iPad getPasswd]);\n    }\n    return 0;\n}\n```\n\n运行结果如下：\n```\n2020-03-21 12:20:14.658475+0800 DemoProgram[26195:134286] The device was woken up.\n2020-03-21 12:20:14.658766+0800 DemoProgram[26195:134286] The password of this device is incorrect!\n2020-03-21 12:20:14.658820+0800 DemoProgram[26195:134286] The password of iPhone is 1000.\n2020-03-21 12:20:14.658854+0800 DemoProgram[26195:134286] The device was woken up.\n2020-03-21 12:20:14.658875+0800 DemoProgram[26195:134286] The password of this device is correct.\n2020-03-21 12:20:14.658893+0800 DemoProgram[26195:134286] The password of iPad is 1111.\nProgram ended with exit code: 0\n```\n\n## 代码解释\n`@interface` 部分用于描述类和类的方法；`@implementation` 部分用于描述类对象的实例变量存储的数据，同时实现了接口中声明的方法；剩下代码实现了程序的功能。\n### alloc\n`alloc`即 allocate，目的是为新创建的对象分配内存存储空间。`alloc`保证对象的所有实例变量都变成初始状态，但不意味着对象完成了初始化工作，完成初始化工作需要使用`init`完成。\n`alloc` 直接调用了另一个私有方法 `id _objc_rootAlloc(Class cls)`。\n\n```objc\n+ (id)alloc {\n    return _objc_rootAlloc(self);\n}\n```\n\n `id _objc_rootAlloc(Class cls)`调用了`callAlloc(cls, false/*checkNil*/, true/*allocWithZone*/)`,即 `NSObject` 对 `callAlloc` 的实现.\n \n```objc\nid _objc_rootAlloc(Class cls) {\n    return callAlloc(cls, false/*checkNil*/, true/*allocWithZone*/);\n}\n```\n\n继续研究`callAlloc(Class cls, bool checkNil, bool allocWithZone=false)`\n\n```objc\nstatic id callAlloc(Class cls, bool checkNil, bool allocWithZone=false) {\n    id obj = class_createInstance(cls, 0);\n    return obj;\n}\n\nid class_createInstance(Class cls, size_t extraBytes) {\n    return _class_createInstanceFromZone(cls, extraBytes, nil);\n}\n```\n对象初始化中最重要的操作都在 `_class_createInstanceFromZone` 方法中执行：\n\n```objc\nstatic id _class_createInstanceFromZone(Class cls, size_t extraBytes, void *zone, bool cxxConstruct = true, size_t *outAllocatedSize = nil) {\n    size_t size = cls->instanceSize(extraBytes);\n\n    id obj = (id)calloc(1, size);\n    if (!obj) return nil;\n    obj->initInstanceIsa(cls, hasCxxDtor);\n\n    return obj;\n}\n```\n### init \n`init`用于初始化类的实例变量，`iPhone = [iPhone init];` 初始化了一个特殊的 Device 对象，然而他没有发送给类，而是发送给了类的一个实例。`init`方法也可以返回被初始化的对象。\n`NSObject` 的 `- init` 方法调用了 `_objc_rootInit` 并返回了当前对象：\n\n```objc\n- (id)init {\n    return _objc_rootInit(self);\n}\n\nid _objc_rootInit(id obj) {\n    return obj;\n}\n```\n\n## 声明方法\nObjective-C 中声明的语法较为特别，方法名以冒号结束告诉编译器该方法有参数，在一对圆括号内指定参数的类型，与指定返回值的方法类似，和 C 类似整个声明以一个分号结束，给出一张图展示声明方法。\n\n![](http://images.stephenfang.xyz/obj1.jpg)\n\n\n## 规范注意\n\n流程为在`@interface`部分声明方法,并在`@implementation`部分定义它们,可使用冒号指明`ParentClassName`，与在@interface部分使用冒号一样:\n```objc\n@implementation Device: NSObject\n```\n但通常不这么做。\n\n`new`方法可以将`alloc`和`init`的操作结合起来,用两步来实现创建和初始化的方式可以在概念上理解正在发生两个不同的事件:首先创建对象，然后对它初始化。\n即以下三种方式意义相同。\n```objc\nDevice *iPhone = [[Device alloc] init];\n\nDevice *iPhone;\niPhone = [Device alloc];\niPhone = [iPhone init];\n\nDevice *iPhone = [ Device new]；\n```\n\n## 参考\n[对象是如何初始化的（iOS）](https://draveness.me/object-init)\n[Objective-C 程序设计 (第六版)]()\n","slug":"Objc_Learning_1","published":1,"updated":"2020-07-12T09:34:57.019Z","_id":"ckcive9n9000hcv6bb1b5dduv","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><p>最近开始学习 Objective-C 夯实基础，并在学习基础上尝试开发出简单的 iOS 应用程序。有 C 语言基础的同学应该能够比较快上手。在此处总结可以方便本人更好地记忆。</p>\n<a id=\"more\"></a>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><p>先给出第一课学习的代码。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Device</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) wakeUp;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) setPasswd: (<span class=\"keyword\">int</span>)input;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) verifyPasswd;</span><br><span class=\"line\">-(<span class=\"keyword\">int</span>) getPasswd;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Device</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> passwd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)wakeUp&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The device was woken up.\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>)setPasswd:(<span class=\"keyword\">int</span>)input &#123;</span><br><span class=\"line\">    passwd = input;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>)verifyPasswd &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( passwd == <span class=\"number\">1111</span> )</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The password of this device is correct.\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The password of this device is incorrect!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">int</span>) getPasswd &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> passwd;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        Device *iPhone = [[Device alloc] init];</span><br><span class=\"line\">        Device *iPad = [[Device alloc] init];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [iPhone wakeUp];</span><br><span class=\"line\">        [iPhone setPasswd:<span class=\"number\">1000</span>];</span><br><span class=\"line\">        [iPhone verifyPasswd];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The password of iPhone is %i.\"</span>,[iPhone getPasswd]);</span><br><span class=\"line\">        </span><br><span class=\"line\">        [iPad wakeUp];</span><br><span class=\"line\">        [iPad setPasswd:<span class=\"number\">1111</span>];</span><br><span class=\"line\">        [iPad verifyPasswd];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The password of iPad is %i.\"</span>,[iPad getPasswd]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020-03-21 12:20:14.658475+0800 DemoProgram[26195:134286] The device was woken up.</span><br><span class=\"line\">2020-03-21 12:20:14.658766+0800 DemoProgram[26195:134286] The password of this device is incorrect!</span><br><span class=\"line\">2020-03-21 12:20:14.658820+0800 DemoProgram[26195:134286] The password of iPhone is 1000.</span><br><span class=\"line\">2020-03-21 12:20:14.658854+0800 DemoProgram[26195:134286] The device was woken up.</span><br><span class=\"line\">2020-03-21 12:20:14.658875+0800 DemoProgram[26195:134286] The password of this device is correct.</span><br><span class=\"line\">2020-03-21 12:20:14.658893+0800 DemoProgram[26195:134286] The password of iPad is 1111.</span><br><span class=\"line\">Program ended with exit code: 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h2><p><code>@interface</code> 部分用于描述类和类的方法；<code>@implementation</code> 部分用于描述类对象的实例变量存储的数据，同时实现了接口中声明的方法；剩下代码实现了程序的功能。</p>\n<h3 id=\"alloc\"><a href=\"#alloc\" class=\"headerlink\" title=\"alloc\"></a>alloc</h3><p><code>alloc</code>即 allocate，目的是为新创建的对象分配内存存储空间。<code>alloc</code>保证对象的所有实例变量都变成初始状态，但不意味着对象完成了初始化工作，完成初始化工作需要使用<code>init</code>完成。<br><code>alloc</code> 直接调用了另一个私有方法 <code>id _objc_rootAlloc(Class cls)</code>。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"keyword\">id</span>)alloc &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _objc_rootAlloc(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <code>id _objc_rootAlloc(Class cls)</code>调用了<code>callAlloc(cls, false/*checkNil*/, true/*allocWithZone*/)</code>,即 <code>NSObject</code> 对 <code>callAlloc</code> 的实现.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">id</span> _objc_rootAlloc(Class cls) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> callAlloc(cls, <span class=\"literal\">false</span><span class=\"comment\">/*checkNil*/</span>, <span class=\"literal\">true</span><span class=\"comment\">/*allocWithZone*/</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>继续研究<code>callAlloc(Class cls, bool checkNil, bool allocWithZone=false)</code></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">id</span> callAlloc(Class cls, <span class=\"keyword\">bool</span> checkNil, <span class=\"keyword\">bool</span> allocWithZone=<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">id</span> obj = class_createInstance(cls, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">id</span> class_createInstance(Class cls, size_t extraBytes) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _class_createInstanceFromZone(cls, extraBytes, <span class=\"literal\">nil</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对象初始化中最重要的操作都在 <code>_class_createInstanceFromZone</code> 方法中执行：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">id</span> _class_createInstanceFromZone(Class cls, size_t extraBytes, <span class=\"keyword\">void</span> *zone, <span class=\"keyword\">bool</span> cxxConstruct = <span class=\"literal\">true</span>, size_t *outAllocatedSize = <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">    size_t size = cls-&gt;instanceSize(extraBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">id</span> obj = (<span class=\"keyword\">id</span>)calloc(<span class=\"number\">1</span>, size);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!obj) <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    obj-&gt;initInstanceIsa(cls, hasCxxDtor);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h3><p><code>init</code>用于初始化类的实例变量，<code>iPhone = [iPhone init];</code> 初始化了一个特殊的 Device 对象，然而他没有发送给类，而是发送给了类的一个实例。<code>init</code>方法也可以返回被初始化的对象。<br><code>NSObject</code> 的 <code>- init</code> 方法调用了 <code>_objc_rootInit</code> 并返回了当前对象：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">id</span>)init &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _objc_rootInit(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">id</span> _objc_rootInit(<span class=\"keyword\">id</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"声明方法\"><a href=\"#声明方法\" class=\"headerlink\" title=\"声明方法\"></a>声明方法</h2><p>Objective-C 中声明的语法较为特别，方法名以冒号结束告诉编译器该方法有参数，在一对圆括号内指定参数的类型，与指定返回值的方法类似，和 C 类似整个声明以一个分号结束，给出一张图展示声明方法。</p>\n<p><img src=\"http://images.stephenfang.xyz/obj1.jpg\" alt=\"\"></p>\n<h2 id=\"规范注意\"><a href=\"#规范注意\" class=\"headerlink\" title=\"规范注意\"></a>规范注意</h2><p>流程为在<code>@interface</code>部分声明方法,并在<code>@implementation</code>部分定义它们,可使用冒号指明<code>ParentClassName</code>，与在@interface部分使用冒号一样:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Device</span>: <span class=\"title\">NSObject</span></span></span><br></pre></td></tr></table></figure>\n<p>但通常不这么做。</p>\n<p><code>new</code>方法可以将<code>alloc</code>和<code>init</code>的操作结合起来,用两步来实现创建和初始化的方式可以在概念上理解正在发生两个不同的事件:首先创建对象，然后对它初始化。<br>即以下三种方式意义相同。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Device *iPhone = [[Device alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">Device *iPhone;</span><br><span class=\"line\">iPhone = [Device alloc];</span><br><span class=\"line\">iPhone = [iPhone init];</span><br><span class=\"line\"></span><br><span class=\"line\">Device *iPhone = [ Device new]；</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://draveness.me/object-init\" target=\"_blank\" rel=\"noopener\">对象是如何初始化的（iOS）</a><br><a href=\"\">Objective-C 程序设计 (第六版)</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><p>最近开始学习 Objective-C 夯实基础，并在学习基础上尝试开发出简单的 iOS 应用程序。有 C 语言基础的同学应该能够比较快上手。在此处总结可以方便本人更好地记忆。</p>","more":"<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><p>先给出第一课学习的代码。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Device</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) wakeUp;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) setPasswd: (<span class=\"keyword\">int</span>)input;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) verifyPasswd;</span><br><span class=\"line\">-(<span class=\"keyword\">int</span>) getPasswd;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Device</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> passwd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)wakeUp&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The device was woken up.\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>)setPasswd:(<span class=\"keyword\">int</span>)input &#123;</span><br><span class=\"line\">    passwd = input;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>)verifyPasswd &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( passwd == <span class=\"number\">1111</span> )</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The password of this device is correct.\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The password of this device is incorrect!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">int</span>) getPasswd &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> passwd;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        Device *iPhone = [[Device alloc] init];</span><br><span class=\"line\">        Device *iPad = [[Device alloc] init];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [iPhone wakeUp];</span><br><span class=\"line\">        [iPhone setPasswd:<span class=\"number\">1000</span>];</span><br><span class=\"line\">        [iPhone verifyPasswd];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The password of iPhone is %i.\"</span>,[iPhone getPasswd]);</span><br><span class=\"line\">        </span><br><span class=\"line\">        [iPad wakeUp];</span><br><span class=\"line\">        [iPad setPasswd:<span class=\"number\">1111</span>];</span><br><span class=\"line\">        [iPad verifyPasswd];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The password of iPad is %i.\"</span>,[iPad getPasswd]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020-03-21 12:20:14.658475+0800 DemoProgram[26195:134286] The device was woken up.</span><br><span class=\"line\">2020-03-21 12:20:14.658766+0800 DemoProgram[26195:134286] The password of this device is incorrect!</span><br><span class=\"line\">2020-03-21 12:20:14.658820+0800 DemoProgram[26195:134286] The password of iPhone is 1000.</span><br><span class=\"line\">2020-03-21 12:20:14.658854+0800 DemoProgram[26195:134286] The device was woken up.</span><br><span class=\"line\">2020-03-21 12:20:14.658875+0800 DemoProgram[26195:134286] The password of this device is correct.</span><br><span class=\"line\">2020-03-21 12:20:14.658893+0800 DemoProgram[26195:134286] The password of iPad is 1111.</span><br><span class=\"line\">Program ended with exit code: 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h2><p><code>@interface</code> 部分用于描述类和类的方法；<code>@implementation</code> 部分用于描述类对象的实例变量存储的数据，同时实现了接口中声明的方法；剩下代码实现了程序的功能。</p>\n<h3 id=\"alloc\"><a href=\"#alloc\" class=\"headerlink\" title=\"alloc\"></a>alloc</h3><p><code>alloc</code>即 allocate，目的是为新创建的对象分配内存存储空间。<code>alloc</code>保证对象的所有实例变量都变成初始状态，但不意味着对象完成了初始化工作，完成初始化工作需要使用<code>init</code>完成。<br><code>alloc</code> 直接调用了另一个私有方法 <code>id _objc_rootAlloc(Class cls)</code>。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"keyword\">id</span>)alloc &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _objc_rootAlloc(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <code>id _objc_rootAlloc(Class cls)</code>调用了<code>callAlloc(cls, false/*checkNil*/, true/*allocWithZone*/)</code>,即 <code>NSObject</code> 对 <code>callAlloc</code> 的实现.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">id</span> _objc_rootAlloc(Class cls) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> callAlloc(cls, <span class=\"literal\">false</span><span class=\"comment\">/*checkNil*/</span>, <span class=\"literal\">true</span><span class=\"comment\">/*allocWithZone*/</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>继续研究<code>callAlloc(Class cls, bool checkNil, bool allocWithZone=false)</code></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">id</span> callAlloc(Class cls, <span class=\"keyword\">bool</span> checkNil, <span class=\"keyword\">bool</span> allocWithZone=<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">id</span> obj = class_createInstance(cls, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">id</span> class_createInstance(Class cls, size_t extraBytes) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _class_createInstanceFromZone(cls, extraBytes, <span class=\"literal\">nil</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对象初始化中最重要的操作都在 <code>_class_createInstanceFromZone</code> 方法中执行：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">id</span> _class_createInstanceFromZone(Class cls, size_t extraBytes, <span class=\"keyword\">void</span> *zone, <span class=\"keyword\">bool</span> cxxConstruct = <span class=\"literal\">true</span>, size_t *outAllocatedSize = <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">    size_t size = cls-&gt;instanceSize(extraBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">id</span> obj = (<span class=\"keyword\">id</span>)calloc(<span class=\"number\">1</span>, size);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!obj) <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    obj-&gt;initInstanceIsa(cls, hasCxxDtor);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h3><p><code>init</code>用于初始化类的实例变量，<code>iPhone = [iPhone init];</code> 初始化了一个特殊的 Device 对象，然而他没有发送给类，而是发送给了类的一个实例。<code>init</code>方法也可以返回被初始化的对象。<br><code>NSObject</code> 的 <code>- init</code> 方法调用了 <code>_objc_rootInit</code> 并返回了当前对象：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">id</span>)init &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _objc_rootInit(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">id</span> _objc_rootInit(<span class=\"keyword\">id</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"声明方法\"><a href=\"#声明方法\" class=\"headerlink\" title=\"声明方法\"></a>声明方法</h2><p>Objective-C 中声明的语法较为特别，方法名以冒号结束告诉编译器该方法有参数，在一对圆括号内指定参数的类型，与指定返回值的方法类似，和 C 类似整个声明以一个分号结束，给出一张图展示声明方法。</p>\n<p><img src=\"http://images.stephenfang.xyz/obj1.jpg\" alt=\"\"></p>\n<h2 id=\"规范注意\"><a href=\"#规范注意\" class=\"headerlink\" title=\"规范注意\"></a>规范注意</h2><p>流程为在<code>@interface</code>部分声明方法,并在<code>@implementation</code>部分定义它们,可使用冒号指明<code>ParentClassName</code>，与在@interface部分使用冒号一样:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Device</span>: <span class=\"title\">NSObject</span></span></span><br></pre></td></tr></table></figure>\n<p>但通常不这么做。</p>\n<p><code>new</code>方法可以将<code>alloc</code>和<code>init</code>的操作结合起来,用两步来实现创建和初始化的方式可以在概念上理解正在发生两个不同的事件:首先创建对象，然后对它初始化。<br>即以下三种方式意义相同。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Device *iPhone = [[Device alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">Device *iPhone;</span><br><span class=\"line\">iPhone = [Device alloc];</span><br><span class=\"line\">iPhone = [iPhone init];</span><br><span class=\"line\"></span><br><span class=\"line\">Device *iPhone = [ Device new]；</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://draveness.me/object-init\" target=\"_blank\" rel=\"noopener\">对象是如何初始化的（iOS）</a><br><a href=\"\">Objective-C 程序设计 (第六版)</a></p>"},{"title":"Objective-C 学习笔记(二）","date":"2020-03-26T13:43:20.000Z","copyright":true,"_content":"\n\n最近开始学习 Objective-C 夯实基础，并尝试在学习基础上开发出简单的 iOS 应用程序。在此处总结可以方便本人更好地整理学习内容，此文为本系列的第二篇文章。\n\n<!--more-->\n\n## 示例代码\n先给出第二课学习的代码。\n\n```objc\n//main.m\n#import <Foundation/Foundation.h>\n#import \"Calculator.h\"\n\nint main(int argc, char* argv[]){\n    @autoreleasepool {\n        double value1, value2;\n        char operator;\n        \n        SubCalculator *subCalculator = [[SubCalculator alloc]init];\n        [subCalculator print];\n        scanf(\"%lf %c %lf\",&value1,&operator,&value2);\n        \n        subCalculator.accumulator = value1;\n        switch (operator) {\n            case '+':\n                [subCalculator add: value2];\n                break;\n            case '-':\n                [subCalculator subtract: value2];\n                break;\n            case '*':\n                [subCalculator multiply: value2];\n                break;\n            case '/':\n                [subCalculator divide: value2];\n                break;\n            default:\n                NSLog(@\"The operator is unknown!\\n\");\n                break;\n        }\n        NSLog(@\"The result is %.2f\",subCalculator.accumulator); //点运算符\n        NSLog(@\"The result is %.2f\", [subCalculator accumulator]); //getter方法\n    }\n    return 0;\n}\n```\n\n```objc\n//Calculator.h\n#import <Foundation/Foundation.h>\n\n@interface Calculator : NSObject\n\n@property double accumulator;\n\n-(void) add: (double) value;\n-(void) subtract: (double) value;\n-(void) multiply: (double) value;\n-(void) divide: (double) value;\n-(void) print;\n\n@end\n\n@interface SubCalculator : Calculator\n\n-(void) print;\n\n@end\n```\n\n```objc\n//Calculator.m\n#import \"Calculator.h\"\n\n@implementation Calculator\n\n@synthesize accumulator;\n\n-(void) add: (double) value{\n    accumulator += value;\n}\n-(void) subtract: (double) value{\n    accumulator -= value;\n}\n-(void) multiply: (double) value{\n    accumulator *= value;\n}\n-(void) divide: (double) value{\n    accumulator /= value;\n}\n\n-(void) print{\n    NSLog(@\"Type in your expression.\\n\");\n    NSLog(@\"Method from Class Calculator.\\n\");\n}\n\n@end\n\n@implementation SubCalculator\n\n-(void) print{\n    NSLog(@\"Type in your expression.\\n\");\n    NSLog(@\"Method from Sub Class subCalculator.\\n\");\n}\n\n@end\n```\n\n运行结果如下：\n```log\n2020-03-26 18:21:58.865631+0800 DemoProgram[17447:519699] Type in your expression.\n2 * 5\n2020-03-26 18:22:23.471596+0800 DemoProgram[17447:519699] The result is 10.00\n2020-03-26 18:22:23.471696+0800 DemoProgram[17447:519699] The result is 10.00\nProgram ended with exit code: 0\n```\n\n### 代码解释\n相比上一次实验，接口与实现文件得到了分离，这一点与C++是类似的。\n类的声明，即`@interface` 部分，用于描述类和类的方法，放在自己的名字为`class.h`的文件中；类的实现，即`@implementation` 部分，用于描述类对象的实例变量存储的数据，实现了接口中声明的方法，放在同名的.m文件中；`main.m`实现了简易计算器的功能。\n该程序简单验证了继承、覆写的概念，可以在程序基础上做出更改验证\n\n### 点运算符\n```objc \n[calculator setAccumulator: value1]\n```\n与\n\n```objc \ncalculator.accumulator = value1;\n```\n都完成了赋值操作，需要注意的是编码风格，点运算符通常运用在属性上，用于设置或取得实例变量的值，其他的工作通常使用传统的方括号形式的消息表达式作为首选语法。\n### @property 与 @synthesize\n#### 合成存取\n使用`synthesize`的存取方法，属性前面不要用new、alloc、copy或者init等作为开头，编译器会合成相关方法。\n```objc \n@property double accumulator;\n```\n如果使用了`@property`指令，就不需要在实现部分声明相应的实例变量。\n```objc \n@synthesize accumulator;\n```\n这句话告诉Objective-C编译器，为accumulator属性生成一对设值方法和取值方法，即设值方法`accumulator`与取值方法`setAccumulator`。\n如果只使用`@property`且并未使用`@synthesize`，编译器也会生成相应的 setter 和 getter，但是生成的实例变量以下划线(_)作为其名称第一个字符，如此处会生成\"_accumulator\"。\n#### 继承中存在的问题\n在子类中使用实例变量，必须现在接口部分声明变量，而不是在实现部分声明变量。在实现部分声明和合成(`@synthesize`)的实例变量为私有，无法在子类中访问。\n\n![](http://images.stephenfang.xyz/test1.png)\n## 其他总结\n### 关于多态\n使不同的类共享相同方法名称的能力叫多态。\n> 多态让你可以开发一组类，这组类中的每一个类都能响应相同的方法名。每个类的定义都封装了响应特定方法所需的代码，这就使得它独立于其他的类定义。多态还允许你以后添加新的类，这些新类能够响应相同的方法名。\n\n### 关于动态类型\n- `id` 可以用来存储属于任何类的对象，且` id `对象类型的声明中无需使用星号(*)。\n- `Objective-C` 总是跟踪对象所属的类。系统先判定对象所属的类，然后在**运行**时确定需要动态调用的方法，而不是在**编译**的时候。\n- 静态类型能够在程序编译阶段而不是运行阶段标明错误\n- 静态类型相比动态类型能够提高程序可读性\n\n> 如果存在id变量`dataValue 1`和`dataValue2`，那么\n```objc\nresult = [dataValue1 add: dataValue2] ;\n```\n会导致编译器生成代码,将参数传递给add:方法,并通过假设来处理其返回值。\n在运行时，`Objective-C` 运行时系统仍然会检查存储在dataValue1中对象所属的类选择相应的方法来执行。然而，在大多数情况下，编译器可能生成不正确的代码来向方法传递参数或处理返回值。\n当一个方法选取对象作为它的参数，而另一个方法选取浮点数作为参数时，很有可能发生这种情况。如果这两个方法之间的不一致仅在于对象类型的不同,编译器仍然能够生成正确的代码,因为传递给对象的引用是内存地址(即指针)。\n\n### 关于类的问题\n![NSObject类支持的基本方法](http://images.stephenfang.xyz/Xnip2020-03-26_21-23-56.png)\n\n对`isMemberOfClass`、`isKindOfClass`、`isSubclassOfClass`、`respondsToSelector`、`instancesRespondToSelector`的用法与意义应熟稔于心。\n\n### 关于异常处理\n`Objective-C`中对于异常处理的机制与`C++`、`Java`等均为类似。格式如下：\n```objc\n@try {\nstatement\nstatement\n...\n}\n@catch (NSException *exception) {\nstatement\nstatement\n...\n}\n```\n> 一般来说，你并不希望程序在运行时发生异常。这就需要考虑更好的编程实践，在错误发生之前做测试，而不是错误发生后捕获它。测试方法的错误并返回一些值作为错误的标识，而不是抛出异常。抛出异常通常会使用大量的系统资源，Apple 反对非必要的使用异常(例如，你不希望因为一一个文件无法打开而抛出异常)。\n\n### 参考\n[Objective-C 程序设计 (第六版)]()\n","source":"_posts/Objc_Learning_2.md","raw":"---\ntitle: Objective-C 学习笔记(二）\ndate: 2020-03-26 21:43:20\ncategories: \n- tech\ntags: \n- iOS\n- Xcode\n- Objective-C\ncopyright: true\n---\n\n\n最近开始学习 Objective-C 夯实基础，并尝试在学习基础上开发出简单的 iOS 应用程序。在此处总结可以方便本人更好地整理学习内容，此文为本系列的第二篇文章。\n\n<!--more-->\n\n## 示例代码\n先给出第二课学习的代码。\n\n```objc\n//main.m\n#import <Foundation/Foundation.h>\n#import \"Calculator.h\"\n\nint main(int argc, char* argv[]){\n    @autoreleasepool {\n        double value1, value2;\n        char operator;\n        \n        SubCalculator *subCalculator = [[SubCalculator alloc]init];\n        [subCalculator print];\n        scanf(\"%lf %c %lf\",&value1,&operator,&value2);\n        \n        subCalculator.accumulator = value1;\n        switch (operator) {\n            case '+':\n                [subCalculator add: value2];\n                break;\n            case '-':\n                [subCalculator subtract: value2];\n                break;\n            case '*':\n                [subCalculator multiply: value2];\n                break;\n            case '/':\n                [subCalculator divide: value2];\n                break;\n            default:\n                NSLog(@\"The operator is unknown!\\n\");\n                break;\n        }\n        NSLog(@\"The result is %.2f\",subCalculator.accumulator); //点运算符\n        NSLog(@\"The result is %.2f\", [subCalculator accumulator]); //getter方法\n    }\n    return 0;\n}\n```\n\n```objc\n//Calculator.h\n#import <Foundation/Foundation.h>\n\n@interface Calculator : NSObject\n\n@property double accumulator;\n\n-(void) add: (double) value;\n-(void) subtract: (double) value;\n-(void) multiply: (double) value;\n-(void) divide: (double) value;\n-(void) print;\n\n@end\n\n@interface SubCalculator : Calculator\n\n-(void) print;\n\n@end\n```\n\n```objc\n//Calculator.m\n#import \"Calculator.h\"\n\n@implementation Calculator\n\n@synthesize accumulator;\n\n-(void) add: (double) value{\n    accumulator += value;\n}\n-(void) subtract: (double) value{\n    accumulator -= value;\n}\n-(void) multiply: (double) value{\n    accumulator *= value;\n}\n-(void) divide: (double) value{\n    accumulator /= value;\n}\n\n-(void) print{\n    NSLog(@\"Type in your expression.\\n\");\n    NSLog(@\"Method from Class Calculator.\\n\");\n}\n\n@end\n\n@implementation SubCalculator\n\n-(void) print{\n    NSLog(@\"Type in your expression.\\n\");\n    NSLog(@\"Method from Sub Class subCalculator.\\n\");\n}\n\n@end\n```\n\n运行结果如下：\n```log\n2020-03-26 18:21:58.865631+0800 DemoProgram[17447:519699] Type in your expression.\n2 * 5\n2020-03-26 18:22:23.471596+0800 DemoProgram[17447:519699] The result is 10.00\n2020-03-26 18:22:23.471696+0800 DemoProgram[17447:519699] The result is 10.00\nProgram ended with exit code: 0\n```\n\n### 代码解释\n相比上一次实验，接口与实现文件得到了分离，这一点与C++是类似的。\n类的声明，即`@interface` 部分，用于描述类和类的方法，放在自己的名字为`class.h`的文件中；类的实现，即`@implementation` 部分，用于描述类对象的实例变量存储的数据，实现了接口中声明的方法，放在同名的.m文件中；`main.m`实现了简易计算器的功能。\n该程序简单验证了继承、覆写的概念，可以在程序基础上做出更改验证\n\n### 点运算符\n```objc \n[calculator setAccumulator: value1]\n```\n与\n\n```objc \ncalculator.accumulator = value1;\n```\n都完成了赋值操作，需要注意的是编码风格，点运算符通常运用在属性上，用于设置或取得实例变量的值，其他的工作通常使用传统的方括号形式的消息表达式作为首选语法。\n### @property 与 @synthesize\n#### 合成存取\n使用`synthesize`的存取方法，属性前面不要用new、alloc、copy或者init等作为开头，编译器会合成相关方法。\n```objc \n@property double accumulator;\n```\n如果使用了`@property`指令，就不需要在实现部分声明相应的实例变量。\n```objc \n@synthesize accumulator;\n```\n这句话告诉Objective-C编译器，为accumulator属性生成一对设值方法和取值方法，即设值方法`accumulator`与取值方法`setAccumulator`。\n如果只使用`@property`且并未使用`@synthesize`，编译器也会生成相应的 setter 和 getter，但是生成的实例变量以下划线(_)作为其名称第一个字符，如此处会生成\"_accumulator\"。\n#### 继承中存在的问题\n在子类中使用实例变量，必须现在接口部分声明变量，而不是在实现部分声明变量。在实现部分声明和合成(`@synthesize`)的实例变量为私有，无法在子类中访问。\n\n![](http://images.stephenfang.xyz/test1.png)\n## 其他总结\n### 关于多态\n使不同的类共享相同方法名称的能力叫多态。\n> 多态让你可以开发一组类，这组类中的每一个类都能响应相同的方法名。每个类的定义都封装了响应特定方法所需的代码，这就使得它独立于其他的类定义。多态还允许你以后添加新的类，这些新类能够响应相同的方法名。\n\n### 关于动态类型\n- `id` 可以用来存储属于任何类的对象，且` id `对象类型的声明中无需使用星号(*)。\n- `Objective-C` 总是跟踪对象所属的类。系统先判定对象所属的类，然后在**运行**时确定需要动态调用的方法，而不是在**编译**的时候。\n- 静态类型能够在程序编译阶段而不是运行阶段标明错误\n- 静态类型相比动态类型能够提高程序可读性\n\n> 如果存在id变量`dataValue 1`和`dataValue2`，那么\n```objc\nresult = [dataValue1 add: dataValue2] ;\n```\n会导致编译器生成代码,将参数传递给add:方法,并通过假设来处理其返回值。\n在运行时，`Objective-C` 运行时系统仍然会检查存储在dataValue1中对象所属的类选择相应的方法来执行。然而，在大多数情况下，编译器可能生成不正确的代码来向方法传递参数或处理返回值。\n当一个方法选取对象作为它的参数，而另一个方法选取浮点数作为参数时，很有可能发生这种情况。如果这两个方法之间的不一致仅在于对象类型的不同,编译器仍然能够生成正确的代码,因为传递给对象的引用是内存地址(即指针)。\n\n### 关于类的问题\n![NSObject类支持的基本方法](http://images.stephenfang.xyz/Xnip2020-03-26_21-23-56.png)\n\n对`isMemberOfClass`、`isKindOfClass`、`isSubclassOfClass`、`respondsToSelector`、`instancesRespondToSelector`的用法与意义应熟稔于心。\n\n### 关于异常处理\n`Objective-C`中对于异常处理的机制与`C++`、`Java`等均为类似。格式如下：\n```objc\n@try {\nstatement\nstatement\n...\n}\n@catch (NSException *exception) {\nstatement\nstatement\n...\n}\n```\n> 一般来说，你并不希望程序在运行时发生异常。这就需要考虑更好的编程实践，在错误发生之前做测试，而不是错误发生后捕获它。测试方法的错误并返回一些值作为错误的标识，而不是抛出异常。抛出异常通常会使用大量的系统资源，Apple 反对非必要的使用异常(例如，你不希望因为一一个文件无法打开而抛出异常)。\n\n### 参考\n[Objective-C 程序设计 (第六版)]()\n","slug":"Objc_Learning_2","published":1,"updated":"2020-04-11T07:41:19.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcive9na000jcv6b461hgx8v","content":"<p>最近开始学习 Objective-C 夯实基础，并尝试在学习基础上开发出简单的 iOS 应用程序。在此处总结可以方便本人更好地整理学习内容，此文为本系列的第二篇文章。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><p>先给出第二课学习的代码。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.m</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"Calculator.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> value1, value2;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> operator;</span><br><span class=\"line\">        </span><br><span class=\"line\">        SubCalculator *subCalculator = [[SubCalculator alloc]init];</span><br><span class=\"line\">        [subCalculator print];</span><br><span class=\"line\">        scanf(<span class=\"string\">\"%lf %c %lf\"</span>,&amp;value1,&amp;operator,&amp;value2);</span><br><span class=\"line\">        </span><br><span class=\"line\">        subCalculator.accumulator = value1;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (operator) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'+'</span>:</span><br><span class=\"line\">                [subCalculator add: value2];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'-'</span>:</span><br><span class=\"line\">                [subCalculator subtract: value2];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'*'</span>:</span><br><span class=\"line\">                [subCalculator multiply: value2];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'/'</span>:</span><br><span class=\"line\">                [subCalculator divide: value2];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The operator is unknown!\\n\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The result is %.2f\"</span>,subCalculator.accumulator); <span class=\"comment\">//点运算符</span></span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The result is %.2f\"</span>, [subCalculator accumulator]); <span class=\"comment\">//getter方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Calculator.h</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Calculator</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> <span class=\"keyword\">double</span> accumulator;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) add: (<span class=\"keyword\">double</span>) value;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) subtract: (<span class=\"keyword\">double</span>) value;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) multiply: (<span class=\"keyword\">double</span>) value;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) divide: (<span class=\"keyword\">double</span>) value;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) print;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">SubCalculator</span> : <span class=\"title\">Calculator</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) print;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Calculator.m</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"Calculator.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Calculator</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@synthesize</span> accumulator;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) add: (<span class=\"keyword\">double</span>) value&#123;</span><br><span class=\"line\">    accumulator += value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) subtract: (<span class=\"keyword\">double</span>) value&#123;</span><br><span class=\"line\">    accumulator -= value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) multiply: (<span class=\"keyword\">double</span>) value&#123;</span><br><span class=\"line\">    accumulator *= value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) divide: (<span class=\"keyword\">double</span>) value&#123;</span><br><span class=\"line\">    accumulator /= value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) print&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Type in your expression.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Method from Class Calculator.\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">SubCalculator</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) print&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Type in your expression.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Method from Sub Class subCalculator.\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020-03-26 18:21:58.865631+0800 DemoProgram[17447:519699] Type in your expression.</span><br><span class=\"line\">2 * 5</span><br><span class=\"line\">2020-03-26 18:22:23.471596+0800 DemoProgram[17447:519699] The result is 10.00</span><br><span class=\"line\">2020-03-26 18:22:23.471696+0800 DemoProgram[17447:519699] The result is 10.00</span><br><span class=\"line\">Program ended with exit code: 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h3><p>相比上一次实验，接口与实现文件得到了分离，这一点与C++是类似的。<br>类的声明，即<code>@interface</code> 部分，用于描述类和类的方法，放在自己的名字为<code>class.h</code>的文件中；类的实现，即<code>@implementation</code> 部分，用于描述类对象的实例变量存储的数据，实现了接口中声明的方法，放在同名的.m文件中；<code>main.m</code>实现了简易计算器的功能。<br>该程序简单验证了继承、覆写的概念，可以在程序基础上做出更改验证</p>\n<h3 id=\"点运算符\"><a href=\"#点运算符\" class=\"headerlink\" title=\"点运算符\"></a>点运算符</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[calculator setAccumulator: value1]</span><br></pre></td></tr></table></figure>\n<p>与</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">calculator.accumulator = value1;</span><br></pre></td></tr></table></figure>\n<p>都完成了赋值操作，需要注意的是编码风格，点运算符通常运用在属性上，用于设置或取得实例变量的值，其他的工作通常使用传统的方括号形式的消息表达式作为首选语法。</p>\n<h3 id=\"property-与-synthesize\"><a href=\"#property-与-synthesize\" class=\"headerlink\" title=\"@property 与 @synthesize\"></a>@property 与 @synthesize</h3><h4 id=\"合成存取\"><a href=\"#合成存取\" class=\"headerlink\" title=\"合成存取\"></a>合成存取</h4><p>使用<code>synthesize</code>的存取方法，属性前面不要用new、alloc、copy或者init等作为开头，编译器会合成相关方法。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> <span class=\"keyword\">double</span> accumulator;</span><br></pre></td></tr></table></figure>\n<p>如果使用了<code>@property</code>指令，就不需要在实现部分声明相应的实例变量。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@synthesize</span> accumulator;</span><br></pre></td></tr></table></figure>\n<p>这句话告诉Objective-C编译器，为accumulator属性生成一对设值方法和取值方法，即设值方法<code>accumulator</code>与取值方法<code>setAccumulator</code>。<br>如果只使用<code>@property</code>且并未使用<code>@synthesize</code>，编译器也会生成相应的 setter 和 getter，但是生成的实例变量以下划线(_)作为其名称第一个字符，如此处会生成”_accumulator”。</p>\n<h4 id=\"继承中存在的问题\"><a href=\"#继承中存在的问题\" class=\"headerlink\" title=\"继承中存在的问题\"></a>继承中存在的问题</h4><p>在子类中使用实例变量，必须现在接口部分声明变量，而不是在实现部分声明变量。在实现部分声明和合成(<code>@synthesize</code>)的实例变量为私有，无法在子类中访问。</p>\n<p><img src=\"http://images.stephenfang.xyz/test1.png\" alt=\"\"></p>\n<h2 id=\"其他总结\"><a href=\"#其他总结\" class=\"headerlink\" title=\"其他总结\"></a>其他总结</h2><h3 id=\"关于多态\"><a href=\"#关于多态\" class=\"headerlink\" title=\"关于多态\"></a>关于多态</h3><p>使不同的类共享相同方法名称的能力叫多态。</p>\n<blockquote>\n<p>多态让你可以开发一组类，这组类中的每一个类都能响应相同的方法名。每个类的定义都封装了响应特定方法所需的代码，这就使得它独立于其他的类定义。多态还允许你以后添加新的类，这些新类能够响应相同的方法名。</p>\n</blockquote>\n<h3 id=\"关于动态类型\"><a href=\"#关于动态类型\" class=\"headerlink\" title=\"关于动态类型\"></a>关于动态类型</h3><ul>\n<li><code>id</code> 可以用来存储属于任何类的对象，且<code>id</code>对象类型的声明中无需使用星号(*)。</li>\n<li><code>Objective-C</code> 总是跟踪对象所属的类。系统先判定对象所属的类，然后在<strong>运行</strong>时确定需要动态调用的方法，而不是在<strong>编译</strong>的时候。</li>\n<li>静态类型能够在程序编译阶段而不是运行阶段标明错误</li>\n<li>静态类型相比动态类型能够提高程序可读性</li>\n</ul>\n<blockquote>\n<p>如果存在id变量<code>dataValue 1</code>和<code>dataValue2</code>，那么</p>\n</blockquote>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = [dataValue1 add: dataValue2] ;</span><br></pre></td></tr></table></figure>\n<p>会导致编译器生成代码,将参数传递给add:方法,并通过假设来处理其返回值。<br>在运行时，<code>Objective-C</code> 运行时系统仍然会检查存储在dataValue1中对象所属的类选择相应的方法来执行。然而，在大多数情况下，编译器可能生成不正确的代码来向方法传递参数或处理返回值。<br>当一个方法选取对象作为它的参数，而另一个方法选取浮点数作为参数时，很有可能发生这种情况。如果这两个方法之间的不一致仅在于对象类型的不同,编译器仍然能够生成正确的代码,因为传递给对象的引用是内存地址(即指针)。</p>\n<h3 id=\"关于类的问题\"><a href=\"#关于类的问题\" class=\"headerlink\" title=\"关于类的问题\"></a>关于类的问题</h3><p><img src=\"http://images.stephenfang.xyz/Xnip2020-03-26_21-23-56.png\" alt=\"NSObject类支持的基本方法\"></p>\n<p>对<code>isMemberOfClass</code>、<code>isKindOfClass</code>、<code>isSubclassOfClass</code>、<code>respondsToSelector</code>、<code>instancesRespondToSelector</code>的用法与意义应熟稔于心。</p>\n<h3 id=\"关于异常处理\"><a href=\"#关于异常处理\" class=\"headerlink\" title=\"关于异常处理\"></a>关于异常处理</h3><p><code>Objective-C</code>中对于异常处理的机制与<code>C++</code>、<code>Java</code>等均为类似。格式如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@try</span> &#123;</span><br><span class=\"line\">statement</span><br><span class=\"line\">statement</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@catch</span> (<span class=\"built_in\">NSException</span> *exception) &#123;</span><br><span class=\"line\">statement</span><br><span class=\"line\">statement</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一般来说，你并不希望程序在运行时发生异常。这就需要考虑更好的编程实践，在错误发生之前做测试，而不是错误发生后捕获它。测试方法的错误并返回一些值作为错误的标识，而不是抛出异常。抛出异常通常会使用大量的系统资源，Apple 反对非必要的使用异常(例如，你不希望因为一一个文件无法打开而抛出异常)。</p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"\">Objective-C 程序设计 (第六版)</a></p>\n","site":{"data":{}},"excerpt":"<p>最近开始学习 Objective-C 夯实基础，并尝试在学习基础上开发出简单的 iOS 应用程序。在此处总结可以方便本人更好地整理学习内容，此文为本系列的第二篇文章。</p>","more":"<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><p>先给出第二课学习的代码。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.m</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"Calculator.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> value1, value2;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> operator;</span><br><span class=\"line\">        </span><br><span class=\"line\">        SubCalculator *subCalculator = [[SubCalculator alloc]init];</span><br><span class=\"line\">        [subCalculator print];</span><br><span class=\"line\">        scanf(<span class=\"string\">\"%lf %c %lf\"</span>,&amp;value1,&amp;operator,&amp;value2);</span><br><span class=\"line\">        </span><br><span class=\"line\">        subCalculator.accumulator = value1;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (operator) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'+'</span>:</span><br><span class=\"line\">                [subCalculator add: value2];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'-'</span>:</span><br><span class=\"line\">                [subCalculator subtract: value2];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'*'</span>:</span><br><span class=\"line\">                [subCalculator multiply: value2];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'/'</span>:</span><br><span class=\"line\">                [subCalculator divide: value2];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The operator is unknown!\\n\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The result is %.2f\"</span>,subCalculator.accumulator); <span class=\"comment\">//点运算符</span></span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The result is %.2f\"</span>, [subCalculator accumulator]); <span class=\"comment\">//getter方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Calculator.h</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Calculator</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> <span class=\"keyword\">double</span> accumulator;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) add: (<span class=\"keyword\">double</span>) value;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) subtract: (<span class=\"keyword\">double</span>) value;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) multiply: (<span class=\"keyword\">double</span>) value;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) divide: (<span class=\"keyword\">double</span>) value;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) print;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">SubCalculator</span> : <span class=\"title\">Calculator</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) print;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Calculator.m</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"Calculator.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Calculator</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@synthesize</span> accumulator;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) add: (<span class=\"keyword\">double</span>) value&#123;</span><br><span class=\"line\">    accumulator += value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) subtract: (<span class=\"keyword\">double</span>) value&#123;</span><br><span class=\"line\">    accumulator -= value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) multiply: (<span class=\"keyword\">double</span>) value&#123;</span><br><span class=\"line\">    accumulator *= value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) divide: (<span class=\"keyword\">double</span>) value&#123;</span><br><span class=\"line\">    accumulator /= value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) print&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Type in your expression.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Method from Class Calculator.\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">SubCalculator</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) print&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Type in your expression.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Method from Sub Class subCalculator.\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020-03-26 18:21:58.865631+0800 DemoProgram[17447:519699] Type in your expression.</span><br><span class=\"line\">2 * 5</span><br><span class=\"line\">2020-03-26 18:22:23.471596+0800 DemoProgram[17447:519699] The result is 10.00</span><br><span class=\"line\">2020-03-26 18:22:23.471696+0800 DemoProgram[17447:519699] The result is 10.00</span><br><span class=\"line\">Program ended with exit code: 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h3><p>相比上一次实验，接口与实现文件得到了分离，这一点与C++是类似的。<br>类的声明，即<code>@interface</code> 部分，用于描述类和类的方法，放在自己的名字为<code>class.h</code>的文件中；类的实现，即<code>@implementation</code> 部分，用于描述类对象的实例变量存储的数据，实现了接口中声明的方法，放在同名的.m文件中；<code>main.m</code>实现了简易计算器的功能。<br>该程序简单验证了继承、覆写的概念，可以在程序基础上做出更改验证</p>\n<h3 id=\"点运算符\"><a href=\"#点运算符\" class=\"headerlink\" title=\"点运算符\"></a>点运算符</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[calculator setAccumulator: value1]</span><br></pre></td></tr></table></figure>\n<p>与</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">calculator.accumulator = value1;</span><br></pre></td></tr></table></figure>\n<p>都完成了赋值操作，需要注意的是编码风格，点运算符通常运用在属性上，用于设置或取得实例变量的值，其他的工作通常使用传统的方括号形式的消息表达式作为首选语法。</p>\n<h3 id=\"property-与-synthesize\"><a href=\"#property-与-synthesize\" class=\"headerlink\" title=\"@property 与 @synthesize\"></a>@property 与 @synthesize</h3><h4 id=\"合成存取\"><a href=\"#合成存取\" class=\"headerlink\" title=\"合成存取\"></a>合成存取</h4><p>使用<code>synthesize</code>的存取方法，属性前面不要用new、alloc、copy或者init等作为开头，编译器会合成相关方法。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> <span class=\"keyword\">double</span> accumulator;</span><br></pre></td></tr></table></figure>\n<p>如果使用了<code>@property</code>指令，就不需要在实现部分声明相应的实例变量。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@synthesize</span> accumulator;</span><br></pre></td></tr></table></figure>\n<p>这句话告诉Objective-C编译器，为accumulator属性生成一对设值方法和取值方法，即设值方法<code>accumulator</code>与取值方法<code>setAccumulator</code>。<br>如果只使用<code>@property</code>且并未使用<code>@synthesize</code>，编译器也会生成相应的 setter 和 getter，但是生成的实例变量以下划线(_)作为其名称第一个字符，如此处会生成”_accumulator”。</p>\n<h4 id=\"继承中存在的问题\"><a href=\"#继承中存在的问题\" class=\"headerlink\" title=\"继承中存在的问题\"></a>继承中存在的问题</h4><p>在子类中使用实例变量，必须现在接口部分声明变量，而不是在实现部分声明变量。在实现部分声明和合成(<code>@synthesize</code>)的实例变量为私有，无法在子类中访问。</p>\n<p><img src=\"http://images.stephenfang.xyz/test1.png\" alt=\"\"></p>\n<h2 id=\"其他总结\"><a href=\"#其他总结\" class=\"headerlink\" title=\"其他总结\"></a>其他总结</h2><h3 id=\"关于多态\"><a href=\"#关于多态\" class=\"headerlink\" title=\"关于多态\"></a>关于多态</h3><p>使不同的类共享相同方法名称的能力叫多态。</p>\n<blockquote>\n<p>多态让你可以开发一组类，这组类中的每一个类都能响应相同的方法名。每个类的定义都封装了响应特定方法所需的代码，这就使得它独立于其他的类定义。多态还允许你以后添加新的类，这些新类能够响应相同的方法名。</p>\n</blockquote>\n<h3 id=\"关于动态类型\"><a href=\"#关于动态类型\" class=\"headerlink\" title=\"关于动态类型\"></a>关于动态类型</h3><ul>\n<li><code>id</code> 可以用来存储属于任何类的对象，且<code>id</code>对象类型的声明中无需使用星号(*)。</li>\n<li><code>Objective-C</code> 总是跟踪对象所属的类。系统先判定对象所属的类，然后在<strong>运行</strong>时确定需要动态调用的方法，而不是在<strong>编译</strong>的时候。</li>\n<li>静态类型能够在程序编译阶段而不是运行阶段标明错误</li>\n<li>静态类型相比动态类型能够提高程序可读性</li>\n</ul>\n<blockquote>\n<p>如果存在id变量<code>dataValue 1</code>和<code>dataValue2</code>，那么</p>\n</blockquote>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = [dataValue1 add: dataValue2] ;</span><br></pre></td></tr></table></figure>\n<p>会导致编译器生成代码,将参数传递给add:方法,并通过假设来处理其返回值。<br>在运行时，<code>Objective-C</code> 运行时系统仍然会检查存储在dataValue1中对象所属的类选择相应的方法来执行。然而，在大多数情况下，编译器可能生成不正确的代码来向方法传递参数或处理返回值。<br>当一个方法选取对象作为它的参数，而另一个方法选取浮点数作为参数时，很有可能发生这种情况。如果这两个方法之间的不一致仅在于对象类型的不同,编译器仍然能够生成正确的代码,因为传递给对象的引用是内存地址(即指针)。</p>\n<h3 id=\"关于类的问题\"><a href=\"#关于类的问题\" class=\"headerlink\" title=\"关于类的问题\"></a>关于类的问题</h3><p><img src=\"http://images.stephenfang.xyz/Xnip2020-03-26_21-23-56.png\" alt=\"NSObject类支持的基本方法\"></p>\n<p>对<code>isMemberOfClass</code>、<code>isKindOfClass</code>、<code>isSubclassOfClass</code>、<code>respondsToSelector</code>、<code>instancesRespondToSelector</code>的用法与意义应熟稔于心。</p>\n<h3 id=\"关于异常处理\"><a href=\"#关于异常处理\" class=\"headerlink\" title=\"关于异常处理\"></a>关于异常处理</h3><p><code>Objective-C</code>中对于异常处理的机制与<code>C++</code>、<code>Java</code>等均为类似。格式如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@try</span> &#123;</span><br><span class=\"line\">statement</span><br><span class=\"line\">statement</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@catch</span> (<span class=\"built_in\">NSException</span> *exception) &#123;</span><br><span class=\"line\">statement</span><br><span class=\"line\">statement</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一般来说，你并不希望程序在运行时发生异常。这就需要考虑更好的编程实践，在错误发生之前做测试，而不是错误发生后捕获它。测试方法的错误并返回一些值作为错误的标识，而不是抛出异常。抛出异常通常会使用大量的系统资源，Apple 反对非必要的使用异常(例如，你不希望因为一一个文件无法打开而抛出异常)。</p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"\">Objective-C 程序设计 (第六版)</a></p>"},{"title":"Hibernate 基础总结","date":"2020-02-25T05:11:20.000Z","_content":"\n包含 Hibernate 知识梳理、实验总结方面的总结。\n<!--more-->\n\n## 知识梳理\n\n1、Hibernate 是一个 ORM（Object-Relational Mapping）框架，用于把对象模型表示的对象映射到基于 SQL 的关系模型数据结构中去，采用完全面向对象的方式来操作数据库； \n\n2、Hibernate 的主要作用是简化应用的数据持久层编程，不仅能管理 Java 类到数据库表的映射，还提供数据查询和获取数据的方法，从而大幅减少了开发人员编写 SQL 和 JDBC 代码的时间； \n\n3、Hibernate 框架主要包括持久化对象（Persistent Objects）、Hibernate 配置文件 （一般被命名为*.cfg.xml）、Hibernate 映射文件（一般被命名为 *.hbm.xml ） 三部分； \n\n4、编译运行基于 Hibernate 框架的工程，需要导入相应的 Hibernate 类库； \n\n5、由于 Hibernate 底层是基于 JDBC 的，因此在应用程序中使用 Hibernate 执行持久化操作时也需要导入相关的 JDBC 驱动（例如 MySQL 数据库驱动）；\n\n6、在实际应用中，并不都是一张表与一个实体类映射，往往可能会有一张表跟多个实体类映射的情况，称为粒度设计； \n\n7、如果表中的某些字段联合起来能表示持久化类中的某一个属性，那么可以进行基于设计的粒度设计：将表跟多个类映射；类和类之间使用关联关系；只需要一个映射文件，其中使用 component 元素进行映射； \n\n8、如果表中的某些字段不经常使用，而且占有空间较大，则可以使用基于性能 的粒度设计：一个表可以映射为多个类；每个类对应一个 *.hbm.xml 文件；根据实际情况，使用不同的类。\n\n7、在应用程序中，用来实现业务实体的类被称为持久化类（Persistent Class）如客户信息管理系统中的 Customer 类； \n\n8、Hibernate 框架中的持久化类与数据库表对应，常用 POJO 编程模式实现，符合JavaBean 规范，提供 public 的无参构造方法，提供符合命名规范的 getters 和 setters 方法； \n\n9、持久化类与数据库表对应， 类的属性与表的字段对应；持久化类的对象被称为持久化对象 PO（Persistent Objects），PO 对应表中的一条记录； \n\n10、持久化对象映射数据库中的记录，其映射关系依赖 Hibernate 框架的映射文件配置，映射文件是 XML 文件，往往以*.hbm.xml 形式命名，其中*是持久化对象的类名； \n\n11、Hibernate 映射文件中，元素 `<id>` 表示持久化类中的主键， `<id>` 的子元素 `<generator>` 表示主键的生成策略，其取值可以是“assigned”（用户赋值）、“increment”（自动递增）等等； \n\n12、若数据库表中有多个列组成主键，则需要将其对应的持久化类中相应的多个属性封装成一个类，作为复合主键。\n\n\n## 实验总结\n**1、总结 Hibernate 配置文件`hibernate.cfg.xml`中各元素及其属性的作用；**\n\n- hibernate.connection.url:连接数据库url地址\n- hibernate.connection.username：连接数据库用户名\n- hibernate.connection.password：连接数据库密码\n- \thibernate.connection.driver_class：连接数据库JDBC驱动类\n- hibernate.dialect：连接数据库所使用的SQL语言\n- mapping resource：与当前配置文件相匹配的映射文件\n\n**2、总结持久化类与数据库表的映射关系，以及映射文件中主要元素及其属性的作用**\n\n- `<class  name=\"类名\"  table=\"表名\">`：类和表对应\n- `<id name=\"属性\" column=\"列名\">`：填写主键，即使表内没有主键，配置文件中也要配置一个唯一标识\n- `<generator class=\"assigned\"/>`：主键的生成策略，assigned 表示由用户赋值\n- `<property name=\"属性\" column=\"列名\"/>`：将属性和列对应起来\n\n**3、\t总结Action、Service 和 DAO 之间的调用关系，思考Java Web中的 DAO 类与当前 DAO 类的区别**\n\n**流程：**首先Action接受请求，调用生成的Service实例，Service经过业务逻辑处理之后调用DAO，DAO对数据库进行操作；\n\n**区别：**JavaWeb中DAO文件需要包含连接对象的定义，包含数据库连接和驱动的相关信息，而本实验中相关信息已经包含在配置文件中；JavaWeb中DAO文件需要定义结果集，而本实验中可以直接使用ArrayList存储结果；JavaWeb中DAO文件执行的sql语句为标准的sql语句而本实验中不是。\n\n**4、总结 POJO 模式下持久化类的规范**\n\n1. 提供无参的构造器\n2. 为每一个实体字段提供对应的getter/setter方法\n3. 每一个实体类都需要提供一个标识属性，与数据库中的主键对应。\n4. 实体类字段均使用包装类型\n5. 实体类不能使用final修饰\n\n**5、总结映射文件中主要元素（如class、id、generator、property）及其属性的含义与作用**\n\n•\t`<class>` ：持久化类名，类名class与表名table属性对应\n\n•\t`<id>` ：持久化类中的主键,主键属性与列名column属性对应\n\n•\t`<generator>` ：主键生成策略\n\n•\t`<property>` ：非主键属性property与column属性对应\n\n**6、总结设置复合主键的方法和步骤**\n\n首先将复合主键封装为一个类，修改PO类将复合主键作为其属性之一，修改Hibernate映射文件，将主键类中的每一个属性和表中的列对应，并指定复合主键的类型。\n\n**7、总结 Hibernate 映射文件中主键各种生成策略的作用**\n\n- assigned：用户赋值\n- increment 策略：自动递增;必须保证主键的列是\"long\"、\"integer\"或是\"short\"，必须是一个整数;系统会自动将主键列最大的值获得之后加 1，进行赋值\n- identity：由数据库根据 identity 生成主键，但是数据库必须支持 identity\n- sequence：由数据库根据序列生成主键，但是数据库必须支持 sequence\n- native：系统自动选择相应算法生成主键\n- uuid.hex ：利用 uuid 算法生成主键;必须保证该列是字符串类型;系统会自动给定一个随机、唯一的字符串\n- hilo：根据 Hibernate 的 hilo 生成主键\n\n**8、总结两种粒度设计的方法及特点**\n\n**基于设计的粒度设计：** 将表跟多个类映射；只需要一个映射文件，其中使用component元素进行映射\n\n**基于性能的粒度设计：** 一个表可以映射为多个类，每个类对应一个*.hbm.xml文件，根据实际情况，使用不同的类\n\n**9、总结 Hibernate 配置文件`hibernate.cfg.xml`中的`connection.autocommit`属性的作用**\n\n只有执行 commit 后 connection 的操作才会在数据库中真正执行。如果jdbc connection 的 autoCommit 属性是 false ，且 sql 语句中没有显示 commit，则 sql 语句即使被发送到数据库中也没有真正执行 sql；如果 connection 的 autoCommit 为true，每一条发送到数据库中的sql会自动commit。\n","source":"_posts/Hibernate_Basic.md","raw":"---\ntitle: Hibernate 基础总结\ndate: 2020-02-25 13:11:20\ncategories: \n- tech\ntags: \n- Hibernate\n- JavaEE\n- 总结\n---\n\n包含 Hibernate 知识梳理、实验总结方面的总结。\n<!--more-->\n\n## 知识梳理\n\n1、Hibernate 是一个 ORM（Object-Relational Mapping）框架，用于把对象模型表示的对象映射到基于 SQL 的关系模型数据结构中去，采用完全面向对象的方式来操作数据库； \n\n2、Hibernate 的主要作用是简化应用的数据持久层编程，不仅能管理 Java 类到数据库表的映射，还提供数据查询和获取数据的方法，从而大幅减少了开发人员编写 SQL 和 JDBC 代码的时间； \n\n3、Hibernate 框架主要包括持久化对象（Persistent Objects）、Hibernate 配置文件 （一般被命名为*.cfg.xml）、Hibernate 映射文件（一般被命名为 *.hbm.xml ） 三部分； \n\n4、编译运行基于 Hibernate 框架的工程，需要导入相应的 Hibernate 类库； \n\n5、由于 Hibernate 底层是基于 JDBC 的，因此在应用程序中使用 Hibernate 执行持久化操作时也需要导入相关的 JDBC 驱动（例如 MySQL 数据库驱动）；\n\n6、在实际应用中，并不都是一张表与一个实体类映射，往往可能会有一张表跟多个实体类映射的情况，称为粒度设计； \n\n7、如果表中的某些字段联合起来能表示持久化类中的某一个属性，那么可以进行基于设计的粒度设计：将表跟多个类映射；类和类之间使用关联关系；只需要一个映射文件，其中使用 component 元素进行映射； \n\n8、如果表中的某些字段不经常使用，而且占有空间较大，则可以使用基于性能 的粒度设计：一个表可以映射为多个类；每个类对应一个 *.hbm.xml 文件；根据实际情况，使用不同的类。\n\n7、在应用程序中，用来实现业务实体的类被称为持久化类（Persistent Class）如客户信息管理系统中的 Customer 类； \n\n8、Hibernate 框架中的持久化类与数据库表对应，常用 POJO 编程模式实现，符合JavaBean 规范，提供 public 的无参构造方法，提供符合命名规范的 getters 和 setters 方法； \n\n9、持久化类与数据库表对应， 类的属性与表的字段对应；持久化类的对象被称为持久化对象 PO（Persistent Objects），PO 对应表中的一条记录； \n\n10、持久化对象映射数据库中的记录，其映射关系依赖 Hibernate 框架的映射文件配置，映射文件是 XML 文件，往往以*.hbm.xml 形式命名，其中*是持久化对象的类名； \n\n11、Hibernate 映射文件中，元素 `<id>` 表示持久化类中的主键， `<id>` 的子元素 `<generator>` 表示主键的生成策略，其取值可以是“assigned”（用户赋值）、“increment”（自动递增）等等； \n\n12、若数据库表中有多个列组成主键，则需要将其对应的持久化类中相应的多个属性封装成一个类，作为复合主键。\n\n\n## 实验总结\n**1、总结 Hibernate 配置文件`hibernate.cfg.xml`中各元素及其属性的作用；**\n\n- hibernate.connection.url:连接数据库url地址\n- hibernate.connection.username：连接数据库用户名\n- hibernate.connection.password：连接数据库密码\n- \thibernate.connection.driver_class：连接数据库JDBC驱动类\n- hibernate.dialect：连接数据库所使用的SQL语言\n- mapping resource：与当前配置文件相匹配的映射文件\n\n**2、总结持久化类与数据库表的映射关系，以及映射文件中主要元素及其属性的作用**\n\n- `<class  name=\"类名\"  table=\"表名\">`：类和表对应\n- `<id name=\"属性\" column=\"列名\">`：填写主键，即使表内没有主键，配置文件中也要配置一个唯一标识\n- `<generator class=\"assigned\"/>`：主键的生成策略，assigned 表示由用户赋值\n- `<property name=\"属性\" column=\"列名\"/>`：将属性和列对应起来\n\n**3、\t总结Action、Service 和 DAO 之间的调用关系，思考Java Web中的 DAO 类与当前 DAO 类的区别**\n\n**流程：**首先Action接受请求，调用生成的Service实例，Service经过业务逻辑处理之后调用DAO，DAO对数据库进行操作；\n\n**区别：**JavaWeb中DAO文件需要包含连接对象的定义，包含数据库连接和驱动的相关信息，而本实验中相关信息已经包含在配置文件中；JavaWeb中DAO文件需要定义结果集，而本实验中可以直接使用ArrayList存储结果；JavaWeb中DAO文件执行的sql语句为标准的sql语句而本实验中不是。\n\n**4、总结 POJO 模式下持久化类的规范**\n\n1. 提供无参的构造器\n2. 为每一个实体字段提供对应的getter/setter方法\n3. 每一个实体类都需要提供一个标识属性，与数据库中的主键对应。\n4. 实体类字段均使用包装类型\n5. 实体类不能使用final修饰\n\n**5、总结映射文件中主要元素（如class、id、generator、property）及其属性的含义与作用**\n\n•\t`<class>` ：持久化类名，类名class与表名table属性对应\n\n•\t`<id>` ：持久化类中的主键,主键属性与列名column属性对应\n\n•\t`<generator>` ：主键生成策略\n\n•\t`<property>` ：非主键属性property与column属性对应\n\n**6、总结设置复合主键的方法和步骤**\n\n首先将复合主键封装为一个类，修改PO类将复合主键作为其属性之一，修改Hibernate映射文件，将主键类中的每一个属性和表中的列对应，并指定复合主键的类型。\n\n**7、总结 Hibernate 映射文件中主键各种生成策略的作用**\n\n- assigned：用户赋值\n- increment 策略：自动递增;必须保证主键的列是\"long\"、\"integer\"或是\"short\"，必须是一个整数;系统会自动将主键列最大的值获得之后加 1，进行赋值\n- identity：由数据库根据 identity 生成主键，但是数据库必须支持 identity\n- sequence：由数据库根据序列生成主键，但是数据库必须支持 sequence\n- native：系统自动选择相应算法生成主键\n- uuid.hex ：利用 uuid 算法生成主键;必须保证该列是字符串类型;系统会自动给定一个随机、唯一的字符串\n- hilo：根据 Hibernate 的 hilo 生成主键\n\n**8、总结两种粒度设计的方法及特点**\n\n**基于设计的粒度设计：** 将表跟多个类映射；只需要一个映射文件，其中使用component元素进行映射\n\n**基于性能的粒度设计：** 一个表可以映射为多个类，每个类对应一个*.hbm.xml文件，根据实际情况，使用不同的类\n\n**9、总结 Hibernate 配置文件`hibernate.cfg.xml`中的`connection.autocommit`属性的作用**\n\n只有执行 commit 后 connection 的操作才会在数据库中真正执行。如果jdbc connection 的 autoCommit 属性是 false ，且 sql 语句中没有显示 commit，则 sql 语句即使被发送到数据库中也没有真正执行 sql；如果 connection 的 autoCommit 为true，每一条发送到数据库中的sql会自动commit。\n","slug":"Hibernate_Basic","published":1,"updated":"2020-03-22T12:57:43.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcive9nb000ocv6b7f6836up","content":"<p>包含 Hibernate 知识梳理、实验总结方面的总结。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"知识梳理\"><a href=\"#知识梳理\" class=\"headerlink\" title=\"知识梳理\"></a>知识梳理</h2><p>1、Hibernate 是一个 ORM（Object-Relational Mapping）框架，用于把对象模型表示的对象映射到基于 SQL 的关系模型数据结构中去，采用完全面向对象的方式来操作数据库； </p>\n<p>2、Hibernate 的主要作用是简化应用的数据持久层编程，不仅能管理 Java 类到数据库表的映射，还提供数据查询和获取数据的方法，从而大幅减少了开发人员编写 SQL 和 JDBC 代码的时间； </p>\n<p>3、Hibernate 框架主要包括持久化对象（Persistent Objects）、Hibernate 配置文件 （一般被命名为*.cfg.xml）、Hibernate 映射文件（一般被命名为 *.hbm.xml ） 三部分； </p>\n<p>4、编译运行基于 Hibernate 框架的工程，需要导入相应的 Hibernate 类库； </p>\n<p>5、由于 Hibernate 底层是基于 JDBC 的，因此在应用程序中使用 Hibernate 执行持久化操作时也需要导入相关的 JDBC 驱动（例如 MySQL 数据库驱动）；</p>\n<p>6、在实际应用中，并不都是一张表与一个实体类映射，往往可能会有一张表跟多个实体类映射的情况，称为粒度设计； </p>\n<p>7、如果表中的某些字段联合起来能表示持久化类中的某一个属性，那么可以进行基于设计的粒度设计：将表跟多个类映射；类和类之间使用关联关系；只需要一个映射文件，其中使用 component 元素进行映射； </p>\n<p>8、如果表中的某些字段不经常使用，而且占有空间较大，则可以使用基于性能 的粒度设计：一个表可以映射为多个类；每个类对应一个 *.hbm.xml 文件；根据实际情况，使用不同的类。</p>\n<p>7、在应用程序中，用来实现业务实体的类被称为持久化类（Persistent Class）如客户信息管理系统中的 Customer 类； </p>\n<p>8、Hibernate 框架中的持久化类与数据库表对应，常用 POJO 编程模式实现，符合JavaBean 规范，提供 public 的无参构造方法，提供符合命名规范的 getters 和 setters 方法； </p>\n<p>9、持久化类与数据库表对应， 类的属性与表的字段对应；持久化类的对象被称为持久化对象 PO（Persistent Objects），PO 对应表中的一条记录； </p>\n<p>10、持久化对象映射数据库中的记录，其映射关系依赖 Hibernate 框架的映射文件配置，映射文件是 XML 文件，往往以<em>.hbm.xml 形式命名，其中</em>是持久化对象的类名； </p>\n<p>11、Hibernate 映射文件中，元素 <code>&lt;id&gt;</code> 表示持久化类中的主键， <code>&lt;id&gt;</code> 的子元素 <code>&lt;generator&gt;</code> 表示主键的生成策略，其取值可以是“assigned”（用户赋值）、“increment”（自动递增）等等； </p>\n<p>12、若数据库表中有多个列组成主键，则需要将其对应的持久化类中相应的多个属性封装成一个类，作为复合主键。</p>\n<h2 id=\"实验总结\"><a href=\"#实验总结\" class=\"headerlink\" title=\"实验总结\"></a>实验总结</h2><p><strong>1、总结 Hibernate 配置文件<code>hibernate.cfg.xml</code>中各元素及其属性的作用；</strong></p>\n<ul>\n<li>hibernate.connection.url:连接数据库url地址</li>\n<li>hibernate.connection.username：连接数据库用户名</li>\n<li>hibernate.connection.password：连接数据库密码</li>\n<li>hibernate.connection.driver_class：连接数据库JDBC驱动类</li>\n<li>hibernate.dialect：连接数据库所使用的SQL语言</li>\n<li>mapping resource：与当前配置文件相匹配的映射文件</li>\n</ul>\n<p><strong>2、总结持久化类与数据库表的映射关系，以及映射文件中主要元素及其属性的作用</strong></p>\n<ul>\n<li><code>&lt;class  name=&quot;类名&quot;  table=&quot;表名&quot;&gt;</code>：类和表对应</li>\n<li><code>&lt;id name=&quot;属性&quot; column=&quot;列名&quot;&gt;</code>：填写主键，即使表内没有主键，配置文件中也要配置一个唯一标识</li>\n<li><code>&lt;generator class=&quot;assigned&quot;/&gt;</code>：主键的生成策略，assigned 表示由用户赋值</li>\n<li><code>&lt;property name=&quot;属性&quot; column=&quot;列名&quot;/&gt;</code>：将属性和列对应起来</li>\n</ul>\n<p><strong>3、    总结Action、Service 和 DAO 之间的调用关系，思考Java Web中的 DAO 类与当前 DAO 类的区别</strong></p>\n<p><strong>流程：</strong>首先Action接受请求，调用生成的Service实例，Service经过业务逻辑处理之后调用DAO，DAO对数据库进行操作；</p>\n<p><strong>区别：</strong>JavaWeb中DAO文件需要包含连接对象的定义，包含数据库连接和驱动的相关信息，而本实验中相关信息已经包含在配置文件中；JavaWeb中DAO文件需要定义结果集，而本实验中可以直接使用ArrayList存储结果；JavaWeb中DAO文件执行的sql语句为标准的sql语句而本实验中不是。</p>\n<p><strong>4、总结 POJO 模式下持久化类的规范</strong></p>\n<ol>\n<li>提供无参的构造器</li>\n<li>为每一个实体字段提供对应的getter/setter方法</li>\n<li>每一个实体类都需要提供一个标识属性，与数据库中的主键对应。</li>\n<li>实体类字段均使用包装类型</li>\n<li>实体类不能使用final修饰</li>\n</ol>\n<p><strong>5、总结映射文件中主要元素（如class、id、generator、property）及其属性的含义与作用</strong></p>\n<p>•    <code>&lt;class&gt;</code> ：持久化类名，类名class与表名table属性对应</p>\n<p>•    <code>&lt;id&gt;</code> ：持久化类中的主键,主键属性与列名column属性对应</p>\n<p>•    <code>&lt;generator&gt;</code> ：主键生成策略</p>\n<p>•    <code>&lt;property&gt;</code> ：非主键属性property与column属性对应</p>\n<p><strong>6、总结设置复合主键的方法和步骤</strong></p>\n<p>首先将复合主键封装为一个类，修改PO类将复合主键作为其属性之一，修改Hibernate映射文件，将主键类中的每一个属性和表中的列对应，并指定复合主键的类型。</p>\n<p><strong>7、总结 Hibernate 映射文件中主键各种生成策略的作用</strong></p>\n<ul>\n<li>assigned：用户赋值</li>\n<li>increment 策略：自动递增;必须保证主键的列是”long”、”integer”或是”short”，必须是一个整数;系统会自动将主键列最大的值获得之后加 1，进行赋值</li>\n<li>identity：由数据库根据 identity 生成主键，但是数据库必须支持 identity</li>\n<li>sequence：由数据库根据序列生成主键，但是数据库必须支持 sequence</li>\n<li>native：系统自动选择相应算法生成主键</li>\n<li>uuid.hex ：利用 uuid 算法生成主键;必须保证该列是字符串类型;系统会自动给定一个随机、唯一的字符串</li>\n<li>hilo：根据 Hibernate 的 hilo 生成主键</li>\n</ul>\n<p><strong>8、总结两种粒度设计的方法及特点</strong></p>\n<p><strong>基于设计的粒度设计：</strong> 将表跟多个类映射；只需要一个映射文件，其中使用component元素进行映射</p>\n<p><strong>基于性能的粒度设计：</strong> 一个表可以映射为多个类，每个类对应一个*.hbm.xml文件，根据实际情况，使用不同的类</p>\n<p><strong>9、总结 Hibernate 配置文件<code>hibernate.cfg.xml</code>中的<code>connection.autocommit</code>属性的作用</strong></p>\n<p>只有执行 commit 后 connection 的操作才会在数据库中真正执行。如果jdbc connection 的 autoCommit 属性是 false ，且 sql 语句中没有显示 commit，则 sql 语句即使被发送到数据库中也没有真正执行 sql；如果 connection 的 autoCommit 为true，每一条发送到数据库中的sql会自动commit。</p>\n","site":{"data":{}},"excerpt":"<p>包含 Hibernate 知识梳理、实验总结方面的总结。</p>","more":"<h2 id=\"知识梳理\"><a href=\"#知识梳理\" class=\"headerlink\" title=\"知识梳理\"></a>知识梳理</h2><p>1、Hibernate 是一个 ORM（Object-Relational Mapping）框架，用于把对象模型表示的对象映射到基于 SQL 的关系模型数据结构中去，采用完全面向对象的方式来操作数据库； </p>\n<p>2、Hibernate 的主要作用是简化应用的数据持久层编程，不仅能管理 Java 类到数据库表的映射，还提供数据查询和获取数据的方法，从而大幅减少了开发人员编写 SQL 和 JDBC 代码的时间； </p>\n<p>3、Hibernate 框架主要包括持久化对象（Persistent Objects）、Hibernate 配置文件 （一般被命名为*.cfg.xml）、Hibernate 映射文件（一般被命名为 *.hbm.xml ） 三部分； </p>\n<p>4、编译运行基于 Hibernate 框架的工程，需要导入相应的 Hibernate 类库； </p>\n<p>5、由于 Hibernate 底层是基于 JDBC 的，因此在应用程序中使用 Hibernate 执行持久化操作时也需要导入相关的 JDBC 驱动（例如 MySQL 数据库驱动）；</p>\n<p>6、在实际应用中，并不都是一张表与一个实体类映射，往往可能会有一张表跟多个实体类映射的情况，称为粒度设计； </p>\n<p>7、如果表中的某些字段联合起来能表示持久化类中的某一个属性，那么可以进行基于设计的粒度设计：将表跟多个类映射；类和类之间使用关联关系；只需要一个映射文件，其中使用 component 元素进行映射； </p>\n<p>8、如果表中的某些字段不经常使用，而且占有空间较大，则可以使用基于性能 的粒度设计：一个表可以映射为多个类；每个类对应一个 *.hbm.xml 文件；根据实际情况，使用不同的类。</p>\n<p>7、在应用程序中，用来实现业务实体的类被称为持久化类（Persistent Class）如客户信息管理系统中的 Customer 类； </p>\n<p>8、Hibernate 框架中的持久化类与数据库表对应，常用 POJO 编程模式实现，符合JavaBean 规范，提供 public 的无参构造方法，提供符合命名规范的 getters 和 setters 方法； </p>\n<p>9、持久化类与数据库表对应， 类的属性与表的字段对应；持久化类的对象被称为持久化对象 PO（Persistent Objects），PO 对应表中的一条记录； </p>\n<p>10、持久化对象映射数据库中的记录，其映射关系依赖 Hibernate 框架的映射文件配置，映射文件是 XML 文件，往往以<em>.hbm.xml 形式命名，其中</em>是持久化对象的类名； </p>\n<p>11、Hibernate 映射文件中，元素 <code>&lt;id&gt;</code> 表示持久化类中的主键， <code>&lt;id&gt;</code> 的子元素 <code>&lt;generator&gt;</code> 表示主键的生成策略，其取值可以是“assigned”（用户赋值）、“increment”（自动递增）等等； </p>\n<p>12、若数据库表中有多个列组成主键，则需要将其对应的持久化类中相应的多个属性封装成一个类，作为复合主键。</p>\n<h2 id=\"实验总结\"><a href=\"#实验总结\" class=\"headerlink\" title=\"实验总结\"></a>实验总结</h2><p><strong>1、总结 Hibernate 配置文件<code>hibernate.cfg.xml</code>中各元素及其属性的作用；</strong></p>\n<ul>\n<li>hibernate.connection.url:连接数据库url地址</li>\n<li>hibernate.connection.username：连接数据库用户名</li>\n<li>hibernate.connection.password：连接数据库密码</li>\n<li>hibernate.connection.driver_class：连接数据库JDBC驱动类</li>\n<li>hibernate.dialect：连接数据库所使用的SQL语言</li>\n<li>mapping resource：与当前配置文件相匹配的映射文件</li>\n</ul>\n<p><strong>2、总结持久化类与数据库表的映射关系，以及映射文件中主要元素及其属性的作用</strong></p>\n<ul>\n<li><code>&lt;class  name=&quot;类名&quot;  table=&quot;表名&quot;&gt;</code>：类和表对应</li>\n<li><code>&lt;id name=&quot;属性&quot; column=&quot;列名&quot;&gt;</code>：填写主键，即使表内没有主键，配置文件中也要配置一个唯一标识</li>\n<li><code>&lt;generator class=&quot;assigned&quot;/&gt;</code>：主键的生成策略，assigned 表示由用户赋值</li>\n<li><code>&lt;property name=&quot;属性&quot; column=&quot;列名&quot;/&gt;</code>：将属性和列对应起来</li>\n</ul>\n<p><strong>3、    总结Action、Service 和 DAO 之间的调用关系，思考Java Web中的 DAO 类与当前 DAO 类的区别</strong></p>\n<p><strong>流程：</strong>首先Action接受请求，调用生成的Service实例，Service经过业务逻辑处理之后调用DAO，DAO对数据库进行操作；</p>\n<p><strong>区别：</strong>JavaWeb中DAO文件需要包含连接对象的定义，包含数据库连接和驱动的相关信息，而本实验中相关信息已经包含在配置文件中；JavaWeb中DAO文件需要定义结果集，而本实验中可以直接使用ArrayList存储结果；JavaWeb中DAO文件执行的sql语句为标准的sql语句而本实验中不是。</p>\n<p><strong>4、总结 POJO 模式下持久化类的规范</strong></p>\n<ol>\n<li>提供无参的构造器</li>\n<li>为每一个实体字段提供对应的getter/setter方法</li>\n<li>每一个实体类都需要提供一个标识属性，与数据库中的主键对应。</li>\n<li>实体类字段均使用包装类型</li>\n<li>实体类不能使用final修饰</li>\n</ol>\n<p><strong>5、总结映射文件中主要元素（如class、id、generator、property）及其属性的含义与作用</strong></p>\n<p>•    <code>&lt;class&gt;</code> ：持久化类名，类名class与表名table属性对应</p>\n<p>•    <code>&lt;id&gt;</code> ：持久化类中的主键,主键属性与列名column属性对应</p>\n<p>•    <code>&lt;generator&gt;</code> ：主键生成策略</p>\n<p>•    <code>&lt;property&gt;</code> ：非主键属性property与column属性对应</p>\n<p><strong>6、总结设置复合主键的方法和步骤</strong></p>\n<p>首先将复合主键封装为一个类，修改PO类将复合主键作为其属性之一，修改Hibernate映射文件，将主键类中的每一个属性和表中的列对应，并指定复合主键的类型。</p>\n<p><strong>7、总结 Hibernate 映射文件中主键各种生成策略的作用</strong></p>\n<ul>\n<li>assigned：用户赋值</li>\n<li>increment 策略：自动递增;必须保证主键的列是”long”、”integer”或是”short”，必须是一个整数;系统会自动将主键列最大的值获得之后加 1，进行赋值</li>\n<li>identity：由数据库根据 identity 生成主键，但是数据库必须支持 identity</li>\n<li>sequence：由数据库根据序列生成主键，但是数据库必须支持 sequence</li>\n<li>native：系统自动选择相应算法生成主键</li>\n<li>uuid.hex ：利用 uuid 算法生成主键;必须保证该列是字符串类型;系统会自动给定一个随机、唯一的字符串</li>\n<li>hilo：根据 Hibernate 的 hilo 生成主键</li>\n</ul>\n<p><strong>8、总结两种粒度设计的方法及特点</strong></p>\n<p><strong>基于设计的粒度设计：</strong> 将表跟多个类映射；只需要一个映射文件，其中使用component元素进行映射</p>\n<p><strong>基于性能的粒度设计：</strong> 一个表可以映射为多个类，每个类对应一个*.hbm.xml文件，根据实际情况，使用不同的类</p>\n<p><strong>9、总结 Hibernate 配置文件<code>hibernate.cfg.xml</code>中的<code>connection.autocommit</code>属性的作用</strong></p>\n<p>只有执行 commit 后 connection 的操作才会在数据库中真正执行。如果jdbc connection 的 autoCommit 属性是 false ，且 sql 语句中没有显示 commit，则 sql 语句即使被发送到数据库中也没有真正执行 sql；如果 connection 的 autoCommit 为true，每一条发送到数据库中的sql会自动commit。</p>"},{"title":"软件设计模式 - 中介者模式","date":"2020-06-03T09:23:20.000Z","copyright":true,"_content":"\n中介者模式(Mediator Pattern)，又称为调停者模式，是一种对象行为型模式。该设计模式使用一个中介对象（中介者）来封装一系列的对象交互，使得各对象不需要显式地相互引用，从而使其耦合松散、独立地改变它们之间的交互。本文以设计模式的四个要素出发系统性地研究中介者模式。\n\n<!--more-->\n\n## 模式目的\n中介的含义不难理解，以具体的生活场景为例，在租房、留学、找工作等时期或多或少都需要中介的帮助。互联网上实时更新的海量信息与错综复杂的关系让你无法分辨真实性与参考性，所以你无法躲避这些中介关系，只能够通过其获取你所需要的信息。\n在软件世界也同样如此，当有多个对象彼此间相互交互的时候，自然就会想到对象间的耦合度过高，而中介者模式就是用来解决这一问题的，通过封装对象间的交互行为，来降低对象之间的耦合性，防止出现系统或模块内部过度耦合。以下的图片展现了具备复杂关联关系的对象模拟图。\n![](http://images.stephenfang.xyz/mweb/15917479538199.jpg)\n图2.1 复杂关联关系模拟图\n根据上图以及以往程序设计中的经验，我们可以推断出程序设计中存在过多复杂关联关系带来的问题：\n1.\t系统结构复杂：对象之间存在大量的相互关联和调用，若其中一个对象发生变化，则需要跟踪和该对象关联的其他所有对象并进行相应处理。\n2.\t对象可重用性差：由于一个对象和其他对象具有很强的关联，若不存在其他对象的支持，一个对象很难被另一个系统或模块重用，这些对象表现像一个不可分割的整体，职责较为混乱。\n3.\t系统扩展性低：增加一个新对象需要在原有相关对象上增加引用，同时调整原有对象，系统耦合度高，对象操作很不灵活，扩展性差。\n\n在面向对象的软件设计与开发过程中，根据“单一职责原则”，我们应该尽量将对象细化，使其只负责或呈现单一的职责。对于一个可能由很多对象构成的模块，这些对象之间可能存在相互的引用，为了减少对象两两之间复杂的引用关系，使之成为一个松耦合的系统，我们需要使用中介者模式，下图十分生动地展现了中介者模式的意义。\n\n![](http://images.stephenfang.xyz/mweb/15917479852765.jpg)\n图2.2 中介者模式应用模拟图\n由上述的描述可知，中介者模式的目的主要是为了降低模块内部之间类的相互引用，防止出现系统或模块内部过度耦合。\n\n## 实现方法\n从问题出发，我们总结出中介者需要承担两方面的职责：\n- 中转作用（结构性）：\n通过中介者提供的中转作用，各个同事对象就不再需要显式引用其他同事，当需要和其他同事进行通信时，通过中介者即可。\n- 协调作用（行为性）：\n中介者可以更进一步的对同事之间的关系进行封装，同事可以一致地和中介者进行交互，而不需要指明中介者需要具体怎么做，中介者根据封装在自身内部的协调逻辑，对同事的请求进行进一步处理，将同事成员之间的关系行为进行分离和封装。\n\n从中介者模式的组成而言，其主要包含四个角色：\n- Mediator（抽象中介者）：定义一个接口用于与各同事对象之间的通信\n-\tConcreteMediator（具体中介者）：抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；\n-\tColleague（抽象同事类）：定义各同事的公有方法；\n-\tConcreteColleague（具体同事类）：抽象同事类的子类，每一个同事对象都引用一个中介者对象；每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；在具体同事类中实现了在抽象同事类中定义的方法。\n\n下图展示了中介者模式中的类结构，可以清楚地看到四种角色之间的关系。\n![](http://images.stephenfang.xyz/mweb/15917481238616.jpg)\n图3.1 中介者模式类图\n\n中介者模式可以方便地应用于图形界面(GUI)开发中，在比较复杂的界面中可能存在多个界面组件之间的交互关系。对于这些复杂的交互关系，我们可以引入一个中介者类，将这些交互的组件作为具体的同事类，将它们之间的引用和控制关系交由中介者负责，在一定程度上简化系统的交互，\nMVC架构中控制器（Controller）作为一种中介者，是数据模型对象与视图之间的桥梁，它监听视图上的交互动作并且对视图的状态作出反应，同时在Model通知数据发生改变的时候更新Model的状态。以移动应用开发为例，当用户点击按钮或在View中输入信息后视图会通知控制器，控制器解释用户交互逻辑，然后联系模型获取完成请求所需的信息。模型将信息提供给控制器，控制器将其中继到视图，视图将其显示给用户。\n \n![](http://images.stephenfang.xyz/mweb/15917481870001.jpg)\n\n图3.2 MVC模式\n\n## 模式简例\n科技发达之后家里所有设备都是智能化的，而小明在家洗澡的时候有个习惯就是喜欢听歌，而且洗澡时候还要把窗帘拉上。因此就有这种情形，小明拉上窗帘说明洗浴设备需要工作，并且音乐设备也将唤醒。因此我们希望小明家的洗浴设备、音响设备和窗帘设备能协同合作，不管操作哪种设备，其他两种设备都有响应。\n现在很明显我们可以看出来，我们有三个对象，也就是三种设备，程序看起来也很简单，只要在启动一个设备时，能同时启动另外两个设备。那么我们只需在一个设备的类里放两个其他设备的引用，很容易就能解决这个问题，这样写出来的程序对象关系如下图。\n![](http://images.stephenfang.xyz/mweb/15917485113553.jpg) \n图4.1 修改前模式\n该程序最主要的功能就是在一个类里完成了对另外两个类的方法作用。但是这样设计，由耦合度过高的问题带来两个主要缺陷\n- 一旦窗帘设备损坏需要更换，那么就要让新的窗帘设备建立所有其他设备的连接\n- 若产生新的的需求，如洗澡的时候要把门锁住，那门锁的智能设备又要关联所有设备，这样的程序设计使得在扩展程序功能时更加麻烦。\n\n中介者模式的引入则极大的弥补了上述程序的两个缺陷，对象交互如下图：\n![](http://images.stephenfang.xyz/mweb/15917485380247.jpg)\n图4.2 修改后模式\n \n中介者就好比智能家居的管家，所有对象的交互指令都通过它来传达。中介者负责与对象联系，对象与对象之间不再进行直接的交互，也就是对对象关系进行解耦。\n\n ![](http://images.stephenfang.xyz/mweb/15917485453277.jpg)\n图4.2 程序类图\n\n```java\npublic class MusicDevice extends Device{\n    public void operateDevice(String str) {\n        if(str != \"MusicDevice\"){\n            System.out.println(\"音乐设备已启动\");\n        }\n        if(str == \"true\"){\n            Mediator();\n        }\n    }\n    public void Mediator(){\n        ConcreteMediator mediator = new ConcreteMediator();\n        mediator.startUp(\"MusicDevice\");\n    }\n}\t\n```\n音乐设备部分的代码如上，其他设备代码可以参照此例。设备类都继承自Device类，其中主要由两个方法组成，一个是operateDevice函数，用来启动设备，另一个是Mediator函数，用来调用中介者，并以中介者为媒介启动其他设备。Mediator由operateDevice函数进行调用，并设置了判断条件，防止反复调用中介者类。\n\n```java\npublic class ConcreteMediator extends SmartMediator{\n    public void startUp(String item){\n        MusicDevice musicDevice = new MusicDevice();\n        CurtainDevice curtainDevice = new CurtainDevice();\n        BathDevice bathDevice = new BathDevice();\n\n        musicDevice.operateDevice(item);\n        curtainDevice.operateDevice(item);\n        bathDevice.operateDevice(item);\n    }\n}\n```\n\n中介者类如上，即程序最为重要的部分。当它的startUp方法被某一设备调用之后，它会新建所有设备的类，并且调用除了已启动的设备之外，所有其他设备的启动方法。在启动方法中设置了参数，以防止循环调用。当我们想要添加新的设备的时候，只需要编写新设备类，并且在中介者类中添加该类的启动方法，就能完成修改。从而降低代码之间的耦合性，提高了程序的可维护性。\n\n程序分析：\n1. 该程序解决了上述两个缺陷，现在所有设备都只与中介者相关联，不管是新增设备还是替换设备，只需要改变设备与中介者之间的关系，降低了代码之间的耦合性。\n2. 改变设计之后所有设备的启动项都由中介者管理，用户可以通过中介者方便地启动所有设备，而不需要将所有设备之间连接起来。避免了随着设备的增多，设备之间的联系变得无比复杂的情况。\n\n## 模式总结\n1.\t中介者模式优点：\n    - 简化了对象之间的交互。\n    - 将各同事解耦，减少子类生成，增加对象的复用性。\n    - 简化各同事类的设计和实现，便于系统维护。\n\n2.\t中介者模式缺点：\n    - 在具体中介者类中包含了同事之间的交互细节，如果中介者类设计的不好，可能会导致具体中介者类非常复杂，使得系统难以维护。\n    - 中介者对象本身需要整理系统内部的对象之间的交互，可能会导致其本身会变得臃肿和复杂，进而变得难以维护\n\n3. 中介者模式的适用环境：\n    - 系统中对象之间存在复杂的引用关系，产生的相互依赖关系结构混乱且难以理解。\n    - 一个对象引用了很多对象并且直接和这些对象通信，导致难以复用该对象。\n    - 希望通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。可以通过引入中介者类来实现，在中介者中定义对象。\n    - 交互的公共行为，如果需要改变行为则可以增加新的中介者类。\n\n### 参考资料\n[中介者模式-维基百科](https://zh.wikipedia.org/wiki/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F)\n[中介者模式— Graphic Design Patterns - 图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/mediator.html)\n[设计模式 | 中介者模式及典型应用](https://juejin.im/post/5bd275dc51882529290fe2c5)\n[中介者模式 - jyqdaisy - 博客园](https://storm.cis.fordham.edu/~gweiss/data-mining/datasets.html)\n","source":"_posts/Mediator_Pattern.md","raw":"---\ntitle: 软件设计模式 - 中介者模式\ndate: 2020-06-03 17:23:20\ncategories: \n- tech\ntags: \n- 设计模式\n- Java\ncopyright: true\n---\n\n中介者模式(Mediator Pattern)，又称为调停者模式，是一种对象行为型模式。该设计模式使用一个中介对象（中介者）来封装一系列的对象交互，使得各对象不需要显式地相互引用，从而使其耦合松散、独立地改变它们之间的交互。本文以设计模式的四个要素出发系统性地研究中介者模式。\n\n<!--more-->\n\n## 模式目的\n中介的含义不难理解，以具体的生活场景为例，在租房、留学、找工作等时期或多或少都需要中介的帮助。互联网上实时更新的海量信息与错综复杂的关系让你无法分辨真实性与参考性，所以你无法躲避这些中介关系，只能够通过其获取你所需要的信息。\n在软件世界也同样如此，当有多个对象彼此间相互交互的时候，自然就会想到对象间的耦合度过高，而中介者模式就是用来解决这一问题的，通过封装对象间的交互行为，来降低对象之间的耦合性，防止出现系统或模块内部过度耦合。以下的图片展现了具备复杂关联关系的对象模拟图。\n![](http://images.stephenfang.xyz/mweb/15917479538199.jpg)\n图2.1 复杂关联关系模拟图\n根据上图以及以往程序设计中的经验，我们可以推断出程序设计中存在过多复杂关联关系带来的问题：\n1.\t系统结构复杂：对象之间存在大量的相互关联和调用，若其中一个对象发生变化，则需要跟踪和该对象关联的其他所有对象并进行相应处理。\n2.\t对象可重用性差：由于一个对象和其他对象具有很强的关联，若不存在其他对象的支持，一个对象很难被另一个系统或模块重用，这些对象表现像一个不可分割的整体，职责较为混乱。\n3.\t系统扩展性低：增加一个新对象需要在原有相关对象上增加引用，同时调整原有对象，系统耦合度高，对象操作很不灵活，扩展性差。\n\n在面向对象的软件设计与开发过程中，根据“单一职责原则”，我们应该尽量将对象细化，使其只负责或呈现单一的职责。对于一个可能由很多对象构成的模块，这些对象之间可能存在相互的引用，为了减少对象两两之间复杂的引用关系，使之成为一个松耦合的系统，我们需要使用中介者模式，下图十分生动地展现了中介者模式的意义。\n\n![](http://images.stephenfang.xyz/mweb/15917479852765.jpg)\n图2.2 中介者模式应用模拟图\n由上述的描述可知，中介者模式的目的主要是为了降低模块内部之间类的相互引用，防止出现系统或模块内部过度耦合。\n\n## 实现方法\n从问题出发，我们总结出中介者需要承担两方面的职责：\n- 中转作用（结构性）：\n通过中介者提供的中转作用，各个同事对象就不再需要显式引用其他同事，当需要和其他同事进行通信时，通过中介者即可。\n- 协调作用（行为性）：\n中介者可以更进一步的对同事之间的关系进行封装，同事可以一致地和中介者进行交互，而不需要指明中介者需要具体怎么做，中介者根据封装在自身内部的协调逻辑，对同事的请求进行进一步处理，将同事成员之间的关系行为进行分离和封装。\n\n从中介者模式的组成而言，其主要包含四个角色：\n- Mediator（抽象中介者）：定义一个接口用于与各同事对象之间的通信\n-\tConcreteMediator（具体中介者）：抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；\n-\tColleague（抽象同事类）：定义各同事的公有方法；\n-\tConcreteColleague（具体同事类）：抽象同事类的子类，每一个同事对象都引用一个中介者对象；每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；在具体同事类中实现了在抽象同事类中定义的方法。\n\n下图展示了中介者模式中的类结构，可以清楚地看到四种角色之间的关系。\n![](http://images.stephenfang.xyz/mweb/15917481238616.jpg)\n图3.1 中介者模式类图\n\n中介者模式可以方便地应用于图形界面(GUI)开发中，在比较复杂的界面中可能存在多个界面组件之间的交互关系。对于这些复杂的交互关系，我们可以引入一个中介者类，将这些交互的组件作为具体的同事类，将它们之间的引用和控制关系交由中介者负责，在一定程度上简化系统的交互，\nMVC架构中控制器（Controller）作为一种中介者，是数据模型对象与视图之间的桥梁，它监听视图上的交互动作并且对视图的状态作出反应，同时在Model通知数据发生改变的时候更新Model的状态。以移动应用开发为例，当用户点击按钮或在View中输入信息后视图会通知控制器，控制器解释用户交互逻辑，然后联系模型获取完成请求所需的信息。模型将信息提供给控制器，控制器将其中继到视图，视图将其显示给用户。\n \n![](http://images.stephenfang.xyz/mweb/15917481870001.jpg)\n\n图3.2 MVC模式\n\n## 模式简例\n科技发达之后家里所有设备都是智能化的，而小明在家洗澡的时候有个习惯就是喜欢听歌，而且洗澡时候还要把窗帘拉上。因此就有这种情形，小明拉上窗帘说明洗浴设备需要工作，并且音乐设备也将唤醒。因此我们希望小明家的洗浴设备、音响设备和窗帘设备能协同合作，不管操作哪种设备，其他两种设备都有响应。\n现在很明显我们可以看出来，我们有三个对象，也就是三种设备，程序看起来也很简单，只要在启动一个设备时，能同时启动另外两个设备。那么我们只需在一个设备的类里放两个其他设备的引用，很容易就能解决这个问题，这样写出来的程序对象关系如下图。\n![](http://images.stephenfang.xyz/mweb/15917485113553.jpg) \n图4.1 修改前模式\n该程序最主要的功能就是在一个类里完成了对另外两个类的方法作用。但是这样设计，由耦合度过高的问题带来两个主要缺陷\n- 一旦窗帘设备损坏需要更换，那么就要让新的窗帘设备建立所有其他设备的连接\n- 若产生新的的需求，如洗澡的时候要把门锁住，那门锁的智能设备又要关联所有设备，这样的程序设计使得在扩展程序功能时更加麻烦。\n\n中介者模式的引入则极大的弥补了上述程序的两个缺陷，对象交互如下图：\n![](http://images.stephenfang.xyz/mweb/15917485380247.jpg)\n图4.2 修改后模式\n \n中介者就好比智能家居的管家，所有对象的交互指令都通过它来传达。中介者负责与对象联系，对象与对象之间不再进行直接的交互，也就是对对象关系进行解耦。\n\n ![](http://images.stephenfang.xyz/mweb/15917485453277.jpg)\n图4.2 程序类图\n\n```java\npublic class MusicDevice extends Device{\n    public void operateDevice(String str) {\n        if(str != \"MusicDevice\"){\n            System.out.println(\"音乐设备已启动\");\n        }\n        if(str == \"true\"){\n            Mediator();\n        }\n    }\n    public void Mediator(){\n        ConcreteMediator mediator = new ConcreteMediator();\n        mediator.startUp(\"MusicDevice\");\n    }\n}\t\n```\n音乐设备部分的代码如上，其他设备代码可以参照此例。设备类都继承自Device类，其中主要由两个方法组成，一个是operateDevice函数，用来启动设备，另一个是Mediator函数，用来调用中介者，并以中介者为媒介启动其他设备。Mediator由operateDevice函数进行调用，并设置了判断条件，防止反复调用中介者类。\n\n```java\npublic class ConcreteMediator extends SmartMediator{\n    public void startUp(String item){\n        MusicDevice musicDevice = new MusicDevice();\n        CurtainDevice curtainDevice = new CurtainDevice();\n        BathDevice bathDevice = new BathDevice();\n\n        musicDevice.operateDevice(item);\n        curtainDevice.operateDevice(item);\n        bathDevice.operateDevice(item);\n    }\n}\n```\n\n中介者类如上，即程序最为重要的部分。当它的startUp方法被某一设备调用之后，它会新建所有设备的类，并且调用除了已启动的设备之外，所有其他设备的启动方法。在启动方法中设置了参数，以防止循环调用。当我们想要添加新的设备的时候，只需要编写新设备类，并且在中介者类中添加该类的启动方法，就能完成修改。从而降低代码之间的耦合性，提高了程序的可维护性。\n\n程序分析：\n1. 该程序解决了上述两个缺陷，现在所有设备都只与中介者相关联，不管是新增设备还是替换设备，只需要改变设备与中介者之间的关系，降低了代码之间的耦合性。\n2. 改变设计之后所有设备的启动项都由中介者管理，用户可以通过中介者方便地启动所有设备，而不需要将所有设备之间连接起来。避免了随着设备的增多，设备之间的联系变得无比复杂的情况。\n\n## 模式总结\n1.\t中介者模式优点：\n    - 简化了对象之间的交互。\n    - 将各同事解耦，减少子类生成，增加对象的复用性。\n    - 简化各同事类的设计和实现，便于系统维护。\n\n2.\t中介者模式缺点：\n    - 在具体中介者类中包含了同事之间的交互细节，如果中介者类设计的不好，可能会导致具体中介者类非常复杂，使得系统难以维护。\n    - 中介者对象本身需要整理系统内部的对象之间的交互，可能会导致其本身会变得臃肿和复杂，进而变得难以维护\n\n3. 中介者模式的适用环境：\n    - 系统中对象之间存在复杂的引用关系，产生的相互依赖关系结构混乱且难以理解。\n    - 一个对象引用了很多对象并且直接和这些对象通信，导致难以复用该对象。\n    - 希望通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。可以通过引入中介者类来实现，在中介者中定义对象。\n    - 交互的公共行为，如果需要改变行为则可以增加新的中介者类。\n\n### 参考资料\n[中介者模式-维基百科](https://zh.wikipedia.org/wiki/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F)\n[中介者模式— Graphic Design Patterns - 图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/mediator.html)\n[设计模式 | 中介者模式及典型应用](https://juejin.im/post/5bd275dc51882529290fe2c5)\n[中介者模式 - jyqdaisy - 博客园](https://storm.cis.fordham.edu/~gweiss/data-mining/datasets.html)\n","slug":"Mediator_Pattern","published":1,"updated":"2020-06-10T00:44:27.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcive9nc000pcv6bbbxrasin","content":"<p>中介者模式(Mediator Pattern)，又称为调停者模式，是一种对象行为型模式。该设计模式使用一个中介对象（中介者）来封装一系列的对象交互，使得各对象不需要显式地相互引用，从而使其耦合松散、独立地改变它们之间的交互。本文以设计模式的四个要素出发系统性地研究中介者模式。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"模式目的\"><a href=\"#模式目的\" class=\"headerlink\" title=\"模式目的\"></a>模式目的</h2><p>中介的含义不难理解，以具体的生活场景为例，在租房、留学、找工作等时期或多或少都需要中介的帮助。互联网上实时更新的海量信息与错综复杂的关系让你无法分辨真实性与参考性，所以你无法躲避这些中介关系，只能够通过其获取你所需要的信息。<br>在软件世界也同样如此，当有多个对象彼此间相互交互的时候，自然就会想到对象间的耦合度过高，而中介者模式就是用来解决这一问题的，通过封装对象间的交互行为，来降低对象之间的耦合性，防止出现系统或模块内部过度耦合。以下的图片展现了具备复杂关联关系的对象模拟图。<br><img src=\"http://images.stephenfang.xyz/mweb/15917479538199.jpg\" alt=\"\"><br>图2.1 复杂关联关系模拟图<br>根据上图以及以往程序设计中的经验，我们可以推断出程序设计中存在过多复杂关联关系带来的问题：</p>\n<ol>\n<li>系统结构复杂：对象之间存在大量的相互关联和调用，若其中一个对象发生变化，则需要跟踪和该对象关联的其他所有对象并进行相应处理。</li>\n<li>对象可重用性差：由于一个对象和其他对象具有很强的关联，若不存在其他对象的支持，一个对象很难被另一个系统或模块重用，这些对象表现像一个不可分割的整体，职责较为混乱。</li>\n<li>系统扩展性低：增加一个新对象需要在原有相关对象上增加引用，同时调整原有对象，系统耦合度高，对象操作很不灵活，扩展性差。</li>\n</ol>\n<p>在面向对象的软件设计与开发过程中，根据“单一职责原则”，我们应该尽量将对象细化，使其只负责或呈现单一的职责。对于一个可能由很多对象构成的模块，这些对象之间可能存在相互的引用，为了减少对象两两之间复杂的引用关系，使之成为一个松耦合的系统，我们需要使用中介者模式，下图十分生动地展现了中介者模式的意义。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/15917479852765.jpg\" alt=\"\"><br>图2.2 中介者模式应用模拟图<br>由上述的描述可知，中介者模式的目的主要是为了降低模块内部之间类的相互引用，防止出现系统或模块内部过度耦合。</p>\n<h2 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h2><p>从问题出发，我们总结出中介者需要承担两方面的职责：</p>\n<ul>\n<li>中转作用（结构性）：<br>通过中介者提供的中转作用，各个同事对象就不再需要显式引用其他同事，当需要和其他同事进行通信时，通过中介者即可。</li>\n<li>协调作用（行为性）：<br>中介者可以更进一步的对同事之间的关系进行封装，同事可以一致地和中介者进行交互，而不需要指明中介者需要具体怎么做，中介者根据封装在自身内部的协调逻辑，对同事的请求进行进一步处理，将同事成员之间的关系行为进行分离和封装。</li>\n</ul>\n<p>从中介者模式的组成而言，其主要包含四个角色：</p>\n<ul>\n<li>Mediator（抽象中介者）：定义一个接口用于与各同事对象之间的通信</li>\n<li>ConcreteMediator（具体中介者）：抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；</li>\n<li>Colleague（抽象同事类）：定义各同事的公有方法；</li>\n<li>ConcreteColleague（具体同事类）：抽象同事类的子类，每一个同事对象都引用一个中介者对象；每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；在具体同事类中实现了在抽象同事类中定义的方法。</li>\n</ul>\n<p>下图展示了中介者模式中的类结构，可以清楚地看到四种角色之间的关系。<br><img src=\"http://images.stephenfang.xyz/mweb/15917481238616.jpg\" alt=\"\"><br>图3.1 中介者模式类图</p>\n<p>中介者模式可以方便地应用于图形界面(GUI)开发中，在比较复杂的界面中可能存在多个界面组件之间的交互关系。对于这些复杂的交互关系，我们可以引入一个中介者类，将这些交互的组件作为具体的同事类，将它们之间的引用和控制关系交由中介者负责，在一定程度上简化系统的交互，<br>MVC架构中控制器（Controller）作为一种中介者，是数据模型对象与视图之间的桥梁，它监听视图上的交互动作并且对视图的状态作出反应，同时在Model通知数据发生改变的时候更新Model的状态。以移动应用开发为例，当用户点击按钮或在View中输入信息后视图会通知控制器，控制器解释用户交互逻辑，然后联系模型获取完成请求所需的信息。模型将信息提供给控制器，控制器将其中继到视图，视图将其显示给用户。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/15917481870001.jpg\" alt=\"\"></p>\n<p>图3.2 MVC模式</p>\n<h2 id=\"模式简例\"><a href=\"#模式简例\" class=\"headerlink\" title=\"模式简例\"></a>模式简例</h2><p>科技发达之后家里所有设备都是智能化的，而小明在家洗澡的时候有个习惯就是喜欢听歌，而且洗澡时候还要把窗帘拉上。因此就有这种情形，小明拉上窗帘说明洗浴设备需要工作，并且音乐设备也将唤醒。因此我们希望小明家的洗浴设备、音响设备和窗帘设备能协同合作，不管操作哪种设备，其他两种设备都有响应。<br>现在很明显我们可以看出来，我们有三个对象，也就是三种设备，程序看起来也很简单，只要在启动一个设备时，能同时启动另外两个设备。那么我们只需在一个设备的类里放两个其他设备的引用，很容易就能解决这个问题，这样写出来的程序对象关系如下图。<br><img src=\"http://images.stephenfang.xyz/mweb/15917485113553.jpg\" alt=\"\"><br>图4.1 修改前模式<br>该程序最主要的功能就是在一个类里完成了对另外两个类的方法作用。但是这样设计，由耦合度过高的问题带来两个主要缺陷</p>\n<ul>\n<li>一旦窗帘设备损坏需要更换，那么就要让新的窗帘设备建立所有其他设备的连接</li>\n<li>若产生新的的需求，如洗澡的时候要把门锁住，那门锁的智能设备又要关联所有设备，这样的程序设计使得在扩展程序功能时更加麻烦。</li>\n</ul>\n<p>中介者模式的引入则极大的弥补了上述程序的两个缺陷，对象交互如下图：<br><img src=\"http://images.stephenfang.xyz/mweb/15917485380247.jpg\" alt=\"\"><br>图4.2 修改后模式</p>\n<p>中介者就好比智能家居的管家，所有对象的交互指令都通过它来传达。中介者负责与对象联系，对象与对象之间不再进行直接的交互，也就是对对象关系进行解耦。</p>\n<p> <img src=\"http://images.stephenfang.xyz/mweb/15917485453277.jpg\" alt=\"\"><br>图4.2 程序类图</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MusicDevice</span> <span class=\"keyword\">extends</span> <span class=\"title\">Device</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operateDevice</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str != <span class=\"string\">\"MusicDevice\"</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"音乐设备已启动\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str == <span class=\"string\">\"true\"</span>)&#123;</span><br><span class=\"line\">            Mediator();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Mediator</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ConcreteMediator mediator = <span class=\"keyword\">new</span> ConcreteMediator();</span><br><span class=\"line\">        mediator.startUp(<span class=\"string\">\"MusicDevice\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>音乐设备部分的代码如上，其他设备代码可以参照此例。设备类都继承自Device类，其中主要由两个方法组成，一个是operateDevice函数，用来启动设备，另一个是Mediator函数，用来调用中介者，并以中介者为媒介启动其他设备。Mediator由operateDevice函数进行调用，并设置了判断条件，防止反复调用中介者类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteMediator</span> <span class=\"keyword\">extends</span> <span class=\"title\">SmartMediator</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startUp</span><span class=\"params\">(String item)</span></span>&#123;</span><br><span class=\"line\">        MusicDevice musicDevice = <span class=\"keyword\">new</span> MusicDevice();</span><br><span class=\"line\">        CurtainDevice curtainDevice = <span class=\"keyword\">new</span> CurtainDevice();</span><br><span class=\"line\">        BathDevice bathDevice = <span class=\"keyword\">new</span> BathDevice();</span><br><span class=\"line\"></span><br><span class=\"line\">        musicDevice.operateDevice(item);</span><br><span class=\"line\">        curtainDevice.operateDevice(item);</span><br><span class=\"line\">        bathDevice.operateDevice(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>中介者类如上，即程序最为重要的部分。当它的startUp方法被某一设备调用之后，它会新建所有设备的类，并且调用除了已启动的设备之外，所有其他设备的启动方法。在启动方法中设置了参数，以防止循环调用。当我们想要添加新的设备的时候，只需要编写新设备类，并且在中介者类中添加该类的启动方法，就能完成修改。从而降低代码之间的耦合性，提高了程序的可维护性。</p>\n<p>程序分析：</p>\n<ol>\n<li>该程序解决了上述两个缺陷，现在所有设备都只与中介者相关联，不管是新增设备还是替换设备，只需要改变设备与中介者之间的关系，降低了代码之间的耦合性。</li>\n<li>改变设计之后所有设备的启动项都由中介者管理，用户可以通过中介者方便地启动所有设备，而不需要将所有设备之间连接起来。避免了随着设备的增多，设备之间的联系变得无比复杂的情况。</li>\n</ol>\n<h2 id=\"模式总结\"><a href=\"#模式总结\" class=\"headerlink\" title=\"模式总结\"></a>模式总结</h2><ol>\n<li><p>中介者模式优点：</p>\n<ul>\n<li>简化了对象之间的交互。</li>\n<li>将各同事解耦，减少子类生成，增加对象的复用性。</li>\n<li>简化各同事类的设计和实现，便于系统维护。</li>\n</ul>\n</li>\n<li><p>中介者模式缺点：</p>\n<ul>\n<li>在具体中介者类中包含了同事之间的交互细节，如果中介者类设计的不好，可能会导致具体中介者类非常复杂，使得系统难以维护。</li>\n<li>中介者对象本身需要整理系统内部的对象之间的交互，可能会导致其本身会变得臃肿和复杂，进而变得难以维护</li>\n</ul>\n</li>\n<li><p>中介者模式的适用环境：</p>\n<ul>\n<li>系统中对象之间存在复杂的引用关系，产生的相互依赖关系结构混乱且难以理解。</li>\n<li>一个对象引用了很多对象并且直接和这些对象通信，导致难以复用该对象。</li>\n<li>希望通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。可以通过引入中介者类来实现，在中介者中定义对象。</li>\n<li>交互的公共行为，如果需要改变行为则可以增加新的中介者类。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://zh.wikipedia.org/wiki/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">中介者模式-维基百科</a><br><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/mediator.html\" target=\"_blank\" rel=\"noopener\">中介者模式— Graphic Design Patterns - 图说设计模式</a><br><a href=\"https://juejin.im/post/5bd275dc51882529290fe2c5\" target=\"_blank\" rel=\"noopener\">设计模式 | 中介者模式及典型应用</a><br><a href=\"https://storm.cis.fordham.edu/~gweiss/data-mining/datasets.html\" target=\"_blank\" rel=\"noopener\">中介者模式 - jyqdaisy - 博客园</a></p>\n","site":{"data":{}},"excerpt":"<p>中介者模式(Mediator Pattern)，又称为调停者模式，是一种对象行为型模式。该设计模式使用一个中介对象（中介者）来封装一系列的对象交互，使得各对象不需要显式地相互引用，从而使其耦合松散、独立地改变它们之间的交互。本文以设计模式的四个要素出发系统性地研究中介者模式。</p>","more":"<h2 id=\"模式目的\"><a href=\"#模式目的\" class=\"headerlink\" title=\"模式目的\"></a>模式目的</h2><p>中介的含义不难理解，以具体的生活场景为例，在租房、留学、找工作等时期或多或少都需要中介的帮助。互联网上实时更新的海量信息与错综复杂的关系让你无法分辨真实性与参考性，所以你无法躲避这些中介关系，只能够通过其获取你所需要的信息。<br>在软件世界也同样如此，当有多个对象彼此间相互交互的时候，自然就会想到对象间的耦合度过高，而中介者模式就是用来解决这一问题的，通过封装对象间的交互行为，来降低对象之间的耦合性，防止出现系统或模块内部过度耦合。以下的图片展现了具备复杂关联关系的对象模拟图。<br><img src=\"http://images.stephenfang.xyz/mweb/15917479538199.jpg\" alt=\"\"><br>图2.1 复杂关联关系模拟图<br>根据上图以及以往程序设计中的经验，我们可以推断出程序设计中存在过多复杂关联关系带来的问题：</p>\n<ol>\n<li>系统结构复杂：对象之间存在大量的相互关联和调用，若其中一个对象发生变化，则需要跟踪和该对象关联的其他所有对象并进行相应处理。</li>\n<li>对象可重用性差：由于一个对象和其他对象具有很强的关联，若不存在其他对象的支持，一个对象很难被另一个系统或模块重用，这些对象表现像一个不可分割的整体，职责较为混乱。</li>\n<li>系统扩展性低：增加一个新对象需要在原有相关对象上增加引用，同时调整原有对象，系统耦合度高，对象操作很不灵活，扩展性差。</li>\n</ol>\n<p>在面向对象的软件设计与开发过程中，根据“单一职责原则”，我们应该尽量将对象细化，使其只负责或呈现单一的职责。对于一个可能由很多对象构成的模块，这些对象之间可能存在相互的引用，为了减少对象两两之间复杂的引用关系，使之成为一个松耦合的系统，我们需要使用中介者模式，下图十分生动地展现了中介者模式的意义。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/15917479852765.jpg\" alt=\"\"><br>图2.2 中介者模式应用模拟图<br>由上述的描述可知，中介者模式的目的主要是为了降低模块内部之间类的相互引用，防止出现系统或模块内部过度耦合。</p>\n<h2 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h2><p>从问题出发，我们总结出中介者需要承担两方面的职责：</p>\n<ul>\n<li>中转作用（结构性）：<br>通过中介者提供的中转作用，各个同事对象就不再需要显式引用其他同事，当需要和其他同事进行通信时，通过中介者即可。</li>\n<li>协调作用（行为性）：<br>中介者可以更进一步的对同事之间的关系进行封装，同事可以一致地和中介者进行交互，而不需要指明中介者需要具体怎么做，中介者根据封装在自身内部的协调逻辑，对同事的请求进行进一步处理，将同事成员之间的关系行为进行分离和封装。</li>\n</ul>\n<p>从中介者模式的组成而言，其主要包含四个角色：</p>\n<ul>\n<li>Mediator（抽象中介者）：定义一个接口用于与各同事对象之间的通信</li>\n<li>ConcreteMediator（具体中介者）：抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；</li>\n<li>Colleague（抽象同事类）：定义各同事的公有方法；</li>\n<li>ConcreteColleague（具体同事类）：抽象同事类的子类，每一个同事对象都引用一个中介者对象；每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；在具体同事类中实现了在抽象同事类中定义的方法。</li>\n</ul>\n<p>下图展示了中介者模式中的类结构，可以清楚地看到四种角色之间的关系。<br><img src=\"http://images.stephenfang.xyz/mweb/15917481238616.jpg\" alt=\"\"><br>图3.1 中介者模式类图</p>\n<p>中介者模式可以方便地应用于图形界面(GUI)开发中，在比较复杂的界面中可能存在多个界面组件之间的交互关系。对于这些复杂的交互关系，我们可以引入一个中介者类，将这些交互的组件作为具体的同事类，将它们之间的引用和控制关系交由中介者负责，在一定程度上简化系统的交互，<br>MVC架构中控制器（Controller）作为一种中介者，是数据模型对象与视图之间的桥梁，它监听视图上的交互动作并且对视图的状态作出反应，同时在Model通知数据发生改变的时候更新Model的状态。以移动应用开发为例，当用户点击按钮或在View中输入信息后视图会通知控制器，控制器解释用户交互逻辑，然后联系模型获取完成请求所需的信息。模型将信息提供给控制器，控制器将其中继到视图，视图将其显示给用户。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/15917481870001.jpg\" alt=\"\"></p>\n<p>图3.2 MVC模式</p>\n<h2 id=\"模式简例\"><a href=\"#模式简例\" class=\"headerlink\" title=\"模式简例\"></a>模式简例</h2><p>科技发达之后家里所有设备都是智能化的，而小明在家洗澡的时候有个习惯就是喜欢听歌，而且洗澡时候还要把窗帘拉上。因此就有这种情形，小明拉上窗帘说明洗浴设备需要工作，并且音乐设备也将唤醒。因此我们希望小明家的洗浴设备、音响设备和窗帘设备能协同合作，不管操作哪种设备，其他两种设备都有响应。<br>现在很明显我们可以看出来，我们有三个对象，也就是三种设备，程序看起来也很简单，只要在启动一个设备时，能同时启动另外两个设备。那么我们只需在一个设备的类里放两个其他设备的引用，很容易就能解决这个问题，这样写出来的程序对象关系如下图。<br><img src=\"http://images.stephenfang.xyz/mweb/15917485113553.jpg\" alt=\"\"><br>图4.1 修改前模式<br>该程序最主要的功能就是在一个类里完成了对另外两个类的方法作用。但是这样设计，由耦合度过高的问题带来两个主要缺陷</p>\n<ul>\n<li>一旦窗帘设备损坏需要更换，那么就要让新的窗帘设备建立所有其他设备的连接</li>\n<li>若产生新的的需求，如洗澡的时候要把门锁住，那门锁的智能设备又要关联所有设备，这样的程序设计使得在扩展程序功能时更加麻烦。</li>\n</ul>\n<p>中介者模式的引入则极大的弥补了上述程序的两个缺陷，对象交互如下图：<br><img src=\"http://images.stephenfang.xyz/mweb/15917485380247.jpg\" alt=\"\"><br>图4.2 修改后模式</p>\n<p>中介者就好比智能家居的管家，所有对象的交互指令都通过它来传达。中介者负责与对象联系，对象与对象之间不再进行直接的交互，也就是对对象关系进行解耦。</p>\n<p> <img src=\"http://images.stephenfang.xyz/mweb/15917485453277.jpg\" alt=\"\"><br>图4.2 程序类图</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MusicDevice</span> <span class=\"keyword\">extends</span> <span class=\"title\">Device</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operateDevice</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str != <span class=\"string\">\"MusicDevice\"</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"音乐设备已启动\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str == <span class=\"string\">\"true\"</span>)&#123;</span><br><span class=\"line\">            Mediator();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Mediator</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ConcreteMediator mediator = <span class=\"keyword\">new</span> ConcreteMediator();</span><br><span class=\"line\">        mediator.startUp(<span class=\"string\">\"MusicDevice\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>音乐设备部分的代码如上，其他设备代码可以参照此例。设备类都继承自Device类，其中主要由两个方法组成，一个是operateDevice函数，用来启动设备，另一个是Mediator函数，用来调用中介者，并以中介者为媒介启动其他设备。Mediator由operateDevice函数进行调用，并设置了判断条件，防止反复调用中介者类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteMediator</span> <span class=\"keyword\">extends</span> <span class=\"title\">SmartMediator</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startUp</span><span class=\"params\">(String item)</span></span>&#123;</span><br><span class=\"line\">        MusicDevice musicDevice = <span class=\"keyword\">new</span> MusicDevice();</span><br><span class=\"line\">        CurtainDevice curtainDevice = <span class=\"keyword\">new</span> CurtainDevice();</span><br><span class=\"line\">        BathDevice bathDevice = <span class=\"keyword\">new</span> BathDevice();</span><br><span class=\"line\"></span><br><span class=\"line\">        musicDevice.operateDevice(item);</span><br><span class=\"line\">        curtainDevice.operateDevice(item);</span><br><span class=\"line\">        bathDevice.operateDevice(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>中介者类如上，即程序最为重要的部分。当它的startUp方法被某一设备调用之后，它会新建所有设备的类，并且调用除了已启动的设备之外，所有其他设备的启动方法。在启动方法中设置了参数，以防止循环调用。当我们想要添加新的设备的时候，只需要编写新设备类，并且在中介者类中添加该类的启动方法，就能完成修改。从而降低代码之间的耦合性，提高了程序的可维护性。</p>\n<p>程序分析：</p>\n<ol>\n<li>该程序解决了上述两个缺陷，现在所有设备都只与中介者相关联，不管是新增设备还是替换设备，只需要改变设备与中介者之间的关系，降低了代码之间的耦合性。</li>\n<li>改变设计之后所有设备的启动项都由中介者管理，用户可以通过中介者方便地启动所有设备，而不需要将所有设备之间连接起来。避免了随着设备的增多，设备之间的联系变得无比复杂的情况。</li>\n</ol>\n<h2 id=\"模式总结\"><a href=\"#模式总结\" class=\"headerlink\" title=\"模式总结\"></a>模式总结</h2><ol>\n<li><p>中介者模式优点：</p>\n<ul>\n<li>简化了对象之间的交互。</li>\n<li>将各同事解耦，减少子类生成，增加对象的复用性。</li>\n<li>简化各同事类的设计和实现，便于系统维护。</li>\n</ul>\n</li>\n<li><p>中介者模式缺点：</p>\n<ul>\n<li>在具体中介者类中包含了同事之间的交互细节，如果中介者类设计的不好，可能会导致具体中介者类非常复杂，使得系统难以维护。</li>\n<li>中介者对象本身需要整理系统内部的对象之间的交互，可能会导致其本身会变得臃肿和复杂，进而变得难以维护</li>\n</ul>\n</li>\n<li><p>中介者模式的适用环境：</p>\n<ul>\n<li>系统中对象之间存在复杂的引用关系，产生的相互依赖关系结构混乱且难以理解。</li>\n<li>一个对象引用了很多对象并且直接和这些对象通信，导致难以复用该对象。</li>\n<li>希望通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。可以通过引入中介者类来实现，在中介者中定义对象。</li>\n<li>交互的公共行为，如果需要改变行为则可以增加新的中介者类。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://zh.wikipedia.org/wiki/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">中介者模式-维基百科</a><br><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/mediator.html\" target=\"_blank\" rel=\"noopener\">中介者模式— Graphic Design Patterns - 图说设计模式</a><br><a href=\"https://juejin.im/post/5bd275dc51882529290fe2c5\" target=\"_blank\" rel=\"noopener\">设计模式 | 中介者模式及典型应用</a><br><a href=\"https://storm.cis.fordham.edu/~gweiss/data-mining/datasets.html\" target=\"_blank\" rel=\"noopener\">中介者模式 - jyqdaisy - 博客园</a></p>"},{"title":"Objective-C 学习笔记(三）","date":"2020-04-05T06:43:20.000Z","copyright":true,"_content":"\n\n最近开始学习 `Objective-C` 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第三篇文章，主要复习了数据类型、预处理、分类与协议等内容。\n\n<!--more-->\n\n### 关于初始化与变量\n#### 关于初始化\n若在创建类的对象时需要使用和引用一个或多个实例变量，可以通过重载init方法达到目的。该方法首先调用父类初始化方法，使得继承实例变量正常初始化，因为初始化过程改变了对象在内存中的位置所以需要将父类init方法执行结果赋值给self。特殊类型instancetype表明,从init方法返回的类型与它的初始化类相同。\n```objc \n(instantype) init {\n    self = [ super init ];\n    if ( self ) {\n    //do sth here\n    } \n    return self;\n}\n```\n#### 关于 extern 与 static\n- 声明不会引起变量存储空间分配，而定义会引起变量存储空间分配。\n- 如果有很多方法需要访问外部变量的值,应该只在文件的开始进行一次extern声明。\n- 如果只有一个或少数几个方法访问这个变量，应该在其中的每个方法中单独进行extern声明。\n- 如果变量定义在包含访问这个变量的文件中，不需要单独进行extern声明。\n- static 变量声明在文件中的任何方法(或函数)之外，所有位于这条语句之后的方法或函数都可以访问其值，而其他文件中的方法和函数则不行。\n- 静态局部变量用关键字static声明，其值在函数调用的过程中保留下来，并且初始值默认为0。\n\n### 关于预处理\n- 预定义名称非变量不能为其赋值，其右边所有字符被预处理程序自动替换到程序中，类似于文本处理中的搜索与替换。\n- \\#define 可以出现在程序程序任何地方，不必为开头；把定义放在头文件中可以方便在多个源文件中使用。\n- 从视觉上区分预定义的值和变量可以通过大写字母组合实现。\n- 预处理程序定义右边不必是合法`Objective-C`表达式。\n\n### 关于条件编译\n在调试程序时条件编译很有用。在程序中嵌入了NSLog调用可以用于显示中间结果并跟踪执行流程。程序中可能有很多这样的调试语句，且无论何时调试这个程序，都能够通过DEBUG使所有的调试语句都编译。\n\n```objc \n#ifdef DEBUG\n NSLog (@\"username = %@, password = %i\", username, password);\n #endif\n```\n\n### 关于分类\n#### 分类定义\n面对一个类定义时可能想要添加新的方法，如对于一个计算器类来说可能需要四则运算的方法，而该类当前只需要处理四则运算方面的功能，其他的创建和初始化交由其他方法来做，这个时候就可以用到分类的思想。\n分类提供简单的方式将类的定义模块划到相关方法的组或分类中，同时其提供了扩展现有类定义的简便方式，不必访问类的源代码，也不必创建子类。\n如对于一个假定的计算器的四则运算操作就可以创建如下分类。\n```objc \n@interface Calculator (MathOps)\n-(void) add: (double) value1 : (double) value2;\n-(void) subtract: (double) value1 : (double) value2;\n-(void) multiply: (double) value1 : (double) value2;\n-(void) divide: (double) value1 : (double) value2;\n@end\n```\n#### 分类注意\n分类可以覆写该类的另一个方法，但是覆写方法后无法访问原来的方法，所以正确的选择是创建子类。在子类中覆写方法可以通过super发送消息引用父类方法。\n通过使用分类添加新方法扩展类会影响当前类与其子类。\n### 关于协议与代理\n#### 协议要点\n协议是多个类共享的一个方法列表，协议中列出了一组方法，有些选择实现，有些必须实现。如`NSObject.h`中的部分协议定义。\n```objc \n@protocol NSCopying\n- (id)copyWithZone:(nullable NSZone *)zone;\n@end\n\n@protocol NSCoding\n- (void)encodeWithCoder:(NSCoder *)coder;\n- (nullable instancetype)initWithCoder:(NSCoder *)coder; // NS_DESIGNATED_INITIALIZER\n@end\n```\n如果类采用`NSCopying`和`NSCoding`协议，就必须实现`copyWithZone`等方法，使用方法如下。\n```objc \n@interface DemoPrototol: NSObject <NSCopying,NSCoding>\n```\n自定义协议时可以使用`@optional`指令表明列出的方法都是可选的，可以使用`required`指令标明必须实现的方法。\n#### 协议注意\n- 协议不引用任何类。\n- 可以使用conformsToProtocol:方法检查一个对象是否遵循某项协议。\n- 编译器只有在没有实现协议要求的方法时发出警告。\n- 与类名一样，协议名唯一。\n\n#### 代理要点\n\n定义了协议的类可以看作是将协议定义的方法代理给了实现它们的类。如iOS建立表格需使用UITableView类，需要代理定义UITableViewDataSource协议，如果协议需要信息就会调用类中实现协议的相关方法，开发者必须将其写入类中，与协议相匹配。协议中定义的其他方法是否实现决定权在开发者，即责任代理在开发者。\n- 如果一个对象采用正式协议，则它必须遵守协议中的所有信息。这可以在运行及编译时强制执行。\n- 如果一个对象采用非正式协议，则它可能不需要采用此协议的所有方法，具体取决于这项协议。\n\n### 参考\n[Objective-C 程序设计 (第六版)]()\n","source":"_posts/Objc_Learning_3.md","raw":"---\ntitle: Objective-C 学习笔记(三）\ndate: 2020-04-05 14:43:20\ncategories: \n- tech\ntags: \n- iOS\n- Xcode\n- Objective-C\ncopyright: true\n---\n\n\n最近开始学习 `Objective-C` 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第三篇文章，主要复习了数据类型、预处理、分类与协议等内容。\n\n<!--more-->\n\n### 关于初始化与变量\n#### 关于初始化\n若在创建类的对象时需要使用和引用一个或多个实例变量，可以通过重载init方法达到目的。该方法首先调用父类初始化方法，使得继承实例变量正常初始化，因为初始化过程改变了对象在内存中的位置所以需要将父类init方法执行结果赋值给self。特殊类型instancetype表明,从init方法返回的类型与它的初始化类相同。\n```objc \n(instantype) init {\n    self = [ super init ];\n    if ( self ) {\n    //do sth here\n    } \n    return self;\n}\n```\n#### 关于 extern 与 static\n- 声明不会引起变量存储空间分配，而定义会引起变量存储空间分配。\n- 如果有很多方法需要访问外部变量的值,应该只在文件的开始进行一次extern声明。\n- 如果只有一个或少数几个方法访问这个变量，应该在其中的每个方法中单独进行extern声明。\n- 如果变量定义在包含访问这个变量的文件中，不需要单独进行extern声明。\n- static 变量声明在文件中的任何方法(或函数)之外，所有位于这条语句之后的方法或函数都可以访问其值，而其他文件中的方法和函数则不行。\n- 静态局部变量用关键字static声明，其值在函数调用的过程中保留下来，并且初始值默认为0。\n\n### 关于预处理\n- 预定义名称非变量不能为其赋值，其右边所有字符被预处理程序自动替换到程序中，类似于文本处理中的搜索与替换。\n- \\#define 可以出现在程序程序任何地方，不必为开头；把定义放在头文件中可以方便在多个源文件中使用。\n- 从视觉上区分预定义的值和变量可以通过大写字母组合实现。\n- 预处理程序定义右边不必是合法`Objective-C`表达式。\n\n### 关于条件编译\n在调试程序时条件编译很有用。在程序中嵌入了NSLog调用可以用于显示中间结果并跟踪执行流程。程序中可能有很多这样的调试语句，且无论何时调试这个程序，都能够通过DEBUG使所有的调试语句都编译。\n\n```objc \n#ifdef DEBUG\n NSLog (@\"username = %@, password = %i\", username, password);\n #endif\n```\n\n### 关于分类\n#### 分类定义\n面对一个类定义时可能想要添加新的方法，如对于一个计算器类来说可能需要四则运算的方法，而该类当前只需要处理四则运算方面的功能，其他的创建和初始化交由其他方法来做，这个时候就可以用到分类的思想。\n分类提供简单的方式将类的定义模块划到相关方法的组或分类中，同时其提供了扩展现有类定义的简便方式，不必访问类的源代码，也不必创建子类。\n如对于一个假定的计算器的四则运算操作就可以创建如下分类。\n```objc \n@interface Calculator (MathOps)\n-(void) add: (double) value1 : (double) value2;\n-(void) subtract: (double) value1 : (double) value2;\n-(void) multiply: (double) value1 : (double) value2;\n-(void) divide: (double) value1 : (double) value2;\n@end\n```\n#### 分类注意\n分类可以覆写该类的另一个方法，但是覆写方法后无法访问原来的方法，所以正确的选择是创建子类。在子类中覆写方法可以通过super发送消息引用父类方法。\n通过使用分类添加新方法扩展类会影响当前类与其子类。\n### 关于协议与代理\n#### 协议要点\n协议是多个类共享的一个方法列表，协议中列出了一组方法，有些选择实现，有些必须实现。如`NSObject.h`中的部分协议定义。\n```objc \n@protocol NSCopying\n- (id)copyWithZone:(nullable NSZone *)zone;\n@end\n\n@protocol NSCoding\n- (void)encodeWithCoder:(NSCoder *)coder;\n- (nullable instancetype)initWithCoder:(NSCoder *)coder; // NS_DESIGNATED_INITIALIZER\n@end\n```\n如果类采用`NSCopying`和`NSCoding`协议，就必须实现`copyWithZone`等方法，使用方法如下。\n```objc \n@interface DemoPrototol: NSObject <NSCopying,NSCoding>\n```\n自定义协议时可以使用`@optional`指令表明列出的方法都是可选的，可以使用`required`指令标明必须实现的方法。\n#### 协议注意\n- 协议不引用任何类。\n- 可以使用conformsToProtocol:方法检查一个对象是否遵循某项协议。\n- 编译器只有在没有实现协议要求的方法时发出警告。\n- 与类名一样，协议名唯一。\n\n#### 代理要点\n\n定义了协议的类可以看作是将协议定义的方法代理给了实现它们的类。如iOS建立表格需使用UITableView类，需要代理定义UITableViewDataSource协议，如果协议需要信息就会调用类中实现协议的相关方法，开发者必须将其写入类中，与协议相匹配。协议中定义的其他方法是否实现决定权在开发者，即责任代理在开发者。\n- 如果一个对象采用正式协议，则它必须遵守协议中的所有信息。这可以在运行及编译时强制执行。\n- 如果一个对象采用非正式协议，则它可能不需要采用此协议的所有方法，具体取决于这项协议。\n\n### 参考\n[Objective-C 程序设计 (第六版)]()\n","slug":"Objc_Learning_3","published":1,"updated":"2020-04-17T10:10:02.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcive9nd000tcv6b4ipjevs0","content":"<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第三篇文章，主要复习了数据类型、预处理、分类与协议等内容。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"关于初始化与变量\"><a href=\"#关于初始化与变量\" class=\"headerlink\" title=\"关于初始化与变量\"></a>关于初始化与变量</h3><h4 id=\"关于初始化\"><a href=\"#关于初始化\" class=\"headerlink\" title=\"关于初始化\"></a>关于初始化</h4><p>若在创建类的对象时需要使用和引用一个或多个实例变量，可以通过重载init方法达到目的。该方法首先调用父类初始化方法，使得继承实例变量正常初始化，因为初始化过程改变了对象在内存中的位置所以需要将父类init方法执行结果赋值给self。特殊类型instancetype表明,从init方法返回的类型与它的初始化类相同。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(instantype) init &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span> = [ <span class=\"keyword\">super</span> init ];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">self</span> ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do sth here</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"关于-extern-与-static\"><a href=\"#关于-extern-与-static\" class=\"headerlink\" title=\"关于 extern 与 static\"></a>关于 extern 与 static</h4><ul>\n<li>声明不会引起变量存储空间分配，而定义会引起变量存储空间分配。</li>\n<li>如果有很多方法需要访问外部变量的值,应该只在文件的开始进行一次extern声明。</li>\n<li>如果只有一个或少数几个方法访问这个变量，应该在其中的每个方法中单独进行extern声明。</li>\n<li>如果变量定义在包含访问这个变量的文件中，不需要单独进行extern声明。</li>\n<li>static 变量声明在文件中的任何方法(或函数)之外，所有位于这条语句之后的方法或函数都可以访问其值，而其他文件中的方法和函数则不行。</li>\n<li>静态局部变量用关键字static声明，其值在函数调用的过程中保留下来，并且初始值默认为0。</li>\n</ul>\n<h3 id=\"关于预处理\"><a href=\"#关于预处理\" class=\"headerlink\" title=\"关于预处理\"></a>关于预处理</h3><ul>\n<li>预定义名称非变量不能为其赋值，其右边所有字符被预处理程序自动替换到程序中，类似于文本处理中的搜索与替换。</li>\n<li>#define 可以出现在程序程序任何地方，不必为开头；把定义放在头文件中可以方便在多个源文件中使用。</li>\n<li>从视觉上区分预定义的值和变量可以通过大写字母组合实现。</li>\n<li>预处理程序定义右边不必是合法<code>Objective-C</code>表达式。</li>\n</ul>\n<h3 id=\"关于条件编译\"><a href=\"#关于条件编译\" class=\"headerlink\" title=\"关于条件编译\"></a>关于条件编译</h3><p>在调试程序时条件编译很有用。在程序中嵌入了NSLog调用可以用于显示中间结果并跟踪执行流程。程序中可能有很多这样的调试语句，且无论何时调试这个程序，都能够通过DEBUG使所有的调试语句都编译。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\"> <span class=\"built_in\">NSLog</span> (<span class=\"string\">@\"username = %@, password = %i\"</span>, username, password);</span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于分类\"><a href=\"#关于分类\" class=\"headerlink\" title=\"关于分类\"></a>关于分类</h3><h4 id=\"分类定义\"><a href=\"#分类定义\" class=\"headerlink\" title=\"分类定义\"></a>分类定义</h4><p>面对一个类定义时可能想要添加新的方法，如对于一个计算器类来说可能需要四则运算的方法，而该类当前只需要处理四则运算方面的功能，其他的创建和初始化交由其他方法来做，这个时候就可以用到分类的思想。<br>分类提供简单的方式将类的定义模块划到相关方法的组或分类中，同时其提供了扩展现有类定义的简便方式，不必访问类的源代码，也不必创建子类。<br>如对于一个假定的计算器的四则运算操作就可以创建如下分类。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Calculator</span> (<span class=\"title\">MathOps</span>)</span></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) add: (<span class=\"keyword\">double</span>) value1 : (<span class=\"keyword\">double</span>) value2;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) subtract: (<span class=\"keyword\">double</span>) value1 : (<span class=\"keyword\">double</span>) value2;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) multiply: (<span class=\"keyword\">double</span>) value1 : (<span class=\"keyword\">double</span>) value2;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) divide: (<span class=\"keyword\">double</span>) value1 : (<span class=\"keyword\">double</span>) value2;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"分类注意\"><a href=\"#分类注意\" class=\"headerlink\" title=\"分类注意\"></a>分类注意</h4><p>分类可以覆写该类的另一个方法，但是覆写方法后无法访问原来的方法，所以正确的选择是创建子类。在子类中覆写方法可以通过super发送消息引用父类方法。<br>通过使用分类添加新方法扩展类会影响当前类与其子类。</p>\n<h3 id=\"关于协议与代理\"><a href=\"#关于协议与代理\" class=\"headerlink\" title=\"关于协议与代理\"></a>关于协议与代理</h3><h4 id=\"协议要点\"><a href=\"#协议要点\" class=\"headerlink\" title=\"协议要点\"></a>协议要点</h4><p>协议是多个类共享的一个方法列表，协议中列出了一组方法，有些选择实现，有些必须实现。如<code>NSObject.h</code>中的部分协议定义。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">NSCopying</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>)copyWithZone:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSZone</span> *)zone;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">NSCoding</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)encodeWithCoder:(<span class=\"built_in\">NSCoder</span> *)coder;</span><br><span class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"keyword\">instancetype</span>)initWithCoder:(<span class=\"built_in\">NSCoder</span> *)coder; <span class=\"comment\">// NS_DESIGNATED_INITIALIZER</span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>如果类采用<code>NSCopying</code>和<code>NSCoding</code>协议，就必须实现<code>copyWithZone</code>等方法，使用方法如下。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">DemoPrototol</span>: <span class=\"title\">NSObject</span> &lt;<span class=\"title\">NSCopying</span>,<span class=\"title\">NSCoding</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>自定义协议时可以使用<code>@optional</code>指令表明列出的方法都是可选的，可以使用<code>required</code>指令标明必须实现的方法。</p>\n<h4 id=\"协议注意\"><a href=\"#协议注意\" class=\"headerlink\" title=\"协议注意\"></a>协议注意</h4><ul>\n<li>协议不引用任何类。</li>\n<li>可以使用conformsToProtocol:方法检查一个对象是否遵循某项协议。</li>\n<li>编译器只有在没有实现协议要求的方法时发出警告。</li>\n<li>与类名一样，协议名唯一。</li>\n</ul>\n<h4 id=\"代理要点\"><a href=\"#代理要点\" class=\"headerlink\" title=\"代理要点\"></a>代理要点</h4><p>定义了协议的类可以看作是将协议定义的方法代理给了实现它们的类。如iOS建立表格需使用UITableView类，需要代理定义UITableViewDataSource协议，如果协议需要信息就会调用类中实现协议的相关方法，开发者必须将其写入类中，与协议相匹配。协议中定义的其他方法是否实现决定权在开发者，即责任代理在开发者。</p>\n<ul>\n<li>如果一个对象采用正式协议，则它必须遵守协议中的所有信息。这可以在运行及编译时强制执行。</li>\n<li>如果一个对象采用非正式协议，则它可能不需要采用此协议的所有方法，具体取决于这项协议。</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"\">Objective-C 程序设计 (第六版)</a></p>\n","site":{"data":{}},"excerpt":"<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第三篇文章，主要复习了数据类型、预处理、分类与协议等内容。</p>","more":"<h3 id=\"关于初始化与变量\"><a href=\"#关于初始化与变量\" class=\"headerlink\" title=\"关于初始化与变量\"></a>关于初始化与变量</h3><h4 id=\"关于初始化\"><a href=\"#关于初始化\" class=\"headerlink\" title=\"关于初始化\"></a>关于初始化</h4><p>若在创建类的对象时需要使用和引用一个或多个实例变量，可以通过重载init方法达到目的。该方法首先调用父类初始化方法，使得继承实例变量正常初始化，因为初始化过程改变了对象在内存中的位置所以需要将父类init方法执行结果赋值给self。特殊类型instancetype表明,从init方法返回的类型与它的初始化类相同。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(instantype) init &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span> = [ <span class=\"keyword\">super</span> init ];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">self</span> ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do sth here</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"关于-extern-与-static\"><a href=\"#关于-extern-与-static\" class=\"headerlink\" title=\"关于 extern 与 static\"></a>关于 extern 与 static</h4><ul>\n<li>声明不会引起变量存储空间分配，而定义会引起变量存储空间分配。</li>\n<li>如果有很多方法需要访问外部变量的值,应该只在文件的开始进行一次extern声明。</li>\n<li>如果只有一个或少数几个方法访问这个变量，应该在其中的每个方法中单独进行extern声明。</li>\n<li>如果变量定义在包含访问这个变量的文件中，不需要单独进行extern声明。</li>\n<li>static 变量声明在文件中的任何方法(或函数)之外，所有位于这条语句之后的方法或函数都可以访问其值，而其他文件中的方法和函数则不行。</li>\n<li>静态局部变量用关键字static声明，其值在函数调用的过程中保留下来，并且初始值默认为0。</li>\n</ul>\n<h3 id=\"关于预处理\"><a href=\"#关于预处理\" class=\"headerlink\" title=\"关于预处理\"></a>关于预处理</h3><ul>\n<li>预定义名称非变量不能为其赋值，其右边所有字符被预处理程序自动替换到程序中，类似于文本处理中的搜索与替换。</li>\n<li>#define 可以出现在程序程序任何地方，不必为开头；把定义放在头文件中可以方便在多个源文件中使用。</li>\n<li>从视觉上区分预定义的值和变量可以通过大写字母组合实现。</li>\n<li>预处理程序定义右边不必是合法<code>Objective-C</code>表达式。</li>\n</ul>\n<h3 id=\"关于条件编译\"><a href=\"#关于条件编译\" class=\"headerlink\" title=\"关于条件编译\"></a>关于条件编译</h3><p>在调试程序时条件编译很有用。在程序中嵌入了NSLog调用可以用于显示中间结果并跟踪执行流程。程序中可能有很多这样的调试语句，且无论何时调试这个程序，都能够通过DEBUG使所有的调试语句都编译。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\"> <span class=\"built_in\">NSLog</span> (<span class=\"string\">@\"username = %@, password = %i\"</span>, username, password);</span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于分类\"><a href=\"#关于分类\" class=\"headerlink\" title=\"关于分类\"></a>关于分类</h3><h4 id=\"分类定义\"><a href=\"#分类定义\" class=\"headerlink\" title=\"分类定义\"></a>分类定义</h4><p>面对一个类定义时可能想要添加新的方法，如对于一个计算器类来说可能需要四则运算的方法，而该类当前只需要处理四则运算方面的功能，其他的创建和初始化交由其他方法来做，这个时候就可以用到分类的思想。<br>分类提供简单的方式将类的定义模块划到相关方法的组或分类中，同时其提供了扩展现有类定义的简便方式，不必访问类的源代码，也不必创建子类。<br>如对于一个假定的计算器的四则运算操作就可以创建如下分类。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Calculator</span> (<span class=\"title\">MathOps</span>)</span></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) add: (<span class=\"keyword\">double</span>) value1 : (<span class=\"keyword\">double</span>) value2;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) subtract: (<span class=\"keyword\">double</span>) value1 : (<span class=\"keyword\">double</span>) value2;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) multiply: (<span class=\"keyword\">double</span>) value1 : (<span class=\"keyword\">double</span>) value2;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) divide: (<span class=\"keyword\">double</span>) value1 : (<span class=\"keyword\">double</span>) value2;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"分类注意\"><a href=\"#分类注意\" class=\"headerlink\" title=\"分类注意\"></a>分类注意</h4><p>分类可以覆写该类的另一个方法，但是覆写方法后无法访问原来的方法，所以正确的选择是创建子类。在子类中覆写方法可以通过super发送消息引用父类方法。<br>通过使用分类添加新方法扩展类会影响当前类与其子类。</p>\n<h3 id=\"关于协议与代理\"><a href=\"#关于协议与代理\" class=\"headerlink\" title=\"关于协议与代理\"></a>关于协议与代理</h3><h4 id=\"协议要点\"><a href=\"#协议要点\" class=\"headerlink\" title=\"协议要点\"></a>协议要点</h4><p>协议是多个类共享的一个方法列表，协议中列出了一组方法，有些选择实现，有些必须实现。如<code>NSObject.h</code>中的部分协议定义。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">NSCopying</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>)copyWithZone:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSZone</span> *)zone;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">NSCoding</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)encodeWithCoder:(<span class=\"built_in\">NSCoder</span> *)coder;</span><br><span class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"keyword\">instancetype</span>)initWithCoder:(<span class=\"built_in\">NSCoder</span> *)coder; <span class=\"comment\">// NS_DESIGNATED_INITIALIZER</span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>如果类采用<code>NSCopying</code>和<code>NSCoding</code>协议，就必须实现<code>copyWithZone</code>等方法，使用方法如下。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">DemoPrototol</span>: <span class=\"title\">NSObject</span> &lt;<span class=\"title\">NSCopying</span>,<span class=\"title\">NSCoding</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>自定义协议时可以使用<code>@optional</code>指令表明列出的方法都是可选的，可以使用<code>required</code>指令标明必须实现的方法。</p>\n<h4 id=\"协议注意\"><a href=\"#协议注意\" class=\"headerlink\" title=\"协议注意\"></a>协议注意</h4><ul>\n<li>协议不引用任何类。</li>\n<li>可以使用conformsToProtocol:方法检查一个对象是否遵循某项协议。</li>\n<li>编译器只有在没有实现协议要求的方法时发出警告。</li>\n<li>与类名一样，协议名唯一。</li>\n</ul>\n<h4 id=\"代理要点\"><a href=\"#代理要点\" class=\"headerlink\" title=\"代理要点\"></a>代理要点</h4><p>定义了协议的类可以看作是将协议定义的方法代理给了实现它们的类。如iOS建立表格需使用UITableView类，需要代理定义UITableViewDataSource协议，如果协议需要信息就会调用类中实现协议的相关方法，开发者必须将其写入类中，与协议相匹配。协议中定义的其他方法是否实现决定权在开发者，即责任代理在开发者。</p>\n<ul>\n<li>如果一个对象采用正式协议，则它必须遵守协议中的所有信息。这可以在运行及编译时强制执行。</li>\n<li>如果一个对象采用非正式协议，则它可能不需要采用此协议的所有方法，具体取决于这项协议。</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"\">Objective-C 程序设计 (第六版)</a></p>"},{"title":"Objective-C 学习笔记(五）","date":"2020-04-13T14:43:20.000Z","copyright":true,"_content":"\n最近开始学习 `Objective-C` 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第五篇文章，主要复习了 `Objective-C` Foundation 框架中关于数字对象、字符串对象以及数组对象的内容。\n\n<!--more-->\n\n### 关于数字对象\n无论是int 型、float 型和long型都是`Objective-C`语言中的基本数据类型,它们都不是对象，不能够向它们发送消息，然而有时需要将这些值作为对象使用。如不能将任何基本数据类型直接存储到数组中，使用Foundation的NSArray对象创建一个数组时，它要求存储的值必须是对象。\n\n**NSInteger**\nNSInteger不是一个对象，是基本数据类型的typedef。\n\n Apple 官方 Foundation 文档解释的很清楚：\n\n> When building 32-bit applications, NSInteger is a 32-bit integer. A 64-bit application treats NSInteger as a 64-bit integer.\n\n> Apple use NSInteger (or NSUInteger) when passing a value as an argument to a function or returning a value from a function.\n\n鉴于目前 iOS 设备全部迈向64位架构，可以理解成 NSInteger 是64位的 long 类型。而 NSUInteger 也是类似于 NSInteger 的typedef。\n\n\n**int**\nint 类型的使用主要体现在循环的控制上，控制循环语句无需考虑平台依赖，在大部分情况下16-bit 大小的 int 即可胜任此项工作。 NSInteger 可以作为函数的返回值或者是函数参数，至于使用 NSInteger 还是 int 决定权仍然在你需要解决的问题上。\n\n**NSNumber**\nNSNumber 是`Objective-C`的类，具体来说是 NSValue 的子类。如果需要存储基本数据类型（包括 signed 或 unsigned char类型和BOOL类型），可以使用 NSNumber 对其进行包装来满足需求，NSNumber 会根据数据的类型创建对象。在集合中也会使用到 NSNumber，如NSSArray、NSSet，因为这些需要对象参与。\n下图摘录了为 NSNumber 对象设值的类和实例方法以及获取这些数值的实例方法。\n\n![](http://images.stephenfang.xyz/mweb/15867486542169.jpg)\n\n#### 简单示例\n给出一个简单的测试示例。\n```objc \n#import <Foundation/Foundation.h>\n\nint main(int argc, char* argv[]){\n    @autoreleasepool {\n        NSNumber *intNum, *floatNum, *charNum, *doubleNum;\n        NSInteger integerNum;\n        \n        intNum = [NSNumber numberWithInteger:20];\n        integerNum = [intNum integerValue];\n        NSLog(@\"%li\",(long)integerNum);\n        \n        floatNum = [NSNumber numberWithFloat:20.5];\n        NSLog(@\"%f\",[floatNum floatValue]);\n        \n        charNum = [NSNumber numberWithChar:'X'];\n        NSLog(@\"%c\",[charNum charValue]);\n        \n        doubleNum = @20.5;\n        NSLog(@\"%lf\",[doubleNum doubleValue]);\n        \n        if([doubleNum isEqualToNumber:floatNum] == YES){\n            NSLog(@\"doubleNum is equal to number floatNum\");\n        }else{\n             NSLog(@\"doubleNum is not equal to number floatNum\");\n        }\n        \n        if([floatNum compare:intNum] == NSOrderedDescending){\n            NSLog(@\"intNum is less than floatNum\");\n        }\n    }\n    return 0;\n}\n```\n\n#### 示例解释\n一般来说，需要确保使用正确的方式获取对象的值，如果在NSNumber对象中存储了一个值，那么也需要用一致的方式去获取。同时，`Objective-C`语言扩展允许通过@表达式创建数字对象.\n\n方法 numberWithInt: 和 numberWithInteger: 在使用存在差别\n1. 使用 numberWithInt: 方法创建一个整型数,需要使用intValue获取值，使用%i作为格式化字符串显示它的值。\n2. 使用 numberWithInteger: 方法创建一个整型数,需要使用integerValue获取值，也可以转换成 long 显示或者使用 stringWithFormat: 将其格式化成字符串。使用%li作为格式化字符串。\n\n#### 关于NSLog\n在NSLog中，格式字符`%@`不仅可以显示 NSString 对象，而且可以显示数组、字典和集合的全部内容。对于数组中的每一个元素,NSLog 将使用属于每个元素类的 description 方法。如果使用的是从 NSObject 对象继承的默认方法,获取到的是对象的类和地址。然而,通过覆盖继承的 description 方法可使用这些格式字符显示自定义类对象。\n\n### 关于字符串对象\nFoundation 框架支持 NSString类用于处理字符串对象。C 样式的字符串 char 字符组成，NSString 对象由 unichar 字符组成。unichar 字符是符合 Unicode 标准的多字节字符。NSString 类能够自动处理字符串的内部表示。使用 NSString 类的方法更容易开发出具有本地化的应用程序，并且能够在不同的语言环境下使用。\n\nNSMutableString 类是 NSString 类的子类，可以用来创建可以更改字符的字符串对象，它可以使用 NSString 类所有方法。摘录常见 NSMutableString 方法\n![](http://images.stephenfang.xyz/mweb/15867813113647.jpg)\n\n#### 简单示例\n给出一个简单的测试示例。\n```objc\n#import <Foundation/Foundation.h>\n\nint main(int argc, char* argv[]){\n    @autoreleasepool {\n        NSString *str1 = @\"This is str1\";\n        NSString *str2 = @\"This is str2\";\n        NSString *subStr;\n        NSMutableString *mutStr;\n        NSRange subRange;\n        \n        subStr = [str1 substringToIndex:3];\n        NSLog(@\"%@\",subStr);\n        \n        subStr = [str1 substringFromIndex:3];\n        NSLog(@\"%@\",subStr);\n        \n        subStr = [[str1 substringFromIndex:3]substringToIndex:5];\n        NSLog(@\"%@\",subStr);\n        \n        subStr = [str1 substringWithRange:NSMakeRange(3, 5)];\n        NSLog(@\"%@\",subStr);\n        \n        subRange = [str2 rangeOfString:@\"str2\"];\n        NSLog(@\"index: %lu length: %lu\",(unsigned long)subRange.location,(unsigned long)subRange.length);\n        \n        subRange = [str1 rangeOfString:@\"str2\"];\n        if (subRange.location == NSNotFound){\n            NSLog(@\"String not found\");\n        }else{\n            NSLog(@\"index: %lu length: %lu\",(unsigned long)subRange.location,(unsigned long)subRange.length);\n        }\n        \n        mutStr = [NSMutableString stringWithString:str1];\n        NSLog(@\"%@\",mutStr);\n        \n        [mutStr insertString:mutStr atIndex:[mutStr length]];\n        NSLog(@\"%@\",mutStr);\n        \n        [mutStr deleteCharactersInRange:NSMakeRange([mutStr length]/2, [mutStr length]/2)];\n        NSLog(@\"%@\",mutStr);\n        \n        [mutStr appendString:mutStr];\n        NSLog(@\"%@\",mutStr);\n        \n        [mutStr replaceCharactersInRange:NSMakeRange([mutStr length]/2, [mutStr length]/2) withString:str2];\n        NSLog(@\"%@\",mutStr);\n        \n        subRange = [mutStr rangeOfString: @\"This is\"];\n        if (subRange.location != NSNotFound) {\n        [mutStr replaceCharactersInRange:subRange withString: @\"it is\"] ;\n        NSLog(@\"%@\",mutStr) ;\n        }\n    }\n    return 0;\n}\n```\n\n运行结果为\n```log\n2020-04-13 18:21:20.795845+0800 DemoProgram[49815:1823615] Thi\n2020-04-13 18:21:20.796235+0800 DemoProgram[49815:1823615] s is str1\n2020-04-13 18:21:20.796281+0800 DemoProgram[49815:1823615] s is\n2020-04-13 18:21:20.796305+0800 DemoProgram[49815:1823615] s is\n2020-04-13 18:21:20.796331+0800 DemoProgram[49815:1823615] index: 8 length: 4\n2020-04-13 18:21:20.796353+0800 DemoProgram[49815:1823615] String not found\n2020-04-13 18:21:20.796395+0800 DemoProgram[49815:1823615] This is str1\n2020-04-13 18:21:20.796432+0800 DemoProgram[49815:1823615] This is str1This is str1\n2020-04-13 18:21:20.796453+0800 DemoProgram[49815:1823615] This is str1\n2020-04-13 18:21:20.796472+0800 DemoProgram[49815:1823615] This is str1This is str1\n2020-04-13 18:21:20.796498+0800 DemoProgram[49815:1823615] This is str1This is str2\n2020-04-13 18:21:20.796520+0800 DemoProgram[49815:1823615] it is str1This is str2\nProgram ended with exit code: 0\n```\n\n### 关于数组对象\nFoundation数组是有序的对象集合。不可变数组由 NSArray 类处理的，而可变数组由NSMutableArray 处理的。后者是前者的子类，即后者继承了前者的方法。\n\n其中\n```objc\nNSArray *monthNames = [NSArray arrayWithObjects :@\"January\", @\"February\", @\"March\", @\"April\", @\"May\", \"June\", @\"July\", @\"August\", @\"September\", @\"October\", @\"November\", @\"December\", nil ];\n```\n与如下方式相同。\n```objc\nNSArray *monthNames = @[@\"January\", @\"February\", @\"March\", @\"April\", @\"May\",@\"June\", @\"July\", @\"August\", @\"September\", @\"October\", @\"November\" ,@\"December\"];\n```\n而\n```objc\narray[index]\n```\n相当于如下表达式\n```objc\n[array objectAtIndex: index]\n```\n同时\n```objc\narray[index] = object\n```\n相当于如下表达式\n```objc\n[array setObject: object forIndex: index]\n```\n下一节会参照书本给的样例进行编写。\n\n### 参考\n[int vs. NSInteger vs. NSNumber](http://monkey-oyster.blogspot.com/2014/10/int-vs-nsinteger-vs-nsnumber.html)\n[Why use int at all?-Stack overflow](https://stackoverflow.com/questions/4445173/when-to-use-nsinteger-vs-int/5320359#5320359)\n[Objective-C 程序设计 (第六版)]()","source":"_posts/Objc_Learning_5.md","raw":"---\ntitle: Objective-C 学习笔记(五）\ndate: 2020-04-13 22:43:20\ncategories: \n- tech\ntags: \n- iOS\n- Xcode\n- Objective-C\ncopyright: true\n---\n\n最近开始学习 `Objective-C` 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第五篇文章，主要复习了 `Objective-C` Foundation 框架中关于数字对象、字符串对象以及数组对象的内容。\n\n<!--more-->\n\n### 关于数字对象\n无论是int 型、float 型和long型都是`Objective-C`语言中的基本数据类型,它们都不是对象，不能够向它们发送消息，然而有时需要将这些值作为对象使用。如不能将任何基本数据类型直接存储到数组中，使用Foundation的NSArray对象创建一个数组时，它要求存储的值必须是对象。\n\n**NSInteger**\nNSInteger不是一个对象，是基本数据类型的typedef。\n\n Apple 官方 Foundation 文档解释的很清楚：\n\n> When building 32-bit applications, NSInteger is a 32-bit integer. A 64-bit application treats NSInteger as a 64-bit integer.\n\n> Apple use NSInteger (or NSUInteger) when passing a value as an argument to a function or returning a value from a function.\n\n鉴于目前 iOS 设备全部迈向64位架构，可以理解成 NSInteger 是64位的 long 类型。而 NSUInteger 也是类似于 NSInteger 的typedef。\n\n\n**int**\nint 类型的使用主要体现在循环的控制上，控制循环语句无需考虑平台依赖，在大部分情况下16-bit 大小的 int 即可胜任此项工作。 NSInteger 可以作为函数的返回值或者是函数参数，至于使用 NSInteger 还是 int 决定权仍然在你需要解决的问题上。\n\n**NSNumber**\nNSNumber 是`Objective-C`的类，具体来说是 NSValue 的子类。如果需要存储基本数据类型（包括 signed 或 unsigned char类型和BOOL类型），可以使用 NSNumber 对其进行包装来满足需求，NSNumber 会根据数据的类型创建对象。在集合中也会使用到 NSNumber，如NSSArray、NSSet，因为这些需要对象参与。\n下图摘录了为 NSNumber 对象设值的类和实例方法以及获取这些数值的实例方法。\n\n![](http://images.stephenfang.xyz/mweb/15867486542169.jpg)\n\n#### 简单示例\n给出一个简单的测试示例。\n```objc \n#import <Foundation/Foundation.h>\n\nint main(int argc, char* argv[]){\n    @autoreleasepool {\n        NSNumber *intNum, *floatNum, *charNum, *doubleNum;\n        NSInteger integerNum;\n        \n        intNum = [NSNumber numberWithInteger:20];\n        integerNum = [intNum integerValue];\n        NSLog(@\"%li\",(long)integerNum);\n        \n        floatNum = [NSNumber numberWithFloat:20.5];\n        NSLog(@\"%f\",[floatNum floatValue]);\n        \n        charNum = [NSNumber numberWithChar:'X'];\n        NSLog(@\"%c\",[charNum charValue]);\n        \n        doubleNum = @20.5;\n        NSLog(@\"%lf\",[doubleNum doubleValue]);\n        \n        if([doubleNum isEqualToNumber:floatNum] == YES){\n            NSLog(@\"doubleNum is equal to number floatNum\");\n        }else{\n             NSLog(@\"doubleNum is not equal to number floatNum\");\n        }\n        \n        if([floatNum compare:intNum] == NSOrderedDescending){\n            NSLog(@\"intNum is less than floatNum\");\n        }\n    }\n    return 0;\n}\n```\n\n#### 示例解释\n一般来说，需要确保使用正确的方式获取对象的值，如果在NSNumber对象中存储了一个值，那么也需要用一致的方式去获取。同时，`Objective-C`语言扩展允许通过@表达式创建数字对象.\n\n方法 numberWithInt: 和 numberWithInteger: 在使用存在差别\n1. 使用 numberWithInt: 方法创建一个整型数,需要使用intValue获取值，使用%i作为格式化字符串显示它的值。\n2. 使用 numberWithInteger: 方法创建一个整型数,需要使用integerValue获取值，也可以转换成 long 显示或者使用 stringWithFormat: 将其格式化成字符串。使用%li作为格式化字符串。\n\n#### 关于NSLog\n在NSLog中，格式字符`%@`不仅可以显示 NSString 对象，而且可以显示数组、字典和集合的全部内容。对于数组中的每一个元素,NSLog 将使用属于每个元素类的 description 方法。如果使用的是从 NSObject 对象继承的默认方法,获取到的是对象的类和地址。然而,通过覆盖继承的 description 方法可使用这些格式字符显示自定义类对象。\n\n### 关于字符串对象\nFoundation 框架支持 NSString类用于处理字符串对象。C 样式的字符串 char 字符组成，NSString 对象由 unichar 字符组成。unichar 字符是符合 Unicode 标准的多字节字符。NSString 类能够自动处理字符串的内部表示。使用 NSString 类的方法更容易开发出具有本地化的应用程序，并且能够在不同的语言环境下使用。\n\nNSMutableString 类是 NSString 类的子类，可以用来创建可以更改字符的字符串对象，它可以使用 NSString 类所有方法。摘录常见 NSMutableString 方法\n![](http://images.stephenfang.xyz/mweb/15867813113647.jpg)\n\n#### 简单示例\n给出一个简单的测试示例。\n```objc\n#import <Foundation/Foundation.h>\n\nint main(int argc, char* argv[]){\n    @autoreleasepool {\n        NSString *str1 = @\"This is str1\";\n        NSString *str2 = @\"This is str2\";\n        NSString *subStr;\n        NSMutableString *mutStr;\n        NSRange subRange;\n        \n        subStr = [str1 substringToIndex:3];\n        NSLog(@\"%@\",subStr);\n        \n        subStr = [str1 substringFromIndex:3];\n        NSLog(@\"%@\",subStr);\n        \n        subStr = [[str1 substringFromIndex:3]substringToIndex:5];\n        NSLog(@\"%@\",subStr);\n        \n        subStr = [str1 substringWithRange:NSMakeRange(3, 5)];\n        NSLog(@\"%@\",subStr);\n        \n        subRange = [str2 rangeOfString:@\"str2\"];\n        NSLog(@\"index: %lu length: %lu\",(unsigned long)subRange.location,(unsigned long)subRange.length);\n        \n        subRange = [str1 rangeOfString:@\"str2\"];\n        if (subRange.location == NSNotFound){\n            NSLog(@\"String not found\");\n        }else{\n            NSLog(@\"index: %lu length: %lu\",(unsigned long)subRange.location,(unsigned long)subRange.length);\n        }\n        \n        mutStr = [NSMutableString stringWithString:str1];\n        NSLog(@\"%@\",mutStr);\n        \n        [mutStr insertString:mutStr atIndex:[mutStr length]];\n        NSLog(@\"%@\",mutStr);\n        \n        [mutStr deleteCharactersInRange:NSMakeRange([mutStr length]/2, [mutStr length]/2)];\n        NSLog(@\"%@\",mutStr);\n        \n        [mutStr appendString:mutStr];\n        NSLog(@\"%@\",mutStr);\n        \n        [mutStr replaceCharactersInRange:NSMakeRange([mutStr length]/2, [mutStr length]/2) withString:str2];\n        NSLog(@\"%@\",mutStr);\n        \n        subRange = [mutStr rangeOfString: @\"This is\"];\n        if (subRange.location != NSNotFound) {\n        [mutStr replaceCharactersInRange:subRange withString: @\"it is\"] ;\n        NSLog(@\"%@\",mutStr) ;\n        }\n    }\n    return 0;\n}\n```\n\n运行结果为\n```log\n2020-04-13 18:21:20.795845+0800 DemoProgram[49815:1823615] Thi\n2020-04-13 18:21:20.796235+0800 DemoProgram[49815:1823615] s is str1\n2020-04-13 18:21:20.796281+0800 DemoProgram[49815:1823615] s is\n2020-04-13 18:21:20.796305+0800 DemoProgram[49815:1823615] s is\n2020-04-13 18:21:20.796331+0800 DemoProgram[49815:1823615] index: 8 length: 4\n2020-04-13 18:21:20.796353+0800 DemoProgram[49815:1823615] String not found\n2020-04-13 18:21:20.796395+0800 DemoProgram[49815:1823615] This is str1\n2020-04-13 18:21:20.796432+0800 DemoProgram[49815:1823615] This is str1This is str1\n2020-04-13 18:21:20.796453+0800 DemoProgram[49815:1823615] This is str1\n2020-04-13 18:21:20.796472+0800 DemoProgram[49815:1823615] This is str1This is str1\n2020-04-13 18:21:20.796498+0800 DemoProgram[49815:1823615] This is str1This is str2\n2020-04-13 18:21:20.796520+0800 DemoProgram[49815:1823615] it is str1This is str2\nProgram ended with exit code: 0\n```\n\n### 关于数组对象\nFoundation数组是有序的对象集合。不可变数组由 NSArray 类处理的，而可变数组由NSMutableArray 处理的。后者是前者的子类，即后者继承了前者的方法。\n\n其中\n```objc\nNSArray *monthNames = [NSArray arrayWithObjects :@\"January\", @\"February\", @\"March\", @\"April\", @\"May\", \"June\", @\"July\", @\"August\", @\"September\", @\"October\", @\"November\", @\"December\", nil ];\n```\n与如下方式相同。\n```objc\nNSArray *monthNames = @[@\"January\", @\"February\", @\"March\", @\"April\", @\"May\",@\"June\", @\"July\", @\"August\", @\"September\", @\"October\", @\"November\" ,@\"December\"];\n```\n而\n```objc\narray[index]\n```\n相当于如下表达式\n```objc\n[array objectAtIndex: index]\n```\n同时\n```objc\narray[index] = object\n```\n相当于如下表达式\n```objc\n[array setObject: object forIndex: index]\n```\n下一节会参照书本给的样例进行编写。\n\n### 参考\n[int vs. NSInteger vs. NSNumber](http://monkey-oyster.blogspot.com/2014/10/int-vs-nsinteger-vs-nsnumber.html)\n[Why use int at all?-Stack overflow](https://stackoverflow.com/questions/4445173/when-to-use-nsinteger-vs-int/5320359#5320359)\n[Objective-C 程序设计 (第六版)]()","slug":"Objc_Learning_5","published":1,"updated":"2020-04-17T10:10:09.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcive9ne000wcv6b4c8lcui7","content":"<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第五篇文章，主要复习了 <code>Objective-C</code> Foundation 框架中关于数字对象、字符串对象以及数组对象的内容。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"关于数字对象\"><a href=\"#关于数字对象\" class=\"headerlink\" title=\"关于数字对象\"></a>关于数字对象</h3><p>无论是int 型、float 型和long型都是<code>Objective-C</code>语言中的基本数据类型,它们都不是对象，不能够向它们发送消息，然而有时需要将这些值作为对象使用。如不能将任何基本数据类型直接存储到数组中，使用Foundation的NSArray对象创建一个数组时，它要求存储的值必须是对象。</p>\n<p><strong>NSInteger</strong><br>NSInteger不是一个对象，是基本数据类型的typedef。</p>\n<p> Apple 官方 Foundation 文档解释的很清楚：</p>\n<blockquote>\n<p>When building 32-bit applications, NSInteger is a 32-bit integer. A 64-bit application treats NSInteger as a 64-bit integer.</p>\n</blockquote>\n<blockquote>\n<p>Apple use NSInteger (or NSUInteger) when passing a value as an argument to a function or returning a value from a function.</p>\n</blockquote>\n<p>鉴于目前 iOS 设备全部迈向64位架构，可以理解成 NSInteger 是64位的 long 类型。而 NSUInteger 也是类似于 NSInteger 的typedef。</p>\n<p><strong>int</strong><br>int 类型的使用主要体现在循环的控制上，控制循环语句无需考虑平台依赖，在大部分情况下16-bit 大小的 int 即可胜任此项工作。 NSInteger 可以作为函数的返回值或者是函数参数，至于使用 NSInteger 还是 int 决定权仍然在你需要解决的问题上。</p>\n<p><strong>NSNumber</strong><br>NSNumber 是<code>Objective-C</code>的类，具体来说是 NSValue 的子类。如果需要存储基本数据类型（包括 signed 或 unsigned char类型和BOOL类型），可以使用 NSNumber 对其进行包装来满足需求，NSNumber 会根据数据的类型创建对象。在集合中也会使用到 NSNumber，如NSSArray、NSSet，因为这些需要对象参与。<br>下图摘录了为 NSNumber 对象设值的类和实例方法以及获取这些数值的实例方法。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/15867486542169.jpg\" alt=\"\"></p>\n<h4 id=\"简单示例\"><a href=\"#简单示例\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h4><p>给出一个简单的测试示例。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSNumber</span> *intNum, *floatNum, *charNum, *doubleNum;</span><br><span class=\"line\">        <span class=\"built_in\">NSInteger</span> integerNum;</span><br><span class=\"line\">        </span><br><span class=\"line\">        intNum = [<span class=\"built_in\">NSNumber</span> numberWithInteger:<span class=\"number\">20</span>];</span><br><span class=\"line\">        integerNum = [intNum integerValue];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%li\"</span>,(<span class=\"keyword\">long</span>)integerNum);</span><br><span class=\"line\">        </span><br><span class=\"line\">        floatNum = [<span class=\"built_in\">NSNumber</span> numberWithFloat:<span class=\"number\">20.5</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%f\"</span>,[floatNum floatValue]);</span><br><span class=\"line\">        </span><br><span class=\"line\">        charNum = [<span class=\"built_in\">NSNumber</span> numberWithChar:<span class=\"string\">'X'</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%c\"</span>,[charNum charValue]);</span><br><span class=\"line\">        </span><br><span class=\"line\">        doubleNum = @<span class=\"number\">20.5</span>;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%lf\"</span>,[doubleNum doubleValue]);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([doubleNum isEqualToNumber:floatNum] == <span class=\"literal\">YES</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"doubleNum is equal to number floatNum\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">             <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"doubleNum is not equal to number floatNum\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([floatNum compare:intNum] == <span class=\"built_in\">NSOrderedDescending</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"intNum is less than floatNum\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"示例解释\"><a href=\"#示例解释\" class=\"headerlink\" title=\"示例解释\"></a>示例解释</h4><p>一般来说，需要确保使用正确的方式获取对象的值，如果在NSNumber对象中存储了一个值，那么也需要用一致的方式去获取。同时，<code>Objective-C</code>语言扩展允许通过@表达式创建数字对象.</p>\n<p>方法 numberWithInt: 和 numberWithInteger: 在使用存在差别</p>\n<ol>\n<li>使用 numberWithInt: 方法创建一个整型数,需要使用intValue获取值，使用%i作为格式化字符串显示它的值。</li>\n<li>使用 numberWithInteger: 方法创建一个整型数,需要使用integerValue获取值，也可以转换成 long 显示或者使用 stringWithFormat: 将其格式化成字符串。使用%li作为格式化字符串。</li>\n</ol>\n<h4 id=\"关于NSLog\"><a href=\"#关于NSLog\" class=\"headerlink\" title=\"关于NSLog\"></a>关于NSLog</h4><p>在NSLog中，格式字符<code>%@</code>不仅可以显示 NSString 对象，而且可以显示数组、字典和集合的全部内容。对于数组中的每一个元素,NSLog 将使用属于每个元素类的 description 方法。如果使用的是从 NSObject 对象继承的默认方法,获取到的是对象的类和地址。然而,通过覆盖继承的 description 方法可使用这些格式字符显示自定义类对象。</p>\n<h3 id=\"关于字符串对象\"><a href=\"#关于字符串对象\" class=\"headerlink\" title=\"关于字符串对象\"></a>关于字符串对象</h3><p>Foundation 框架支持 NSString类用于处理字符串对象。C 样式的字符串 char 字符组成，NSString 对象由 unichar 字符组成。unichar 字符是符合 Unicode 标准的多字节字符。NSString 类能够自动处理字符串的内部表示。使用 NSString 类的方法更容易开发出具有本地化的应用程序，并且能够在不同的语言环境下使用。</p>\n<p>NSMutableString 类是 NSString 类的子类，可以用来创建可以更改字符的字符串对象，它可以使用 NSString 类所有方法。摘录常见 NSMutableString 方法<br><img src=\"http://images.stephenfang.xyz/mweb/15867813113647.jpg\" alt=\"\"></p>\n<h4 id=\"简单示例-1\"><a href=\"#简单示例-1\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h4><p>给出一个简单的测试示例。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *str1 = <span class=\"string\">@\"This is str1\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *str2 = <span class=\"string\">@\"This is str2\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *subStr;</span><br><span class=\"line\">        <span class=\"built_in\">NSMutableString</span> *mutStr;</span><br><span class=\"line\">        <span class=\"built_in\">NSRange</span> subRange;</span><br><span class=\"line\">        </span><br><span class=\"line\">        subStr = [str1 substringToIndex:<span class=\"number\">3</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,subStr);</span><br><span class=\"line\">        </span><br><span class=\"line\">        subStr = [str1 substringFromIndex:<span class=\"number\">3</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,subStr);</span><br><span class=\"line\">        </span><br><span class=\"line\">        subStr = [[str1 substringFromIndex:<span class=\"number\">3</span>]substringToIndex:<span class=\"number\">5</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,subStr);</span><br><span class=\"line\">        </span><br><span class=\"line\">        subStr = [str1 substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">3</span>, <span class=\"number\">5</span>)];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,subStr);</span><br><span class=\"line\">        </span><br><span class=\"line\">        subRange = [str2 rangeOfString:<span class=\"string\">@\"str2\"</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"index: %lu length: %lu\"</span>,(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)subRange.location,(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)subRange.length);</span><br><span class=\"line\">        </span><br><span class=\"line\">        subRange = [str1 rangeOfString:<span class=\"string\">@\"str2\"</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (subRange.location == <span class=\"built_in\">NSNotFound</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"String not found\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"index: %lu length: %lu\"</span>,(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)subRange.location,(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)subRange.length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        mutStr = [<span class=\"built_in\">NSMutableString</span> stringWithString:str1];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,mutStr);</span><br><span class=\"line\">        </span><br><span class=\"line\">        [mutStr insertString:mutStr atIndex:[mutStr length]];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,mutStr);</span><br><span class=\"line\">        </span><br><span class=\"line\">        [mutStr deleteCharactersInRange:<span class=\"built_in\">NSMakeRange</span>([mutStr length]/<span class=\"number\">2</span>, [mutStr length]/<span class=\"number\">2</span>)];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,mutStr);</span><br><span class=\"line\">        </span><br><span class=\"line\">        [mutStr appendString:mutStr];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,mutStr);</span><br><span class=\"line\">        </span><br><span class=\"line\">        [mutStr replaceCharactersInRange:<span class=\"built_in\">NSMakeRange</span>([mutStr length]/<span class=\"number\">2</span>, [mutStr length]/<span class=\"number\">2</span>) withString:str2];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,mutStr);</span><br><span class=\"line\">        </span><br><span class=\"line\">        subRange = [mutStr rangeOfString: <span class=\"string\">@\"This is\"</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (subRange.location != <span class=\"built_in\">NSNotFound</span>) &#123;</span><br><span class=\"line\">        [mutStr replaceCharactersInRange:subRange withString: <span class=\"string\">@\"it is\"</span>] ;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,mutStr) ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020-04-13 18:21:20.795845+0800 DemoProgram[49815:1823615] Thi</span><br><span class=\"line\">2020-04-13 18:21:20.796235+0800 DemoProgram[49815:1823615] s is str1</span><br><span class=\"line\">2020-04-13 18:21:20.796281+0800 DemoProgram[49815:1823615] s is</span><br><span class=\"line\">2020-04-13 18:21:20.796305+0800 DemoProgram[49815:1823615] s is</span><br><span class=\"line\">2020-04-13 18:21:20.796331+0800 DemoProgram[49815:1823615] index: 8 length: 4</span><br><span class=\"line\">2020-04-13 18:21:20.796353+0800 DemoProgram[49815:1823615] String not found</span><br><span class=\"line\">2020-04-13 18:21:20.796395+0800 DemoProgram[49815:1823615] This is str1</span><br><span class=\"line\">2020-04-13 18:21:20.796432+0800 DemoProgram[49815:1823615] This is str1This is str1</span><br><span class=\"line\">2020-04-13 18:21:20.796453+0800 DemoProgram[49815:1823615] This is str1</span><br><span class=\"line\">2020-04-13 18:21:20.796472+0800 DemoProgram[49815:1823615] This is str1This is str1</span><br><span class=\"line\">2020-04-13 18:21:20.796498+0800 DemoProgram[49815:1823615] This is str1This is str2</span><br><span class=\"line\">2020-04-13 18:21:20.796520+0800 DemoProgram[49815:1823615] it is str1This is str2</span><br><span class=\"line\">Program ended with exit code: 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于数组对象\"><a href=\"#关于数组对象\" class=\"headerlink\" title=\"关于数组对象\"></a>关于数组对象</h3><p>Foundation数组是有序的对象集合。不可变数组由 NSArray 类处理的，而可变数组由NSMutableArray 处理的。后者是前者的子类，即后者继承了前者的方法。</p>\n<p>其中</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *monthNames = [<span class=\"built_in\">NSArray</span> arrayWithObjects :<span class=\"string\">@\"January\"</span>, <span class=\"string\">@\"February\"</span>, <span class=\"string\">@\"March\"</span>, <span class=\"string\">@\"April\"</span>, <span class=\"string\">@\"May\"</span>, <span class=\"string\">\"June\"</span>, <span class=\"string\">@\"July\"</span>, <span class=\"string\">@\"August\"</span>, <span class=\"string\">@\"September\"</span>, <span class=\"string\">@\"October\"</span>, <span class=\"string\">@\"November\"</span>, <span class=\"string\">@\"December\"</span>, <span class=\"literal\">nil</span> ];</span><br></pre></td></tr></table></figure>\n<p>与如下方式相同。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *monthNames = @[<span class=\"string\">@\"January\"</span>, <span class=\"string\">@\"February\"</span>, <span class=\"string\">@\"March\"</span>, <span class=\"string\">@\"April\"</span>, <span class=\"string\">@\"May\"</span>,<span class=\"string\">@\"June\"</span>, <span class=\"string\">@\"July\"</span>, <span class=\"string\">@\"August\"</span>, <span class=\"string\">@\"September\"</span>, <span class=\"string\">@\"October\"</span>, <span class=\"string\">@\"November\"</span> ,<span class=\"string\">@\"December\"</span>];</span><br></pre></td></tr></table></figure>\n<p>而</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array[index]</span><br></pre></td></tr></table></figure>\n<p>相当于如下表达式</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[array objectAtIndex: index]</span><br></pre></td></tr></table></figure>\n<p>同时</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array[index] = object</span><br></pre></td></tr></table></figure>\n<p>相当于如下表达式</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[array setObject: object forIndex: index]</span><br></pre></td></tr></table></figure>\n<p>下一节会参照书本给的样例进行编写。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://monkey-oyster.blogspot.com/2014/10/int-vs-nsinteger-vs-nsnumber.html\" target=\"_blank\" rel=\"noopener\">int vs. NSInteger vs. NSNumber</a><br><a href=\"https://stackoverflow.com/questions/4445173/when-to-use-nsinteger-vs-int/5320359#5320359\" target=\"_blank\" rel=\"noopener\">Why use int at all?-Stack overflow</a><br><a href=\"\">Objective-C 程序设计 (第六版)</a></p>\n","site":{"data":{}},"excerpt":"<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第五篇文章，主要复习了 <code>Objective-C</code> Foundation 框架中关于数字对象、字符串对象以及数组对象的内容。</p>","more":"<h3 id=\"关于数字对象\"><a href=\"#关于数字对象\" class=\"headerlink\" title=\"关于数字对象\"></a>关于数字对象</h3><p>无论是int 型、float 型和long型都是<code>Objective-C</code>语言中的基本数据类型,它们都不是对象，不能够向它们发送消息，然而有时需要将这些值作为对象使用。如不能将任何基本数据类型直接存储到数组中，使用Foundation的NSArray对象创建一个数组时，它要求存储的值必须是对象。</p>\n<p><strong>NSInteger</strong><br>NSInteger不是一个对象，是基本数据类型的typedef。</p>\n<p> Apple 官方 Foundation 文档解释的很清楚：</p>\n<blockquote>\n<p>When building 32-bit applications, NSInteger is a 32-bit integer. A 64-bit application treats NSInteger as a 64-bit integer.</p>\n</blockquote>\n<blockquote>\n<p>Apple use NSInteger (or NSUInteger) when passing a value as an argument to a function or returning a value from a function.</p>\n</blockquote>\n<p>鉴于目前 iOS 设备全部迈向64位架构，可以理解成 NSInteger 是64位的 long 类型。而 NSUInteger 也是类似于 NSInteger 的typedef。</p>\n<p><strong>int</strong><br>int 类型的使用主要体现在循环的控制上，控制循环语句无需考虑平台依赖，在大部分情况下16-bit 大小的 int 即可胜任此项工作。 NSInteger 可以作为函数的返回值或者是函数参数，至于使用 NSInteger 还是 int 决定权仍然在你需要解决的问题上。</p>\n<p><strong>NSNumber</strong><br>NSNumber 是<code>Objective-C</code>的类，具体来说是 NSValue 的子类。如果需要存储基本数据类型（包括 signed 或 unsigned char类型和BOOL类型），可以使用 NSNumber 对其进行包装来满足需求，NSNumber 会根据数据的类型创建对象。在集合中也会使用到 NSNumber，如NSSArray、NSSet，因为这些需要对象参与。<br>下图摘录了为 NSNumber 对象设值的类和实例方法以及获取这些数值的实例方法。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/15867486542169.jpg\" alt=\"\"></p>\n<h4 id=\"简单示例\"><a href=\"#简单示例\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h4><p>给出一个简单的测试示例。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSNumber</span> *intNum, *floatNum, *charNum, *doubleNum;</span><br><span class=\"line\">        <span class=\"built_in\">NSInteger</span> integerNum;</span><br><span class=\"line\">        </span><br><span class=\"line\">        intNum = [<span class=\"built_in\">NSNumber</span> numberWithInteger:<span class=\"number\">20</span>];</span><br><span class=\"line\">        integerNum = [intNum integerValue];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%li\"</span>,(<span class=\"keyword\">long</span>)integerNum);</span><br><span class=\"line\">        </span><br><span class=\"line\">        floatNum = [<span class=\"built_in\">NSNumber</span> numberWithFloat:<span class=\"number\">20.5</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%f\"</span>,[floatNum floatValue]);</span><br><span class=\"line\">        </span><br><span class=\"line\">        charNum = [<span class=\"built_in\">NSNumber</span> numberWithChar:<span class=\"string\">'X'</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%c\"</span>,[charNum charValue]);</span><br><span class=\"line\">        </span><br><span class=\"line\">        doubleNum = @<span class=\"number\">20.5</span>;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%lf\"</span>,[doubleNum doubleValue]);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([doubleNum isEqualToNumber:floatNum] == <span class=\"literal\">YES</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"doubleNum is equal to number floatNum\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">             <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"doubleNum is not equal to number floatNum\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([floatNum compare:intNum] == <span class=\"built_in\">NSOrderedDescending</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"intNum is less than floatNum\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"示例解释\"><a href=\"#示例解释\" class=\"headerlink\" title=\"示例解释\"></a>示例解释</h4><p>一般来说，需要确保使用正确的方式获取对象的值，如果在NSNumber对象中存储了一个值，那么也需要用一致的方式去获取。同时，<code>Objective-C</code>语言扩展允许通过@表达式创建数字对象.</p>\n<p>方法 numberWithInt: 和 numberWithInteger: 在使用存在差别</p>\n<ol>\n<li>使用 numberWithInt: 方法创建一个整型数,需要使用intValue获取值，使用%i作为格式化字符串显示它的值。</li>\n<li>使用 numberWithInteger: 方法创建一个整型数,需要使用integerValue获取值，也可以转换成 long 显示或者使用 stringWithFormat: 将其格式化成字符串。使用%li作为格式化字符串。</li>\n</ol>\n<h4 id=\"关于NSLog\"><a href=\"#关于NSLog\" class=\"headerlink\" title=\"关于NSLog\"></a>关于NSLog</h4><p>在NSLog中，格式字符<code>%@</code>不仅可以显示 NSString 对象，而且可以显示数组、字典和集合的全部内容。对于数组中的每一个元素,NSLog 将使用属于每个元素类的 description 方法。如果使用的是从 NSObject 对象继承的默认方法,获取到的是对象的类和地址。然而,通过覆盖继承的 description 方法可使用这些格式字符显示自定义类对象。</p>\n<h3 id=\"关于字符串对象\"><a href=\"#关于字符串对象\" class=\"headerlink\" title=\"关于字符串对象\"></a>关于字符串对象</h3><p>Foundation 框架支持 NSString类用于处理字符串对象。C 样式的字符串 char 字符组成，NSString 对象由 unichar 字符组成。unichar 字符是符合 Unicode 标准的多字节字符。NSString 类能够自动处理字符串的内部表示。使用 NSString 类的方法更容易开发出具有本地化的应用程序，并且能够在不同的语言环境下使用。</p>\n<p>NSMutableString 类是 NSString 类的子类，可以用来创建可以更改字符的字符串对象，它可以使用 NSString 类所有方法。摘录常见 NSMutableString 方法<br><img src=\"http://images.stephenfang.xyz/mweb/15867813113647.jpg\" alt=\"\"></p>\n<h4 id=\"简单示例-1\"><a href=\"#简单示例-1\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h4><p>给出一个简单的测试示例。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *str1 = <span class=\"string\">@\"This is str1\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *str2 = <span class=\"string\">@\"This is str2\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *subStr;</span><br><span class=\"line\">        <span class=\"built_in\">NSMutableString</span> *mutStr;</span><br><span class=\"line\">        <span class=\"built_in\">NSRange</span> subRange;</span><br><span class=\"line\">        </span><br><span class=\"line\">        subStr = [str1 substringToIndex:<span class=\"number\">3</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,subStr);</span><br><span class=\"line\">        </span><br><span class=\"line\">        subStr = [str1 substringFromIndex:<span class=\"number\">3</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,subStr);</span><br><span class=\"line\">        </span><br><span class=\"line\">        subStr = [[str1 substringFromIndex:<span class=\"number\">3</span>]substringToIndex:<span class=\"number\">5</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,subStr);</span><br><span class=\"line\">        </span><br><span class=\"line\">        subStr = [str1 substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">3</span>, <span class=\"number\">5</span>)];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,subStr);</span><br><span class=\"line\">        </span><br><span class=\"line\">        subRange = [str2 rangeOfString:<span class=\"string\">@\"str2\"</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"index: %lu length: %lu\"</span>,(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)subRange.location,(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)subRange.length);</span><br><span class=\"line\">        </span><br><span class=\"line\">        subRange = [str1 rangeOfString:<span class=\"string\">@\"str2\"</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (subRange.location == <span class=\"built_in\">NSNotFound</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"String not found\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"index: %lu length: %lu\"</span>,(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)subRange.location,(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)subRange.length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        mutStr = [<span class=\"built_in\">NSMutableString</span> stringWithString:str1];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,mutStr);</span><br><span class=\"line\">        </span><br><span class=\"line\">        [mutStr insertString:mutStr atIndex:[mutStr length]];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,mutStr);</span><br><span class=\"line\">        </span><br><span class=\"line\">        [mutStr deleteCharactersInRange:<span class=\"built_in\">NSMakeRange</span>([mutStr length]/<span class=\"number\">2</span>, [mutStr length]/<span class=\"number\">2</span>)];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,mutStr);</span><br><span class=\"line\">        </span><br><span class=\"line\">        [mutStr appendString:mutStr];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,mutStr);</span><br><span class=\"line\">        </span><br><span class=\"line\">        [mutStr replaceCharactersInRange:<span class=\"built_in\">NSMakeRange</span>([mutStr length]/<span class=\"number\">2</span>, [mutStr length]/<span class=\"number\">2</span>) withString:str2];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,mutStr);</span><br><span class=\"line\">        </span><br><span class=\"line\">        subRange = [mutStr rangeOfString: <span class=\"string\">@\"This is\"</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (subRange.location != <span class=\"built_in\">NSNotFound</span>) &#123;</span><br><span class=\"line\">        [mutStr replaceCharactersInRange:subRange withString: <span class=\"string\">@\"it is\"</span>] ;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,mutStr) ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020-04-13 18:21:20.795845+0800 DemoProgram[49815:1823615] Thi</span><br><span class=\"line\">2020-04-13 18:21:20.796235+0800 DemoProgram[49815:1823615] s is str1</span><br><span class=\"line\">2020-04-13 18:21:20.796281+0800 DemoProgram[49815:1823615] s is</span><br><span class=\"line\">2020-04-13 18:21:20.796305+0800 DemoProgram[49815:1823615] s is</span><br><span class=\"line\">2020-04-13 18:21:20.796331+0800 DemoProgram[49815:1823615] index: 8 length: 4</span><br><span class=\"line\">2020-04-13 18:21:20.796353+0800 DemoProgram[49815:1823615] String not found</span><br><span class=\"line\">2020-04-13 18:21:20.796395+0800 DemoProgram[49815:1823615] This is str1</span><br><span class=\"line\">2020-04-13 18:21:20.796432+0800 DemoProgram[49815:1823615] This is str1This is str1</span><br><span class=\"line\">2020-04-13 18:21:20.796453+0800 DemoProgram[49815:1823615] This is str1</span><br><span class=\"line\">2020-04-13 18:21:20.796472+0800 DemoProgram[49815:1823615] This is str1This is str1</span><br><span class=\"line\">2020-04-13 18:21:20.796498+0800 DemoProgram[49815:1823615] This is str1This is str2</span><br><span class=\"line\">2020-04-13 18:21:20.796520+0800 DemoProgram[49815:1823615] it is str1This is str2</span><br><span class=\"line\">Program ended with exit code: 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于数组对象\"><a href=\"#关于数组对象\" class=\"headerlink\" title=\"关于数组对象\"></a>关于数组对象</h3><p>Foundation数组是有序的对象集合。不可变数组由 NSArray 类处理的，而可变数组由NSMutableArray 处理的。后者是前者的子类，即后者继承了前者的方法。</p>\n<p>其中</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *monthNames = [<span class=\"built_in\">NSArray</span> arrayWithObjects :<span class=\"string\">@\"January\"</span>, <span class=\"string\">@\"February\"</span>, <span class=\"string\">@\"March\"</span>, <span class=\"string\">@\"April\"</span>, <span class=\"string\">@\"May\"</span>, <span class=\"string\">\"June\"</span>, <span class=\"string\">@\"July\"</span>, <span class=\"string\">@\"August\"</span>, <span class=\"string\">@\"September\"</span>, <span class=\"string\">@\"October\"</span>, <span class=\"string\">@\"November\"</span>, <span class=\"string\">@\"December\"</span>, <span class=\"literal\">nil</span> ];</span><br></pre></td></tr></table></figure>\n<p>与如下方式相同。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *monthNames = @[<span class=\"string\">@\"January\"</span>, <span class=\"string\">@\"February\"</span>, <span class=\"string\">@\"March\"</span>, <span class=\"string\">@\"April\"</span>, <span class=\"string\">@\"May\"</span>,<span class=\"string\">@\"June\"</span>, <span class=\"string\">@\"July\"</span>, <span class=\"string\">@\"August\"</span>, <span class=\"string\">@\"September\"</span>, <span class=\"string\">@\"October\"</span>, <span class=\"string\">@\"November\"</span> ,<span class=\"string\">@\"December\"</span>];</span><br></pre></td></tr></table></figure>\n<p>而</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array[index]</span><br></pre></td></tr></table></figure>\n<p>相当于如下表达式</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[array objectAtIndex: index]</span><br></pre></td></tr></table></figure>\n<p>同时</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array[index] = object</span><br></pre></td></tr></table></figure>\n<p>相当于如下表达式</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[array setObject: object forIndex: index]</span><br></pre></td></tr></table></figure>\n<p>下一节会参照书本给的样例进行编写。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://monkey-oyster.blogspot.com/2014/10/int-vs-nsinteger-vs-nsnumber.html\" target=\"_blank\" rel=\"noopener\">int vs. NSInteger vs. NSNumber</a><br><a href=\"https://stackoverflow.com/questions/4445173/when-to-use-nsinteger-vs-int/5320359#5320359\" target=\"_blank\" rel=\"noopener\">Why use int at all?-Stack overflow</a><br><a href=\"\">Objective-C 程序设计 (第六版)</a></p>"},{"title":"Objective-C 学习笔记(四）","date":"2020-04-11T07:43:20.000Z","copyright":true,"_content":"\n最近开始学习 `Objective-C` 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第四篇文章，主要复习了 `Objective-C`中C语言特性。\n\n<!--more-->\n\n### 关于C语言特性\n#### 关于数组\n`Objective-C`与C语言一样允许用户定义一组有序的数据项，即数组。其操作与C语言几乎完全一致，事实上无论是函数还是数组还是变量具备良好C基础的人都不会对此感到陌生。以下为最简单的使用数组的Fibonacci代码。\n```objc \n#import <Foundation/Foundation.h>\n\nint main(int argc, char* argv[]){\n    @autoreleasepool {\n        long Fibo [30];\n        Fibo [0] = 1;\n        Fibo [1] = 1;\n        \n        for (int i = 2; i < sizeof(Fibo)/sizeof(Fibo[0]); i++) {\n            Fibo [i] = Fibo [i-1] + Fibo [i-2];\n        }\n        \n        for (int i = 0; i < sizeof(Fibo)/sizeof(Fibo[0]); i++) {\n            NSLog(@\"The result of Fibonacci[%i] is %li\\n\",i,Fibo[i]);\n        }\n    }\n    return 0;\n}\n```\n\n#### 关于函数\n默认情况下，`Objective-C`语言编译器假设函数返回int,除非发生以下两种情况之一:\n- 在函数被调用之前，已经在程序中定义了该函数，\n- 在遇到函数调用之前，已经声明了该函数的返回值类型。\n调用函数或方法时，作为参数传递的值将被复制到相应的形参中。使用数组时，并非将整个数组的内容复制到形参数组中，而是传递一个指针，它表示数组所在的内存地址。所以对形参数组所做的所有更改实际上都是对原始数组而不是数组的副本执行的。因此，函数或方法返回时，这些变化仍然有效。\n\n#### 关于块\n- 块是对C语言的一种扩展。它并未作为标准ANSI C所定义的部分，而是由 Apple 添加。\n- 块看起来更像是函数，可以给块传递参数，块也具有返回值。\n- 块定义在函数或者方法内部，并能够访问在函数或者方法范围内、块之外的任何变量，这些变量能够访问但是并不能够改变这些变量。\n- 特殊的块修改器(由块前面含有两个下画线的字符组成)能够修改块内变量的值。\n- 块的其中一个优势在于能够让系统分配给其他处理器或应用的其他线程执行。\n以下为一个处理最小公倍数的简单块演示。\n\n```objc\nint (^gcd)(int,int)=\n^(int u,int v){\n    int temp;\n    while(v!= 0){\n        temp = u % v;\n        u = v;\n        v = temp;\n    }\n    return u;\n};\n```\n\n#### 关于数组指针\n要将valuesPtr设为指向数组values的第--个元素的指针，可以写成：\n\n```objc\nvaluesPtr = values;\n```\n因为Objective-C编译器将没有下标的数组名称看作是指向数组第一个元素的指针。所以，仅仅指明values而不带下标，其作用就是产生一个指向values第一个元素的指针。不需要用到地址运算符，要产生指向values首元素的指针，还有另一个等效方式，就是对数组第一个元素应用地址运算符，即\n\n```objc\nvaluesPtr = &values(0];\n```\n\n将数组values第一个元素的指针存放到指针变量valuesPtr中。此时通过\n\n```objc\nvaluesPtr += 1;\n```\n\n可以使其指向下一个元素，即values[1]。在`Objective-C`语言中，这是完全合法的表达式，并且可以用于指向任何数据类型的指针。同时比较两个指针变量的做法也是完全合法的。这在比较指向同一数组的两个指针时非常有用。比如测试指针valuesPtr的指向是否超出了包含有100个元素的数组的范围，方法是将它与指向数组最后一个元素的指针相比较。\n如果valuesPtr超出了数组values的最后元素，\n\n```objc\nvaluesPtr > &values [99]\n```\n\n的结果将为TRUE，反之，表达式的值为FALSE，也可将上面的表达式相应地改写为:\n\n```objc\nvaluesPtr > values + 99\n```\n\n在`Objective-C`语言中，两指针相减的结果是它们之间所包含的元素个数。这样，如果a是指向任意类型的元素数组，而b是指向同一数组中索引值更大的其他元素，那么表达式b-a \n代表的就是这两个指针之间的元素个数。\n\n#### 关于字符串指针\n在《Objective-C 程序设计 (第六版)》中给出了以下两段代码说明字符串指针的运用。\n\n```objc \n// 使用常规数组索引\nvoid copyString (char to[], char from[]){\n    int i;\n    \n    for( i = 0 ; from[i] != '\\0'; ++i)\n        to[i] = from [i];\n    \n    to[i] = '\\0';\n}\n```\n\n```objc \n// 使用指针数组\nvoid copystring (char *to， char *from){\n    for ( ; *from != '\\0'; ++from,++to ) \n        *to = *from;\n        \n    *to='0';\n}\n```\n\n很有意思的是，`Objective-C`语言中用到字符串就会产生指向该字符串的指针。学习过程中在程序中使用了字符串不是字符串对象，而是属于C风格的字符串，可以通过字符串的前面是否具有@字符进行区分。这两种类型不能互换。如果一个函数需要字符数组作为参数，可以将char类型的数组或c风格字符串传递给它，不能传递一个字符串对象。\n\n### 关于两种语言的联系\n1. 实例变量存储在结构中：对象实际上是结构\n2. 对象变量实际上是指针：将对象变量赋给另一个对象变量时，只是简单地复制了指针，最后都指向存储在内存中的同一结构\n3. 方法是函数，消息表达式是函数调用：调用方法是在调用与接收者类相关的函数。\n4. id类型是通用指针类型：通过指针来引用对象可以自由地将它们在id变量之间来回赋值。因此返回id类型值的方法只是返回指向内存中某对象的指针。\n\n### 参考\n[Objective-C 程序设计 (第六版)]()\n","source":"_posts/Objc_Learning_4.md","raw":"---\ntitle: Objective-C 学习笔记(四）\ndate: 2020-04-11 15:43:20\ncategories: \n- tech\ntags: \n- iOS\n- Xcode\n- Objective-C\ncopyright: true\n---\n\n最近开始学习 `Objective-C` 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第四篇文章，主要复习了 `Objective-C`中C语言特性。\n\n<!--more-->\n\n### 关于C语言特性\n#### 关于数组\n`Objective-C`与C语言一样允许用户定义一组有序的数据项，即数组。其操作与C语言几乎完全一致，事实上无论是函数还是数组还是变量具备良好C基础的人都不会对此感到陌生。以下为最简单的使用数组的Fibonacci代码。\n```objc \n#import <Foundation/Foundation.h>\n\nint main(int argc, char* argv[]){\n    @autoreleasepool {\n        long Fibo [30];\n        Fibo [0] = 1;\n        Fibo [1] = 1;\n        \n        for (int i = 2; i < sizeof(Fibo)/sizeof(Fibo[0]); i++) {\n            Fibo [i] = Fibo [i-1] + Fibo [i-2];\n        }\n        \n        for (int i = 0; i < sizeof(Fibo)/sizeof(Fibo[0]); i++) {\n            NSLog(@\"The result of Fibonacci[%i] is %li\\n\",i,Fibo[i]);\n        }\n    }\n    return 0;\n}\n```\n\n#### 关于函数\n默认情况下，`Objective-C`语言编译器假设函数返回int,除非发生以下两种情况之一:\n- 在函数被调用之前，已经在程序中定义了该函数，\n- 在遇到函数调用之前，已经声明了该函数的返回值类型。\n调用函数或方法时，作为参数传递的值将被复制到相应的形参中。使用数组时，并非将整个数组的内容复制到形参数组中，而是传递一个指针，它表示数组所在的内存地址。所以对形参数组所做的所有更改实际上都是对原始数组而不是数组的副本执行的。因此，函数或方法返回时，这些变化仍然有效。\n\n#### 关于块\n- 块是对C语言的一种扩展。它并未作为标准ANSI C所定义的部分，而是由 Apple 添加。\n- 块看起来更像是函数，可以给块传递参数，块也具有返回值。\n- 块定义在函数或者方法内部，并能够访问在函数或者方法范围内、块之外的任何变量，这些变量能够访问但是并不能够改变这些变量。\n- 特殊的块修改器(由块前面含有两个下画线的字符组成)能够修改块内变量的值。\n- 块的其中一个优势在于能够让系统分配给其他处理器或应用的其他线程执行。\n以下为一个处理最小公倍数的简单块演示。\n\n```objc\nint (^gcd)(int,int)=\n^(int u,int v){\n    int temp;\n    while(v!= 0){\n        temp = u % v;\n        u = v;\n        v = temp;\n    }\n    return u;\n};\n```\n\n#### 关于数组指针\n要将valuesPtr设为指向数组values的第--个元素的指针，可以写成：\n\n```objc\nvaluesPtr = values;\n```\n因为Objective-C编译器将没有下标的数组名称看作是指向数组第一个元素的指针。所以，仅仅指明values而不带下标，其作用就是产生一个指向values第一个元素的指针。不需要用到地址运算符，要产生指向values首元素的指针，还有另一个等效方式，就是对数组第一个元素应用地址运算符，即\n\n```objc\nvaluesPtr = &values(0];\n```\n\n将数组values第一个元素的指针存放到指针变量valuesPtr中。此时通过\n\n```objc\nvaluesPtr += 1;\n```\n\n可以使其指向下一个元素，即values[1]。在`Objective-C`语言中，这是完全合法的表达式，并且可以用于指向任何数据类型的指针。同时比较两个指针变量的做法也是完全合法的。这在比较指向同一数组的两个指针时非常有用。比如测试指针valuesPtr的指向是否超出了包含有100个元素的数组的范围，方法是将它与指向数组最后一个元素的指针相比较。\n如果valuesPtr超出了数组values的最后元素，\n\n```objc\nvaluesPtr > &values [99]\n```\n\n的结果将为TRUE，反之，表达式的值为FALSE，也可将上面的表达式相应地改写为:\n\n```objc\nvaluesPtr > values + 99\n```\n\n在`Objective-C`语言中，两指针相减的结果是它们之间所包含的元素个数。这样，如果a是指向任意类型的元素数组，而b是指向同一数组中索引值更大的其他元素，那么表达式b-a \n代表的就是这两个指针之间的元素个数。\n\n#### 关于字符串指针\n在《Objective-C 程序设计 (第六版)》中给出了以下两段代码说明字符串指针的运用。\n\n```objc \n// 使用常规数组索引\nvoid copyString (char to[], char from[]){\n    int i;\n    \n    for( i = 0 ; from[i] != '\\0'; ++i)\n        to[i] = from [i];\n    \n    to[i] = '\\0';\n}\n```\n\n```objc \n// 使用指针数组\nvoid copystring (char *to， char *from){\n    for ( ; *from != '\\0'; ++from,++to ) \n        *to = *from;\n        \n    *to='0';\n}\n```\n\n很有意思的是，`Objective-C`语言中用到字符串就会产生指向该字符串的指针。学习过程中在程序中使用了字符串不是字符串对象，而是属于C风格的字符串，可以通过字符串的前面是否具有@字符进行区分。这两种类型不能互换。如果一个函数需要字符数组作为参数，可以将char类型的数组或c风格字符串传递给它，不能传递一个字符串对象。\n\n### 关于两种语言的联系\n1. 实例变量存储在结构中：对象实际上是结构\n2. 对象变量实际上是指针：将对象变量赋给另一个对象变量时，只是简单地复制了指针，最后都指向存储在内存中的同一结构\n3. 方法是函数，消息表达式是函数调用：调用方法是在调用与接收者类相关的函数。\n4. id类型是通用指针类型：通过指针来引用对象可以自由地将它们在id变量之间来回赋值。因此返回id类型值的方法只是返回指向内存中某对象的指针。\n\n### 参考\n[Objective-C 程序设计 (第六版)]()\n","slug":"Objc_Learning_4","published":1,"updated":"2020-04-11T07:42:48.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcive9nf0010cv6b00hb4svo","content":"<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第四篇文章，主要复习了 <code>Objective-C</code>中C语言特性。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"关于C语言特性\"><a href=\"#关于C语言特性\" class=\"headerlink\" title=\"关于C语言特性\"></a>关于C语言特性</h3><h4 id=\"关于数组\"><a href=\"#关于数组\" class=\"headerlink\" title=\"关于数组\"></a>关于数组</h4><p><code>Objective-C</code>与C语言一样允许用户定义一组有序的数据项，即数组。其操作与C语言几乎完全一致，事实上无论是函数还是数组还是变量具备良好C基础的人都不会对此感到陌生。以下为最简单的使用数组的Fibonacci代码。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> Fibo [<span class=\"number\">30</span>];</span><br><span class=\"line\">        Fibo [<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        Fibo [<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; <span class=\"keyword\">sizeof</span>(Fibo)/<span class=\"keyword\">sizeof</span>(Fibo[<span class=\"number\">0</span>]); i++) &#123;</span><br><span class=\"line\">            Fibo [i] = Fibo [i<span class=\"number\">-1</span>] + Fibo [i<span class=\"number\">-2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">sizeof</span>(Fibo)/<span class=\"keyword\">sizeof</span>(Fibo[<span class=\"number\">0</span>]); i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The result of Fibonacci[%i] is %li\\n\"</span>,i,Fibo[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关于函数\"><a href=\"#关于函数\" class=\"headerlink\" title=\"关于函数\"></a>关于函数</h4><p>默认情况下，<code>Objective-C</code>语言编译器假设函数返回int,除非发生以下两种情况之一:</p>\n<ul>\n<li>在函数被调用之前，已经在程序中定义了该函数，</li>\n<li>在遇到函数调用之前，已经声明了该函数的返回值类型。<br>调用函数或方法时，作为参数传递的值将被复制到相应的形参中。使用数组时，并非将整个数组的内容复制到形参数组中，而是传递一个指针，它表示数组所在的内存地址。所以对形参数组所做的所有更改实际上都是对原始数组而不是数组的副本执行的。因此，函数或方法返回时，这些变化仍然有效。</li>\n</ul>\n<h4 id=\"关于块\"><a href=\"#关于块\" class=\"headerlink\" title=\"关于块\"></a>关于块</h4><ul>\n<li>块是对C语言的一种扩展。它并未作为标准ANSI C所定义的部分，而是由 Apple 添加。</li>\n<li>块看起来更像是函数，可以给块传递参数，块也具有返回值。</li>\n<li>块定义在函数或者方法内部，并能够访问在函数或者方法范围内、块之外的任何变量，这些变量能够访问但是并不能够改变这些变量。</li>\n<li>特殊的块修改器(由块前面含有两个下画线的字符组成)能够修改块内变量的值。</li>\n<li>块的其中一个优势在于能够让系统分配给其他处理器或应用的其他线程执行。<br>以下为一个处理最小公倍数的简单块演示。</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> (^gcd)(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>)=</span><br><span class=\"line\">^(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(v!= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        temp = u % v;</span><br><span class=\"line\">        u = v;</span><br><span class=\"line\">        v = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关于数组指针\"><a href=\"#关于数组指针\" class=\"headerlink\" title=\"关于数组指针\"></a>关于数组指针</h4><p>要将valuesPtr设为指向数组values的第–个元素的指针，可以写成：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valuesPtr = values;</span><br></pre></td></tr></table></figure>\n<p>因为Objective-C编译器将没有下标的数组名称看作是指向数组第一个元素的指针。所以，仅仅指明values而不带下标，其作用就是产生一个指向values第一个元素的指针。不需要用到地址运算符，要产生指向values首元素的指针，还有另一个等效方式，就是对数组第一个元素应用地址运算符，即</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valuesPtr = &amp;values(<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<p>将数组values第一个元素的指针存放到指针变量valuesPtr中。此时通过</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valuesPtr += <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>可以使其指向下一个元素，即values[1]。在<code>Objective-C</code>语言中，这是完全合法的表达式，并且可以用于指向任何数据类型的指针。同时比较两个指针变量的做法也是完全合法的。这在比较指向同一数组的两个指针时非常有用。比如测试指针valuesPtr的指向是否超出了包含有100个元素的数组的范围，方法是将它与指向数组最后一个元素的指针相比较。<br>如果valuesPtr超出了数组values的最后元素，</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valuesPtr &gt; &amp;values [<span class=\"number\">99</span>]</span><br></pre></td></tr></table></figure>\n\n<p>的结果将为TRUE，反之，表达式的值为FALSE，也可将上面的表达式相应地改写为:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valuesPtr &gt; values + <span class=\"number\">99</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>Objective-C</code>语言中，两指针相减的结果是它们之间所包含的元素个数。这样，如果a是指向任意类型的元素数组，而b是指向同一数组中索引值更大的其他元素，那么表达式b-a<br>代表的就是这两个指针之间的元素个数。</p>\n<h4 id=\"关于字符串指针\"><a href=\"#关于字符串指针\" class=\"headerlink\" title=\"关于字符串指针\"></a>关于字符串指针</h4><p>在《Objective-C 程序设计 (第六版)》中给出了以下两段代码说明字符串指针的运用。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用常规数组索引</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> copyString (<span class=\"keyword\">char</span> to[], <span class=\"keyword\">char</span> from[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>( i = <span class=\"number\">0</span> ; from[i] != <span class=\"string\">'\\0'</span>; ++i)</span><br><span class=\"line\">        to[i] = from [i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    to[i] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用指针数组</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> copystring (<span class=\"keyword\">char</span> *to， <span class=\"keyword\">char</span> *from)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( ; *from != <span class=\"string\">'\\0'</span>; ++from,++to ) </span><br><span class=\"line\">        *to = *from;</span><br><span class=\"line\">        </span><br><span class=\"line\">    *to=<span class=\"string\">'0'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>很有意思的是，<code>Objective-C</code>语言中用到字符串就会产生指向该字符串的指针。学习过程中在程序中使用了字符串不是字符串对象，而是属于C风格的字符串，可以通过字符串的前面是否具有@字符进行区分。这两种类型不能互换。如果一个函数需要字符数组作为参数，可以将char类型的数组或c风格字符串传递给它，不能传递一个字符串对象。</p>\n<h3 id=\"关于两种语言的联系\"><a href=\"#关于两种语言的联系\" class=\"headerlink\" title=\"关于两种语言的联系\"></a>关于两种语言的联系</h3><ol>\n<li>实例变量存储在结构中：对象实际上是结构</li>\n<li>对象变量实际上是指针：将对象变量赋给另一个对象变量时，只是简单地复制了指针，最后都指向存储在内存中的同一结构</li>\n<li>方法是函数，消息表达式是函数调用：调用方法是在调用与接收者类相关的函数。</li>\n<li>id类型是通用指针类型：通过指针来引用对象可以自由地将它们在id变量之间来回赋值。因此返回id类型值的方法只是返回指向内存中某对象的指针。</li>\n</ol>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"\">Objective-C 程序设计 (第六版)</a></p>\n","site":{"data":{}},"excerpt":"<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第四篇文章，主要复习了 <code>Objective-C</code>中C语言特性。</p>","more":"<h3 id=\"关于C语言特性\"><a href=\"#关于C语言特性\" class=\"headerlink\" title=\"关于C语言特性\"></a>关于C语言特性</h3><h4 id=\"关于数组\"><a href=\"#关于数组\" class=\"headerlink\" title=\"关于数组\"></a>关于数组</h4><p><code>Objective-C</code>与C语言一样允许用户定义一组有序的数据项，即数组。其操作与C语言几乎完全一致，事实上无论是函数还是数组还是变量具备良好C基础的人都不会对此感到陌生。以下为最简单的使用数组的Fibonacci代码。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> Fibo [<span class=\"number\">30</span>];</span><br><span class=\"line\">        Fibo [<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        Fibo [<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; <span class=\"keyword\">sizeof</span>(Fibo)/<span class=\"keyword\">sizeof</span>(Fibo[<span class=\"number\">0</span>]); i++) &#123;</span><br><span class=\"line\">            Fibo [i] = Fibo [i<span class=\"number\">-1</span>] + Fibo [i<span class=\"number\">-2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">sizeof</span>(Fibo)/<span class=\"keyword\">sizeof</span>(Fibo[<span class=\"number\">0</span>]); i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The result of Fibonacci[%i] is %li\\n\"</span>,i,Fibo[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关于函数\"><a href=\"#关于函数\" class=\"headerlink\" title=\"关于函数\"></a>关于函数</h4><p>默认情况下，<code>Objective-C</code>语言编译器假设函数返回int,除非发生以下两种情况之一:</p>\n<ul>\n<li>在函数被调用之前，已经在程序中定义了该函数，</li>\n<li>在遇到函数调用之前，已经声明了该函数的返回值类型。<br>调用函数或方法时，作为参数传递的值将被复制到相应的形参中。使用数组时，并非将整个数组的内容复制到形参数组中，而是传递一个指针，它表示数组所在的内存地址。所以对形参数组所做的所有更改实际上都是对原始数组而不是数组的副本执行的。因此，函数或方法返回时，这些变化仍然有效。</li>\n</ul>\n<h4 id=\"关于块\"><a href=\"#关于块\" class=\"headerlink\" title=\"关于块\"></a>关于块</h4><ul>\n<li>块是对C语言的一种扩展。它并未作为标准ANSI C所定义的部分，而是由 Apple 添加。</li>\n<li>块看起来更像是函数，可以给块传递参数，块也具有返回值。</li>\n<li>块定义在函数或者方法内部，并能够访问在函数或者方法范围内、块之外的任何变量，这些变量能够访问但是并不能够改变这些变量。</li>\n<li>特殊的块修改器(由块前面含有两个下画线的字符组成)能够修改块内变量的值。</li>\n<li>块的其中一个优势在于能够让系统分配给其他处理器或应用的其他线程执行。<br>以下为一个处理最小公倍数的简单块演示。</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> (^gcd)(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>)=</span><br><span class=\"line\">^(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(v!= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        temp = u % v;</span><br><span class=\"line\">        u = v;</span><br><span class=\"line\">        v = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关于数组指针\"><a href=\"#关于数组指针\" class=\"headerlink\" title=\"关于数组指针\"></a>关于数组指针</h4><p>要将valuesPtr设为指向数组values的第–个元素的指针，可以写成：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valuesPtr = values;</span><br></pre></td></tr></table></figure>\n<p>因为Objective-C编译器将没有下标的数组名称看作是指向数组第一个元素的指针。所以，仅仅指明values而不带下标，其作用就是产生一个指向values第一个元素的指针。不需要用到地址运算符，要产生指向values首元素的指针，还有另一个等效方式，就是对数组第一个元素应用地址运算符，即</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valuesPtr = &amp;values(<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<p>将数组values第一个元素的指针存放到指针变量valuesPtr中。此时通过</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valuesPtr += <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>可以使其指向下一个元素，即values[1]。在<code>Objective-C</code>语言中，这是完全合法的表达式，并且可以用于指向任何数据类型的指针。同时比较两个指针变量的做法也是完全合法的。这在比较指向同一数组的两个指针时非常有用。比如测试指针valuesPtr的指向是否超出了包含有100个元素的数组的范围，方法是将它与指向数组最后一个元素的指针相比较。<br>如果valuesPtr超出了数组values的最后元素，</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valuesPtr &gt; &amp;values [<span class=\"number\">99</span>]</span><br></pre></td></tr></table></figure>\n\n<p>的结果将为TRUE，反之，表达式的值为FALSE，也可将上面的表达式相应地改写为:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valuesPtr &gt; values + <span class=\"number\">99</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>Objective-C</code>语言中，两指针相减的结果是它们之间所包含的元素个数。这样，如果a是指向任意类型的元素数组，而b是指向同一数组中索引值更大的其他元素，那么表达式b-a<br>代表的就是这两个指针之间的元素个数。</p>\n<h4 id=\"关于字符串指针\"><a href=\"#关于字符串指针\" class=\"headerlink\" title=\"关于字符串指针\"></a>关于字符串指针</h4><p>在《Objective-C 程序设计 (第六版)》中给出了以下两段代码说明字符串指针的运用。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用常规数组索引</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> copyString (<span class=\"keyword\">char</span> to[], <span class=\"keyword\">char</span> from[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>( i = <span class=\"number\">0</span> ; from[i] != <span class=\"string\">'\\0'</span>; ++i)</span><br><span class=\"line\">        to[i] = from [i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    to[i] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用指针数组</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> copystring (<span class=\"keyword\">char</span> *to， <span class=\"keyword\">char</span> *from)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( ; *from != <span class=\"string\">'\\0'</span>; ++from,++to ) </span><br><span class=\"line\">        *to = *from;</span><br><span class=\"line\">        </span><br><span class=\"line\">    *to=<span class=\"string\">'0'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>很有意思的是，<code>Objective-C</code>语言中用到字符串就会产生指向该字符串的指针。学习过程中在程序中使用了字符串不是字符串对象，而是属于C风格的字符串，可以通过字符串的前面是否具有@字符进行区分。这两种类型不能互换。如果一个函数需要字符数组作为参数，可以将char类型的数组或c风格字符串传递给它，不能传递一个字符串对象。</p>\n<h3 id=\"关于两种语言的联系\"><a href=\"#关于两种语言的联系\" class=\"headerlink\" title=\"关于两种语言的联系\"></a>关于两种语言的联系</h3><ol>\n<li>实例变量存储在结构中：对象实际上是结构</li>\n<li>对象变量实际上是指针：将对象变量赋给另一个对象变量时，只是简单地复制了指针，最后都指向存储在内存中的同一结构</li>\n<li>方法是函数，消息表达式是函数调用：调用方法是在调用与接收者类相关的函数。</li>\n<li>id类型是通用指针类型：通过指针来引用对象可以自由地将它们在id变量之间来回赋值。因此返回id类型值的方法只是返回指向内存中某对象的指针。</li>\n</ol>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"\">Objective-C 程序设计 (第六版)</a></p>"},{"title":"Objective-C 学习笔记(六）","date":"2020-04-17T09:43:20.000Z","copyright":true,"_content":"\n最近开始学习 `Objective-C` 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第六篇文章，主要复习了 `Objective-C` Foundation 框架中关于数组排序、字典对象以及集合对象的内容。\n\n<!--more-->\n\n### 关于数组排序\n#### 简单排序示例\n`Objective-C` 中对于 NSArray 排序方法主要有以下几种。\n```\nsortedArrayUsingSelector:\nsortedArrayUsingComparator:\nsortedArrayUsingDescriptors:\n```\n给出前两者排序的简单示例，如果只是对字符串简单做排序，sortedArrayUsingSelector:方法已足够，sortedArrayUsingComparator: 中用到了block内容。\n\n```objc\n#import <Foundation/Foundation.h>\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSArray *array = [NSArray arrayWithObjects:@\"abc\",@\"456\",@\"123\",@\"789\",@\"ef\", nil];\n        \n        //sortedArrayUsingSelector\n        NSArray *sortedArray1 = [array sortedArrayUsingSelector:@selector(compare:)];\n        NSLog(@\"SortedArray1:\");\n        NSLog(@\"%@\",sortedArray1);\n        \n        //sortedArrayUsingComparator:\n        NSArray *sortedArray2 = [array sortedArrayUsingComparator:^NSComparisonResult(id obj1, id obj2) {\n             NSComparisonResult result = [obj1 compare:obj2];\n             return result;\n         }];\n         NSLog(@\"SortedArray2:\");\n         NSLog(@\"%@\",sortedArray2);\n    }\n    return 0;\n}\n```\n\n#### 使用区块排序\nNSArray和NSMutableArray类中具有使用区块对数组中元素进行排序的方法。\nNSArray的排序方法一般格式为: \n```objc\n- (NSArray *) sortedArrayUsingComparator: (NSComparator) block\n```\nNSMutableArray的排序方法格式为: \n```objc\n- (void) sortUsingComparator: (NSComparator) block\n```\nNSComparator作为typedef定义在系统头文件中:\n```objc\ntypedef NSComparisonResult (^NSComparator) (id obj1, id obj2);\n```\n\nNSComparator是一个区块，使用两个待比较对象作为参数，并返回 NSComparisonResult 类型的值。预期会返回一个标识，说明第一个对象是否小于、等于或者大于第二个对象，这一点与不使用区块的数组排序方法是一致的。区块对于大数组排序能够提升一些速度，可以考虑在程序中使用。\n\n#### 关于描述器排序\n给出使用描述器排序的一个代码样例。\n代码中定义了三种车与五个人，并将车与人的信息载入数组，通过构建排序描述器，将排序描述器按照一定顺序放入数组，最后能够按照你所期望的顺序对信息进行输出，因为代码中重写了description，故能够按照格式进行输出。\n```objc\n//main.m\n#import <Foundation/Foundation.h>\n#import \"Car.h\"\n#import \"Person.h\"\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n            Car *car1 = [Car initWithName:@\"Audio\"];\n            Car *car2 = [Car initWithName:@\"Rolls-Royce\"];\n            Car *car3 = [Car initWithName:@\"BMW\"];\n            \n            Person *p1 = [Person personWithAge:23 withName:@\"zhangsan\" withCar:car2];\n            Person *p2 = [Person personWithAge:21 withName:@\"zhangsan\" withCar:car1];\n            Person *p3 = [Person personWithAge:24 withName:@\"lisi\" withCar:car1];\n            Person *p4 = [Person personWithAge:23 withName:@\"wangwu\" withCar:car3];\n            Person *p5 = [Person personWithAge:23 withName:@\"wangwu\" withCar:car2];\n\n            NSArray *array = [NSArray arrayWithObjects:p1,p2,p3,p4,p5, nil];\n            \n            NSSortDescriptor *carNameDesc = [NSSortDescriptor sortDescriptorWithKey:@\"car.name\" ascending:YES];\n            NSSortDescriptor *personNameDesc = [NSSortDescriptor sortDescriptorWithKey:@\"name\" ascending:YES];\n            NSSortDescriptor *personAgeDesc = [NSSortDescriptor sortDescriptorWithKey:@\"age\" ascending:YES];\n            \n            NSArray *descriptorArray = [NSArray arrayWithObjects:personAgeDesc,carNameDesc,personNameDesc, nil];\n            \n            NSArray *sortedArray = [array sortedArrayUsingDescriptors: descriptorArray];\n            NSLog(@\"%@\",sortedArray);\n    }\n    return 0;\n}\n\n```\n\n```objc\n//Car.h\n#import <Foundation/Foundation.h>\n\n@interface Car : NSObject\n@property(nonatomic, strong) NSString *name;\n+(Car *)initWithName:(NSString *)name;\n@end\n```\n\n```objc\n//Person.h\n#import <Foundation/Foundation.h>\n#import \"Car.h\"\n\n@interface Person : NSObject\n{\n    int age;\n    NSString *name;\n    Car *car;\n}\n+(Person *)personWithAge:(int)age withName:(NSString *)name withCar:(Car *)car;\n-(NSString *)description;\n@end\n\n```\n\n```objc\n//Car.m\n#import \"Car.h\"\n@implementation Car\n\n@synthesize name = _name;\n\n+(Car *)initWithName:(NSString *)name{\n    Car *car = [[Car alloc] init];\n    car.name = name;\n    return car;\n}\n\n@end\n```\n\n```objc\n//Person.m\n#import \"Person.h\"\n#import \"Car.h\"\n@implementation Person\n\n+(Person *)personWithAge:(int)age withName:(NSString *)name withCar:(Car *)car{\n    Person *person = [[Person alloc] init];\n    person->age = age;\n    person->name = name;\n    person->car = car;\n    return person;\n}\n\n-(NSString *)description{\n    return [NSString stringWithFormat:@\"age is %i , name is %@, car is %@\",age,name,car.name];\n}\n@end\n```\n\n```log\n2020-04-17 17:04:05.775056+0800 DemoProgram[55124:1325210] (\n    \"age is 21 , name is zhangsan, car is Audio\",\n    \"age is 23 , name is wangwu, car is BMW\",\n    \"age is 23 , name is wangwu, car is Rolls-Royce\",\n    \"age is 23 , name is zhangsan, car is Rolls-Royce\",\n    \"age is 24 , name is lisi, car is Audio\"\n)\nProgram ended with exit code: 0\n```\n\n### 关于字典对象 \n词典 (dictionary) 是由键——对象对组成的数据集合。通过对象的键可以从`Objective-C`词典中获取需要的对象。词典中的键必须是单值的，通常它们是字符串，但也可以是其他对象类型。和键关联的值可以是任何对象类型，但不能是nil。词典可以是固定的，也可以是可变的。可变词典中的记录可以动态添加和删除。可以使用键检索词典，也可以枚举它们的内容。\n```objc\n#import <Foundation/Foundation.h>\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSMutableDictionary *dict = [NSMutableDictionary dictionary];\n        dict[@\"key1\"] = @\"This is key 1\";\n        dict[@\"key2\"] = @\"This is key 2\";\n        dict[@\"key3\"] = @\"This is key 3\";\n        \n        NSLog(@\"Key note for Key 1: %@\",dict[@\"key1\"]);\n        NSLog(@\"Key note for Key 2: %@\",dict[@\"key2\"]);\n        NSLog(@\"Key note for Key 3: %@\",dict[@\"key3\"]);\n    }\n    return 0;\n}\n```\n\n```objc\n#import <Foundation/Foundation.h>\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSMutableDictionary *dict = [NSMutableDictionary dictionary];\n        [dict setObject:@\"This is key 1\" forKey:@\"key1\"];\n        [dict setObject:@\"This is key 1\" forKey:@\"key2\"];\n        [dict setObject:@\"This is key 3\" forKey:@\"key3\"];\n        \n        NSLog(@\"Key note for Key 1: %@\",[dict objectForKey:@\"key1\"]);\n        NSLog(@\"Key note for Key 2: %@\",[dict objectForKey:@\"key2\"]);\n        NSLog(@\"Key note for Key 3: %@\",[dict objectForKey:@\"key3\"]);\n    }\n    return 0;\n}\n```\n需要注意的是若Key存在重复则会出现无法显示某一重复Key问题.\n创建词典后可以利用循环语句枚举词典的内容。\n键从词典中依次检索,没有特定顺序。\n```objc\n#import <Foundation/Foundation.h>\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSDictionary *dict = [NSDictionary dictionaryWithObjectsAndKeys:\n                                     @\"This is key 1\",@\"key1\",\n                                     @\"This is key 2\",@\"key2\",\n                                     @\"This is key 3\",@\"key3\",\n                              nil];\n        for (NSDictionary *dictItem in dict ) {\n            NSLog(@\"%@:%@\",dictItem,[dict objectForKey:dictItem]);\n        }\n    }\n    return 0;\n}\n```\n### 关于集合对象\nSet是一组单值对象集合，可以是可变的，也可以是不变的。Set的操作包括搜索、添加、删除集合中的成员(仅用于可变集合)，比较两个集合，计算两个集合的交集和并集等，这些操作在示例程序中得以体现。\n\n需要注意的是 NSCountedSet，该Set中同一对象可以出现多次，然而在 NSCountedSet 中并非存放了多个对象，而是维护一个次数计数。第一次将对象添加到集合中时，对象的 count 值被置为1,然后每次将该对象添加到集合中 count 值就会增1, 相应地，每次从集合删除对象，count 值就会减1。当对象的 count 值为零时，实际上对象本身就被删除了。\n\n示例程序对 NSSet、 NSMutableSet、NSCountedSet 和 NSIndexSet进行了演示。\n```objc\n#import <Foundation/Foundation.h>\n\n@interface NSSet (Printing)\n-(void) print;\n@end\n\n@implementation NSSet (Printing)\n- (void) print {\n    printf(\"{\");\n    for (NSNumber *element in self)\n        printf(\"%li\",(long)[element integerValue]);\n    printf(\"}\\n\");\n}\n@end\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSMutableSet *set1 = [NSMutableSet setWithObjects:@1, @3, @5,  @7, nil];\n        NSSet *set2 = [NSSet setWithObjects:@2, @4, @6, @8, nil];\n        NSCountedSet *set3 = [NSCountedSet setWithObjects:@1, @1, @3, @5, nil];\n \n        NSIndexSet * indexSet1 = [[NSIndexSet alloc] initWithIndexesInRange:NSMakeRange(1,3)];\n        NSMutableIndexSet *indexSet2 =[[NSMutableIndexSet alloc] init];\n        [indexSet2 addIndex:0];\n        [indexSet2 addIndex:3];\n        [indexSet2 addIndex:5];\n        \n        unsigned long index;\n        NSLog(@\"IndexSet1:\");\n        for (index = [indexSet1 firstIndex];\n             index != NSNotFound;\n             index = [indexSet1 indexGreaterThanIndex: index])  {\n            NSLog(@\"%lu\",index);\n        }\n        \n        NSLog(@\"IndexSet2:\");\n        for (index = [indexSet2 firstIndex];\n             index != NSNotFound;\n             index = [indexSet2 indexGreaterThanIndex: index])  {\n            NSLog(@\"%lu\",index);\n        }\n        \n        NSLog(@\"Set1:\");\n        [set1 print];\n        NSLog(@\"Set2:\");\n        [set2 print];\n        NSLog(@\"Set3:\");\n        [set3 print];\n        \n        if([set1 isEqualToSet: set2] == YES)\n            NSLog(@\"Set 1 equals set2\");\n        else\n            NSLog(@\"Set 1 is not equal to Set2\");\n        \n        if([set1 containsObject: @1]){\n            NSLog(@\"Set1 contains element 1\");\n        }else{\n            NSLog(@\"Set1 does not contains element 1\");\n        }\n        \n        NSLog(@\"The count of 1 in Set3: %lu\",(unsigned long)[set3 countForObject:@1]);\n        [set1 addObject:@2];\n        [set1 removeObject:@1];\n        [set1 print];\n        [set1 intersectSet:set2];\n        [set1 print];\n        [set1 unionSet:set2];\n        [set1 print];\n        \n    }\n    return 0;\n}\n\n```\n相应的运行结果为：\n```log\n2020-04-17 11:40:23.646162+0800 DemoProgram[51926:1202542] IndexSet1:\n2020-04-17 11:40:23.646584+0800 DemoProgram[51926:1202542] 1\n2020-04-17 11:40:23.646627+0800 DemoProgram[51926:1202542] 2\n2020-04-17 11:40:23.646679+0800 DemoProgram[51926:1202542] 3\n2020-04-17 11:40:23.646733+0800 DemoProgram[51926:1202542] IndexSet2:\n2020-04-17 11:40:23.646762+0800 DemoProgram[51926:1202542] 0\n2020-04-17 11:40:23.646786+0800 DemoProgram[51926:1202542] 3\n2020-04-17 11:40:23.646808+0800 DemoProgram[51926:1202542] 5\n2020-04-17 11:40:23.646825+0800 DemoProgram[51926:1202542] Set1:\n{7351}\n2020-04-17 11:40:23.646871+0800 DemoProgram[51926:1202542] Set2:\n{6284}\n2020-04-17 11:40:23.646898+0800 DemoProgram[51926:1202542] Set3:\n{315}\n2020-04-17 11:40:23.646934+0800 DemoProgram[51926:1202542] Set 1 is not equal to Set2\n2020-04-17 11:40:23.646957+0800 DemoProgram[51926:1202542] Set1 contains element 1\n2020-04-17 11:40:23.646979+0800 DemoProgram[51926:1202542] The count of 1 in Set3: 2\n{7325}\n{2}\n{6284}\nProgram ended with exit code: 0\n```\n\n### 其他总结\n根据写代码过程中遇到的一些问题查找的答案做一些阶段性总结。\n#### 实例变量的范围类型\n**@private**\n该类型的实例变量只有声明它的类能够访问它。\n**@protected**\n该类型的实例变量能被声明它的类和子类访问。\n所有没有显式标识范围的实例变量默认为 @protected。\n**@public**\n该类型实例变量可以在任何地方被访问。\n**@package**\n在modern runtime下，@package 实例变量的范围在实现这个类的可执行文件镜像中是@public，但是在实现这个类的可执行文件镜像外部是 @private。\nObjective-C 中的 @package 与 C 语言中变量和函数的 private_extern 类似，任何在实现类的镜像外的代码想使用这个实例变量都会引发link error错误。\n@package 对于框架类的实例变量十分受用，在这种环境下使用 @private 可能太受限制，使用@protected 或者 @public 又过于开放。@package 类型的变量在 Framework 内部相当于 @protected，在 Framework 外部，相当于@private。\n\n#### 类方法与实例方法\n- 实例方法在类的具体实例的范围内执行，在调用一个实例方法前必须首先创建类的实例。需要在方法声明前加上“-”，表示实例（对象）方法 (动态方法)。\n- 类方法不需要创建实例，不依赖于对象，直接用类名调用，执行效率较高；当方法内部不需要使用成员变量时，就可以使用类方法。需要在方法生命前加上“-”，表示类方法 (静态方法)。\n\n#### 声明方式\n在网上查找资料时发现属性声明存在三种方式，通过查资料对三种方式进行总结\n1. 直接在 @interface 中声明。该方法声明的成员变量只能在类内部使用，即不能通过类名. 点的方式访问变量，需要使用 -> 的方式。\n\n```objc \n@interface Test : NSObject{\n    NSString *test;\n}\n``` \n\n1. 在@interface中声明，然后再在@property中声明。该方法为过时的声明变量方式，Xcode 在早期 @systhesize 没有自动合成属性器之前，需要手写 getter 与 setter 方法。在Xcode有自动合成属性器后，编译器会自动生成一个以下划线开头的的实例变量，所以不必同时声明属性与变量。即可以直接用 @property 声明一个成员属性，在 .m 文件中无需使用 @systhesize，Xcode 会自动生成 getter 与 setter.\n\n```objc \n@interface Test : NSObject{\n    NSString *_test;\n}\n@property (strong, nonatomic) NSString *mystr; \n```\n同时在.m文件中插入\n```objc \n@synthesize mystr = _myStr;\n```\n\n3. 直接用@property声明。该方法声明的成员变量能够在类内部和外部使用，在类的内部可以通过下划线+变量名 或 self.变量名 的方式来访问变量。\n\n```objc \n@interface Test : NSObject{\n}\n@property (strong, nonatomic) NSString *test;\n```\n同时在.m文件中插入\n```objc \n@synthesize test = _test;\n```\n\n### 参考\n[Objective-C 程序设计 (第六版)]()\n[Objective C中数组排序几种情况的总结](https://my.oschina.net/pengloo53/blog/173810)\n[Objective-C入门教程14：集合对象(NSSet,NSMutableSet,NSIndexSet)](https://liuzhichao.com/p/1256.html)\n[iOS中四种实例变量的范围类型](https://www.cnblogs.com/stevenwuzheng/p/4605232.html)\n[OC声明变量在@interface括号中与使用@property的区别](https://blog.csdn.net/shenjie12345678/article/details/39052659)\n","source":"_posts/Objc_Learning_6.md","raw":"---\ntitle: Objective-C 学习笔记(六）\ndate: 2020-04-17 17:43:20\ncategories: \n- tech\ntags: \n- iOS\n- Xcode\n- Objective-C\ncopyright: true\n---\n\n最近开始学习 `Objective-C` 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第六篇文章，主要复习了 `Objective-C` Foundation 框架中关于数组排序、字典对象以及集合对象的内容。\n\n<!--more-->\n\n### 关于数组排序\n#### 简单排序示例\n`Objective-C` 中对于 NSArray 排序方法主要有以下几种。\n```\nsortedArrayUsingSelector:\nsortedArrayUsingComparator:\nsortedArrayUsingDescriptors:\n```\n给出前两者排序的简单示例，如果只是对字符串简单做排序，sortedArrayUsingSelector:方法已足够，sortedArrayUsingComparator: 中用到了block内容。\n\n```objc\n#import <Foundation/Foundation.h>\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSArray *array = [NSArray arrayWithObjects:@\"abc\",@\"456\",@\"123\",@\"789\",@\"ef\", nil];\n        \n        //sortedArrayUsingSelector\n        NSArray *sortedArray1 = [array sortedArrayUsingSelector:@selector(compare:)];\n        NSLog(@\"SortedArray1:\");\n        NSLog(@\"%@\",sortedArray1);\n        \n        //sortedArrayUsingComparator:\n        NSArray *sortedArray2 = [array sortedArrayUsingComparator:^NSComparisonResult(id obj1, id obj2) {\n             NSComparisonResult result = [obj1 compare:obj2];\n             return result;\n         }];\n         NSLog(@\"SortedArray2:\");\n         NSLog(@\"%@\",sortedArray2);\n    }\n    return 0;\n}\n```\n\n#### 使用区块排序\nNSArray和NSMutableArray类中具有使用区块对数组中元素进行排序的方法。\nNSArray的排序方法一般格式为: \n```objc\n- (NSArray *) sortedArrayUsingComparator: (NSComparator) block\n```\nNSMutableArray的排序方法格式为: \n```objc\n- (void) sortUsingComparator: (NSComparator) block\n```\nNSComparator作为typedef定义在系统头文件中:\n```objc\ntypedef NSComparisonResult (^NSComparator) (id obj1, id obj2);\n```\n\nNSComparator是一个区块，使用两个待比较对象作为参数，并返回 NSComparisonResult 类型的值。预期会返回一个标识，说明第一个对象是否小于、等于或者大于第二个对象，这一点与不使用区块的数组排序方法是一致的。区块对于大数组排序能够提升一些速度，可以考虑在程序中使用。\n\n#### 关于描述器排序\n给出使用描述器排序的一个代码样例。\n代码中定义了三种车与五个人，并将车与人的信息载入数组，通过构建排序描述器，将排序描述器按照一定顺序放入数组，最后能够按照你所期望的顺序对信息进行输出，因为代码中重写了description，故能够按照格式进行输出。\n```objc\n//main.m\n#import <Foundation/Foundation.h>\n#import \"Car.h\"\n#import \"Person.h\"\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n            Car *car1 = [Car initWithName:@\"Audio\"];\n            Car *car2 = [Car initWithName:@\"Rolls-Royce\"];\n            Car *car3 = [Car initWithName:@\"BMW\"];\n            \n            Person *p1 = [Person personWithAge:23 withName:@\"zhangsan\" withCar:car2];\n            Person *p2 = [Person personWithAge:21 withName:@\"zhangsan\" withCar:car1];\n            Person *p3 = [Person personWithAge:24 withName:@\"lisi\" withCar:car1];\n            Person *p4 = [Person personWithAge:23 withName:@\"wangwu\" withCar:car3];\n            Person *p5 = [Person personWithAge:23 withName:@\"wangwu\" withCar:car2];\n\n            NSArray *array = [NSArray arrayWithObjects:p1,p2,p3,p4,p5, nil];\n            \n            NSSortDescriptor *carNameDesc = [NSSortDescriptor sortDescriptorWithKey:@\"car.name\" ascending:YES];\n            NSSortDescriptor *personNameDesc = [NSSortDescriptor sortDescriptorWithKey:@\"name\" ascending:YES];\n            NSSortDescriptor *personAgeDesc = [NSSortDescriptor sortDescriptorWithKey:@\"age\" ascending:YES];\n            \n            NSArray *descriptorArray = [NSArray arrayWithObjects:personAgeDesc,carNameDesc,personNameDesc, nil];\n            \n            NSArray *sortedArray = [array sortedArrayUsingDescriptors: descriptorArray];\n            NSLog(@\"%@\",sortedArray);\n    }\n    return 0;\n}\n\n```\n\n```objc\n//Car.h\n#import <Foundation/Foundation.h>\n\n@interface Car : NSObject\n@property(nonatomic, strong) NSString *name;\n+(Car *)initWithName:(NSString *)name;\n@end\n```\n\n```objc\n//Person.h\n#import <Foundation/Foundation.h>\n#import \"Car.h\"\n\n@interface Person : NSObject\n{\n    int age;\n    NSString *name;\n    Car *car;\n}\n+(Person *)personWithAge:(int)age withName:(NSString *)name withCar:(Car *)car;\n-(NSString *)description;\n@end\n\n```\n\n```objc\n//Car.m\n#import \"Car.h\"\n@implementation Car\n\n@synthesize name = _name;\n\n+(Car *)initWithName:(NSString *)name{\n    Car *car = [[Car alloc] init];\n    car.name = name;\n    return car;\n}\n\n@end\n```\n\n```objc\n//Person.m\n#import \"Person.h\"\n#import \"Car.h\"\n@implementation Person\n\n+(Person *)personWithAge:(int)age withName:(NSString *)name withCar:(Car *)car{\n    Person *person = [[Person alloc] init];\n    person->age = age;\n    person->name = name;\n    person->car = car;\n    return person;\n}\n\n-(NSString *)description{\n    return [NSString stringWithFormat:@\"age is %i , name is %@, car is %@\",age,name,car.name];\n}\n@end\n```\n\n```log\n2020-04-17 17:04:05.775056+0800 DemoProgram[55124:1325210] (\n    \"age is 21 , name is zhangsan, car is Audio\",\n    \"age is 23 , name is wangwu, car is BMW\",\n    \"age is 23 , name is wangwu, car is Rolls-Royce\",\n    \"age is 23 , name is zhangsan, car is Rolls-Royce\",\n    \"age is 24 , name is lisi, car is Audio\"\n)\nProgram ended with exit code: 0\n```\n\n### 关于字典对象 \n词典 (dictionary) 是由键——对象对组成的数据集合。通过对象的键可以从`Objective-C`词典中获取需要的对象。词典中的键必须是单值的，通常它们是字符串，但也可以是其他对象类型。和键关联的值可以是任何对象类型，但不能是nil。词典可以是固定的，也可以是可变的。可变词典中的记录可以动态添加和删除。可以使用键检索词典，也可以枚举它们的内容。\n```objc\n#import <Foundation/Foundation.h>\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSMutableDictionary *dict = [NSMutableDictionary dictionary];\n        dict[@\"key1\"] = @\"This is key 1\";\n        dict[@\"key2\"] = @\"This is key 2\";\n        dict[@\"key3\"] = @\"This is key 3\";\n        \n        NSLog(@\"Key note for Key 1: %@\",dict[@\"key1\"]);\n        NSLog(@\"Key note for Key 2: %@\",dict[@\"key2\"]);\n        NSLog(@\"Key note for Key 3: %@\",dict[@\"key3\"]);\n    }\n    return 0;\n}\n```\n\n```objc\n#import <Foundation/Foundation.h>\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSMutableDictionary *dict = [NSMutableDictionary dictionary];\n        [dict setObject:@\"This is key 1\" forKey:@\"key1\"];\n        [dict setObject:@\"This is key 1\" forKey:@\"key2\"];\n        [dict setObject:@\"This is key 3\" forKey:@\"key3\"];\n        \n        NSLog(@\"Key note for Key 1: %@\",[dict objectForKey:@\"key1\"]);\n        NSLog(@\"Key note for Key 2: %@\",[dict objectForKey:@\"key2\"]);\n        NSLog(@\"Key note for Key 3: %@\",[dict objectForKey:@\"key3\"]);\n    }\n    return 0;\n}\n```\n需要注意的是若Key存在重复则会出现无法显示某一重复Key问题.\n创建词典后可以利用循环语句枚举词典的内容。\n键从词典中依次检索,没有特定顺序。\n```objc\n#import <Foundation/Foundation.h>\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSDictionary *dict = [NSDictionary dictionaryWithObjectsAndKeys:\n                                     @\"This is key 1\",@\"key1\",\n                                     @\"This is key 2\",@\"key2\",\n                                     @\"This is key 3\",@\"key3\",\n                              nil];\n        for (NSDictionary *dictItem in dict ) {\n            NSLog(@\"%@:%@\",dictItem,[dict objectForKey:dictItem]);\n        }\n    }\n    return 0;\n}\n```\n### 关于集合对象\nSet是一组单值对象集合，可以是可变的，也可以是不变的。Set的操作包括搜索、添加、删除集合中的成员(仅用于可变集合)，比较两个集合，计算两个集合的交集和并集等，这些操作在示例程序中得以体现。\n\n需要注意的是 NSCountedSet，该Set中同一对象可以出现多次，然而在 NSCountedSet 中并非存放了多个对象，而是维护一个次数计数。第一次将对象添加到集合中时，对象的 count 值被置为1,然后每次将该对象添加到集合中 count 值就会增1, 相应地，每次从集合删除对象，count 值就会减1。当对象的 count 值为零时，实际上对象本身就被删除了。\n\n示例程序对 NSSet、 NSMutableSet、NSCountedSet 和 NSIndexSet进行了演示。\n```objc\n#import <Foundation/Foundation.h>\n\n@interface NSSet (Printing)\n-(void) print;\n@end\n\n@implementation NSSet (Printing)\n- (void) print {\n    printf(\"{\");\n    for (NSNumber *element in self)\n        printf(\"%li\",(long)[element integerValue]);\n    printf(\"}\\n\");\n}\n@end\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSMutableSet *set1 = [NSMutableSet setWithObjects:@1, @3, @5,  @7, nil];\n        NSSet *set2 = [NSSet setWithObjects:@2, @4, @6, @8, nil];\n        NSCountedSet *set3 = [NSCountedSet setWithObjects:@1, @1, @3, @5, nil];\n \n        NSIndexSet * indexSet1 = [[NSIndexSet alloc] initWithIndexesInRange:NSMakeRange(1,3)];\n        NSMutableIndexSet *indexSet2 =[[NSMutableIndexSet alloc] init];\n        [indexSet2 addIndex:0];\n        [indexSet2 addIndex:3];\n        [indexSet2 addIndex:5];\n        \n        unsigned long index;\n        NSLog(@\"IndexSet1:\");\n        for (index = [indexSet1 firstIndex];\n             index != NSNotFound;\n             index = [indexSet1 indexGreaterThanIndex: index])  {\n            NSLog(@\"%lu\",index);\n        }\n        \n        NSLog(@\"IndexSet2:\");\n        for (index = [indexSet2 firstIndex];\n             index != NSNotFound;\n             index = [indexSet2 indexGreaterThanIndex: index])  {\n            NSLog(@\"%lu\",index);\n        }\n        \n        NSLog(@\"Set1:\");\n        [set1 print];\n        NSLog(@\"Set2:\");\n        [set2 print];\n        NSLog(@\"Set3:\");\n        [set3 print];\n        \n        if([set1 isEqualToSet: set2] == YES)\n            NSLog(@\"Set 1 equals set2\");\n        else\n            NSLog(@\"Set 1 is not equal to Set2\");\n        \n        if([set1 containsObject: @1]){\n            NSLog(@\"Set1 contains element 1\");\n        }else{\n            NSLog(@\"Set1 does not contains element 1\");\n        }\n        \n        NSLog(@\"The count of 1 in Set3: %lu\",(unsigned long)[set3 countForObject:@1]);\n        [set1 addObject:@2];\n        [set1 removeObject:@1];\n        [set1 print];\n        [set1 intersectSet:set2];\n        [set1 print];\n        [set1 unionSet:set2];\n        [set1 print];\n        \n    }\n    return 0;\n}\n\n```\n相应的运行结果为：\n```log\n2020-04-17 11:40:23.646162+0800 DemoProgram[51926:1202542] IndexSet1:\n2020-04-17 11:40:23.646584+0800 DemoProgram[51926:1202542] 1\n2020-04-17 11:40:23.646627+0800 DemoProgram[51926:1202542] 2\n2020-04-17 11:40:23.646679+0800 DemoProgram[51926:1202542] 3\n2020-04-17 11:40:23.646733+0800 DemoProgram[51926:1202542] IndexSet2:\n2020-04-17 11:40:23.646762+0800 DemoProgram[51926:1202542] 0\n2020-04-17 11:40:23.646786+0800 DemoProgram[51926:1202542] 3\n2020-04-17 11:40:23.646808+0800 DemoProgram[51926:1202542] 5\n2020-04-17 11:40:23.646825+0800 DemoProgram[51926:1202542] Set1:\n{7351}\n2020-04-17 11:40:23.646871+0800 DemoProgram[51926:1202542] Set2:\n{6284}\n2020-04-17 11:40:23.646898+0800 DemoProgram[51926:1202542] Set3:\n{315}\n2020-04-17 11:40:23.646934+0800 DemoProgram[51926:1202542] Set 1 is not equal to Set2\n2020-04-17 11:40:23.646957+0800 DemoProgram[51926:1202542] Set1 contains element 1\n2020-04-17 11:40:23.646979+0800 DemoProgram[51926:1202542] The count of 1 in Set3: 2\n{7325}\n{2}\n{6284}\nProgram ended with exit code: 0\n```\n\n### 其他总结\n根据写代码过程中遇到的一些问题查找的答案做一些阶段性总结。\n#### 实例变量的范围类型\n**@private**\n该类型的实例变量只有声明它的类能够访问它。\n**@protected**\n该类型的实例变量能被声明它的类和子类访问。\n所有没有显式标识范围的实例变量默认为 @protected。\n**@public**\n该类型实例变量可以在任何地方被访问。\n**@package**\n在modern runtime下，@package 实例变量的范围在实现这个类的可执行文件镜像中是@public，但是在实现这个类的可执行文件镜像外部是 @private。\nObjective-C 中的 @package 与 C 语言中变量和函数的 private_extern 类似，任何在实现类的镜像外的代码想使用这个实例变量都会引发link error错误。\n@package 对于框架类的实例变量十分受用，在这种环境下使用 @private 可能太受限制，使用@protected 或者 @public 又过于开放。@package 类型的变量在 Framework 内部相当于 @protected，在 Framework 外部，相当于@private。\n\n#### 类方法与实例方法\n- 实例方法在类的具体实例的范围内执行，在调用一个实例方法前必须首先创建类的实例。需要在方法声明前加上“-”，表示实例（对象）方法 (动态方法)。\n- 类方法不需要创建实例，不依赖于对象，直接用类名调用，执行效率较高；当方法内部不需要使用成员变量时，就可以使用类方法。需要在方法生命前加上“-”，表示类方法 (静态方法)。\n\n#### 声明方式\n在网上查找资料时发现属性声明存在三种方式，通过查资料对三种方式进行总结\n1. 直接在 @interface 中声明。该方法声明的成员变量只能在类内部使用，即不能通过类名. 点的方式访问变量，需要使用 -> 的方式。\n\n```objc \n@interface Test : NSObject{\n    NSString *test;\n}\n``` \n\n1. 在@interface中声明，然后再在@property中声明。该方法为过时的声明变量方式，Xcode 在早期 @systhesize 没有自动合成属性器之前，需要手写 getter 与 setter 方法。在Xcode有自动合成属性器后，编译器会自动生成一个以下划线开头的的实例变量，所以不必同时声明属性与变量。即可以直接用 @property 声明一个成员属性，在 .m 文件中无需使用 @systhesize，Xcode 会自动生成 getter 与 setter.\n\n```objc \n@interface Test : NSObject{\n    NSString *_test;\n}\n@property (strong, nonatomic) NSString *mystr; \n```\n同时在.m文件中插入\n```objc \n@synthesize mystr = _myStr;\n```\n\n3. 直接用@property声明。该方法声明的成员变量能够在类内部和外部使用，在类的内部可以通过下划线+变量名 或 self.变量名 的方式来访问变量。\n\n```objc \n@interface Test : NSObject{\n}\n@property (strong, nonatomic) NSString *test;\n```\n同时在.m文件中插入\n```objc \n@synthesize test = _test;\n```\n\n### 参考\n[Objective-C 程序设计 (第六版)]()\n[Objective C中数组排序几种情况的总结](https://my.oschina.net/pengloo53/blog/173810)\n[Objective-C入门教程14：集合对象(NSSet,NSMutableSet,NSIndexSet)](https://liuzhichao.com/p/1256.html)\n[iOS中四种实例变量的范围类型](https://www.cnblogs.com/stevenwuzheng/p/4605232.html)\n[OC声明变量在@interface括号中与使用@property的区别](https://blog.csdn.net/shenjie12345678/article/details/39052659)\n","slug":"Objc_Learning_6","published":1,"updated":"2020-04-17T10:10:04.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcive9ng0013cv6bdmqo7ujo","content":"<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第六篇文章，主要复习了 <code>Objective-C</code> Foundation 框架中关于数组排序、字典对象以及集合对象的内容。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"关于数组排序\"><a href=\"#关于数组排序\" class=\"headerlink\" title=\"关于数组排序\"></a>关于数组排序</h3><h4 id=\"简单排序示例\"><a href=\"#简单排序示例\" class=\"headerlink\" title=\"简单排序示例\"></a>简单排序示例</h4><p><code>Objective-C</code> 中对于 NSArray 排序方法主要有以下几种。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedArrayUsingSelector:</span><br><span class=\"line\">sortedArrayUsingComparator:</span><br><span class=\"line\">sortedArrayUsingDescriptors:</span><br></pre></td></tr></table></figure>\n<p>给出前两者排序的简单示例，如果只是对字符串简单做排序，sortedArrayUsingSelector:方法已足够，sortedArrayUsingComparator: 中用到了block内容。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSArray</span> *array = [<span class=\"built_in\">NSArray</span> arrayWithObjects:<span class=\"string\">@\"abc\"</span>,<span class=\"string\">@\"456\"</span>,<span class=\"string\">@\"123\"</span>,<span class=\"string\">@\"789\"</span>,<span class=\"string\">@\"ef\"</span>, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//sortedArrayUsingSelector</span></span><br><span class=\"line\">        <span class=\"built_in\">NSArray</span> *sortedArray1 = [array sortedArrayUsingSelector:<span class=\"keyword\">@selector</span>(compare:)];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"SortedArray1:\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,sortedArray1);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//sortedArrayUsingComparator:</span></span><br><span class=\"line\">        <span class=\"built_in\">NSArray</span> *sortedArray2 = [array sortedArrayUsingComparator:^<span class=\"built_in\">NSComparisonResult</span>(<span class=\"keyword\">id</span> obj1, <span class=\"keyword\">id</span> obj2) &#123;</span><br><span class=\"line\">             <span class=\"built_in\">NSComparisonResult</span> result = [obj1 compare:obj2];</span><br><span class=\"line\">             <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">         &#125;];</span><br><span class=\"line\">         <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"SortedArray2:\"</span>);</span><br><span class=\"line\">         <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,sortedArray2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用区块排序\"><a href=\"#使用区块排序\" class=\"headerlink\" title=\"使用区块排序\"></a>使用区块排序</h4><p>NSArray和NSMutableArray类中具有使用区块对数组中元素进行排序的方法。<br>NSArray的排序方法一般格式为: </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSArray</span> *) sortedArrayUsingComparator: (<span class=\"built_in\">NSComparator</span>) block</span><br></pre></td></tr></table></figure>\n<p>NSMutableArray的排序方法格式为: </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>) sortUsingComparator: (<span class=\"built_in\">NSComparator</span>) block</span><br></pre></td></tr></table></figure>\n<p>NSComparator作为typedef定义在系统头文件中:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NSComparisonResult</span> (^<span class=\"built_in\">NSComparator</span>) (<span class=\"keyword\">id</span> obj1, <span class=\"keyword\">id</span> obj2);</span><br></pre></td></tr></table></figure>\n\n<p>NSComparator是一个区块，使用两个待比较对象作为参数，并返回 NSComparisonResult 类型的值。预期会返回一个标识，说明第一个对象是否小于、等于或者大于第二个对象，这一点与不使用区块的数组排序方法是一致的。区块对于大数组排序能够提升一些速度，可以考虑在程序中使用。</p>\n<h4 id=\"关于描述器排序\"><a href=\"#关于描述器排序\" class=\"headerlink\" title=\"关于描述器排序\"></a>关于描述器排序</h4><p>给出使用描述器排序的一个代码样例。<br>代码中定义了三种车与五个人，并将车与人的信息载入数组，通过构建排序描述器，将排序描述器按照一定顺序放入数组，最后能够按照你所期望的顺序对信息进行输出，因为代码中重写了description，故能够按照格式进行输出。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.m</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"Car.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"Person.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">            Car *car1 = [Car initWithName:<span class=\"string\">@\"Audio\"</span>];</span><br><span class=\"line\">            Car *car2 = [Car initWithName:<span class=\"string\">@\"Rolls-Royce\"</span>];</span><br><span class=\"line\">            Car *car3 = [Car initWithName:<span class=\"string\">@\"BMW\"</span>];</span><br><span class=\"line\">            </span><br><span class=\"line\">            Person *p1 = [Person personWithAge:<span class=\"number\">23</span> withName:<span class=\"string\">@\"zhangsan\"</span> withCar:car2];</span><br><span class=\"line\">            Person *p2 = [Person personWithAge:<span class=\"number\">21</span> withName:<span class=\"string\">@\"zhangsan\"</span> withCar:car1];</span><br><span class=\"line\">            Person *p3 = [Person personWithAge:<span class=\"number\">24</span> withName:<span class=\"string\">@\"lisi\"</span> withCar:car1];</span><br><span class=\"line\">            Person *p4 = [Person personWithAge:<span class=\"number\">23</span> withName:<span class=\"string\">@\"wangwu\"</span> withCar:car3];</span><br><span class=\"line\">            Person *p5 = [Person personWithAge:<span class=\"number\">23</span> withName:<span class=\"string\">@\"wangwu\"</span> withCar:car2];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">NSArray</span> *array = [<span class=\"built_in\">NSArray</span> arrayWithObjects:p1,p2,p3,p4,p5, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"built_in\">NSSortDescriptor</span> *carNameDesc = [<span class=\"built_in\">NSSortDescriptor</span> sortDescriptorWithKey:<span class=\"string\">@\"car.name\"</span> ascending:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">            <span class=\"built_in\">NSSortDescriptor</span> *personNameDesc = [<span class=\"built_in\">NSSortDescriptor</span> sortDescriptorWithKey:<span class=\"string\">@\"name\"</span> ascending:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">            <span class=\"built_in\">NSSortDescriptor</span> *personAgeDesc = [<span class=\"built_in\">NSSortDescriptor</span> sortDescriptorWithKey:<span class=\"string\">@\"age\"</span> ascending:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"built_in\">NSArray</span> *descriptorArray = [<span class=\"built_in\">NSArray</span> arrayWithObjects:personAgeDesc,carNameDesc,personNameDesc, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"built_in\">NSArray</span> *sortedArray = [array sortedArrayUsingDescriptors: descriptorArray];</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,sortedArray);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Car.h</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Car</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSString</span> *name;</span><br><span class=\"line\">+(Car *)initWithName:(<span class=\"built_in\">NSString</span> *)name;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Person.h</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"Car.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *name;</span><br><span class=\"line\">    Car *car;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">+(Person *)personWithAge:(<span class=\"keyword\">int</span>)age withName:(<span class=\"built_in\">NSString</span> *)name withCar:(Car *)car;</span><br><span class=\"line\">-(<span class=\"built_in\">NSString</span> *)description;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Car.m</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"Car.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Car</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@synthesize</span> name = _name;</span><br><span class=\"line\"></span><br><span class=\"line\">+(Car *)initWithName:(<span class=\"built_in\">NSString</span> *)name&#123;</span><br><span class=\"line\">    Car *car = [[Car alloc] init];</span><br><span class=\"line\">    car.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> car;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Person.m</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"Person.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"Car.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">+(Person *)personWithAge:(<span class=\"keyword\">int</span>)age withName:(<span class=\"built_in\">NSString</span> *)name withCar:(Car *)car&#123;</span><br><span class=\"line\">    Person *person = [[Person alloc] init];</span><br><span class=\"line\">    person-&gt;age = age;</span><br><span class=\"line\">    person-&gt;name = name;</span><br><span class=\"line\">    person-&gt;car = car;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"built_in\">NSString</span> *)description&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"age is %i , name is %@, car is %@\"</span>,age,name,car.name];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020-04-17 17:04:05.775056+0800 DemoProgram[55124:1325210] (</span><br><span class=\"line\">    &quot;age is 21 , name is zhangsan, car is Audio&quot;,</span><br><span class=\"line\">    &quot;age is 23 , name is wangwu, car is BMW&quot;,</span><br><span class=\"line\">    &quot;age is 23 , name is wangwu, car is Rolls-Royce&quot;,</span><br><span class=\"line\">    &quot;age is 23 , name is zhangsan, car is Rolls-Royce&quot;,</span><br><span class=\"line\">    &quot;age is 24 , name is lisi, car is Audio&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\">Program ended with exit code: 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于字典对象\"><a href=\"#关于字典对象\" class=\"headerlink\" title=\"关于字典对象\"></a>关于字典对象</h3><p>词典 (dictionary) 是由键——对象对组成的数据集合。通过对象的键可以从<code>Objective-C</code>词典中获取需要的对象。词典中的键必须是单值的，通常它们是字符串，但也可以是其他对象类型。和键关联的值可以是任何对象类型，但不能是nil。词典可以是固定的，也可以是可变的。可变词典中的记录可以动态添加和删除。可以使用键检索词典，也可以枚举它们的内容。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSMutableDictionary</span> *dict = [<span class=\"built_in\">NSMutableDictionary</span> dictionary];</span><br><span class=\"line\">        dict[<span class=\"string\">@\"key1\"</span>] = <span class=\"string\">@\"This is key 1\"</span>;</span><br><span class=\"line\">        dict[<span class=\"string\">@\"key2\"</span>] = <span class=\"string\">@\"This is key 2\"</span>;</span><br><span class=\"line\">        dict[<span class=\"string\">@\"key3\"</span>] = <span class=\"string\">@\"This is key 3\"</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Key note for Key 1: %@\"</span>,dict[<span class=\"string\">@\"key1\"</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Key note for Key 2: %@\"</span>,dict[<span class=\"string\">@\"key2\"</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Key note for Key 3: %@\"</span>,dict[<span class=\"string\">@\"key3\"</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSMutableDictionary</span> *dict = [<span class=\"built_in\">NSMutableDictionary</span> dictionary];</span><br><span class=\"line\">        [dict setObject:<span class=\"string\">@\"This is key 1\"</span> forKey:<span class=\"string\">@\"key1\"</span>];</span><br><span class=\"line\">        [dict setObject:<span class=\"string\">@\"This is key 1\"</span> forKey:<span class=\"string\">@\"key2\"</span>];</span><br><span class=\"line\">        [dict setObject:<span class=\"string\">@\"This is key 3\"</span> forKey:<span class=\"string\">@\"key3\"</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Key note for Key 1: %@\"</span>,[dict objectForKey:<span class=\"string\">@\"key1\"</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Key note for Key 2: %@\"</span>,[dict objectForKey:<span class=\"string\">@\"key2\"</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Key note for Key 3: %@\"</span>,[dict objectForKey:<span class=\"string\">@\"key3\"</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是若Key存在重复则会出现无法显示某一重复Key问题.<br>创建词典后可以利用循环语句枚举词典的内容。<br>键从词典中依次检索,没有特定顺序。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSDictionary</span> *dict = [<span class=\"built_in\">NSDictionary</span> dictionaryWithObjectsAndKeys:</span><br><span class=\"line\">                                     <span class=\"string\">@\"This is key 1\"</span>,<span class=\"string\">@\"key1\"</span>,</span><br><span class=\"line\">                                     <span class=\"string\">@\"This is key 2\"</span>,<span class=\"string\">@\"key2\"</span>,</span><br><span class=\"line\">                                     <span class=\"string\">@\"This is key 3\"</span>,<span class=\"string\">@\"key3\"</span>,</span><br><span class=\"line\">                              <span class=\"literal\">nil</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">NSDictionary</span> *dictItem <span class=\"keyword\">in</span> dict ) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@:%@\"</span>,dictItem,[dict objectForKey:dictItem]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"关于集合对象\"><a href=\"#关于集合对象\" class=\"headerlink\" title=\"关于集合对象\"></a>关于集合对象</h3><p>Set是一组单值对象集合，可以是可变的，也可以是不变的。Set的操作包括搜索、添加、删除集合中的成员(仅用于可变集合)，比较两个集合，计算两个集合的交集和并集等，这些操作在示例程序中得以体现。</p>\n<p>需要注意的是 NSCountedSet，该Set中同一对象可以出现多次，然而在 NSCountedSet 中并非存放了多个对象，而是维护一个次数计数。第一次将对象添加到集合中时，对象的 count 值被置为1,然后每次将该对象添加到集合中 count 值就会增1, 相应地，每次从集合删除对象，count 值就会减1。当对象的 count 值为零时，实际上对象本身就被删除了。</p>\n<p>示例程序对 NSSet、 NSMutableSet、NSCountedSet 和 NSIndexSet进行了演示。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSSet</span> (<span class=\"title\">Printing</span>)</span></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) print;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSSet</span> (<span class=\"title\">Printing</span>)</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) print &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"&#123;\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSNumber</span> *element <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>)</span><br><span class=\"line\">        printf(<span class=\"string\">\"%li\"</span>,(<span class=\"keyword\">long</span>)[element integerValue]);</span><br><span class=\"line\">    printf(<span class=\"string\">\"&#125;\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSMutableSet</span> *set1 = [<span class=\"built_in\">NSMutableSet</span> setWithObjects:@<span class=\"number\">1</span>, @<span class=\"number\">3</span>, @<span class=\"number\">5</span>,  @<span class=\"number\">7</span>, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSSet</span> *set2 = [<span class=\"built_in\">NSSet</span> setWithObjects:@<span class=\"number\">2</span>, @<span class=\"number\">4</span>, @<span class=\"number\">6</span>, @<span class=\"number\">8</span>, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSCountedSet</span> *set3 = [<span class=\"built_in\">NSCountedSet</span> setWithObjects:@<span class=\"number\">1</span>, @<span class=\"number\">1</span>, @<span class=\"number\">3</span>, @<span class=\"number\">5</span>, <span class=\"literal\">nil</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"built_in\">NSIndexSet</span> * indexSet1 = [[<span class=\"built_in\">NSIndexSet</span> alloc] initWithIndexesInRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">1</span>,<span class=\"number\">3</span>)];</span><br><span class=\"line\">        <span class=\"built_in\">NSMutableIndexSet</span> *indexSet2 =[[<span class=\"built_in\">NSMutableIndexSet</span> alloc] init];</span><br><span class=\"line\">        [indexSet2 addIndex:<span class=\"number\">0</span>];</span><br><span class=\"line\">        [indexSet2 addIndex:<span class=\"number\">3</span>];</span><br><span class=\"line\">        [indexSet2 addIndex:<span class=\"number\">5</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> index;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"IndexSet1:\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index = [indexSet1 firstIndex];</span><br><span class=\"line\">             index != <span class=\"built_in\">NSNotFound</span>;</span><br><span class=\"line\">             index = [indexSet1 indexGreaterThanIndex: index])  &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%lu\"</span>,index);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"IndexSet2:\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index = [indexSet2 firstIndex];</span><br><span class=\"line\">             index != <span class=\"built_in\">NSNotFound</span>;</span><br><span class=\"line\">             index = [indexSet2 indexGreaterThanIndex: index])  &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%lu\"</span>,index);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Set1:\"</span>);</span><br><span class=\"line\">        [set1 print];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Set2:\"</span>);</span><br><span class=\"line\">        [set2 print];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Set3:\"</span>);</span><br><span class=\"line\">        [set3 print];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([set1 isEqualToSet: set2] == <span class=\"literal\">YES</span>)</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Set 1 equals set2\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Set 1 is not equal to Set2\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([set1 containsObject: @<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Set1 contains element 1\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Set1 does not contains element 1\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The count of 1 in Set3: %lu\"</span>,(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)[set3 countForObject:@<span class=\"number\">1</span>]);</span><br><span class=\"line\">        [set1 addObject:@<span class=\"number\">2</span>];</span><br><span class=\"line\">        [set1 removeObject:@<span class=\"number\">1</span>];</span><br><span class=\"line\">        [set1 print];</span><br><span class=\"line\">        [set1 intersectSet:set2];</span><br><span class=\"line\">        [set1 print];</span><br><span class=\"line\">        [set1 unionSet:set2];</span><br><span class=\"line\">        [set1 print];</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相应的运行结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020-04-17 11:40:23.646162+0800 DemoProgram[51926:1202542] IndexSet1:</span><br><span class=\"line\">2020-04-17 11:40:23.646584+0800 DemoProgram[51926:1202542] 1</span><br><span class=\"line\">2020-04-17 11:40:23.646627+0800 DemoProgram[51926:1202542] 2</span><br><span class=\"line\">2020-04-17 11:40:23.646679+0800 DemoProgram[51926:1202542] 3</span><br><span class=\"line\">2020-04-17 11:40:23.646733+0800 DemoProgram[51926:1202542] IndexSet2:</span><br><span class=\"line\">2020-04-17 11:40:23.646762+0800 DemoProgram[51926:1202542] 0</span><br><span class=\"line\">2020-04-17 11:40:23.646786+0800 DemoProgram[51926:1202542] 3</span><br><span class=\"line\">2020-04-17 11:40:23.646808+0800 DemoProgram[51926:1202542] 5</span><br><span class=\"line\">2020-04-17 11:40:23.646825+0800 DemoProgram[51926:1202542] Set1:</span><br><span class=\"line\">&#123;7351&#125;</span><br><span class=\"line\">2020-04-17 11:40:23.646871+0800 DemoProgram[51926:1202542] Set2:</span><br><span class=\"line\">&#123;6284&#125;</span><br><span class=\"line\">2020-04-17 11:40:23.646898+0800 DemoProgram[51926:1202542] Set3:</span><br><span class=\"line\">&#123;315&#125;</span><br><span class=\"line\">2020-04-17 11:40:23.646934+0800 DemoProgram[51926:1202542] Set 1 is not equal to Set2</span><br><span class=\"line\">2020-04-17 11:40:23.646957+0800 DemoProgram[51926:1202542] Set1 contains element 1</span><br><span class=\"line\">2020-04-17 11:40:23.646979+0800 DemoProgram[51926:1202542] The count of 1 in Set3: 2</span><br><span class=\"line\">&#123;7325&#125;</span><br><span class=\"line\">&#123;2&#125;</span><br><span class=\"line\">&#123;6284&#125;</span><br><span class=\"line\">Program ended with exit code: 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他总结\"><a href=\"#其他总结\" class=\"headerlink\" title=\"其他总结\"></a>其他总结</h3><p>根据写代码过程中遇到的一些问题查找的答案做一些阶段性总结。</p>\n<h4 id=\"实例变量的范围类型\"><a href=\"#实例变量的范围类型\" class=\"headerlink\" title=\"实例变量的范围类型\"></a>实例变量的范围类型</h4><p><strong>@private</strong><br>该类型的实例变量只有声明它的类能够访问它。<br><strong>@protected</strong><br>该类型的实例变量能被声明它的类和子类访问。<br>所有没有显式标识范围的实例变量默认为 @protected。<br><strong>@public</strong><br>该类型实例变量可以在任何地方被访问。<br><strong>@package</strong><br>在modern runtime下，@package 实例变量的范围在实现这个类的可执行文件镜像中是@public，但是在实现这个类的可执行文件镜像外部是 @private。<br>Objective-C 中的 @package 与 C 语言中变量和函数的 private_extern 类似，任何在实现类的镜像外的代码想使用这个实例变量都会引发link error错误。<br>@package 对于框架类的实例变量十分受用，在这种环境下使用 @private 可能太受限制，使用@protected 或者 @public 又过于开放。@package 类型的变量在 Framework 内部相当于 @protected，在 Framework 外部，相当于@private。</p>\n<h4 id=\"类方法与实例方法\"><a href=\"#类方法与实例方法\" class=\"headerlink\" title=\"类方法与实例方法\"></a>类方法与实例方法</h4><ul>\n<li>实例方法在类的具体实例的范围内执行，在调用一个实例方法前必须首先创建类的实例。需要在方法声明前加上“-”，表示实例（对象）方法 (动态方法)。</li>\n<li>类方法不需要创建实例，不依赖于对象，直接用类名调用，执行效率较高；当方法内部不需要使用成员变量时，就可以使用类方法。需要在方法生命前加上“-”，表示类方法 (静态方法)。</li>\n</ul>\n<h4 id=\"声明方式\"><a href=\"#声明方式\" class=\"headerlink\" title=\"声明方式\"></a>声明方式</h4><p>在网上查找资料时发现属性声明存在三种方式，通过查资料对三种方式进行总结</p>\n<ol>\n<li>直接在 @interface 中声明。该方法声明的成员变量只能在类内部使用，即不能通过类名. 点的方式访问变量，需要使用 -&gt; 的方式。</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Test</span> : <span class=\"title\">NSObject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *test;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 在<span class=\"class\"><span class=\"keyword\">@interface</span>中声明，然后再在@<span class=\"title\">property</span>中声明。该方法为过时的声明变量方式，<span class=\"title\">Xcode</span> 在早期 @<span class=\"title\">systhesize</span> 没有自动合成属性器之前，需要手写 <span class=\"title\">getter</span> 与 <span class=\"title\">setter</span> 方法。在<span class=\"title\">Xcode</span>有自动合成属性器后，编译器会自动生成一个以下划线开头的的实例变量，所以不必同时声明属性与变量。即可以直接用 @<span class=\"title\">property</span> 声明一个成员属性，在 .<span class=\"title\">m</span> 文件中无需使用 @<span class=\"title\">systhesize</span>，<span class=\"title\">Xcode</span> 会自动生成 <span class=\"title\">getter</span> 与 <span class=\"title\">setter</span>.</span></span><br><span class=\"line\"></span><br><span class=\"line\">```objc </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Test</span> : <span class=\"title\">NSObject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *_test;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSString</span> *mystr;</span><br></pre></td></tr></table></figure>\n<p>同时在.m文件中插入</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@synthesize</span> mystr = _myStr;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>直接用@property声明。该方法声明的成员变量能够在类内部和外部使用，在类的内部可以通过下划线+变量名 或 self.变量名 的方式来访问变量。</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Test</span> : <span class=\"title\">NSObject</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSString</span> *test;</span><br></pre></td></tr></table></figure>\n<p>同时在.m文件中插入</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@synthesize</span> test = _test;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"\">Objective-C 程序设计 (第六版)</a><br><a href=\"https://my.oschina.net/pengloo53/blog/173810\">Objective C中数组排序几种情况的总结</a><br><a href=\"https://liuzhichao.com/p/1256.html\" target=\"_blank\" rel=\"noopener\">Objective-C入门教程14：集合对象(NSSet,NSMutableSet,NSIndexSet)</a><br><a href=\"https://www.cnblogs.com/stevenwuzheng/p/4605232.html\" target=\"_blank\" rel=\"noopener\">iOS中四种实例变量的范围类型</a><br><a href=\"https://blog.csdn.net/shenjie12345678/article/details/39052659\" target=\"_blank\" rel=\"noopener\">OC声明变量在@interface括号中与使用@property的区别</a></p>\n","site":{"data":{}},"excerpt":"<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第六篇文章，主要复习了 <code>Objective-C</code> Foundation 框架中关于数组排序、字典对象以及集合对象的内容。</p>","more":"<h3 id=\"关于数组排序\"><a href=\"#关于数组排序\" class=\"headerlink\" title=\"关于数组排序\"></a>关于数组排序</h3><h4 id=\"简单排序示例\"><a href=\"#简单排序示例\" class=\"headerlink\" title=\"简单排序示例\"></a>简单排序示例</h4><p><code>Objective-C</code> 中对于 NSArray 排序方法主要有以下几种。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedArrayUsingSelector:</span><br><span class=\"line\">sortedArrayUsingComparator:</span><br><span class=\"line\">sortedArrayUsingDescriptors:</span><br></pre></td></tr></table></figure>\n<p>给出前两者排序的简单示例，如果只是对字符串简单做排序，sortedArrayUsingSelector:方法已足够，sortedArrayUsingComparator: 中用到了block内容。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSArray</span> *array = [<span class=\"built_in\">NSArray</span> arrayWithObjects:<span class=\"string\">@\"abc\"</span>,<span class=\"string\">@\"456\"</span>,<span class=\"string\">@\"123\"</span>,<span class=\"string\">@\"789\"</span>,<span class=\"string\">@\"ef\"</span>, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//sortedArrayUsingSelector</span></span><br><span class=\"line\">        <span class=\"built_in\">NSArray</span> *sortedArray1 = [array sortedArrayUsingSelector:<span class=\"keyword\">@selector</span>(compare:)];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"SortedArray1:\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,sortedArray1);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//sortedArrayUsingComparator:</span></span><br><span class=\"line\">        <span class=\"built_in\">NSArray</span> *sortedArray2 = [array sortedArrayUsingComparator:^<span class=\"built_in\">NSComparisonResult</span>(<span class=\"keyword\">id</span> obj1, <span class=\"keyword\">id</span> obj2) &#123;</span><br><span class=\"line\">             <span class=\"built_in\">NSComparisonResult</span> result = [obj1 compare:obj2];</span><br><span class=\"line\">             <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">         &#125;];</span><br><span class=\"line\">         <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"SortedArray2:\"</span>);</span><br><span class=\"line\">         <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,sortedArray2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用区块排序\"><a href=\"#使用区块排序\" class=\"headerlink\" title=\"使用区块排序\"></a>使用区块排序</h4><p>NSArray和NSMutableArray类中具有使用区块对数组中元素进行排序的方法。<br>NSArray的排序方法一般格式为: </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSArray</span> *) sortedArrayUsingComparator: (<span class=\"built_in\">NSComparator</span>) block</span><br></pre></td></tr></table></figure>\n<p>NSMutableArray的排序方法格式为: </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>) sortUsingComparator: (<span class=\"built_in\">NSComparator</span>) block</span><br></pre></td></tr></table></figure>\n<p>NSComparator作为typedef定义在系统头文件中:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NSComparisonResult</span> (^<span class=\"built_in\">NSComparator</span>) (<span class=\"keyword\">id</span> obj1, <span class=\"keyword\">id</span> obj2);</span><br></pre></td></tr></table></figure>\n\n<p>NSComparator是一个区块，使用两个待比较对象作为参数，并返回 NSComparisonResult 类型的值。预期会返回一个标识，说明第一个对象是否小于、等于或者大于第二个对象，这一点与不使用区块的数组排序方法是一致的。区块对于大数组排序能够提升一些速度，可以考虑在程序中使用。</p>\n<h4 id=\"关于描述器排序\"><a href=\"#关于描述器排序\" class=\"headerlink\" title=\"关于描述器排序\"></a>关于描述器排序</h4><p>给出使用描述器排序的一个代码样例。<br>代码中定义了三种车与五个人，并将车与人的信息载入数组，通过构建排序描述器，将排序描述器按照一定顺序放入数组，最后能够按照你所期望的顺序对信息进行输出，因为代码中重写了description，故能够按照格式进行输出。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.m</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"Car.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"Person.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">            Car *car1 = [Car initWithName:<span class=\"string\">@\"Audio\"</span>];</span><br><span class=\"line\">            Car *car2 = [Car initWithName:<span class=\"string\">@\"Rolls-Royce\"</span>];</span><br><span class=\"line\">            Car *car3 = [Car initWithName:<span class=\"string\">@\"BMW\"</span>];</span><br><span class=\"line\">            </span><br><span class=\"line\">            Person *p1 = [Person personWithAge:<span class=\"number\">23</span> withName:<span class=\"string\">@\"zhangsan\"</span> withCar:car2];</span><br><span class=\"line\">            Person *p2 = [Person personWithAge:<span class=\"number\">21</span> withName:<span class=\"string\">@\"zhangsan\"</span> withCar:car1];</span><br><span class=\"line\">            Person *p3 = [Person personWithAge:<span class=\"number\">24</span> withName:<span class=\"string\">@\"lisi\"</span> withCar:car1];</span><br><span class=\"line\">            Person *p4 = [Person personWithAge:<span class=\"number\">23</span> withName:<span class=\"string\">@\"wangwu\"</span> withCar:car3];</span><br><span class=\"line\">            Person *p5 = [Person personWithAge:<span class=\"number\">23</span> withName:<span class=\"string\">@\"wangwu\"</span> withCar:car2];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">NSArray</span> *array = [<span class=\"built_in\">NSArray</span> arrayWithObjects:p1,p2,p3,p4,p5, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"built_in\">NSSortDescriptor</span> *carNameDesc = [<span class=\"built_in\">NSSortDescriptor</span> sortDescriptorWithKey:<span class=\"string\">@\"car.name\"</span> ascending:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">            <span class=\"built_in\">NSSortDescriptor</span> *personNameDesc = [<span class=\"built_in\">NSSortDescriptor</span> sortDescriptorWithKey:<span class=\"string\">@\"name\"</span> ascending:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">            <span class=\"built_in\">NSSortDescriptor</span> *personAgeDesc = [<span class=\"built_in\">NSSortDescriptor</span> sortDescriptorWithKey:<span class=\"string\">@\"age\"</span> ascending:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"built_in\">NSArray</span> *descriptorArray = [<span class=\"built_in\">NSArray</span> arrayWithObjects:personAgeDesc,carNameDesc,personNameDesc, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"built_in\">NSArray</span> *sortedArray = [array sortedArrayUsingDescriptors: descriptorArray];</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,sortedArray);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Car.h</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Car</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSString</span> *name;</span><br><span class=\"line\">+(Car *)initWithName:(<span class=\"built_in\">NSString</span> *)name;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Person.h</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"Car.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *name;</span><br><span class=\"line\">    Car *car;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">+(Person *)personWithAge:(<span class=\"keyword\">int</span>)age withName:(<span class=\"built_in\">NSString</span> *)name withCar:(Car *)car;</span><br><span class=\"line\">-(<span class=\"built_in\">NSString</span> *)description;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Car.m</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"Car.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Car</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@synthesize</span> name = _name;</span><br><span class=\"line\"></span><br><span class=\"line\">+(Car *)initWithName:(<span class=\"built_in\">NSString</span> *)name&#123;</span><br><span class=\"line\">    Car *car = [[Car alloc] init];</span><br><span class=\"line\">    car.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> car;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Person.m</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"Person.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"Car.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">+(Person *)personWithAge:(<span class=\"keyword\">int</span>)age withName:(<span class=\"built_in\">NSString</span> *)name withCar:(Car *)car&#123;</span><br><span class=\"line\">    Person *person = [[Person alloc] init];</span><br><span class=\"line\">    person-&gt;age = age;</span><br><span class=\"line\">    person-&gt;name = name;</span><br><span class=\"line\">    person-&gt;car = car;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"built_in\">NSString</span> *)description&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"age is %i , name is %@, car is %@\"</span>,age,name,car.name];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020-04-17 17:04:05.775056+0800 DemoProgram[55124:1325210] (</span><br><span class=\"line\">    &quot;age is 21 , name is zhangsan, car is Audio&quot;,</span><br><span class=\"line\">    &quot;age is 23 , name is wangwu, car is BMW&quot;,</span><br><span class=\"line\">    &quot;age is 23 , name is wangwu, car is Rolls-Royce&quot;,</span><br><span class=\"line\">    &quot;age is 23 , name is zhangsan, car is Rolls-Royce&quot;,</span><br><span class=\"line\">    &quot;age is 24 , name is lisi, car is Audio&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\">Program ended with exit code: 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于字典对象\"><a href=\"#关于字典对象\" class=\"headerlink\" title=\"关于字典对象\"></a>关于字典对象</h3><p>词典 (dictionary) 是由键——对象对组成的数据集合。通过对象的键可以从<code>Objective-C</code>词典中获取需要的对象。词典中的键必须是单值的，通常它们是字符串，但也可以是其他对象类型。和键关联的值可以是任何对象类型，但不能是nil。词典可以是固定的，也可以是可变的。可变词典中的记录可以动态添加和删除。可以使用键检索词典，也可以枚举它们的内容。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSMutableDictionary</span> *dict = [<span class=\"built_in\">NSMutableDictionary</span> dictionary];</span><br><span class=\"line\">        dict[<span class=\"string\">@\"key1\"</span>] = <span class=\"string\">@\"This is key 1\"</span>;</span><br><span class=\"line\">        dict[<span class=\"string\">@\"key2\"</span>] = <span class=\"string\">@\"This is key 2\"</span>;</span><br><span class=\"line\">        dict[<span class=\"string\">@\"key3\"</span>] = <span class=\"string\">@\"This is key 3\"</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Key note for Key 1: %@\"</span>,dict[<span class=\"string\">@\"key1\"</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Key note for Key 2: %@\"</span>,dict[<span class=\"string\">@\"key2\"</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Key note for Key 3: %@\"</span>,dict[<span class=\"string\">@\"key3\"</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSMutableDictionary</span> *dict = [<span class=\"built_in\">NSMutableDictionary</span> dictionary];</span><br><span class=\"line\">        [dict setObject:<span class=\"string\">@\"This is key 1\"</span> forKey:<span class=\"string\">@\"key1\"</span>];</span><br><span class=\"line\">        [dict setObject:<span class=\"string\">@\"This is key 1\"</span> forKey:<span class=\"string\">@\"key2\"</span>];</span><br><span class=\"line\">        [dict setObject:<span class=\"string\">@\"This is key 3\"</span> forKey:<span class=\"string\">@\"key3\"</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Key note for Key 1: %@\"</span>,[dict objectForKey:<span class=\"string\">@\"key1\"</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Key note for Key 2: %@\"</span>,[dict objectForKey:<span class=\"string\">@\"key2\"</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Key note for Key 3: %@\"</span>,[dict objectForKey:<span class=\"string\">@\"key3\"</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是若Key存在重复则会出现无法显示某一重复Key问题.<br>创建词典后可以利用循环语句枚举词典的内容。<br>键从词典中依次检索,没有特定顺序。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSDictionary</span> *dict = [<span class=\"built_in\">NSDictionary</span> dictionaryWithObjectsAndKeys:</span><br><span class=\"line\">                                     <span class=\"string\">@\"This is key 1\"</span>,<span class=\"string\">@\"key1\"</span>,</span><br><span class=\"line\">                                     <span class=\"string\">@\"This is key 2\"</span>,<span class=\"string\">@\"key2\"</span>,</span><br><span class=\"line\">                                     <span class=\"string\">@\"This is key 3\"</span>,<span class=\"string\">@\"key3\"</span>,</span><br><span class=\"line\">                              <span class=\"literal\">nil</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">NSDictionary</span> *dictItem <span class=\"keyword\">in</span> dict ) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@:%@\"</span>,dictItem,[dict objectForKey:dictItem]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"关于集合对象\"><a href=\"#关于集合对象\" class=\"headerlink\" title=\"关于集合对象\"></a>关于集合对象</h3><p>Set是一组单值对象集合，可以是可变的，也可以是不变的。Set的操作包括搜索、添加、删除集合中的成员(仅用于可变集合)，比较两个集合，计算两个集合的交集和并集等，这些操作在示例程序中得以体现。</p>\n<p>需要注意的是 NSCountedSet，该Set中同一对象可以出现多次，然而在 NSCountedSet 中并非存放了多个对象，而是维护一个次数计数。第一次将对象添加到集合中时，对象的 count 值被置为1,然后每次将该对象添加到集合中 count 值就会增1, 相应地，每次从集合删除对象，count 值就会减1。当对象的 count 值为零时，实际上对象本身就被删除了。</p>\n<p>示例程序对 NSSet、 NSMutableSet、NSCountedSet 和 NSIndexSet进行了演示。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSSet</span> (<span class=\"title\">Printing</span>)</span></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) print;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSSet</span> (<span class=\"title\">Printing</span>)</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) print &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"&#123;\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSNumber</span> *element <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>)</span><br><span class=\"line\">        printf(<span class=\"string\">\"%li\"</span>,(<span class=\"keyword\">long</span>)[element integerValue]);</span><br><span class=\"line\">    printf(<span class=\"string\">\"&#125;\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSMutableSet</span> *set1 = [<span class=\"built_in\">NSMutableSet</span> setWithObjects:@<span class=\"number\">1</span>, @<span class=\"number\">3</span>, @<span class=\"number\">5</span>,  @<span class=\"number\">7</span>, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSSet</span> *set2 = [<span class=\"built_in\">NSSet</span> setWithObjects:@<span class=\"number\">2</span>, @<span class=\"number\">4</span>, @<span class=\"number\">6</span>, @<span class=\"number\">8</span>, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSCountedSet</span> *set3 = [<span class=\"built_in\">NSCountedSet</span> setWithObjects:@<span class=\"number\">1</span>, @<span class=\"number\">1</span>, @<span class=\"number\">3</span>, @<span class=\"number\">5</span>, <span class=\"literal\">nil</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"built_in\">NSIndexSet</span> * indexSet1 = [[<span class=\"built_in\">NSIndexSet</span> alloc] initWithIndexesInRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">1</span>,<span class=\"number\">3</span>)];</span><br><span class=\"line\">        <span class=\"built_in\">NSMutableIndexSet</span> *indexSet2 =[[<span class=\"built_in\">NSMutableIndexSet</span> alloc] init];</span><br><span class=\"line\">        [indexSet2 addIndex:<span class=\"number\">0</span>];</span><br><span class=\"line\">        [indexSet2 addIndex:<span class=\"number\">3</span>];</span><br><span class=\"line\">        [indexSet2 addIndex:<span class=\"number\">5</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> index;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"IndexSet1:\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index = [indexSet1 firstIndex];</span><br><span class=\"line\">             index != <span class=\"built_in\">NSNotFound</span>;</span><br><span class=\"line\">             index = [indexSet1 indexGreaterThanIndex: index])  &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%lu\"</span>,index);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"IndexSet2:\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index = [indexSet2 firstIndex];</span><br><span class=\"line\">             index != <span class=\"built_in\">NSNotFound</span>;</span><br><span class=\"line\">             index = [indexSet2 indexGreaterThanIndex: index])  &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%lu\"</span>,index);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Set1:\"</span>);</span><br><span class=\"line\">        [set1 print];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Set2:\"</span>);</span><br><span class=\"line\">        [set2 print];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Set3:\"</span>);</span><br><span class=\"line\">        [set3 print];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([set1 isEqualToSet: set2] == <span class=\"literal\">YES</span>)</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Set 1 equals set2\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Set 1 is not equal to Set2\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([set1 containsObject: @<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Set1 contains element 1\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Set1 does not contains element 1\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The count of 1 in Set3: %lu\"</span>,(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)[set3 countForObject:@<span class=\"number\">1</span>]);</span><br><span class=\"line\">        [set1 addObject:@<span class=\"number\">2</span>];</span><br><span class=\"line\">        [set1 removeObject:@<span class=\"number\">1</span>];</span><br><span class=\"line\">        [set1 print];</span><br><span class=\"line\">        [set1 intersectSet:set2];</span><br><span class=\"line\">        [set1 print];</span><br><span class=\"line\">        [set1 unionSet:set2];</span><br><span class=\"line\">        [set1 print];</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相应的运行结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020-04-17 11:40:23.646162+0800 DemoProgram[51926:1202542] IndexSet1:</span><br><span class=\"line\">2020-04-17 11:40:23.646584+0800 DemoProgram[51926:1202542] 1</span><br><span class=\"line\">2020-04-17 11:40:23.646627+0800 DemoProgram[51926:1202542] 2</span><br><span class=\"line\">2020-04-17 11:40:23.646679+0800 DemoProgram[51926:1202542] 3</span><br><span class=\"line\">2020-04-17 11:40:23.646733+0800 DemoProgram[51926:1202542] IndexSet2:</span><br><span class=\"line\">2020-04-17 11:40:23.646762+0800 DemoProgram[51926:1202542] 0</span><br><span class=\"line\">2020-04-17 11:40:23.646786+0800 DemoProgram[51926:1202542] 3</span><br><span class=\"line\">2020-04-17 11:40:23.646808+0800 DemoProgram[51926:1202542] 5</span><br><span class=\"line\">2020-04-17 11:40:23.646825+0800 DemoProgram[51926:1202542] Set1:</span><br><span class=\"line\">&#123;7351&#125;</span><br><span class=\"line\">2020-04-17 11:40:23.646871+0800 DemoProgram[51926:1202542] Set2:</span><br><span class=\"line\">&#123;6284&#125;</span><br><span class=\"line\">2020-04-17 11:40:23.646898+0800 DemoProgram[51926:1202542] Set3:</span><br><span class=\"line\">&#123;315&#125;</span><br><span class=\"line\">2020-04-17 11:40:23.646934+0800 DemoProgram[51926:1202542] Set 1 is not equal to Set2</span><br><span class=\"line\">2020-04-17 11:40:23.646957+0800 DemoProgram[51926:1202542] Set1 contains element 1</span><br><span class=\"line\">2020-04-17 11:40:23.646979+0800 DemoProgram[51926:1202542] The count of 1 in Set3: 2</span><br><span class=\"line\">&#123;7325&#125;</span><br><span class=\"line\">&#123;2&#125;</span><br><span class=\"line\">&#123;6284&#125;</span><br><span class=\"line\">Program ended with exit code: 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他总结\"><a href=\"#其他总结\" class=\"headerlink\" title=\"其他总结\"></a>其他总结</h3><p>根据写代码过程中遇到的一些问题查找的答案做一些阶段性总结。</p>\n<h4 id=\"实例变量的范围类型\"><a href=\"#实例变量的范围类型\" class=\"headerlink\" title=\"实例变量的范围类型\"></a>实例变量的范围类型</h4><p><strong>@private</strong><br>该类型的实例变量只有声明它的类能够访问它。<br><strong>@protected</strong><br>该类型的实例变量能被声明它的类和子类访问。<br>所有没有显式标识范围的实例变量默认为 @protected。<br><strong>@public</strong><br>该类型实例变量可以在任何地方被访问。<br><strong>@package</strong><br>在modern runtime下，@package 实例变量的范围在实现这个类的可执行文件镜像中是@public，但是在实现这个类的可执行文件镜像外部是 @private。<br>Objective-C 中的 @package 与 C 语言中变量和函数的 private_extern 类似，任何在实现类的镜像外的代码想使用这个实例变量都会引发link error错误。<br>@package 对于框架类的实例变量十分受用，在这种环境下使用 @private 可能太受限制，使用@protected 或者 @public 又过于开放。@package 类型的变量在 Framework 内部相当于 @protected，在 Framework 外部，相当于@private。</p>\n<h4 id=\"类方法与实例方法\"><a href=\"#类方法与实例方法\" class=\"headerlink\" title=\"类方法与实例方法\"></a>类方法与实例方法</h4><ul>\n<li>实例方法在类的具体实例的范围内执行，在调用一个实例方法前必须首先创建类的实例。需要在方法声明前加上“-”，表示实例（对象）方法 (动态方法)。</li>\n<li>类方法不需要创建实例，不依赖于对象，直接用类名调用，执行效率较高；当方法内部不需要使用成员变量时，就可以使用类方法。需要在方法生命前加上“-”，表示类方法 (静态方法)。</li>\n</ul>\n<h4 id=\"声明方式\"><a href=\"#声明方式\" class=\"headerlink\" title=\"声明方式\"></a>声明方式</h4><p>在网上查找资料时发现属性声明存在三种方式，通过查资料对三种方式进行总结</p>\n<ol>\n<li>直接在 @interface 中声明。该方法声明的成员变量只能在类内部使用，即不能通过类名. 点的方式访问变量，需要使用 -&gt; 的方式。</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Test</span> : <span class=\"title\">NSObject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *test;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 在<span class=\"class\"><span class=\"keyword\">@interface</span>中声明，然后再在@<span class=\"title\">property</span>中声明。该方法为过时的声明变量方式，<span class=\"title\">Xcode</span> 在早期 @<span class=\"title\">systhesize</span> 没有自动合成属性器之前，需要手写 <span class=\"title\">getter</span> 与 <span class=\"title\">setter</span> 方法。在<span class=\"title\">Xcode</span>有自动合成属性器后，编译器会自动生成一个以下划线开头的的实例变量，所以不必同时声明属性与变量。即可以直接用 @<span class=\"title\">property</span> 声明一个成员属性，在 .<span class=\"title\">m</span> 文件中无需使用 @<span class=\"title\">systhesize</span>，<span class=\"title\">Xcode</span> 会自动生成 <span class=\"title\">getter</span> 与 <span class=\"title\">setter</span>.</span></span><br><span class=\"line\"></span><br><span class=\"line\">```objc </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Test</span> : <span class=\"title\">NSObject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *_test;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSString</span> *mystr;</span><br></pre></td></tr></table></figure>\n<p>同时在.m文件中插入</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@synthesize</span> mystr = _myStr;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>直接用@property声明。该方法声明的成员变量能够在类内部和外部使用，在类的内部可以通过下划线+变量名 或 self.变量名 的方式来访问变量。</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Test</span> : <span class=\"title\">NSObject</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSString</span> *test;</span><br></pre></td></tr></table></figure>\n<p>同时在.m文件中插入</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@synthesize</span> test = _test;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"\">Objective-C 程序设计 (第六版)</a><br><a href=\"https://my.oschina.net/pengloo53/blog/173810\">Objective C中数组排序几种情况的总结</a><br><a href=\"https://liuzhichao.com/p/1256.html\" target=\"_blank\" rel=\"noopener\">Objective-C入门教程14：集合对象(NSSet,NSMutableSet,NSIndexSet)</a><br><a href=\"https://www.cnblogs.com/stevenwuzheng/p/4605232.html\" target=\"_blank\" rel=\"noopener\">iOS中四种实例变量的范围类型</a><br><a href=\"https://blog.csdn.net/shenjie12345678/article/details/39052659\" target=\"_blank\" rel=\"noopener\">OC声明变量在@interface括号中与使用@property的区别</a></p>"},{"title":"OpenCV 图像滤波","date":"2020-04-01T10:40:20.000Z","copyright":true,"_content":"> 如果您不知道如何在 Mac 上使用 Xcode 配置 `OpenCV`，可以参考我之前的博文。\n\n利用像素本身以及其邻域象素的灰度关系进行增强的方法常称为滤波，而滤波器通过邻域运算实现。\n\n开始之前先给出滤波相关知识结构图。\n\n<!--more-->\n\n![滤波](http://images.stephenfang.xyz/mweb/滤波.png)\n\n## 理解滤波\n\n\n\n先给出邻域操作的过程；\n1. 将模板在输入图象中漫游，并将模板中心与图象中某个像素位置重合\n2. 将模板上的各个系数与模板下各对应像素的灰度值相乘\n3. 将所有乘积相加( 为保持灰度范围，常将结果再除以模板系数之和)\n4. 将上述结果(模板的输出响应)赋给输出图象中对应模板中心位置的象素\n\n> 均值滤波其实就是对目标像素及周边像素取平均值后再填会目标像素来实现滤波目的的方法。\n\n接下来给出均值滤波具体的操作方法：\n存在如下图片底板，可见图像中用蓝色标记的“99”为显著的噪声。\n![](http://images.stephenfang.xyz/mweb/15857298630296.jpg)\n尝试建立如下 3*3 邻域模版，模版可以暂且被理解为叠在图像上的内容，实为平滑卷积模版\n![](http://images.stephenfang.xyz/mweb/15857297422480.jpg)\n尝试对最左上角的重叠部分进行计算，计算方法为系数逐乘以邻域节点的数值：\n```\n 1/9 * (10x1 + 11x1 + 10x1 + 9x1 + 10x1 + 11x1 + 10x1 + 9x1 + 10x1) \n= 1/9 * (90) \n= 10\n```\n将运算结果“10”填充至中间位置，与原有结果相同。\n![](http://images.stephenfang.xyz/mweb/15857302402257.jpg)\n至此完成了卷积模版最基本操作，接下来尝试遍历扫描整个图像，即通过对模板的平移完成对整个图像的运算，如下图所示：\n![-w229](http://images.stephenfang.xyz/mweb/15857305800473.jpg)![-w229](http://images.stephenfang.xyz/mweb/15857305984728.jpg)\n此时运算过程为：\n```\n  1/9 *(10x1 + 0x1 + 0x1 + 11x1 + 1x1 + 0x1 + 10x1 + 0x1 + 2x1) \n= 1/9 *( 34) \n= 3.7778\n```\n将小数量化后填充至中心位置，并重复操作，原则为逐行扫描，逐列增长。\n![-w229](http://images.stephenfang.xyz/mweb/15857308419472.jpg)![-w229](http://images.stephenfang.xyz/mweb/15857308571783.jpg)\n可以观察到运算进行到最下角的区域时，原来的“99”数值被填充为“20”，噪声被有效抑制。\n你可能会发现，当然边缘处的图像无法通过该算法进行处理，然而存在以下方法：\n1. **拓宽原图** :人为将边缘像素往外复制，图像外的第零列就被复制为与第一列相同，图像外的第零行被复制为与第一行相同，最后补全四个对角。如 6*6 的原图就被拓宽为 7*7 的图像，再对拓宽后的图像进行卷积处理。\n2. **像素复制** :将已经处理完成的内部像素往外复制，如上图中 4*4 的内部像素已经完成卷积运算，尝试将其往外复制像素，如(2,2)位置的 10 覆盖(1，2)位置的 11 和(2,1)位置的9。\n3. **保持原样** :这也是一种方法，毕竟三种方法都存在误差。\n\n其他还存在很多模版，简要理解中值滤波法：\n![-w229](http://images.stephenfang.xyz/mweb/15857320034469.jpg)![-w229](http://images.stephenfang.xyz/mweb/15857320145830.jpg)\n正如其名，其计算方法为：\n1. 对邻域 10,9,11,9,99,11,11,10,10 进行排序\n2. 在排序后的数字 9,9,10,10,10,11,11,11,99 中寻找中间像素\n3. 查找到中位数“10”对”99“进行替换\n\n卷积也被称为算子，以下为著名的Prewitt算子（垂直方向与水平方向）\n![-w229](http://images.stephenfang.xyz/mweb/15857327960667.jpg)![-w235](http://images.stephenfang.xyz/mweb/15857328571767.jpg)\n它可以显著降低边缘精度，对噪声具有平滑作用。下图为原图\n![](http://images.stephenfang.xyz/mweb/15857329308611.jpg)\n以下左图为处理后的x方向图片，右图为处理后的y方向图片。\n![-w229](http://images.stephenfang.xyz/mweb/15857329552320.jpg)![-w238](http://images.stephenfang.xyz/mweb/15857329695411.jpg)\n最后给出简单的Sobel边缘检测算子。\n> 索贝尔算子是计算机视觉领域的一种重要处理方法。主要用于获得数字图像的一阶梯度，常见的应用和物理意义是边缘检测。索贝尔算子是把图像中每个像素的上下左右四领域的灰度值加权差，在边缘处达到极值从而检测边缘。\n\n左图为垂直方向的Sobel边缘检测算子，右图为水平方向的Sobel边缘检测算子。\n![-w229](http://images.stephenfang.xyz/mweb/15857325986198.jpg)![-w229](http://images.stephenfang.xyz/mweb/15857327147059.jpg)\n\n对于邻域操作的概念这里不复再议，接下来尝试通过`OpenCV`的 filter2D() 函数实践 3*3 卷积模板。\n\n## 代码解释\n尝试自己编写了一段代码后，在`OpenCV`官方文档中查找到了线性滤波器的内容，通过循环的方式体现均值滤波器在不同的卷积核大小对图像的影响，现将其做解释。\n\n该程序通过循环生成 sizes 为3、5、7、9、11 时的*normalized box filter*，即均值滤波器（上文中已提及）。\n对于`size = 3` 的卷积核，应进行如下操作，其中 1/9 为系数。\n![](http://images.stephenfang.xyz/mweb/15857352054151.jpg)\n给出`OpenCV`中 filter2D() 的定义：\n```objc\n\nvoid cv::filter2D\t(\t\nInputArray src, \nOutputArray dst,\nint \tddepth,\nInputArray \tkernel,\nPoint \tanchor = Point(-1,-1),\ndouble \tdelta = 0,\nint \tborderType = BORDER_DEFAULT \n)\t\n```\n对参数进行解释\n* src: 原图像\n* dst: 目标图像\n* ddepth: 图像深度.负数代表与原始图像相同，如 -1\n* kernel: 卷积核\n* anchor: 内核的基准点，默认(-1, -1) 代表处于中心位置\n* delta: 可选的添加到像素的值，默认为 0\n* BORDER_DEFAULT: 像素向外逼近的方法，默认值 BORDER_DEFAULT 表示对全部边界进行计算\n\n相比你已经能够了解如何处理这个程序了，接下来给出修改后的整个程序。\n\n```objc\n#include \"opencv2/imgproc.hpp\"\n#include \"opencv2/imgcodecs.hpp\"\n#include \"opencv2/highgui.hpp\"\nusing namespace cv;\nint main ( int argc, char** argv )\n{\n    Mat src, dst;\n    Mat kernel;\n    //初始化\n    double delta = 0;\n    int ddepth = -1;\n    int kernel_size;\n    Point anchor = Point( -1, -1 );\n    \n    // 加载图片\n  src = imread(\"original.jpeg\");\n    if( src.empty() )\n    {\n        printf(\"无法加载图片\\n\");\n        return EXIT_FAILURE;\n    }\n\n    // 执行循环：每隔0.5秒对图像执行不同卷积核下的滤波操作\n    int ind = 0;\n    for(;;)\n    {\n        // 为归一化滤波循环更新卷积核的大小，kernel_size在3-11间循环\n        kernel_size = 3 + 2*( ind%5 );\n        kernel = Mat::ones( kernel_size, kernel_size, CV_32F )/ (float)(kernel_size*kernel_size);\n        // 执行滤波器\n        filter2D(src, dst, ddepth , kernel, anchor, delta, BORDER_DEFAULT );\n        imshow( \"FilterTest\", dst );\n        char c = (char)waitKey(500);\n        // 按下Esc退出程序\n        if( c == 27 )\n        { break; }\n        ind++;\n    }\n    return EXIT_SUCCESS;\n}\n```\n## 结果\n给出以下测试图片效果，可以看出效果已经相当明显。\n![-w599](http://images.stephenfang.xyz/mweb/15857364490707.jpg)\n![-w599](http://images.stephenfang.xyz/mweb/15857363805369.jpg)\n![-w599](http://images.stephenfang.xyz/mweb/15857364391479.jpg)\n\n\n\n## 参考\n[Making your own linear filters - OpenCV Docs](https://docs.opencv.org/master/d4/dbd/tutorial_filter_2d.html)\n[空域增强与模板操作-浙江工业大学刘盛](https://mooc1-1.chaoxing.com/coursedata/toPreview?courseId=207584971&dataId=132888374&objectId=491305c721a2802f01b830bba5507385)\n[初识滤波之均值滤波](https://zhuanlan.zhihu.com/p/76188487)","source":"_posts/OpenCV_Filter.md","raw":"---\ntitle: OpenCV 图像滤波\ndate: 2020-04-01 18:40:20\ncategories: \n- tech\ntags: \n- OpenCV\n- Xcode\ncopyright: true\n---\n> 如果您不知道如何在 Mac 上使用 Xcode 配置 `OpenCV`，可以参考我之前的博文。\n\n利用像素本身以及其邻域象素的灰度关系进行增强的方法常称为滤波，而滤波器通过邻域运算实现。\n\n开始之前先给出滤波相关知识结构图。\n\n<!--more-->\n\n![滤波](http://images.stephenfang.xyz/mweb/滤波.png)\n\n## 理解滤波\n\n\n\n先给出邻域操作的过程；\n1. 将模板在输入图象中漫游，并将模板中心与图象中某个像素位置重合\n2. 将模板上的各个系数与模板下各对应像素的灰度值相乘\n3. 将所有乘积相加( 为保持灰度范围，常将结果再除以模板系数之和)\n4. 将上述结果(模板的输出响应)赋给输出图象中对应模板中心位置的象素\n\n> 均值滤波其实就是对目标像素及周边像素取平均值后再填会目标像素来实现滤波目的的方法。\n\n接下来给出均值滤波具体的操作方法：\n存在如下图片底板，可见图像中用蓝色标记的“99”为显著的噪声。\n![](http://images.stephenfang.xyz/mweb/15857298630296.jpg)\n尝试建立如下 3*3 邻域模版，模版可以暂且被理解为叠在图像上的内容，实为平滑卷积模版\n![](http://images.stephenfang.xyz/mweb/15857297422480.jpg)\n尝试对最左上角的重叠部分进行计算，计算方法为系数逐乘以邻域节点的数值：\n```\n 1/9 * (10x1 + 11x1 + 10x1 + 9x1 + 10x1 + 11x1 + 10x1 + 9x1 + 10x1) \n= 1/9 * (90) \n= 10\n```\n将运算结果“10”填充至中间位置，与原有结果相同。\n![](http://images.stephenfang.xyz/mweb/15857302402257.jpg)\n至此完成了卷积模版最基本操作，接下来尝试遍历扫描整个图像，即通过对模板的平移完成对整个图像的运算，如下图所示：\n![-w229](http://images.stephenfang.xyz/mweb/15857305800473.jpg)![-w229](http://images.stephenfang.xyz/mweb/15857305984728.jpg)\n此时运算过程为：\n```\n  1/9 *(10x1 + 0x1 + 0x1 + 11x1 + 1x1 + 0x1 + 10x1 + 0x1 + 2x1) \n= 1/9 *( 34) \n= 3.7778\n```\n将小数量化后填充至中心位置，并重复操作，原则为逐行扫描，逐列增长。\n![-w229](http://images.stephenfang.xyz/mweb/15857308419472.jpg)![-w229](http://images.stephenfang.xyz/mweb/15857308571783.jpg)\n可以观察到运算进行到最下角的区域时，原来的“99”数值被填充为“20”，噪声被有效抑制。\n你可能会发现，当然边缘处的图像无法通过该算法进行处理，然而存在以下方法：\n1. **拓宽原图** :人为将边缘像素往外复制，图像外的第零列就被复制为与第一列相同，图像外的第零行被复制为与第一行相同，最后补全四个对角。如 6*6 的原图就被拓宽为 7*7 的图像，再对拓宽后的图像进行卷积处理。\n2. **像素复制** :将已经处理完成的内部像素往外复制，如上图中 4*4 的内部像素已经完成卷积运算，尝试将其往外复制像素，如(2,2)位置的 10 覆盖(1，2)位置的 11 和(2,1)位置的9。\n3. **保持原样** :这也是一种方法，毕竟三种方法都存在误差。\n\n其他还存在很多模版，简要理解中值滤波法：\n![-w229](http://images.stephenfang.xyz/mweb/15857320034469.jpg)![-w229](http://images.stephenfang.xyz/mweb/15857320145830.jpg)\n正如其名，其计算方法为：\n1. 对邻域 10,9,11,9,99,11,11,10,10 进行排序\n2. 在排序后的数字 9,9,10,10,10,11,11,11,99 中寻找中间像素\n3. 查找到中位数“10”对”99“进行替换\n\n卷积也被称为算子，以下为著名的Prewitt算子（垂直方向与水平方向）\n![-w229](http://images.stephenfang.xyz/mweb/15857327960667.jpg)![-w235](http://images.stephenfang.xyz/mweb/15857328571767.jpg)\n它可以显著降低边缘精度，对噪声具有平滑作用。下图为原图\n![](http://images.stephenfang.xyz/mweb/15857329308611.jpg)\n以下左图为处理后的x方向图片，右图为处理后的y方向图片。\n![-w229](http://images.stephenfang.xyz/mweb/15857329552320.jpg)![-w238](http://images.stephenfang.xyz/mweb/15857329695411.jpg)\n最后给出简单的Sobel边缘检测算子。\n> 索贝尔算子是计算机视觉领域的一种重要处理方法。主要用于获得数字图像的一阶梯度，常见的应用和物理意义是边缘检测。索贝尔算子是把图像中每个像素的上下左右四领域的灰度值加权差，在边缘处达到极值从而检测边缘。\n\n左图为垂直方向的Sobel边缘检测算子，右图为水平方向的Sobel边缘检测算子。\n![-w229](http://images.stephenfang.xyz/mweb/15857325986198.jpg)![-w229](http://images.stephenfang.xyz/mweb/15857327147059.jpg)\n\n对于邻域操作的概念这里不复再议，接下来尝试通过`OpenCV`的 filter2D() 函数实践 3*3 卷积模板。\n\n## 代码解释\n尝试自己编写了一段代码后，在`OpenCV`官方文档中查找到了线性滤波器的内容，通过循环的方式体现均值滤波器在不同的卷积核大小对图像的影响，现将其做解释。\n\n该程序通过循环生成 sizes 为3、5、7、9、11 时的*normalized box filter*，即均值滤波器（上文中已提及）。\n对于`size = 3` 的卷积核，应进行如下操作，其中 1/9 为系数。\n![](http://images.stephenfang.xyz/mweb/15857352054151.jpg)\n给出`OpenCV`中 filter2D() 的定义：\n```objc\n\nvoid cv::filter2D\t(\t\nInputArray src, \nOutputArray dst,\nint \tddepth,\nInputArray \tkernel,\nPoint \tanchor = Point(-1,-1),\ndouble \tdelta = 0,\nint \tborderType = BORDER_DEFAULT \n)\t\n```\n对参数进行解释\n* src: 原图像\n* dst: 目标图像\n* ddepth: 图像深度.负数代表与原始图像相同，如 -1\n* kernel: 卷积核\n* anchor: 内核的基准点，默认(-1, -1) 代表处于中心位置\n* delta: 可选的添加到像素的值，默认为 0\n* BORDER_DEFAULT: 像素向外逼近的方法，默认值 BORDER_DEFAULT 表示对全部边界进行计算\n\n相比你已经能够了解如何处理这个程序了，接下来给出修改后的整个程序。\n\n```objc\n#include \"opencv2/imgproc.hpp\"\n#include \"opencv2/imgcodecs.hpp\"\n#include \"opencv2/highgui.hpp\"\nusing namespace cv;\nint main ( int argc, char** argv )\n{\n    Mat src, dst;\n    Mat kernel;\n    //初始化\n    double delta = 0;\n    int ddepth = -1;\n    int kernel_size;\n    Point anchor = Point( -1, -1 );\n    \n    // 加载图片\n  src = imread(\"original.jpeg\");\n    if( src.empty() )\n    {\n        printf(\"无法加载图片\\n\");\n        return EXIT_FAILURE;\n    }\n\n    // 执行循环：每隔0.5秒对图像执行不同卷积核下的滤波操作\n    int ind = 0;\n    for(;;)\n    {\n        // 为归一化滤波循环更新卷积核的大小，kernel_size在3-11间循环\n        kernel_size = 3 + 2*( ind%5 );\n        kernel = Mat::ones( kernel_size, kernel_size, CV_32F )/ (float)(kernel_size*kernel_size);\n        // 执行滤波器\n        filter2D(src, dst, ddepth , kernel, anchor, delta, BORDER_DEFAULT );\n        imshow( \"FilterTest\", dst );\n        char c = (char)waitKey(500);\n        // 按下Esc退出程序\n        if( c == 27 )\n        { break; }\n        ind++;\n    }\n    return EXIT_SUCCESS;\n}\n```\n## 结果\n给出以下测试图片效果，可以看出效果已经相当明显。\n![-w599](http://images.stephenfang.xyz/mweb/15857364490707.jpg)\n![-w599](http://images.stephenfang.xyz/mweb/15857363805369.jpg)\n![-w599](http://images.stephenfang.xyz/mweb/15857364391479.jpg)\n\n\n\n## 参考\n[Making your own linear filters - OpenCV Docs](https://docs.opencv.org/master/d4/dbd/tutorial_filter_2d.html)\n[空域增强与模板操作-浙江工业大学刘盛](https://mooc1-1.chaoxing.com/coursedata/toPreview?courseId=207584971&dataId=132888374&objectId=491305c721a2802f01b830bba5507385)\n[初识滤波之均值滤波](https://zhuanlan.zhihu.com/p/76188487)","slug":"OpenCV_Filter","published":1,"updated":"2020-04-02T04:19:19.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcive9nh0016cv6badwugwrf","content":"<blockquote>\n<p>如果您不知道如何在 Mac 上使用 Xcode 配置 <code>OpenCV</code>，可以参考我之前的博文。</p>\n</blockquote>\n<p>利用像素本身以及其邻域象素的灰度关系进行增强的方法常称为滤波，而滤波器通过邻域运算实现。</p>\n<p>开始之前先给出滤波相关知识结构图。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"http://images.stephenfang.xyz/mweb/%E6%BB%A4%E6%B3%A2.png\" alt=\"滤波\"></p>\n<h2 id=\"理解滤波\"><a href=\"#理解滤波\" class=\"headerlink\" title=\"理解滤波\"></a>理解滤波</h2><p>先给出邻域操作的过程；</p>\n<ol>\n<li>将模板在输入图象中漫游，并将模板中心与图象中某个像素位置重合</li>\n<li>将模板上的各个系数与模板下各对应像素的灰度值相乘</li>\n<li>将所有乘积相加( 为保持灰度范围，常将结果再除以模板系数之和)</li>\n<li>将上述结果(模板的输出响应)赋给输出图象中对应模板中心位置的象素</li>\n</ol>\n<blockquote>\n<p>均值滤波其实就是对目标像素及周边像素取平均值后再填会目标像素来实现滤波目的的方法。</p>\n</blockquote>\n<p>接下来给出均值滤波具体的操作方法：<br>存在如下图片底板，可见图像中用蓝色标记的“99”为显著的噪声。<br><img src=\"http://images.stephenfang.xyz/mweb/15857298630296.jpg\" alt=\"\"><br>尝试建立如下 3*3 邻域模版，模版可以暂且被理解为叠在图像上的内容，实为平滑卷积模版<br><img src=\"http://images.stephenfang.xyz/mweb/15857297422480.jpg\" alt=\"\"><br>尝试对最左上角的重叠部分进行计算，计算方法为系数逐乘以邻域节点的数值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1&#x2F;9 * (10x1 + 11x1 + 10x1 + 9x1 + 10x1 + 11x1 + 10x1 + 9x1 + 10x1) </span><br><span class=\"line\">&#x3D; 1&#x2F;9 * (90) </span><br><span class=\"line\">&#x3D; 10</span><br></pre></td></tr></table></figure>\n<p>将运算结果“10”填充至中间位置，与原有结果相同。<br><img src=\"http://images.stephenfang.xyz/mweb/15857302402257.jpg\" alt=\"\"><br>至此完成了卷积模版最基本操作，接下来尝试遍历扫描整个图像，即通过对模板的平移完成对整个图像的运算，如下图所示：<br><img src=\"http://images.stephenfang.xyz/mweb/15857305800473.jpg\" alt=\"-w229\">)<img src=\"http://images.stephenfang.xyz/mweb/15857305984728.jpg\" alt=\"-w229\"><br>此时运算过程为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  1&#x2F;9 *(10x1 + 0x1 + 0x1 + 11x1 + 1x1 + 0x1 + 10x1 + 0x1 + 2x1) </span><br><span class=\"line\">&#x3D; 1&#x2F;9 *( 34) </span><br><span class=\"line\">&#x3D; 3.7778</span><br></pre></td></tr></table></figure>\n<p>将小数量化后填充至中心位置，并重复操作，原则为逐行扫描，逐列增长。<br><img src=\"http://images.stephenfang.xyz/mweb/15857308419472.jpg\" alt=\"-w229\">)<img src=\"http://images.stephenfang.xyz/mweb/15857308571783.jpg\" alt=\"-w229\"><br>可以观察到运算进行到最下角的区域时，原来的“99”数值被填充为“20”，噪声被有效抑制。<br>你可能会发现，当然边缘处的图像无法通过该算法进行处理，然而存在以下方法：</p>\n<ol>\n<li><strong>拓宽原图</strong> :人为将边缘像素往外复制，图像外的第零列就被复制为与第一列相同，图像外的第零行被复制为与第一行相同，最后补全四个对角。如 6<em>6 的原图就被拓宽为 7</em>7 的图像，再对拓宽后的图像进行卷积处理。</li>\n<li><strong>像素复制</strong> :将已经处理完成的内部像素往外复制，如上图中 4*4 的内部像素已经完成卷积运算，尝试将其往外复制像素，如(2,2)位置的 10 覆盖(1，2)位置的 11 和(2,1)位置的9。</li>\n<li><strong>保持原样</strong> :这也是一种方法，毕竟三种方法都存在误差。</li>\n</ol>\n<p>其他还存在很多模版，简要理解中值滤波法：<br><img src=\"http://images.stephenfang.xyz/mweb/15857320034469.jpg\" alt=\"-w229\">)<img src=\"http://images.stephenfang.xyz/mweb/15857320145830.jpg\" alt=\"-w229\"><br>正如其名，其计算方法为：</p>\n<ol>\n<li>对邻域 10,9,11,9,99,11,11,10,10 进行排序</li>\n<li>在排序后的数字 9,9,10,10,10,11,11,11,99 中寻找中间像素</li>\n<li>查找到中位数“10”对”99“进行替换</li>\n</ol>\n<p>卷积也被称为算子，以下为著名的Prewitt算子（垂直方向与水平方向）<br><img src=\"http://images.stephenfang.xyz/mweb/15857327960667.jpg\" alt=\"-w229\">)<img src=\"http://images.stephenfang.xyz/mweb/15857328571767.jpg\" alt=\"-w235\"><br>它可以显著降低边缘精度，对噪声具有平滑作用。下图为原图<br><img src=\"http://images.stephenfang.xyz/mweb/15857329308611.jpg\" alt=\"\"><br>以下左图为处理后的x方向图片，右图为处理后的y方向图片。<br><img src=\"http://images.stephenfang.xyz/mweb/15857329552320.jpg\" alt=\"-w229\">)<img src=\"http://images.stephenfang.xyz/mweb/15857329695411.jpg\" alt=\"-w238\"><br>最后给出简单的Sobel边缘检测算子。</p>\n<blockquote>\n<p>索贝尔算子是计算机视觉领域的一种重要处理方法。主要用于获得数字图像的一阶梯度，常见的应用和物理意义是边缘检测。索贝尔算子是把图像中每个像素的上下左右四领域的灰度值加权差，在边缘处达到极值从而检测边缘。</p>\n</blockquote>\n<p>左图为垂直方向的Sobel边缘检测算子，右图为水平方向的Sobel边缘检测算子。<br><img src=\"http://images.stephenfang.xyz/mweb/15857325986198.jpg\" alt=\"-w229\">)<img src=\"http://images.stephenfang.xyz/mweb/15857327147059.jpg\" alt=\"-w229\"></p>\n<p>对于邻域操作的概念这里不复再议，接下来尝试通过<code>OpenCV</code>的 filter2D() 函数实践 3*3 卷积模板。</p>\n<h2 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h2><p>尝试自己编写了一段代码后，在<code>OpenCV</code>官方文档中查找到了线性滤波器的内容，通过循环的方式体现均值滤波器在不同的卷积核大小对图像的影响，现将其做解释。</p>\n<p>该程序通过循环生成 sizes 为3、5、7、9、11 时的<em>normalized box filter</em>，即均值滤波器（上文中已提及）。<br>对于<code>size = 3</code> 的卷积核，应进行如下操作，其中 1/9 为系数。<br><img src=\"http://images.stephenfang.xyz/mweb/15857352054151.jpg\" alt=\"\"><br>给出<code>OpenCV</code>中 filter2D() 的定义：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> cv::filter2D\t(\t</span><br><span class=\"line\">InputArray src, </span><br><span class=\"line\">OutputArray dst,</span><br><span class=\"line\"><span class=\"keyword\">int</span> \tddepth,</span><br><span class=\"line\">InputArray \tkernel,</span><br><span class=\"line\">Point \tanchor = Point(<span class=\"number\">-1</span>,<span class=\"number\">-1</span>),</span><br><span class=\"line\"><span class=\"keyword\">double</span> \tdelta = <span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"keyword\">int</span> \tborderType = BORDER_DEFAULT </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>对参数进行解释</p>\n<ul>\n<li>src: 原图像</li>\n<li>dst: 目标图像</li>\n<li>ddepth: 图像深度.负数代表与原始图像相同，如 -1</li>\n<li>kernel: 卷积核</li>\n<li>anchor: 内核的基准点，默认(-1, -1) 代表处于中心位置</li>\n<li>delta: 可选的添加到像素的值，默认为 0</li>\n<li>BORDER_DEFAULT: 像素向外逼近的方法，默认值 BORDER_DEFAULT 表示对全部边界进行计算</li>\n</ul>\n<p>相比你已经能够了解如何处理这个程序了，接下来给出修改后的整个程序。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"opencv2/imgproc.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"opencv2/imgcodecs.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"opencv2/highgui.hpp\"</span></span></span><br><span class=\"line\">using namespace cv;</span><br><span class=\"line\"><span class=\"keyword\">int</span> main ( <span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Mat src, dst;</span><br><span class=\"line\">    Mat kernel;</span><br><span class=\"line\">    <span class=\"comment\">//初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> delta = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ddepth = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> kernel_size;</span><br><span class=\"line\">    Point anchor = Point( <span class=\"number\">-1</span>, <span class=\"number\">-1</span> );</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 加载图片</span></span><br><span class=\"line\">  src = imread(<span class=\"string\">\"original.jpeg\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( src.empty() )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(<span class=\"string\">\"无法加载图片\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EXIT_FAILURE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行循环：每隔0.5秒对图像执行不同卷积核下的滤波操作</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ind = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 为归一化滤波循环更新卷积核的大小，kernel_size在3-11间循环</span></span><br><span class=\"line\">        kernel_size = <span class=\"number\">3</span> + <span class=\"number\">2</span>*( ind%<span class=\"number\">5</span> );</span><br><span class=\"line\">        kernel = Mat::ones( kernel_size, kernel_size, CV_32F )/ (<span class=\"keyword\">float</span>)(kernel_size*kernel_size);</span><br><span class=\"line\">        <span class=\"comment\">// 执行滤波器</span></span><br><span class=\"line\">        filter2D(src, dst, ddepth , kernel, anchor, delta, BORDER_DEFAULT );</span><br><span class=\"line\">        imshow( <span class=\"string\">\"FilterTest\"</span>, dst );</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = (<span class=\"keyword\">char</span>)waitKey(<span class=\"number\">500</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 按下Esc退出程序</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( c == <span class=\"number\">27</span> )</span><br><span class=\"line\">        &#123; <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">        ind++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>给出以下测试图片效果，可以看出效果已经相当明显。<br><img src=\"http://images.stephenfang.xyz/mweb/15857364490707.jpg\" alt=\"-w599\"><br><img src=\"http://images.stephenfang.xyz/mweb/15857363805369.jpg\" alt=\"-w599\"><br><img src=\"http://images.stephenfang.xyz/mweb/15857364391479.jpg\" alt=\"-w599\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://docs.opencv.org/master/d4/dbd/tutorial_filter_2d.html\" target=\"_blank\" rel=\"noopener\">Making your own linear filters - OpenCV Docs</a><br><a href=\"https://mooc1-1.chaoxing.com/coursedata/toPreview?courseId=207584971&dataId=132888374&objectId=491305c721a2802f01b830bba5507385\" target=\"_blank\" rel=\"noopener\">空域增强与模板操作-浙江工业大学刘盛</a><br><a href=\"https://zhuanlan.zhihu.com/p/76188487\" target=\"_blank\" rel=\"noopener\">初识滤波之均值滤波</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>如果您不知道如何在 Mac 上使用 Xcode 配置 <code>OpenCV</code>，可以参考我之前的博文。</p>\n</blockquote>\n<p>利用像素本身以及其邻域象素的灰度关系进行增强的方法常称为滤波，而滤波器通过邻域运算实现。</p>\n<p>开始之前先给出滤波相关知识结构图。</p>","more":"<p><img src=\"http://images.stephenfang.xyz/mweb/%E6%BB%A4%E6%B3%A2.png\" alt=\"滤波\"></p>\n<h2 id=\"理解滤波\"><a href=\"#理解滤波\" class=\"headerlink\" title=\"理解滤波\"></a>理解滤波</h2><p>先给出邻域操作的过程；</p>\n<ol>\n<li>将模板在输入图象中漫游，并将模板中心与图象中某个像素位置重合</li>\n<li>将模板上的各个系数与模板下各对应像素的灰度值相乘</li>\n<li>将所有乘积相加( 为保持灰度范围，常将结果再除以模板系数之和)</li>\n<li>将上述结果(模板的输出响应)赋给输出图象中对应模板中心位置的象素</li>\n</ol>\n<blockquote>\n<p>均值滤波其实就是对目标像素及周边像素取平均值后再填会目标像素来实现滤波目的的方法。</p>\n</blockquote>\n<p>接下来给出均值滤波具体的操作方法：<br>存在如下图片底板，可见图像中用蓝色标记的“99”为显著的噪声。<br><img src=\"http://images.stephenfang.xyz/mweb/15857298630296.jpg\" alt=\"\"><br>尝试建立如下 3*3 邻域模版，模版可以暂且被理解为叠在图像上的内容，实为平滑卷积模版<br><img src=\"http://images.stephenfang.xyz/mweb/15857297422480.jpg\" alt=\"\"><br>尝试对最左上角的重叠部分进行计算，计算方法为系数逐乘以邻域节点的数值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1&#x2F;9 * (10x1 + 11x1 + 10x1 + 9x1 + 10x1 + 11x1 + 10x1 + 9x1 + 10x1) </span><br><span class=\"line\">&#x3D; 1&#x2F;9 * (90) </span><br><span class=\"line\">&#x3D; 10</span><br></pre></td></tr></table></figure>\n<p>将运算结果“10”填充至中间位置，与原有结果相同。<br><img src=\"http://images.stephenfang.xyz/mweb/15857302402257.jpg\" alt=\"\"><br>至此完成了卷积模版最基本操作，接下来尝试遍历扫描整个图像，即通过对模板的平移完成对整个图像的运算，如下图所示：<br><img src=\"http://images.stephenfang.xyz/mweb/15857305800473.jpg\" alt=\"-w229\">)<img src=\"http://images.stephenfang.xyz/mweb/15857305984728.jpg\" alt=\"-w229\"><br>此时运算过程为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  1&#x2F;9 *(10x1 + 0x1 + 0x1 + 11x1 + 1x1 + 0x1 + 10x1 + 0x1 + 2x1) </span><br><span class=\"line\">&#x3D; 1&#x2F;9 *( 34) </span><br><span class=\"line\">&#x3D; 3.7778</span><br></pre></td></tr></table></figure>\n<p>将小数量化后填充至中心位置，并重复操作，原则为逐行扫描，逐列增长。<br><img src=\"http://images.stephenfang.xyz/mweb/15857308419472.jpg\" alt=\"-w229\">)<img src=\"http://images.stephenfang.xyz/mweb/15857308571783.jpg\" alt=\"-w229\"><br>可以观察到运算进行到最下角的区域时，原来的“99”数值被填充为“20”，噪声被有效抑制。<br>你可能会发现，当然边缘处的图像无法通过该算法进行处理，然而存在以下方法：</p>\n<ol>\n<li><strong>拓宽原图</strong> :人为将边缘像素往外复制，图像外的第零列就被复制为与第一列相同，图像外的第零行被复制为与第一行相同，最后补全四个对角。如 6<em>6 的原图就被拓宽为 7</em>7 的图像，再对拓宽后的图像进行卷积处理。</li>\n<li><strong>像素复制</strong> :将已经处理完成的内部像素往外复制，如上图中 4*4 的内部像素已经完成卷积运算，尝试将其往外复制像素，如(2,2)位置的 10 覆盖(1，2)位置的 11 和(2,1)位置的9。</li>\n<li><strong>保持原样</strong> :这也是一种方法，毕竟三种方法都存在误差。</li>\n</ol>\n<p>其他还存在很多模版，简要理解中值滤波法：<br><img src=\"http://images.stephenfang.xyz/mweb/15857320034469.jpg\" alt=\"-w229\">)<img src=\"http://images.stephenfang.xyz/mweb/15857320145830.jpg\" alt=\"-w229\"><br>正如其名，其计算方法为：</p>\n<ol>\n<li>对邻域 10,9,11,9,99,11,11,10,10 进行排序</li>\n<li>在排序后的数字 9,9,10,10,10,11,11,11,99 中寻找中间像素</li>\n<li>查找到中位数“10”对”99“进行替换</li>\n</ol>\n<p>卷积也被称为算子，以下为著名的Prewitt算子（垂直方向与水平方向）<br><img src=\"http://images.stephenfang.xyz/mweb/15857327960667.jpg\" alt=\"-w229\">)<img src=\"http://images.stephenfang.xyz/mweb/15857328571767.jpg\" alt=\"-w235\"><br>它可以显著降低边缘精度，对噪声具有平滑作用。下图为原图<br><img src=\"http://images.stephenfang.xyz/mweb/15857329308611.jpg\" alt=\"\"><br>以下左图为处理后的x方向图片，右图为处理后的y方向图片。<br><img src=\"http://images.stephenfang.xyz/mweb/15857329552320.jpg\" alt=\"-w229\">)<img src=\"http://images.stephenfang.xyz/mweb/15857329695411.jpg\" alt=\"-w238\"><br>最后给出简单的Sobel边缘检测算子。</p>\n<blockquote>\n<p>索贝尔算子是计算机视觉领域的一种重要处理方法。主要用于获得数字图像的一阶梯度，常见的应用和物理意义是边缘检测。索贝尔算子是把图像中每个像素的上下左右四领域的灰度值加权差，在边缘处达到极值从而检测边缘。</p>\n</blockquote>\n<p>左图为垂直方向的Sobel边缘检测算子，右图为水平方向的Sobel边缘检测算子。<br><img src=\"http://images.stephenfang.xyz/mweb/15857325986198.jpg\" alt=\"-w229\">)<img src=\"http://images.stephenfang.xyz/mweb/15857327147059.jpg\" alt=\"-w229\"></p>\n<p>对于邻域操作的概念这里不复再议，接下来尝试通过<code>OpenCV</code>的 filter2D() 函数实践 3*3 卷积模板。</p>\n<h2 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h2><p>尝试自己编写了一段代码后，在<code>OpenCV</code>官方文档中查找到了线性滤波器的内容，通过循环的方式体现均值滤波器在不同的卷积核大小对图像的影响，现将其做解释。</p>\n<p>该程序通过循环生成 sizes 为3、5、7、9、11 时的<em>normalized box filter</em>，即均值滤波器（上文中已提及）。<br>对于<code>size = 3</code> 的卷积核，应进行如下操作，其中 1/9 为系数。<br><img src=\"http://images.stephenfang.xyz/mweb/15857352054151.jpg\" alt=\"\"><br>给出<code>OpenCV</code>中 filter2D() 的定义：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> cv::filter2D\t(\t</span><br><span class=\"line\">InputArray src, </span><br><span class=\"line\">OutputArray dst,</span><br><span class=\"line\"><span class=\"keyword\">int</span> \tddepth,</span><br><span class=\"line\">InputArray \tkernel,</span><br><span class=\"line\">Point \tanchor = Point(<span class=\"number\">-1</span>,<span class=\"number\">-1</span>),</span><br><span class=\"line\"><span class=\"keyword\">double</span> \tdelta = <span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"keyword\">int</span> \tborderType = BORDER_DEFAULT </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>对参数进行解释</p>\n<ul>\n<li>src: 原图像</li>\n<li>dst: 目标图像</li>\n<li>ddepth: 图像深度.负数代表与原始图像相同，如 -1</li>\n<li>kernel: 卷积核</li>\n<li>anchor: 内核的基准点，默认(-1, -1) 代表处于中心位置</li>\n<li>delta: 可选的添加到像素的值，默认为 0</li>\n<li>BORDER_DEFAULT: 像素向外逼近的方法，默认值 BORDER_DEFAULT 表示对全部边界进行计算</li>\n</ul>\n<p>相比你已经能够了解如何处理这个程序了，接下来给出修改后的整个程序。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"opencv2/imgproc.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"opencv2/imgcodecs.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"opencv2/highgui.hpp\"</span></span></span><br><span class=\"line\">using namespace cv;</span><br><span class=\"line\"><span class=\"keyword\">int</span> main ( <span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Mat src, dst;</span><br><span class=\"line\">    Mat kernel;</span><br><span class=\"line\">    <span class=\"comment\">//初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> delta = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ddepth = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> kernel_size;</span><br><span class=\"line\">    Point anchor = Point( <span class=\"number\">-1</span>, <span class=\"number\">-1</span> );</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 加载图片</span></span><br><span class=\"line\">  src = imread(<span class=\"string\">\"original.jpeg\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( src.empty() )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(<span class=\"string\">\"无法加载图片\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EXIT_FAILURE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行循环：每隔0.5秒对图像执行不同卷积核下的滤波操作</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ind = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 为归一化滤波循环更新卷积核的大小，kernel_size在3-11间循环</span></span><br><span class=\"line\">        kernel_size = <span class=\"number\">3</span> + <span class=\"number\">2</span>*( ind%<span class=\"number\">5</span> );</span><br><span class=\"line\">        kernel = Mat::ones( kernel_size, kernel_size, CV_32F )/ (<span class=\"keyword\">float</span>)(kernel_size*kernel_size);</span><br><span class=\"line\">        <span class=\"comment\">// 执行滤波器</span></span><br><span class=\"line\">        filter2D(src, dst, ddepth , kernel, anchor, delta, BORDER_DEFAULT );</span><br><span class=\"line\">        imshow( <span class=\"string\">\"FilterTest\"</span>, dst );</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = (<span class=\"keyword\">char</span>)waitKey(<span class=\"number\">500</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 按下Esc退出程序</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( c == <span class=\"number\">27</span> )</span><br><span class=\"line\">        &#123; <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">        ind++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>给出以下测试图片效果，可以看出效果已经相当明显。<br><img src=\"http://images.stephenfang.xyz/mweb/15857364490707.jpg\" alt=\"-w599\"><br><img src=\"http://images.stephenfang.xyz/mweb/15857363805369.jpg\" alt=\"-w599\"><br><img src=\"http://images.stephenfang.xyz/mweb/15857364391479.jpg\" alt=\"-w599\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://docs.opencv.org/master/d4/dbd/tutorial_filter_2d.html\" target=\"_blank\" rel=\"noopener\">Making your own linear filters - OpenCV Docs</a><br><a href=\"https://mooc1-1.chaoxing.com/coursedata/toPreview?courseId=207584971&dataId=132888374&objectId=491305c721a2802f01b830bba5507385\" target=\"_blank\" rel=\"noopener\">空域增强与模板操作-浙江工业大学刘盛</a><br><a href=\"https://zhuanlan.zhihu.com/p/76188487\" target=\"_blank\" rel=\"noopener\">初识滤波之均值滤波</a></p>"},{"title":"Objective-C 学习笔记(七）","date":"2020-04-19T15:43:20.000Z","copyright":true,"_content":"\n最近开始学习 `Objective-C` 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第七篇文章，主要复习了 `Objective-C` Foundation 框架中文件操作内容。\n\n<!--more-->\n\n### NSFileManager\nNSFileManager 类能够完成以下对于文件的操作\n- 创建一个新文件\n- 从现有文件中读取数据\n- 将数据写入文件\n- 重命名文件\n- 删除文件\n- 测试文件是否存在\n- 确定文件的大小和其他属性\n- 复制文件\n- 测试两个文件的内容是否相同\n其中大部分操作对于目录同样适用同样，然而调用的方法不同。\n\n首先给出常见的 NSFileManager文件方法\n![](http://images.stephenfang.xyz/mweb/15872236886233.jpg)\n\nattributesOfItemAtPath:path 方法返回一个包含指定文件属性的字典,属性字典包括各种信息，如文件的所有者、文件大小、文件的创建日期等。字典的每个属性可以通过键值提取，而所有的键都定义在头文件<Foundation/NSFileManager.h>中,如表示文件大小的键值为NSFileSize，以下列举了一部分常见属性。\n```\n   NSFileAttributeKey const NSFileType; ：\n   NSFileAttributeType const NSFileTypeDirectory;\n   NSFileAttributeType const NSFileTypeRegular;\n   NSFileAttributeKey const NSFileSize;\n   NSFileAttributeKey const NSFileModificationDate;  //修改时间\n   NSFileAttributeKey const NSFileCreationDate; //创建时间\n```\n使用以上方法在示例代码中实现了一些当前目录下的简单文件功能，须确保当前目录下 test.txt 已创建。\n```objc\n#import <Foundation/Foundation.h>\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSString *fName = @\"test.txt\";\n        NSString *nName = @\"copy.txt\";\n        NSFileManager *fm;\n        NSDictionary *attr;\n        \n        fm = [NSFileManager defaultManager];\n        \n        if([fm fileExistsAtPath:fName] == NO){\n            NSLog(@\"File does not exist!\");\n            return 1;\n        }\n        \n        if([fm copyItemAtPath:fName toPath:nName error:NULL] == NO){\n            NSLog(@\"File copy failed!\");\n            return 2;\n        }\n        \n        if ([fm contentsEqualAtPath:fName andPath:nName] == NO){\n            NSLog(@\"Files are not equal\");\n            return 3;\n        }\n        if([fm moveItemAtPath:nName toPath:@\"new.txt\" error:NULL] == NO){\n            NSLog(@\"File renamed failed\");\n            return 4;\n        }\n        \n        if((attr = [fm attributesOfItemAtPath:fName error:NULL]) == nil){\n            NSLog(@\"Couldn't get file attributes!\");\n            return 5;\n        }\n        \n        NSLog(@\"File size is %llu bytes\",[[attr objectForKey:NSFileSize] unsignedLongLongValue]);\n        \n        if([fm removeItemAtPath:fName error:NULL] == NO){\n            NSLog(@\"File removal failed\");\n            return 6;\n        }\n        \n        NSLog(@\"All operations success!\");\n    }\n    return 0;\n}\n\n```\n书中给出了常见的 NSFileManager 目录方法\n![](http://images.stephenfang.xyz/mweb/15872698118240.jpg)\n\nmoveItemAtPath:toPath:方法可以将文件从一个目录移到另一个目录中，如果两个路径引用同一目录中的文件，其结果为重命名这个文件。使用示例代码实现了部分目录操作如下所示：\n\n```objc\n#import <Foundation/Foundation.h>\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSString *dname = @\"testdir\";\n        NSString *path;\n        NSFileManager *fm;\n        \n        fm = [NSFileManager defaultManager];\n        \n        path = [fm currentDirectoryPath];\n        NSLog(@\"Current Directory is: %@\",path);\n        \n        if([fm createDirectoryAtPath:dname withIntermediateDirectories:YES attributes:nil error:NULL] == NO){\n            NSLog(@\"Couldn't create directory!\");\n            return 1;\n        }\n        \n        if([fm moveItemAtPath:dname toPath:@\"newdir\" error:NULL] == NO){\n            NSLog(@\"Directory rename failed!\");\n            return 2;\n        }\n        \n        if([fm changeCurrentDirectoryPath:@\"newdir\"] == NO){\n            NSLog(@\"Change directory failed!\");\n            return 3;\n        }\n        \n        path = [fm currentDirectoryPath];;\n        NSLog(@\"Current Directory is: %@\",path);\n        \n        NSLog(@\"All operation completed.\");\n    }\n    return 0;\n}\n```\n\n### NSData\n在Foundation框架的 NSData 中提供了缓冲区的使用方式，包括设置缓冲区、数据读入缓冲区、将缓冲区数据写入文件等。\n使用 NSFileManager 对象的 contentsAtPath: 方法能够接收一个路径名,并将指定文件内容读入该方法创建的存储区，若读取成功则返回存储区对象，否则返回nil。方法 createFileAtPath: contents: attributes: 创建特定属性的文件并将指定的 NSData 对象内容写入该文件中。\n```objc\n#import <Foundation/Foundation.h>\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSFileManager *fm;\n        NSData *data;\n        \n        data = [fm contentsAtPath:@\"new.txt\"];\n        \n        if(data == nil){\n            NSLog(@\"File read failed!\");\n            return 1;\n        }\n        \n        if([fm createFileAtPath:@\"another.txt\" contents:data attributes:nil] == NO){\n            NSLog(@\"Couldn't create the copy!\");\n            return 2;\n        }\n        \n        NSLog(@\"File successfully copied.\");\n    }\n    return 0;\n}\n```\n使用enumeratorAtPath: 方法或者 contentsOfDirectoryAtPath:error: 方法都可以完成枚举过程。如果使用前者，一次可以枚举指定目录中的每个文件，默认情况下，如果其中一个文件为目录，那么也会递归枚举它的内容。\n```objc\nwhile ((path = [dirEnum nextObject]) != nil) (\nNSLog (@\"%@\"，path);\n[fm fileExistsAtPath: path isDirectory: &flag];\nif (flag == YES)\n[dirEnum skipDescendents] ;\n}\n```\n使用 isDirectory 方法检验文件是否为目录，通过发送 skipDescendents 消息可以动态组织递归过程，不再枚举目录中的内容。\n下面的代码使用两种方式枚举指定目录中的内容。\n```objc\n#import <Foundation/Foundation.h>\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSString *path;\n        NSFileManager *fm;\n        NSDirectoryEnumerator *dm;\n        NSArray *array;\n        \n        fm = [NSFileManager defaultManager];\n        \n        path = [fm currentDirectoryPath];\n        dm = [fm enumeratorAtPath:path];\n        NSLog(@\"Contents in current path.\");\n        \n        //method 1\n        while ((path = [dm nextObject]) != nil) {\n            NSLog(@\"%@\",path);\n        }\n        \n        //method 2\n        array = [fm contentsOfDirectoryAtPath:[fm currentDirectoryPath] error:NULL];\n        NSLog(@\"Contents in current path.\\n\");\n        for (path in array) {\n            NSLog(@\"%@\",path);\n        }\n    }\n    return 0;\n}\n```\n\n###NSPathUtilities\n书中给出了常见的 NSPathUtilities 路径方法表。其中 components 是一个 NSArray 对象，包含路径每一部分的字符串对象；path是一个字符串对象，指定文件的路径; ext 是路径扩展名的字符串对象。\n![](http://images.stephenfang.xyz/mweb/15872706497596.jpg)\n![](http://images.stephenfang.xyz/mweb/15872707108256.jpg)\n以下为一段简单的 NSPathUtilities Demo代码：\n```objc\n#import <Foundation/Foundation.h>\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSString *path,*temp,*home;\n        NSFileManager *fm;\n        NSArray *components;\n \n        fm = [NSFileManager defaultManager];\n        \n        path = [fm currentDirectoryPath];\n        NSLog(@\"Current directory:%@\",path);\n        \n        temp = NSTemporaryDirectory();\n        NSLog(@\"Temporary directory: %@\",temp);\n        \n        home = NSHomeDirectory();\n        NSLog(@\"Home directory: %@\",home);\n        components = [home pathComponents];\n        \n        for (path in components) {\n            NSLog(@\"%@\",path);\n        }\n    }\n    return 0;\n}\n```\n### NSFileHandle\n使用 NSFileHandle 方法可以实现如下操作\n- 打开一个文件，执行读、写、更新操作\n- 在文件中查找指定位置\n- 从文件中读取特定数目的字节\n- 将指定数目的字节写入文件中\n\n处理文件的一般步骤为\n1. 打开文件，并获取一个NSFileHandle对象\n2. 对打开的文件执行I/O操作\n3. 关闭文件\n\n下图中给出了部分常用的NSFileHandle方法\n![](http://images.stephenfang.xyz/mweb/15872843161853.jpg)\n以下为一段简单的 NSFileHandle Demo代码：\n```objc\n#import <Foundation/Foundation.h>\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSFileHandle *inFile,*outFile;\n        NSData *data;\n        \n        inFile = [NSFileHandle fileHandleForReadingAtPath:@\"test.txt\"];\n        if(inFile == nil){\n            NSLog(@\"Open input file failed.\");\n            return 1;\n        }\n        \n        outFile = [NSFileHandle fileHandleForWritingAtPath:@\"out.txt\"];\n        if(outFile == nil){\n            NSLog(@\"Open output file failed\");\n            return 2;\n        }\n        \n        [outFile seekToEndOfFile];\n        \n        data = [inFile readDataToEndOfFile];\n        [outFile writeData: data];\n        \n        [inFile closeFile];\n        [outFile closeFile];\n        \n        NSLog(@\"%@\",[NSString stringWithContentsOfFile:@\"out.txt\" encoding:NSUTF8StringEncoding error:NULL]);\n    }\n    return 0;\n}\n\n```\n从输出可知，第一个文件的内容成功地附加到第二个文件的末尾。\n若 seekToEndOfFile 方法到达文件的末尾并且没有读到任何数据，那么将返回一个空的 NSData 对象，通过对该 NSData 对象应用 length 方法，测试其长度是否等于零判断文件是否为空，或者查看该文件中是否还有数据可以读取。\n打开一个需要更新的文件，文件的偏移量应设为文件的开始。通过在文件中定位(seeking)可以更改偏移量，然后执行该文件的读写操作。因此，要定位到文件的第10字节，可以编写如下消息表达式，此时文件的句柄为 databaseHandle。\n```objc\n[databaseHandle seekToFileOffset: 10];\n```\n通过获得当前文件的偏移量，然后加上或者减去这个值，就得到相应文件的位置。\n跳过文件中当前位置之后的128字节需要使用如下代码:\n```objc\n[databaseHandle seekToFileOffset:[databaseHandle offsetInFile] + 128];\n```\n### 其他\n书本中列出了部分 iOS 常用目录，内容略微过时但仍有参考意义。\n![](http://images.stephenfang.xyz/mweb/15872707572198.jpg)\n\n### 参考\n[iOS中的文件管理（一）—— NSFileManager基础](https://www.jianshu.com/p/be80c46ab731)\n[Objective-C 程序设计 (第六版)]()","source":"_posts/Objc_Learning_7.md","raw":"---\ntitle: Objective-C 学习笔记(七）\ndate: 2020-04-19 23:43:20\ncategories: \n- tech\ntags: \n- iOS\n- Xcode\n- Objective-C\ncopyright: true\n---\n\n最近开始学习 `Objective-C` 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第七篇文章，主要复习了 `Objective-C` Foundation 框架中文件操作内容。\n\n<!--more-->\n\n### NSFileManager\nNSFileManager 类能够完成以下对于文件的操作\n- 创建一个新文件\n- 从现有文件中读取数据\n- 将数据写入文件\n- 重命名文件\n- 删除文件\n- 测试文件是否存在\n- 确定文件的大小和其他属性\n- 复制文件\n- 测试两个文件的内容是否相同\n其中大部分操作对于目录同样适用同样，然而调用的方法不同。\n\n首先给出常见的 NSFileManager文件方法\n![](http://images.stephenfang.xyz/mweb/15872236886233.jpg)\n\nattributesOfItemAtPath:path 方法返回一个包含指定文件属性的字典,属性字典包括各种信息，如文件的所有者、文件大小、文件的创建日期等。字典的每个属性可以通过键值提取，而所有的键都定义在头文件<Foundation/NSFileManager.h>中,如表示文件大小的键值为NSFileSize，以下列举了一部分常见属性。\n```\n   NSFileAttributeKey const NSFileType; ：\n   NSFileAttributeType const NSFileTypeDirectory;\n   NSFileAttributeType const NSFileTypeRegular;\n   NSFileAttributeKey const NSFileSize;\n   NSFileAttributeKey const NSFileModificationDate;  //修改时间\n   NSFileAttributeKey const NSFileCreationDate; //创建时间\n```\n使用以上方法在示例代码中实现了一些当前目录下的简单文件功能，须确保当前目录下 test.txt 已创建。\n```objc\n#import <Foundation/Foundation.h>\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSString *fName = @\"test.txt\";\n        NSString *nName = @\"copy.txt\";\n        NSFileManager *fm;\n        NSDictionary *attr;\n        \n        fm = [NSFileManager defaultManager];\n        \n        if([fm fileExistsAtPath:fName] == NO){\n            NSLog(@\"File does not exist!\");\n            return 1;\n        }\n        \n        if([fm copyItemAtPath:fName toPath:nName error:NULL] == NO){\n            NSLog(@\"File copy failed!\");\n            return 2;\n        }\n        \n        if ([fm contentsEqualAtPath:fName andPath:nName] == NO){\n            NSLog(@\"Files are not equal\");\n            return 3;\n        }\n        if([fm moveItemAtPath:nName toPath:@\"new.txt\" error:NULL] == NO){\n            NSLog(@\"File renamed failed\");\n            return 4;\n        }\n        \n        if((attr = [fm attributesOfItemAtPath:fName error:NULL]) == nil){\n            NSLog(@\"Couldn't get file attributes!\");\n            return 5;\n        }\n        \n        NSLog(@\"File size is %llu bytes\",[[attr objectForKey:NSFileSize] unsignedLongLongValue]);\n        \n        if([fm removeItemAtPath:fName error:NULL] == NO){\n            NSLog(@\"File removal failed\");\n            return 6;\n        }\n        \n        NSLog(@\"All operations success!\");\n    }\n    return 0;\n}\n\n```\n书中给出了常见的 NSFileManager 目录方法\n![](http://images.stephenfang.xyz/mweb/15872698118240.jpg)\n\nmoveItemAtPath:toPath:方法可以将文件从一个目录移到另一个目录中，如果两个路径引用同一目录中的文件，其结果为重命名这个文件。使用示例代码实现了部分目录操作如下所示：\n\n```objc\n#import <Foundation/Foundation.h>\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSString *dname = @\"testdir\";\n        NSString *path;\n        NSFileManager *fm;\n        \n        fm = [NSFileManager defaultManager];\n        \n        path = [fm currentDirectoryPath];\n        NSLog(@\"Current Directory is: %@\",path);\n        \n        if([fm createDirectoryAtPath:dname withIntermediateDirectories:YES attributes:nil error:NULL] == NO){\n            NSLog(@\"Couldn't create directory!\");\n            return 1;\n        }\n        \n        if([fm moveItemAtPath:dname toPath:@\"newdir\" error:NULL] == NO){\n            NSLog(@\"Directory rename failed!\");\n            return 2;\n        }\n        \n        if([fm changeCurrentDirectoryPath:@\"newdir\"] == NO){\n            NSLog(@\"Change directory failed!\");\n            return 3;\n        }\n        \n        path = [fm currentDirectoryPath];;\n        NSLog(@\"Current Directory is: %@\",path);\n        \n        NSLog(@\"All operation completed.\");\n    }\n    return 0;\n}\n```\n\n### NSData\n在Foundation框架的 NSData 中提供了缓冲区的使用方式，包括设置缓冲区、数据读入缓冲区、将缓冲区数据写入文件等。\n使用 NSFileManager 对象的 contentsAtPath: 方法能够接收一个路径名,并将指定文件内容读入该方法创建的存储区，若读取成功则返回存储区对象，否则返回nil。方法 createFileAtPath: contents: attributes: 创建特定属性的文件并将指定的 NSData 对象内容写入该文件中。\n```objc\n#import <Foundation/Foundation.h>\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSFileManager *fm;\n        NSData *data;\n        \n        data = [fm contentsAtPath:@\"new.txt\"];\n        \n        if(data == nil){\n            NSLog(@\"File read failed!\");\n            return 1;\n        }\n        \n        if([fm createFileAtPath:@\"another.txt\" contents:data attributes:nil] == NO){\n            NSLog(@\"Couldn't create the copy!\");\n            return 2;\n        }\n        \n        NSLog(@\"File successfully copied.\");\n    }\n    return 0;\n}\n```\n使用enumeratorAtPath: 方法或者 contentsOfDirectoryAtPath:error: 方法都可以完成枚举过程。如果使用前者，一次可以枚举指定目录中的每个文件，默认情况下，如果其中一个文件为目录，那么也会递归枚举它的内容。\n```objc\nwhile ((path = [dirEnum nextObject]) != nil) (\nNSLog (@\"%@\"，path);\n[fm fileExistsAtPath: path isDirectory: &flag];\nif (flag == YES)\n[dirEnum skipDescendents] ;\n}\n```\n使用 isDirectory 方法检验文件是否为目录，通过发送 skipDescendents 消息可以动态组织递归过程，不再枚举目录中的内容。\n下面的代码使用两种方式枚举指定目录中的内容。\n```objc\n#import <Foundation/Foundation.h>\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSString *path;\n        NSFileManager *fm;\n        NSDirectoryEnumerator *dm;\n        NSArray *array;\n        \n        fm = [NSFileManager defaultManager];\n        \n        path = [fm currentDirectoryPath];\n        dm = [fm enumeratorAtPath:path];\n        NSLog(@\"Contents in current path.\");\n        \n        //method 1\n        while ((path = [dm nextObject]) != nil) {\n            NSLog(@\"%@\",path);\n        }\n        \n        //method 2\n        array = [fm contentsOfDirectoryAtPath:[fm currentDirectoryPath] error:NULL];\n        NSLog(@\"Contents in current path.\\n\");\n        for (path in array) {\n            NSLog(@\"%@\",path);\n        }\n    }\n    return 0;\n}\n```\n\n###NSPathUtilities\n书中给出了常见的 NSPathUtilities 路径方法表。其中 components 是一个 NSArray 对象，包含路径每一部分的字符串对象；path是一个字符串对象，指定文件的路径; ext 是路径扩展名的字符串对象。\n![](http://images.stephenfang.xyz/mweb/15872706497596.jpg)\n![](http://images.stephenfang.xyz/mweb/15872707108256.jpg)\n以下为一段简单的 NSPathUtilities Demo代码：\n```objc\n#import <Foundation/Foundation.h>\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSString *path,*temp,*home;\n        NSFileManager *fm;\n        NSArray *components;\n \n        fm = [NSFileManager defaultManager];\n        \n        path = [fm currentDirectoryPath];\n        NSLog(@\"Current directory:%@\",path);\n        \n        temp = NSTemporaryDirectory();\n        NSLog(@\"Temporary directory: %@\",temp);\n        \n        home = NSHomeDirectory();\n        NSLog(@\"Home directory: %@\",home);\n        components = [home pathComponents];\n        \n        for (path in components) {\n            NSLog(@\"%@\",path);\n        }\n    }\n    return 0;\n}\n```\n### NSFileHandle\n使用 NSFileHandle 方法可以实现如下操作\n- 打开一个文件，执行读、写、更新操作\n- 在文件中查找指定位置\n- 从文件中读取特定数目的字节\n- 将指定数目的字节写入文件中\n\n处理文件的一般步骤为\n1. 打开文件，并获取一个NSFileHandle对象\n2. 对打开的文件执行I/O操作\n3. 关闭文件\n\n下图中给出了部分常用的NSFileHandle方法\n![](http://images.stephenfang.xyz/mweb/15872843161853.jpg)\n以下为一段简单的 NSFileHandle Demo代码：\n```objc\n#import <Foundation/Foundation.h>\n\nint main(int argc, char *argv[]){\n    @autoreleasepool {\n        NSFileHandle *inFile,*outFile;\n        NSData *data;\n        \n        inFile = [NSFileHandle fileHandleForReadingAtPath:@\"test.txt\"];\n        if(inFile == nil){\n            NSLog(@\"Open input file failed.\");\n            return 1;\n        }\n        \n        outFile = [NSFileHandle fileHandleForWritingAtPath:@\"out.txt\"];\n        if(outFile == nil){\n            NSLog(@\"Open output file failed\");\n            return 2;\n        }\n        \n        [outFile seekToEndOfFile];\n        \n        data = [inFile readDataToEndOfFile];\n        [outFile writeData: data];\n        \n        [inFile closeFile];\n        [outFile closeFile];\n        \n        NSLog(@\"%@\",[NSString stringWithContentsOfFile:@\"out.txt\" encoding:NSUTF8StringEncoding error:NULL]);\n    }\n    return 0;\n}\n\n```\n从输出可知，第一个文件的内容成功地附加到第二个文件的末尾。\n若 seekToEndOfFile 方法到达文件的末尾并且没有读到任何数据，那么将返回一个空的 NSData 对象，通过对该 NSData 对象应用 length 方法，测试其长度是否等于零判断文件是否为空，或者查看该文件中是否还有数据可以读取。\n打开一个需要更新的文件，文件的偏移量应设为文件的开始。通过在文件中定位(seeking)可以更改偏移量，然后执行该文件的读写操作。因此，要定位到文件的第10字节，可以编写如下消息表达式，此时文件的句柄为 databaseHandle。\n```objc\n[databaseHandle seekToFileOffset: 10];\n```\n通过获得当前文件的偏移量，然后加上或者减去这个值，就得到相应文件的位置。\n跳过文件中当前位置之后的128字节需要使用如下代码:\n```objc\n[databaseHandle seekToFileOffset:[databaseHandle offsetInFile] + 128];\n```\n### 其他\n书本中列出了部分 iOS 常用目录，内容略微过时但仍有参考意义。\n![](http://images.stephenfang.xyz/mweb/15872707572198.jpg)\n\n### 参考\n[iOS中的文件管理（一）—— NSFileManager基础](https://www.jianshu.com/p/be80c46ab731)\n[Objective-C 程序设计 (第六版)]()","slug":"Objc_Learning_7","published":1,"updated":"2020-04-19T15:51:11.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcive9ni0019cv6b8awed86h","content":"<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第七篇文章，主要复习了 <code>Objective-C</code> Foundation 框架中文件操作内容。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"NSFileManager\"><a href=\"#NSFileManager\" class=\"headerlink\" title=\"NSFileManager\"></a>NSFileManager</h3><p>NSFileManager 类能够完成以下对于文件的操作</p>\n<ul>\n<li>创建一个新文件</li>\n<li>从现有文件中读取数据</li>\n<li>将数据写入文件</li>\n<li>重命名文件</li>\n<li>删除文件</li>\n<li>测试文件是否存在</li>\n<li>确定文件的大小和其他属性</li>\n<li>复制文件</li>\n<li>测试两个文件的内容是否相同<br>其中大部分操作对于目录同样适用同样，然而调用的方法不同。</li>\n</ul>\n<p>首先给出常见的 NSFileManager文件方法<br><img src=\"http://images.stephenfang.xyz/mweb/15872236886233.jpg\" alt=\"\"></p>\n<p>attributesOfItemAtPath:path 方法返回一个包含指定文件属性的字典,属性字典包括各种信息，如文件的所有者、文件大小、文件的创建日期等。字典的每个属性可以通过键值提取，而所有的键都定义在头文件&lt;Foundation/NSFileManager.h&gt;中,如表示文件大小的键值为NSFileSize，以下列举了一部分常见属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSFileAttributeKey const NSFileType; ：</span><br><span class=\"line\">NSFileAttributeType const NSFileTypeDirectory;</span><br><span class=\"line\">NSFileAttributeType const NSFileTypeRegular;</span><br><span class=\"line\">NSFileAttributeKey const NSFileSize;</span><br><span class=\"line\">NSFileAttributeKey const NSFileModificationDate;  &#x2F;&#x2F;修改时间</span><br><span class=\"line\">NSFileAttributeKey const NSFileCreationDate; &#x2F;&#x2F;创建时间</span><br></pre></td></tr></table></figure>\n<p>使用以上方法在示例代码中实现了一些当前目录下的简单文件功能，须确保当前目录下 test.txt 已创建。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *fName = <span class=\"string\">@\"test.txt\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *nName = <span class=\"string\">@\"copy.txt\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">NSFileManager</span> *fm;</span><br><span class=\"line\">        <span class=\"built_in\">NSDictionary</span> *attr;</span><br><span class=\"line\">        </span><br><span class=\"line\">        fm = [<span class=\"built_in\">NSFileManager</span> defaultManager];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([fm fileExistsAtPath:fName] == <span class=\"literal\">NO</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"File does not exist!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([fm copyItemAtPath:fName toPath:nName error:<span class=\"literal\">NULL</span>] == <span class=\"literal\">NO</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"File copy failed!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([fm contentsEqualAtPath:fName andPath:nName] == <span class=\"literal\">NO</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Files are not equal\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>([fm moveItemAtPath:nName toPath:<span class=\"string\">@\"new.txt\"</span> error:<span class=\"literal\">NULL</span>] == <span class=\"literal\">NO</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"File renamed failed\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>((attr = [fm attributesOfItemAtPath:fName error:<span class=\"literal\">NULL</span>]) == <span class=\"literal\">nil</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Couldn't get file attributes!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"File size is %llu bytes\"</span>,[[attr objectForKey:<span class=\"built_in\">NSFileSize</span>] unsignedLongLongValue]);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([fm removeItemAtPath:fName error:<span class=\"literal\">NULL</span>] == <span class=\"literal\">NO</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"File removal failed\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">6</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"All operations success!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>书中给出了常见的 NSFileManager 目录方法<br><img src=\"http://images.stephenfang.xyz/mweb/15872698118240.jpg\" alt=\"\"></p>\n<p>moveItemAtPath:toPath:方法可以将文件从一个目录移到另一个目录中，如果两个路径引用同一目录中的文件，其结果为重命名这个文件。使用示例代码实现了部分目录操作如下所示：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *dname = <span class=\"string\">@\"testdir\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *path;</span><br><span class=\"line\">        <span class=\"built_in\">NSFileManager</span> *fm;</span><br><span class=\"line\">        </span><br><span class=\"line\">        fm = [<span class=\"built_in\">NSFileManager</span> defaultManager];</span><br><span class=\"line\">        </span><br><span class=\"line\">        path = [fm currentDirectoryPath];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Current Directory is: %@\"</span>,path);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([fm createDirectoryAtPath:dname withIntermediateDirectories:<span class=\"literal\">YES</span> attributes:<span class=\"literal\">nil</span> error:<span class=\"literal\">NULL</span>] == <span class=\"literal\">NO</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Couldn't create directory!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([fm moveItemAtPath:dname toPath:<span class=\"string\">@\"newdir\"</span> error:<span class=\"literal\">NULL</span>] == <span class=\"literal\">NO</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Directory rename failed!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([fm changeCurrentDirectoryPath:<span class=\"string\">@\"newdir\"</span>] == <span class=\"literal\">NO</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Change directory failed!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        path = [fm currentDirectoryPath];;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Current Directory is: %@\"</span>,path);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"All operation completed.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NSData\"><a href=\"#NSData\" class=\"headerlink\" title=\"NSData\"></a>NSData</h3><p>在Foundation框架的 NSData 中提供了缓冲区的使用方式，包括设置缓冲区、数据读入缓冲区、将缓冲区数据写入文件等。<br>使用 NSFileManager 对象的 contentsAtPath: 方法能够接收一个路径名,并将指定文件内容读入该方法创建的存储区，若读取成功则返回存储区对象，否则返回nil。方法 createFileAtPath: contents: attributes: 创建特定属性的文件并将指定的 NSData 对象内容写入该文件中。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSFileManager</span> *fm;</span><br><span class=\"line\">        <span class=\"built_in\">NSData</span> *data;</span><br><span class=\"line\">        </span><br><span class=\"line\">        data = [fm contentsAtPath:<span class=\"string\">@\"new.txt\"</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(data == <span class=\"literal\">nil</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"File read failed!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([fm createFileAtPath:<span class=\"string\">@\"another.txt\"</span> contents:data attributes:<span class=\"literal\">nil</span>] == <span class=\"literal\">NO</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Couldn't create the copy!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"File successfully copied.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用enumeratorAtPath: 方法或者 contentsOfDirectoryAtPath:error: 方法都可以完成枚举过程。如果使用前者，一次可以枚举指定目录中的每个文件，默认情况下，如果其中一个文件为目录，那么也会递归枚举它的内容。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ((path = [dirEnum nextObject]) != <span class=\"literal\">nil</span>) (</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span> (<span class=\"string\">@\"%@\"</span>，path);</span><br><span class=\"line\">[fm fileExistsAtPath: path isDirectory: &amp;flag];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (flag == <span class=\"literal\">YES</span>)</span><br><span class=\"line\">[dirEnum skipDescendents] ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 isDirectory 方法检验文件是否为目录，通过发送 skipDescendents 消息可以动态组织递归过程，不再枚举目录中的内容。<br>下面的代码使用两种方式枚举指定目录中的内容。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *path;</span><br><span class=\"line\">        <span class=\"built_in\">NSFileManager</span> *fm;</span><br><span class=\"line\">        <span class=\"built_in\">NSDirectoryEnumerator</span> *dm;</span><br><span class=\"line\">        <span class=\"built_in\">NSArray</span> *array;</span><br><span class=\"line\">        </span><br><span class=\"line\">        fm = [<span class=\"built_in\">NSFileManager</span> defaultManager];</span><br><span class=\"line\">        </span><br><span class=\"line\">        path = [fm currentDirectoryPath];</span><br><span class=\"line\">        dm = [fm enumeratorAtPath:path];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Contents in current path.\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//method 1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((path = [dm nextObject]) != <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,path);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//method 2</span></span><br><span class=\"line\">        array = [fm contentsOfDirectoryAtPath:[fm currentDirectoryPath] error:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Contents in current path.\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (path <span class=\"keyword\">in</span> array) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,path);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>###NSPathUtilities<br>书中给出了常见的 NSPathUtilities 路径方法表。其中 components 是一个 NSArray 对象，包含路径每一部分的字符串对象；path是一个字符串对象，指定文件的路径; ext 是路径扩展名的字符串对象。<br><img src=\"http://images.stephenfang.xyz/mweb/15872706497596.jpg\" alt=\"\"><br><img src=\"http://images.stephenfang.xyz/mweb/15872707108256.jpg\" alt=\"\"><br>以下为一段简单的 NSPathUtilities Demo代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *path,*temp,*home;</span><br><span class=\"line\">        <span class=\"built_in\">NSFileManager</span> *fm;</span><br><span class=\"line\">        <span class=\"built_in\">NSArray</span> *components;</span><br><span class=\"line\"> </span><br><span class=\"line\">        fm = [<span class=\"built_in\">NSFileManager</span> defaultManager];</span><br><span class=\"line\">        </span><br><span class=\"line\">        path = [fm currentDirectoryPath];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Current directory:%@\"</span>,path);</span><br><span class=\"line\">        </span><br><span class=\"line\">        temp = <span class=\"built_in\">NSTemporaryDirectory</span>();</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Temporary directory: %@\"</span>,temp);</span><br><span class=\"line\">        </span><br><span class=\"line\">        home = <span class=\"built_in\">NSHomeDirectory</span>();</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Home directory: %@\"</span>,home);</span><br><span class=\"line\">        components = [home pathComponents];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (path <span class=\"keyword\">in</span> components) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,path);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"NSFileHandle\"><a href=\"#NSFileHandle\" class=\"headerlink\" title=\"NSFileHandle\"></a>NSFileHandle</h3><p>使用 NSFileHandle 方法可以实现如下操作</p>\n<ul>\n<li>打开一个文件，执行读、写、更新操作</li>\n<li>在文件中查找指定位置</li>\n<li>从文件中读取特定数目的字节</li>\n<li>将指定数目的字节写入文件中</li>\n</ul>\n<p>处理文件的一般步骤为</p>\n<ol>\n<li>打开文件，并获取一个NSFileHandle对象</li>\n<li>对打开的文件执行I/O操作</li>\n<li>关闭文件</li>\n</ol>\n<p>下图中给出了部分常用的NSFileHandle方法<br><img src=\"http://images.stephenfang.xyz/mweb/15872843161853.jpg\" alt=\"\"><br>以下为一段简单的 NSFileHandle Demo代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSFileHandle</span> *inFile,*outFile;</span><br><span class=\"line\">        <span class=\"built_in\">NSData</span> *data;</span><br><span class=\"line\">        </span><br><span class=\"line\">        inFile = [<span class=\"built_in\">NSFileHandle</span> fileHandleForReadingAtPath:<span class=\"string\">@\"test.txt\"</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(inFile == <span class=\"literal\">nil</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Open input file failed.\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        outFile = [<span class=\"built_in\">NSFileHandle</span> fileHandleForWritingAtPath:<span class=\"string\">@\"out.txt\"</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(outFile == <span class=\"literal\">nil</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Open output file failed\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [outFile seekToEndOfFile];</span><br><span class=\"line\">        </span><br><span class=\"line\">        data = [inFile readDataToEndOfFile];</span><br><span class=\"line\">        [outFile writeData: data];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [inFile closeFile];</span><br><span class=\"line\">        [outFile closeFile];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,[<span class=\"built_in\">NSString</span> stringWithContentsOfFile:<span class=\"string\">@\"out.txt\"</span> encoding:<span class=\"built_in\">NSUTF8StringEncoding</span> error:<span class=\"literal\">NULL</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从输出可知，第一个文件的内容成功地附加到第二个文件的末尾。<br>若 seekToEndOfFile 方法到达文件的末尾并且没有读到任何数据，那么将返回一个空的 NSData 对象，通过对该 NSData 对象应用 length 方法，测试其长度是否等于零判断文件是否为空，或者查看该文件中是否还有数据可以读取。<br>打开一个需要更新的文件，文件的偏移量应设为文件的开始。通过在文件中定位(seeking)可以更改偏移量，然后执行该文件的读写操作。因此，要定位到文件的第10字节，可以编写如下消息表达式，此时文件的句柄为 databaseHandle。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[databaseHandle seekToFileOffset: <span class=\"number\">10</span>];</span><br></pre></td></tr></table></figure>\n<p>通过获得当前文件的偏移量，然后加上或者减去这个值，就得到相应文件的位置。<br>跳过文件中当前位置之后的128字节需要使用如下代码:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[databaseHandle seekToFileOffset:[databaseHandle offsetInFile] + <span class=\"number\">128</span>];</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>书本中列出了部分 iOS 常用目录，内容略微过时但仍有参考意义。<br><img src=\"http://images.stephenfang.xyz/mweb/15872707572198.jpg\" alt=\"\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.jianshu.com/p/be80c46ab731\" target=\"_blank\" rel=\"noopener\">iOS中的文件管理（一）—— NSFileManager基础</a><br><a href=\"\">Objective-C 程序设计 (第六版)</a></p>\n","site":{"data":{}},"excerpt":"<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第七篇文章，主要复习了 <code>Objective-C</code> Foundation 框架中文件操作内容。</p>","more":"<h3 id=\"NSFileManager\"><a href=\"#NSFileManager\" class=\"headerlink\" title=\"NSFileManager\"></a>NSFileManager</h3><p>NSFileManager 类能够完成以下对于文件的操作</p>\n<ul>\n<li>创建一个新文件</li>\n<li>从现有文件中读取数据</li>\n<li>将数据写入文件</li>\n<li>重命名文件</li>\n<li>删除文件</li>\n<li>测试文件是否存在</li>\n<li>确定文件的大小和其他属性</li>\n<li>复制文件</li>\n<li>测试两个文件的内容是否相同<br>其中大部分操作对于目录同样适用同样，然而调用的方法不同。</li>\n</ul>\n<p>首先给出常见的 NSFileManager文件方法<br><img src=\"http://images.stephenfang.xyz/mweb/15872236886233.jpg\" alt=\"\"></p>\n<p>attributesOfItemAtPath:path 方法返回一个包含指定文件属性的字典,属性字典包括各种信息，如文件的所有者、文件大小、文件的创建日期等。字典的每个属性可以通过键值提取，而所有的键都定义在头文件&lt;Foundation/NSFileManager.h&gt;中,如表示文件大小的键值为NSFileSize，以下列举了一部分常见属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSFileAttributeKey const NSFileType; ：</span><br><span class=\"line\">NSFileAttributeType const NSFileTypeDirectory;</span><br><span class=\"line\">NSFileAttributeType const NSFileTypeRegular;</span><br><span class=\"line\">NSFileAttributeKey const NSFileSize;</span><br><span class=\"line\">NSFileAttributeKey const NSFileModificationDate;  &#x2F;&#x2F;修改时间</span><br><span class=\"line\">NSFileAttributeKey const NSFileCreationDate; &#x2F;&#x2F;创建时间</span><br></pre></td></tr></table></figure>\n<p>使用以上方法在示例代码中实现了一些当前目录下的简单文件功能，须确保当前目录下 test.txt 已创建。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *fName = <span class=\"string\">@\"test.txt\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *nName = <span class=\"string\">@\"copy.txt\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">NSFileManager</span> *fm;</span><br><span class=\"line\">        <span class=\"built_in\">NSDictionary</span> *attr;</span><br><span class=\"line\">        </span><br><span class=\"line\">        fm = [<span class=\"built_in\">NSFileManager</span> defaultManager];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([fm fileExistsAtPath:fName] == <span class=\"literal\">NO</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"File does not exist!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([fm copyItemAtPath:fName toPath:nName error:<span class=\"literal\">NULL</span>] == <span class=\"literal\">NO</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"File copy failed!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([fm contentsEqualAtPath:fName andPath:nName] == <span class=\"literal\">NO</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Files are not equal\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>([fm moveItemAtPath:nName toPath:<span class=\"string\">@\"new.txt\"</span> error:<span class=\"literal\">NULL</span>] == <span class=\"literal\">NO</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"File renamed failed\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>((attr = [fm attributesOfItemAtPath:fName error:<span class=\"literal\">NULL</span>]) == <span class=\"literal\">nil</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Couldn't get file attributes!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"File size is %llu bytes\"</span>,[[attr objectForKey:<span class=\"built_in\">NSFileSize</span>] unsignedLongLongValue]);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([fm removeItemAtPath:fName error:<span class=\"literal\">NULL</span>] == <span class=\"literal\">NO</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"File removal failed\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">6</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"All operations success!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>书中给出了常见的 NSFileManager 目录方法<br><img src=\"http://images.stephenfang.xyz/mweb/15872698118240.jpg\" alt=\"\"></p>\n<p>moveItemAtPath:toPath:方法可以将文件从一个目录移到另一个目录中，如果两个路径引用同一目录中的文件，其结果为重命名这个文件。使用示例代码实现了部分目录操作如下所示：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *dname = <span class=\"string\">@\"testdir\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *path;</span><br><span class=\"line\">        <span class=\"built_in\">NSFileManager</span> *fm;</span><br><span class=\"line\">        </span><br><span class=\"line\">        fm = [<span class=\"built_in\">NSFileManager</span> defaultManager];</span><br><span class=\"line\">        </span><br><span class=\"line\">        path = [fm currentDirectoryPath];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Current Directory is: %@\"</span>,path);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([fm createDirectoryAtPath:dname withIntermediateDirectories:<span class=\"literal\">YES</span> attributes:<span class=\"literal\">nil</span> error:<span class=\"literal\">NULL</span>] == <span class=\"literal\">NO</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Couldn't create directory!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([fm moveItemAtPath:dname toPath:<span class=\"string\">@\"newdir\"</span> error:<span class=\"literal\">NULL</span>] == <span class=\"literal\">NO</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Directory rename failed!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([fm changeCurrentDirectoryPath:<span class=\"string\">@\"newdir\"</span>] == <span class=\"literal\">NO</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Change directory failed!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        path = [fm currentDirectoryPath];;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Current Directory is: %@\"</span>,path);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"All operation completed.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NSData\"><a href=\"#NSData\" class=\"headerlink\" title=\"NSData\"></a>NSData</h3><p>在Foundation框架的 NSData 中提供了缓冲区的使用方式，包括设置缓冲区、数据读入缓冲区、将缓冲区数据写入文件等。<br>使用 NSFileManager 对象的 contentsAtPath: 方法能够接收一个路径名,并将指定文件内容读入该方法创建的存储区，若读取成功则返回存储区对象，否则返回nil。方法 createFileAtPath: contents: attributes: 创建特定属性的文件并将指定的 NSData 对象内容写入该文件中。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSFileManager</span> *fm;</span><br><span class=\"line\">        <span class=\"built_in\">NSData</span> *data;</span><br><span class=\"line\">        </span><br><span class=\"line\">        data = [fm contentsAtPath:<span class=\"string\">@\"new.txt\"</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(data == <span class=\"literal\">nil</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"File read failed!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([fm createFileAtPath:<span class=\"string\">@\"another.txt\"</span> contents:data attributes:<span class=\"literal\">nil</span>] == <span class=\"literal\">NO</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Couldn't create the copy!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"File successfully copied.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用enumeratorAtPath: 方法或者 contentsOfDirectoryAtPath:error: 方法都可以完成枚举过程。如果使用前者，一次可以枚举指定目录中的每个文件，默认情况下，如果其中一个文件为目录，那么也会递归枚举它的内容。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ((path = [dirEnum nextObject]) != <span class=\"literal\">nil</span>) (</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span> (<span class=\"string\">@\"%@\"</span>，path);</span><br><span class=\"line\">[fm fileExistsAtPath: path isDirectory: &amp;flag];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (flag == <span class=\"literal\">YES</span>)</span><br><span class=\"line\">[dirEnum skipDescendents] ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 isDirectory 方法检验文件是否为目录，通过发送 skipDescendents 消息可以动态组织递归过程，不再枚举目录中的内容。<br>下面的代码使用两种方式枚举指定目录中的内容。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *path;</span><br><span class=\"line\">        <span class=\"built_in\">NSFileManager</span> *fm;</span><br><span class=\"line\">        <span class=\"built_in\">NSDirectoryEnumerator</span> *dm;</span><br><span class=\"line\">        <span class=\"built_in\">NSArray</span> *array;</span><br><span class=\"line\">        </span><br><span class=\"line\">        fm = [<span class=\"built_in\">NSFileManager</span> defaultManager];</span><br><span class=\"line\">        </span><br><span class=\"line\">        path = [fm currentDirectoryPath];</span><br><span class=\"line\">        dm = [fm enumeratorAtPath:path];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Contents in current path.\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//method 1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((path = [dm nextObject]) != <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,path);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//method 2</span></span><br><span class=\"line\">        array = [fm contentsOfDirectoryAtPath:[fm currentDirectoryPath] error:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Contents in current path.\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (path <span class=\"keyword\">in</span> array) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,path);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>###NSPathUtilities<br>书中给出了常见的 NSPathUtilities 路径方法表。其中 components 是一个 NSArray 对象，包含路径每一部分的字符串对象；path是一个字符串对象，指定文件的路径; ext 是路径扩展名的字符串对象。<br><img src=\"http://images.stephenfang.xyz/mweb/15872706497596.jpg\" alt=\"\"><br><img src=\"http://images.stephenfang.xyz/mweb/15872707108256.jpg\" alt=\"\"><br>以下为一段简单的 NSPathUtilities Demo代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *path,*temp,*home;</span><br><span class=\"line\">        <span class=\"built_in\">NSFileManager</span> *fm;</span><br><span class=\"line\">        <span class=\"built_in\">NSArray</span> *components;</span><br><span class=\"line\"> </span><br><span class=\"line\">        fm = [<span class=\"built_in\">NSFileManager</span> defaultManager];</span><br><span class=\"line\">        </span><br><span class=\"line\">        path = [fm currentDirectoryPath];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Current directory:%@\"</span>,path);</span><br><span class=\"line\">        </span><br><span class=\"line\">        temp = <span class=\"built_in\">NSTemporaryDirectory</span>();</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Temporary directory: %@\"</span>,temp);</span><br><span class=\"line\">        </span><br><span class=\"line\">        home = <span class=\"built_in\">NSHomeDirectory</span>();</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Home directory: %@\"</span>,home);</span><br><span class=\"line\">        components = [home pathComponents];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (path <span class=\"keyword\">in</span> components) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,path);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"NSFileHandle\"><a href=\"#NSFileHandle\" class=\"headerlink\" title=\"NSFileHandle\"></a>NSFileHandle</h3><p>使用 NSFileHandle 方法可以实现如下操作</p>\n<ul>\n<li>打开一个文件，执行读、写、更新操作</li>\n<li>在文件中查找指定位置</li>\n<li>从文件中读取特定数目的字节</li>\n<li>将指定数目的字节写入文件中</li>\n</ul>\n<p>处理文件的一般步骤为</p>\n<ol>\n<li>打开文件，并获取一个NSFileHandle对象</li>\n<li>对打开的文件执行I/O操作</li>\n<li>关闭文件</li>\n</ol>\n<p>下图中给出了部分常用的NSFileHandle方法<br><img src=\"http://images.stephenfang.xyz/mweb/15872843161853.jpg\" alt=\"\"><br>以下为一段简单的 NSFileHandle Demo代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSFileHandle</span> *inFile,*outFile;</span><br><span class=\"line\">        <span class=\"built_in\">NSData</span> *data;</span><br><span class=\"line\">        </span><br><span class=\"line\">        inFile = [<span class=\"built_in\">NSFileHandle</span> fileHandleForReadingAtPath:<span class=\"string\">@\"test.txt\"</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(inFile == <span class=\"literal\">nil</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Open input file failed.\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        outFile = [<span class=\"built_in\">NSFileHandle</span> fileHandleForWritingAtPath:<span class=\"string\">@\"out.txt\"</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(outFile == <span class=\"literal\">nil</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Open output file failed\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [outFile seekToEndOfFile];</span><br><span class=\"line\">        </span><br><span class=\"line\">        data = [inFile readDataToEndOfFile];</span><br><span class=\"line\">        [outFile writeData: data];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [inFile closeFile];</span><br><span class=\"line\">        [outFile closeFile];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,[<span class=\"built_in\">NSString</span> stringWithContentsOfFile:<span class=\"string\">@\"out.txt\"</span> encoding:<span class=\"built_in\">NSUTF8StringEncoding</span> error:<span class=\"literal\">NULL</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从输出可知，第一个文件的内容成功地附加到第二个文件的末尾。<br>若 seekToEndOfFile 方法到达文件的末尾并且没有读到任何数据，那么将返回一个空的 NSData 对象，通过对该 NSData 对象应用 length 方法，测试其长度是否等于零判断文件是否为空，或者查看该文件中是否还有数据可以读取。<br>打开一个需要更新的文件，文件的偏移量应设为文件的开始。通过在文件中定位(seeking)可以更改偏移量，然后执行该文件的读写操作。因此，要定位到文件的第10字节，可以编写如下消息表达式，此时文件的句柄为 databaseHandle。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[databaseHandle seekToFileOffset: <span class=\"number\">10</span>];</span><br></pre></td></tr></table></figure>\n<p>通过获得当前文件的偏移量，然后加上或者减去这个值，就得到相应文件的位置。<br>跳过文件中当前位置之后的128字节需要使用如下代码:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[databaseHandle seekToFileOffset:[databaseHandle offsetInFile] + <span class=\"number\">128</span>];</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>书本中列出了部分 iOS 常用目录，内容略微过时但仍有参考意义。<br><img src=\"http://images.stephenfang.xyz/mweb/15872707572198.jpg\" alt=\"\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.jianshu.com/p/be80c46ab731\" target=\"_blank\" rel=\"noopener\">iOS中的文件管理（一）—— NSFileManager基础</a><br><a href=\"\">Objective-C 程序设计 (第六版)</a></p>"},{"title":"Objective-C 学习笔记(八）","date":"2020-04-24T14:23:20.000Z","copyright":true,"_content":"\n最近开始学习 `Objective-C` 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第八篇文章，主要复习了自动引用计数与深浅拷贝。\n\n<!--more-->\n\n### 手动引用计数总结\n- 若需保持对象不被销毁可以使用 retain，使用完对象后需使用 release 进行释放。\n- 给对象发送 release 消息不会必然销毁对象，只有当该对象的引用计数减至0时对象才会被销毁，接着系统会发送 dealloc 消息给这个对象用于释放内存。\n- 对使用了 retain 或者 copy、 mutableCopy、alloc 或 new 方法的任何对象，以及具有 retain 和 copy 特性的属性进行释放，需要覆盖 dealloc 方法，使得在对象被释放的时候能够释放这些实例变量。\n- 如果在方法中不再需要用到这个对象但需要将其返回，可以给这个对象发送 autorelease 消息以标记这个对象延迟释放。autorelease 消息并不会影响到对象的引用计数。\n- 当应用终止时内存中的所有对象都会被释放，不论它们是否在自动释放池中。\n\n### 自动引用计数总结\n- 只要某个对象被任一 strong 指针指向，那么它将不会被销毁。如果对象没有被任何 strong 指针指向，那么就将被销毁。\n- 通常所有对象的指针变量都是强变量，将对象的引用赋给变量使对象自动保持，旧对象的引用会在赋值前被释放。\n- 当两个对象都持有彼此的强引用时，将会产生循环保持。如果对象仍然有引用，系统将不能销毁这个对象。如果两个对象都强引用彼此就不可以被销毁。\n- 解决强引用问题可以创建其他类型的对象变量，并允许使用弱引用。通过父视图持有子视图的强引用，子视图持有父视图的弱引用，这样就没有循环保持。弱变量也不能阻止引用的对象被销毁。\n- 以 `Objective-C`中的 delegate 设计模式为例，viewController 中有一个 strong 指针指向它所负责管理的 UITableView，而 UITableView 中的 dataSource 和 delegate 指针都指向 viewController 的 weak 指针。\n- 当声明一个弱变量，系统会追踪赋值给这个变量的引用。当引用的对象释放时，弱变量会被自动设置为nil。变量被设置为nil,给nil对象发送任何消息不会有反应，避免了无意间给这个变量发送消息引起的崩溃。\n- 如果需要持有一个对象，那么对其发送 retain。如果之后不再使用该对象，那么需要对其发送 release（或者autorelease） 每一次对 retain、alloc 或 new 的调用，需要对应一次 release 或 autorelease 调用。\n\n### 深浅拷贝\n#### 深拷贝\n - 将原数据拷贝后存入一块新的内存中，并以新的指针指向新的内存。\n - 拷贝过程结束后，两个对象存储数据相同，内存地址不同。\n - 两个对象互不影响，互不干涉。\n - 源对象和副本的计数器相同。\n - 非容器类的浅拷贝只拷贝对象的地址，没有新的内存被分配。\n - 容器类的浅拷贝不拷贝容器的内容，两个容器的地址不同，在一个容器中修改值，另一个浅拷贝的容器中的值也会变化。\n \n#### 浅拷贝 \n - 拷贝数据所在内存的地址，目标对象指针和源对象指向同一片内存空间。\n - 新对象计数器为1，源对象计数器不变。\n - 在`Objective-C`中使用 retain 关键字进行引用计数，使几个指针共用同一片内存空间，不会轻易的销毁内存。\n - 非容器类的深拷贝就是重写分配一块内存，然后把另一个对象的内容原封不动搬过来。对容器类的深拷贝是对容器中的每个元素都进行拷贝。\n \n#### 拷贝方式\n1. **retain**：始终是浅拷贝。引用计数每次加1。返回对象是否可变与被复制的对象保持一致。\n2. **copy**：对于可变对象为深拷贝，引用计数不改变；对于不可变对象是浅拷贝，引用计数每次加1。始终返回一个不可变对象。  \n3. **mutableCopy**：始终是深拷贝，引用计数不改变。始终返回一个可变对象。\n\n并非所有的类都支持拷贝。只有遵循 NSCopying 协议的类，才支持 copy 拷贝，只有遵循 NSMutableCopying 协议的类，才支持 mutableCopy 拷贝。如果没有遵循拷贝协议拷贝时会出错。\n\n### 参考\n[手把手教你ARC——iOS/Mac开发ARC入门和使用](https://onevcat.com/2012/06/arc-hand-by-hand/)\n[Objective-C中的深拷贝和浅拷贝](https://www.cnblogs.com/ludashi/p/3894151.html)\n[Objective-C 程序设计 (第六版)]()","source":"_posts/Objc_Learning_8.md","raw":"---\ntitle: Objective-C 学习笔记(八）\ndate: 2020-04-24 22:23:20\ncategories: \n- tech\ntags: \n- iOS\n- Xcode\n- Objective-C\n- ARC\ncopyright: true\n---\n\n最近开始学习 `Objective-C` 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第八篇文章，主要复习了自动引用计数与深浅拷贝。\n\n<!--more-->\n\n### 手动引用计数总结\n- 若需保持对象不被销毁可以使用 retain，使用完对象后需使用 release 进行释放。\n- 给对象发送 release 消息不会必然销毁对象，只有当该对象的引用计数减至0时对象才会被销毁，接着系统会发送 dealloc 消息给这个对象用于释放内存。\n- 对使用了 retain 或者 copy、 mutableCopy、alloc 或 new 方法的任何对象，以及具有 retain 和 copy 特性的属性进行释放，需要覆盖 dealloc 方法，使得在对象被释放的时候能够释放这些实例变量。\n- 如果在方法中不再需要用到这个对象但需要将其返回，可以给这个对象发送 autorelease 消息以标记这个对象延迟释放。autorelease 消息并不会影响到对象的引用计数。\n- 当应用终止时内存中的所有对象都会被释放，不论它们是否在自动释放池中。\n\n### 自动引用计数总结\n- 只要某个对象被任一 strong 指针指向，那么它将不会被销毁。如果对象没有被任何 strong 指针指向，那么就将被销毁。\n- 通常所有对象的指针变量都是强变量，将对象的引用赋给变量使对象自动保持，旧对象的引用会在赋值前被释放。\n- 当两个对象都持有彼此的强引用时，将会产生循环保持。如果对象仍然有引用，系统将不能销毁这个对象。如果两个对象都强引用彼此就不可以被销毁。\n- 解决强引用问题可以创建其他类型的对象变量，并允许使用弱引用。通过父视图持有子视图的强引用，子视图持有父视图的弱引用，这样就没有循环保持。弱变量也不能阻止引用的对象被销毁。\n- 以 `Objective-C`中的 delegate 设计模式为例，viewController 中有一个 strong 指针指向它所负责管理的 UITableView，而 UITableView 中的 dataSource 和 delegate 指针都指向 viewController 的 weak 指针。\n- 当声明一个弱变量，系统会追踪赋值给这个变量的引用。当引用的对象释放时，弱变量会被自动设置为nil。变量被设置为nil,给nil对象发送任何消息不会有反应，避免了无意间给这个变量发送消息引起的崩溃。\n- 如果需要持有一个对象，那么对其发送 retain。如果之后不再使用该对象，那么需要对其发送 release（或者autorelease） 每一次对 retain、alloc 或 new 的调用，需要对应一次 release 或 autorelease 调用。\n\n### 深浅拷贝\n#### 深拷贝\n - 将原数据拷贝后存入一块新的内存中，并以新的指针指向新的内存。\n - 拷贝过程结束后，两个对象存储数据相同，内存地址不同。\n - 两个对象互不影响，互不干涉。\n - 源对象和副本的计数器相同。\n - 非容器类的浅拷贝只拷贝对象的地址，没有新的内存被分配。\n - 容器类的浅拷贝不拷贝容器的内容，两个容器的地址不同，在一个容器中修改值，另一个浅拷贝的容器中的值也会变化。\n \n#### 浅拷贝 \n - 拷贝数据所在内存的地址，目标对象指针和源对象指向同一片内存空间。\n - 新对象计数器为1，源对象计数器不变。\n - 在`Objective-C`中使用 retain 关键字进行引用计数，使几个指针共用同一片内存空间，不会轻易的销毁内存。\n - 非容器类的深拷贝就是重写分配一块内存，然后把另一个对象的内容原封不动搬过来。对容器类的深拷贝是对容器中的每个元素都进行拷贝。\n \n#### 拷贝方式\n1. **retain**：始终是浅拷贝。引用计数每次加1。返回对象是否可变与被复制的对象保持一致。\n2. **copy**：对于可变对象为深拷贝，引用计数不改变；对于不可变对象是浅拷贝，引用计数每次加1。始终返回一个不可变对象。  \n3. **mutableCopy**：始终是深拷贝，引用计数不改变。始终返回一个可变对象。\n\n并非所有的类都支持拷贝。只有遵循 NSCopying 协议的类，才支持 copy 拷贝，只有遵循 NSMutableCopying 协议的类，才支持 mutableCopy 拷贝。如果没有遵循拷贝协议拷贝时会出错。\n\n### 参考\n[手把手教你ARC——iOS/Mac开发ARC入门和使用](https://onevcat.com/2012/06/arc-hand-by-hand/)\n[Objective-C中的深拷贝和浅拷贝](https://www.cnblogs.com/ludashi/p/3894151.html)\n[Objective-C 程序设计 (第六版)]()","slug":"Objc_Learning_8","published":1,"updated":"2020-04-25T03:36:44.433Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcive9ni001bcv6b6e7hgxeb","content":"<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第八篇文章，主要复习了自动引用计数与深浅拷贝。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"手动引用计数总结\"><a href=\"#手动引用计数总结\" class=\"headerlink\" title=\"手动引用计数总结\"></a>手动引用计数总结</h3><ul>\n<li>若需保持对象不被销毁可以使用 retain，使用完对象后需使用 release 进行释放。</li>\n<li>给对象发送 release 消息不会必然销毁对象，只有当该对象的引用计数减至0时对象才会被销毁，接着系统会发送 dealloc 消息给这个对象用于释放内存。</li>\n<li>对使用了 retain 或者 copy、 mutableCopy、alloc 或 new 方法的任何对象，以及具有 retain 和 copy 特性的属性进行释放，需要覆盖 dealloc 方法，使得在对象被释放的时候能够释放这些实例变量。</li>\n<li>如果在方法中不再需要用到这个对象但需要将其返回，可以给这个对象发送 autorelease 消息以标记这个对象延迟释放。autorelease 消息并不会影响到对象的引用计数。</li>\n<li>当应用终止时内存中的所有对象都会被释放，不论它们是否在自动释放池中。</li>\n</ul>\n<h3 id=\"自动引用计数总结\"><a href=\"#自动引用计数总结\" class=\"headerlink\" title=\"自动引用计数总结\"></a>自动引用计数总结</h3><ul>\n<li>只要某个对象被任一 strong 指针指向，那么它将不会被销毁。如果对象没有被任何 strong 指针指向，那么就将被销毁。</li>\n<li>通常所有对象的指针变量都是强变量，将对象的引用赋给变量使对象自动保持，旧对象的引用会在赋值前被释放。</li>\n<li>当两个对象都持有彼此的强引用时，将会产生循环保持。如果对象仍然有引用，系统将不能销毁这个对象。如果两个对象都强引用彼此就不可以被销毁。</li>\n<li>解决强引用问题可以创建其他类型的对象变量，并允许使用弱引用。通过父视图持有子视图的强引用，子视图持有父视图的弱引用，这样就没有循环保持。弱变量也不能阻止引用的对象被销毁。</li>\n<li>以 <code>Objective-C</code>中的 delegate 设计模式为例，viewController 中有一个 strong 指针指向它所负责管理的 UITableView，而 UITableView 中的 dataSource 和 delegate 指针都指向 viewController 的 weak 指针。</li>\n<li>当声明一个弱变量，系统会追踪赋值给这个变量的引用。当引用的对象释放时，弱变量会被自动设置为nil。变量被设置为nil,给nil对象发送任何消息不会有反应，避免了无意间给这个变量发送消息引起的崩溃。</li>\n<li>如果需要持有一个对象，那么对其发送 retain。如果之后不再使用该对象，那么需要对其发送 release（或者autorelease） 每一次对 retain、alloc 或 new 的调用，需要对应一次 release 或 autorelease 调用。</li>\n</ul>\n<h3 id=\"深浅拷贝\"><a href=\"#深浅拷贝\" class=\"headerlink\" title=\"深浅拷贝\"></a>深浅拷贝</h3><h4 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h4><ul>\n<li>将原数据拷贝后存入一块新的内存中，并以新的指针指向新的内存。</li>\n<li>拷贝过程结束后，两个对象存储数据相同，内存地址不同。</li>\n<li>两个对象互不影响，互不干涉。</li>\n<li>源对象和副本的计数器相同。</li>\n<li>非容器类的浅拷贝只拷贝对象的地址，没有新的内存被分配。</li>\n<li>容器类的浅拷贝不拷贝容器的内容，两个容器的地址不同，在一个容器中修改值，另一个浅拷贝的容器中的值也会变化。</li>\n</ul>\n<h4 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h4><ul>\n<li>拷贝数据所在内存的地址，目标对象指针和源对象指向同一片内存空间。</li>\n<li>新对象计数器为1，源对象计数器不变。</li>\n<li>在<code>Objective-C</code>中使用 retain 关键字进行引用计数，使几个指针共用同一片内存空间，不会轻易的销毁内存。</li>\n<li>非容器类的深拷贝就是重写分配一块内存，然后把另一个对象的内容原封不动搬过来。对容器类的深拷贝是对容器中的每个元素都进行拷贝。</li>\n</ul>\n<h4 id=\"拷贝方式\"><a href=\"#拷贝方式\" class=\"headerlink\" title=\"拷贝方式\"></a>拷贝方式</h4><ol>\n<li><strong>retain</strong>：始终是浅拷贝。引用计数每次加1。返回对象是否可变与被复制的对象保持一致。</li>\n<li><strong>copy</strong>：对于可变对象为深拷贝，引用计数不改变；对于不可变对象是浅拷贝，引用计数每次加1。始终返回一个不可变对象。  </li>\n<li><strong>mutableCopy</strong>：始终是深拷贝，引用计数不改变。始终返回一个可变对象。</li>\n</ol>\n<p>并非所有的类都支持拷贝。只有遵循 NSCopying 协议的类，才支持 copy 拷贝，只有遵循 NSMutableCopying 协议的类，才支持 mutableCopy 拷贝。如果没有遵循拷贝协议拷贝时会出错。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://onevcat.com/2012/06/arc-hand-by-hand/\" target=\"_blank\" rel=\"noopener\">手把手教你ARC——iOS/Mac开发ARC入门和使用</a><br><a href=\"https://www.cnblogs.com/ludashi/p/3894151.html\" target=\"_blank\" rel=\"noopener\">Objective-C中的深拷贝和浅拷贝</a><br><a href=\"\">Objective-C 程序设计 (第六版)</a></p>\n","site":{"data":{}},"excerpt":"<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第八篇文章，主要复习了自动引用计数与深浅拷贝。</p>","more":"<h3 id=\"手动引用计数总结\"><a href=\"#手动引用计数总结\" class=\"headerlink\" title=\"手动引用计数总结\"></a>手动引用计数总结</h3><ul>\n<li>若需保持对象不被销毁可以使用 retain，使用完对象后需使用 release 进行释放。</li>\n<li>给对象发送 release 消息不会必然销毁对象，只有当该对象的引用计数减至0时对象才会被销毁，接着系统会发送 dealloc 消息给这个对象用于释放内存。</li>\n<li>对使用了 retain 或者 copy、 mutableCopy、alloc 或 new 方法的任何对象，以及具有 retain 和 copy 特性的属性进行释放，需要覆盖 dealloc 方法，使得在对象被释放的时候能够释放这些实例变量。</li>\n<li>如果在方法中不再需要用到这个对象但需要将其返回，可以给这个对象发送 autorelease 消息以标记这个对象延迟释放。autorelease 消息并不会影响到对象的引用计数。</li>\n<li>当应用终止时内存中的所有对象都会被释放，不论它们是否在自动释放池中。</li>\n</ul>\n<h3 id=\"自动引用计数总结\"><a href=\"#自动引用计数总结\" class=\"headerlink\" title=\"自动引用计数总结\"></a>自动引用计数总结</h3><ul>\n<li>只要某个对象被任一 strong 指针指向，那么它将不会被销毁。如果对象没有被任何 strong 指针指向，那么就将被销毁。</li>\n<li>通常所有对象的指针变量都是强变量，将对象的引用赋给变量使对象自动保持，旧对象的引用会在赋值前被释放。</li>\n<li>当两个对象都持有彼此的强引用时，将会产生循环保持。如果对象仍然有引用，系统将不能销毁这个对象。如果两个对象都强引用彼此就不可以被销毁。</li>\n<li>解决强引用问题可以创建其他类型的对象变量，并允许使用弱引用。通过父视图持有子视图的强引用，子视图持有父视图的弱引用，这样就没有循环保持。弱变量也不能阻止引用的对象被销毁。</li>\n<li>以 <code>Objective-C</code>中的 delegate 设计模式为例，viewController 中有一个 strong 指针指向它所负责管理的 UITableView，而 UITableView 中的 dataSource 和 delegate 指针都指向 viewController 的 weak 指针。</li>\n<li>当声明一个弱变量，系统会追踪赋值给这个变量的引用。当引用的对象释放时，弱变量会被自动设置为nil。变量被设置为nil,给nil对象发送任何消息不会有反应，避免了无意间给这个变量发送消息引起的崩溃。</li>\n<li>如果需要持有一个对象，那么对其发送 retain。如果之后不再使用该对象，那么需要对其发送 release（或者autorelease） 每一次对 retain、alloc 或 new 的调用，需要对应一次 release 或 autorelease 调用。</li>\n</ul>\n<h3 id=\"深浅拷贝\"><a href=\"#深浅拷贝\" class=\"headerlink\" title=\"深浅拷贝\"></a>深浅拷贝</h3><h4 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h4><ul>\n<li>将原数据拷贝后存入一块新的内存中，并以新的指针指向新的内存。</li>\n<li>拷贝过程结束后，两个对象存储数据相同，内存地址不同。</li>\n<li>两个对象互不影响，互不干涉。</li>\n<li>源对象和副本的计数器相同。</li>\n<li>非容器类的浅拷贝只拷贝对象的地址，没有新的内存被分配。</li>\n<li>容器类的浅拷贝不拷贝容器的内容，两个容器的地址不同，在一个容器中修改值，另一个浅拷贝的容器中的值也会变化。</li>\n</ul>\n<h4 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h4><ul>\n<li>拷贝数据所在内存的地址，目标对象指针和源对象指向同一片内存空间。</li>\n<li>新对象计数器为1，源对象计数器不变。</li>\n<li>在<code>Objective-C</code>中使用 retain 关键字进行引用计数，使几个指针共用同一片内存空间，不会轻易的销毁内存。</li>\n<li>非容器类的深拷贝就是重写分配一块内存，然后把另一个对象的内容原封不动搬过来。对容器类的深拷贝是对容器中的每个元素都进行拷贝。</li>\n</ul>\n<h4 id=\"拷贝方式\"><a href=\"#拷贝方式\" class=\"headerlink\" title=\"拷贝方式\"></a>拷贝方式</h4><ol>\n<li><strong>retain</strong>：始终是浅拷贝。引用计数每次加1。返回对象是否可变与被复制的对象保持一致。</li>\n<li><strong>copy</strong>：对于可变对象为深拷贝，引用计数不改变；对于不可变对象是浅拷贝，引用计数每次加1。始终返回一个不可变对象。  </li>\n<li><strong>mutableCopy</strong>：始终是深拷贝，引用计数不改变。始终返回一个可变对象。</li>\n</ol>\n<p>并非所有的类都支持拷贝。只有遵循 NSCopying 协议的类，才支持 copy 拷贝，只有遵循 NSMutableCopying 协议的类，才支持 mutableCopy 拷贝。如果没有遵循拷贝协议拷贝时会出错。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://onevcat.com/2012/06/arc-hand-by-hand/\" target=\"_blank\" rel=\"noopener\">手把手教你ARC——iOS/Mac开发ARC入门和使用</a><br><a href=\"https://www.cnblogs.com/ludashi/p/3894151.html\" target=\"_blank\" rel=\"noopener\">Objective-C中的深拷贝和浅拷贝</a><br><a href=\"\">Objective-C 程序设计 (第六版)</a></p>"},{"title":"在Mac上配置OpenCV与Xcode开发环境","date":"2020-02-26T08:20:20.000Z","copyright":true,"_content":"\n下学期选了数字图像处理课程，接下来的`OpenCV`学习过程我会从零开始记录，第零课是开发环境的配置。\n\n由于笔者使用的是Mac，相较于`C++`，笔者的`Python`功底不是很扎实，所以使用Xcode与`C++`实践`OpenCV`项目。在网络上搜寻了许多关于`OpenCV`与 Xcode 开发环境的配置资料均不是很完善,于是决定自己写一篇，希望对 Mac 用户有所帮助。\n\n<!--more-->\n\n## 准备工作\n\n### 1.安装 Xcode\n\n{% asset_img Xcode.png %}\n\n从 App Store 安装 Xcode。目前 Xcode（11.3）的安装后大小约为19 GB，因此可能需要近半小时的下载与安装时间，具体取决于互联网速度与设备运行速度。\n\n### 2.安装 Homebrew\n\n[Homebrew](https://brew.sh/) 是 Mac 上必备的包管理工具，诸多优点不复赘述。\n如果你还没有安装过 [Homebrew](https://brew.sh/) ，只需打开任意终端并粘贴以下代码并回车即可完成安装。\n\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n### 3.安装 OpenCV\n完成 Homebrew 的安装后， 即可使用`brew`命令完成`OpenCV`的安装部署。\n\n```\nbrew install opencv\n```\n\n### 4.安装 pkg-config\n\n`pkg-config`是在编译应用程序和库时使用的辅助工具，可以帮助我们找到找到正确的OpenCV 链接器符号 (Linker Flags) ，在后续的步骤中会用到。\n你需要使用如下命令完成对`pkg-config`的安装。\n\n```\nbrew install pkg-config\n```\n\n### 5.使用 pkg-config\n\n查看您的`opencv.pc`文件所在位置，一般`opencv.pc`文件所在位置为\n\n```\n/usr/local/Cellar/opencv/<版本号>/lib/pkgconfig/opencv.pc\n```\n\n如我安装的最新版本`OpenCV`的相关`opencv.pc`文件在\n```\n/usr/local/Cellar/opencv/4.2.0_1/lib/pkgconfig/opencv.pc\n```\n\n使用下面的命令查看`OpenCV`的链接器符号 (Linker Flags) ，请务必修改其中的版本信息。\n```\npkg-config --cflags --libs /usr/local/Cellar/opencv/<版本号>/lib/pkgconfig/opencv.pc\n```\n\n你会得到类似于如下的输出结果，我们需要参照输出结果在 Xcode 中进行配置。\n\n```\n-I/usr/local/Cellar/opencv/4.2.0_1/include/opencv4/opencv -I/usr/local/Cellar/opencv/4.2.0_1/include/opencv4 -L/usr/local/Cellar/opencv/4.2.0_1/lib -lopencv_gapi -lopencv_stitching -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_highgui -lopencv_face -lopencv_freetype -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_quality -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_sfm -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core\n```\n\n## 配置 Xcode\n\n### 6.创建 Xcode 项目\n\n在正式运行 OpenCV C++代码之前，首先需要在 Xcode 中创建一个空的`C++`项目。具体创建过程不在这里叙述。\n\n{% asset_img Project.png %}\n\n需要注意的是项目的 *Language* 应选择为 C++。\n\n### 7.设置 Header Search Paths\n\n{% asset_img Headers.png %}\n\n在 Xcode 中设置 *Header Search Paths*，先单击 Xco​​de 项目，然后点击 *Build Settings*，然后搜索“Header Search Paths”。将 *Header Search Paths* 路径设置为刚才得到的输出结果“-I”之后的路径，如我需要对如下路径进行添加。\n\n```\n/usr/local/Cellar/opencv/4.2.0_1/include/opencv4/opencv \n/usr/local/Cellar/opencv/4.2.0_1/include/opencv4\n```\n\n### 8.设置 Library Search Paths\n\n{% asset_img Library.png %}\n\n类似地，在 *Build Settings* 中搜索“Library Search Paths”，将 *Library Search Paths* 路径设置为刚才得到的输出结果“-L”之后的路径，如我需要对如下路径进行添加。\n\n```\n/usr/local/Cellar/opencv/4.2.0_1/lib \n```\n\n### 9.设置 Other Linker Flags\n\n{% asset_img linker.png %}\n\n同样，在 *Build Settings* 中搜索“Other Linker Flags”，将 *Other Linker Flags* 路径设置为刚才得到的输出结果中的其他内容，即 Linker Flags，我需要对如下 Linker Flags 进行添加。（无需手动输入，只需单击输入框粘贴相关内容）\n\n```\n -lopencv_gapi -lopencv_stitching -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_highgui -lopencv_face -lopencv_freetype -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_quality -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_sfm -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core\n```\n\n### 9.测试运行\n配置到这一步 Xcode 相关内容已经结束。可以尝试运行简单的`OpenCV`程序判断是否能够正常运行，以下给出简单的示例程序，功能仅为打开图片与退出。\n\n你需要按照后文中“使用相对路径”方法配置相对路径并添加图片`test.jpeg`到项目文件夹。\n\n```cpp\n#include<opencv2/opencv.hpp>\n#include <iostream>\n\nusing namespace cv;\nusing namespace std;\n\nint main()\n{\n    Mat image= imread(\"test.jpeg\");// 读取图片\n    if(!image.data)             // 检查非法输入\n      {\n          cout <<  \"无法读取照片\" << endl ;\n          return -1;\n      }\n\n    namedWindow(\"Display window\",WINDOW_AUTOSIZE);   // 创建图片显示自动调整大小的窗口\n    imshow(\"img\",image);    // 在窗口显示图片\n    \n    waitKey(0); // 按键等待，需要在窗口任意输入字符退出，0代表永久等待\n    return 0;\n}\n```\n\n若运行过程出现问题请检查上述步骤是否正确，后文中给出了部分问题的解决方案，可能对您有帮助。\n\n## 其他设置\n\n### 使用相对路径\n\n{% asset_img dir.png %}\n\nXcode使用图像或资源的绝对路径。为了设置相对路径需要设置*Working Directory*。依次点击 `菜单栏Product > Scheme > Edit Scheme ` 中转到*Run*中的*check Use Custom Working Directory*选项，然后自定义项目目录。\n\n## 可能出现的错误\n\n### 出现 “Not a Doxygen trailing comment” 错误\n\n{% asset_img documention.png %}\n\n在 *Build Settings* 中搜索 \"Documentation Comments\"，将 *Documentation Comments* 设置为\"No\"即可解决该问题。`Doxygen` 只是一种格式可以选择跳过检查。\n\n### 出现 \"dyld: Library not loaded...\" 错误\n\n{% asset_img signature.png %}\n\n在 *Signing & Capabilities* 中打开*Disable Library Validation*，即可解决该问题。问题的原因是`brew`安装的`OpenCV`存在签名问题，暂且可以先认可没有被签名的 Library。\n\n## 参考\n[Setting up OpenCV and C++ development environment in Xcode for Computer Vision projects](https://medium.com/@jaskaranvirdi/setting-up-opencv-and-c-development-environment-in-xcode-b6027728003)\n\n[Xcode in macox 10.15 beta library code signature problem](https://github.com/opencv/opencv/issues/15645#issuecomment-554495051)\n\n[Not a Doxygen trailing comment](https://stackoverflow.com/questions/39929199/not-a-doxygen-trailing-comment)\n\n[Load and Display an Image](https://docs.opencv.org/2.4/doc/tutorials/introduction/display_image/display_image.html)\n","source":"_posts/OpenCV_Xcode.md","raw":"---\ntitle: 在Mac上配置OpenCV与Xcode开发环境\ndate: 2020-02-26 16:20:20\ncategories: \n- tech\ntags: \n- OpenCV\n- Xcode\n- Apple\ncopyright: true\n---\n\n下学期选了数字图像处理课程，接下来的`OpenCV`学习过程我会从零开始记录，第零课是开发环境的配置。\n\n由于笔者使用的是Mac，相较于`C++`，笔者的`Python`功底不是很扎实，所以使用Xcode与`C++`实践`OpenCV`项目。在网络上搜寻了许多关于`OpenCV`与 Xcode 开发环境的配置资料均不是很完善,于是决定自己写一篇，希望对 Mac 用户有所帮助。\n\n<!--more-->\n\n## 准备工作\n\n### 1.安装 Xcode\n\n{% asset_img Xcode.png %}\n\n从 App Store 安装 Xcode。目前 Xcode（11.3）的安装后大小约为19 GB，因此可能需要近半小时的下载与安装时间，具体取决于互联网速度与设备运行速度。\n\n### 2.安装 Homebrew\n\n[Homebrew](https://brew.sh/) 是 Mac 上必备的包管理工具，诸多优点不复赘述。\n如果你还没有安装过 [Homebrew](https://brew.sh/) ，只需打开任意终端并粘贴以下代码并回车即可完成安装。\n\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n### 3.安装 OpenCV\n完成 Homebrew 的安装后， 即可使用`brew`命令完成`OpenCV`的安装部署。\n\n```\nbrew install opencv\n```\n\n### 4.安装 pkg-config\n\n`pkg-config`是在编译应用程序和库时使用的辅助工具，可以帮助我们找到找到正确的OpenCV 链接器符号 (Linker Flags) ，在后续的步骤中会用到。\n你需要使用如下命令完成对`pkg-config`的安装。\n\n```\nbrew install pkg-config\n```\n\n### 5.使用 pkg-config\n\n查看您的`opencv.pc`文件所在位置，一般`opencv.pc`文件所在位置为\n\n```\n/usr/local/Cellar/opencv/<版本号>/lib/pkgconfig/opencv.pc\n```\n\n如我安装的最新版本`OpenCV`的相关`opencv.pc`文件在\n```\n/usr/local/Cellar/opencv/4.2.0_1/lib/pkgconfig/opencv.pc\n```\n\n使用下面的命令查看`OpenCV`的链接器符号 (Linker Flags) ，请务必修改其中的版本信息。\n```\npkg-config --cflags --libs /usr/local/Cellar/opencv/<版本号>/lib/pkgconfig/opencv.pc\n```\n\n你会得到类似于如下的输出结果，我们需要参照输出结果在 Xcode 中进行配置。\n\n```\n-I/usr/local/Cellar/opencv/4.2.0_1/include/opencv4/opencv -I/usr/local/Cellar/opencv/4.2.0_1/include/opencv4 -L/usr/local/Cellar/opencv/4.2.0_1/lib -lopencv_gapi -lopencv_stitching -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_highgui -lopencv_face -lopencv_freetype -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_quality -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_sfm -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core\n```\n\n## 配置 Xcode\n\n### 6.创建 Xcode 项目\n\n在正式运行 OpenCV C++代码之前，首先需要在 Xcode 中创建一个空的`C++`项目。具体创建过程不在这里叙述。\n\n{% asset_img Project.png %}\n\n需要注意的是项目的 *Language* 应选择为 C++。\n\n### 7.设置 Header Search Paths\n\n{% asset_img Headers.png %}\n\n在 Xcode 中设置 *Header Search Paths*，先单击 Xco​​de 项目，然后点击 *Build Settings*，然后搜索“Header Search Paths”。将 *Header Search Paths* 路径设置为刚才得到的输出结果“-I”之后的路径，如我需要对如下路径进行添加。\n\n```\n/usr/local/Cellar/opencv/4.2.0_1/include/opencv4/opencv \n/usr/local/Cellar/opencv/4.2.0_1/include/opencv4\n```\n\n### 8.设置 Library Search Paths\n\n{% asset_img Library.png %}\n\n类似地，在 *Build Settings* 中搜索“Library Search Paths”，将 *Library Search Paths* 路径设置为刚才得到的输出结果“-L”之后的路径，如我需要对如下路径进行添加。\n\n```\n/usr/local/Cellar/opencv/4.2.0_1/lib \n```\n\n### 9.设置 Other Linker Flags\n\n{% asset_img linker.png %}\n\n同样，在 *Build Settings* 中搜索“Other Linker Flags”，将 *Other Linker Flags* 路径设置为刚才得到的输出结果中的其他内容，即 Linker Flags，我需要对如下 Linker Flags 进行添加。（无需手动输入，只需单击输入框粘贴相关内容）\n\n```\n -lopencv_gapi -lopencv_stitching -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_highgui -lopencv_face -lopencv_freetype -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_quality -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_sfm -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core\n```\n\n### 9.测试运行\n配置到这一步 Xcode 相关内容已经结束。可以尝试运行简单的`OpenCV`程序判断是否能够正常运行，以下给出简单的示例程序，功能仅为打开图片与退出。\n\n你需要按照后文中“使用相对路径”方法配置相对路径并添加图片`test.jpeg`到项目文件夹。\n\n```cpp\n#include<opencv2/opencv.hpp>\n#include <iostream>\n\nusing namespace cv;\nusing namespace std;\n\nint main()\n{\n    Mat image= imread(\"test.jpeg\");// 读取图片\n    if(!image.data)             // 检查非法输入\n      {\n          cout <<  \"无法读取照片\" << endl ;\n          return -1;\n      }\n\n    namedWindow(\"Display window\",WINDOW_AUTOSIZE);   // 创建图片显示自动调整大小的窗口\n    imshow(\"img\",image);    // 在窗口显示图片\n    \n    waitKey(0); // 按键等待，需要在窗口任意输入字符退出，0代表永久等待\n    return 0;\n}\n```\n\n若运行过程出现问题请检查上述步骤是否正确，后文中给出了部分问题的解决方案，可能对您有帮助。\n\n## 其他设置\n\n### 使用相对路径\n\n{% asset_img dir.png %}\n\nXcode使用图像或资源的绝对路径。为了设置相对路径需要设置*Working Directory*。依次点击 `菜单栏Product > Scheme > Edit Scheme ` 中转到*Run*中的*check Use Custom Working Directory*选项，然后自定义项目目录。\n\n## 可能出现的错误\n\n### 出现 “Not a Doxygen trailing comment” 错误\n\n{% asset_img documention.png %}\n\n在 *Build Settings* 中搜索 \"Documentation Comments\"，将 *Documentation Comments* 设置为\"No\"即可解决该问题。`Doxygen` 只是一种格式可以选择跳过检查。\n\n### 出现 \"dyld: Library not loaded...\" 错误\n\n{% asset_img signature.png %}\n\n在 *Signing & Capabilities* 中打开*Disable Library Validation*，即可解决该问题。问题的原因是`brew`安装的`OpenCV`存在签名问题，暂且可以先认可没有被签名的 Library。\n\n## 参考\n[Setting up OpenCV and C++ development environment in Xcode for Computer Vision projects](https://medium.com/@jaskaranvirdi/setting-up-opencv-and-c-development-environment-in-xcode-b6027728003)\n\n[Xcode in macox 10.15 beta library code signature problem](https://github.com/opencv/opencv/issues/15645#issuecomment-554495051)\n\n[Not a Doxygen trailing comment](https://stackoverflow.com/questions/39929199/not-a-doxygen-trailing-comment)\n\n[Load and Display an Image](https://docs.opencv.org/2.4/doc/tutorials/introduction/display_image/display_image.html)\n","slug":"OpenCV_Xcode","published":1,"updated":"2020-07-12T09:20:01.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcive9nj001ecv6b1qbu9yxw","content":"<p>下学期选了数字图像处理课程，接下来的<code>OpenCV</code>学习过程我会从零开始记录，第零课是开发环境的配置。</p>\n<p>由于笔者使用的是Mac，相较于<code>C++</code>，笔者的<code>Python</code>功底不是很扎实，所以使用Xcode与<code>C++</code>实践<code>OpenCV</code>项目。在网络上搜寻了许多关于<code>OpenCV</code>与 Xcode 开发环境的配置资料均不是很完善,于是决定自己写一篇，希望对 Mac 用户有所帮助。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"1-安装-Xcode\"><a href=\"#1-安装-Xcode\" class=\"headerlink\" title=\"1.安装 Xcode\"></a>1.安装 Xcode</h3>\n\n<p>从 App Store 安装 Xcode。目前 Xcode（11.3）的安装后大小约为19 GB，因此可能需要近半小时的下载与安装时间，具体取决于互联网速度与设备运行速度。</p>\n<h3 id=\"2-安装-Homebrew\"><a href=\"#2-安装-Homebrew\" class=\"headerlink\" title=\"2.安装 Homebrew\"></a>2.安装 Homebrew</h3><p><a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a> 是 Mac 上必备的包管理工具，诸多优点不复赘述。<br>如果你还没有安装过 <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a> ，只需打开任意终端并粘贴以下代码并回车即可完成安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;bin&#x2F;ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-安装-OpenCV\"><a href=\"#3-安装-OpenCV\" class=\"headerlink\" title=\"3.安装 OpenCV\"></a>3.安装 OpenCV</h3><p>完成 Homebrew 的安装后， 即可使用<code>brew</code>命令完成<code>OpenCV</code>的安装部署。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install opencv</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-安装-pkg-config\"><a href=\"#4-安装-pkg-config\" class=\"headerlink\" title=\"4.安装 pkg-config\"></a>4.安装 pkg-config</h3><p><code>pkg-config</code>是在编译应用程序和库时使用的辅助工具，可以帮助我们找到找到正确的OpenCV 链接器符号 (Linker Flags) ，在后续的步骤中会用到。<br>你需要使用如下命令完成对<code>pkg-config</code>的安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install pkg-config</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-使用-pkg-config\"><a href=\"#5-使用-pkg-config\" class=\"headerlink\" title=\"5.使用 pkg-config\"></a>5.使用 pkg-config</h3><p>查看您的<code>opencv.pc</code>文件所在位置，一般<code>opencv.pc</code>文件所在位置为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;&lt;版本号&gt;&#x2F;lib&#x2F;pkgconfig&#x2F;opencv.pc</span><br></pre></td></tr></table></figure>\n\n<p>如我安装的最新版本<code>OpenCV</code>的相关<code>opencv.pc</code>文件在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;lib&#x2F;pkgconfig&#x2F;opencv.pc</span><br></pre></td></tr></table></figure>\n\n<p>使用下面的命令查看<code>OpenCV</code>的链接器符号 (Linker Flags) ，请务必修改其中的版本信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg-config --cflags --libs &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;&lt;版本号&gt;&#x2F;lib&#x2F;pkgconfig&#x2F;opencv.pc</span><br></pre></td></tr></table></figure>\n\n<p>你会得到类似于如下的输出结果，我们需要参照输出结果在 Xcode 中进行配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-I&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;include&#x2F;opencv4&#x2F;opencv -I&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;include&#x2F;opencv4 -L&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;lib -lopencv_gapi -lopencv_stitching -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_highgui -lopencv_face -lopencv_freetype -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_quality -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_sfm -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-Xcode\"><a href=\"#配置-Xcode\" class=\"headerlink\" title=\"配置 Xcode\"></a>配置 Xcode</h2><h3 id=\"6-创建-Xcode-项目\"><a href=\"#6-创建-Xcode-项目\" class=\"headerlink\" title=\"6.创建 Xcode 项目\"></a>6.创建 Xcode 项目</h3><p>在正式运行 OpenCV C++代码之前，首先需要在 Xcode 中创建一个空的<code>C++</code>项目。具体创建过程不在这里叙述。</p>\n\n\n<p>需要注意的是项目的 <em>Language</em> 应选择为 C++。</p>\n<h3 id=\"7-设置-Header-Search-Paths\"><a href=\"#7-设置-Header-Search-Paths\" class=\"headerlink\" title=\"7.设置 Header Search Paths\"></a>7.设置 Header Search Paths</h3>\n\n<p>在 Xcode 中设置 <em>Header Search Paths<em>，先单击 Xco​​de 项目，然后点击 *Build Settings</em>，然后搜索“Header Search Paths”。将 *Header Search Paths</em> 路径设置为刚才得到的输出结果“-I”之后的路径，如我需要对如下路径进行添加。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;include&#x2F;opencv4&#x2F;opencv </span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;include&#x2F;opencv4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-设置-Library-Search-Paths\"><a href=\"#8-设置-Library-Search-Paths\" class=\"headerlink\" title=\"8.设置 Library Search Paths\"></a>8.设置 Library Search Paths</h3>\n\n<p>类似地，在 <em>Build Settings</em> 中搜索“Library Search Paths”，将 <em>Library Search Paths</em> 路径设置为刚才得到的输出结果“-L”之后的路径，如我需要对如下路径进行添加。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;lib</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-设置-Other-Linker-Flags\"><a href=\"#9-设置-Other-Linker-Flags\" class=\"headerlink\" title=\"9.设置 Other Linker Flags\"></a>9.设置 Other Linker Flags</h3>\n\n<p>同样，在 <em>Build Settings</em> 中搜索“Other Linker Flags”，将 <em>Other Linker Flags</em> 路径设置为刚才得到的输出结果中的其他内容，即 Linker Flags，我需要对如下 Linker Flags 进行添加。（无需手动输入，只需单击输入框粘贴相关内容）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-lopencv_gapi -lopencv_stitching -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_highgui -lopencv_face -lopencv_freetype -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_quality -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_sfm -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-测试运行\"><a href=\"#9-测试运行\" class=\"headerlink\" title=\"9.测试运行\"></a>9.测试运行</h3><p>配置到这一步 Xcode 相关内容已经结束。可以尝试运行简单的<code>OpenCV</code>程序判断是否能够正常运行，以下给出简单的示例程序，功能仅为打开图片与退出。</p>\n<p>你需要按照后文中“使用相对路径”方法配置相对路径并添加图片<code>test.jpeg</code>到项目文件夹。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Mat image= imread(<span class=\"string\">\"test.jpeg\"</span>);<span class=\"comment\">// 读取图片</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!image.data)             <span class=\"comment\">// 检查非法输入</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"built_in\">cout</span> &lt;&lt;  <span class=\"string\">\"无法读取照片\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    namedWindow(<span class=\"string\">\"Display window\"</span>,WINDOW_AUTOSIZE);   <span class=\"comment\">// 创建图片显示自动调整大小的窗口</span></span><br><span class=\"line\">    imshow(<span class=\"string\">\"img\"</span>,image);    <span class=\"comment\">// 在窗口显示图片</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    waitKey(<span class=\"number\">0</span>); <span class=\"comment\">// 按键等待，需要在窗口任意输入字符退出，0代表永久等待</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>若运行过程出现问题请检查上述步骤是否正确，后文中给出了部分问题的解决方案，可能对您有帮助。</p>\n<h2 id=\"其他设置\"><a href=\"#其他设置\" class=\"headerlink\" title=\"其他设置\"></a>其他设置</h2><h3 id=\"使用相对路径\"><a href=\"#使用相对路径\" class=\"headerlink\" title=\"使用相对路径\"></a>使用相对路径</h3>\n\n<p>Xcode使用图像或资源的绝对路径。为了设置相对路径需要设置<em>Working Directory</em>。依次点击 <code>菜单栏Product &gt; Scheme &gt; Edit Scheme</code> 中转到<em>Run</em>中的<em>check Use Custom Working Directory</em>选项，然后自定义项目目录。</p>\n<h2 id=\"可能出现的错误\"><a href=\"#可能出现的错误\" class=\"headerlink\" title=\"可能出现的错误\"></a>可能出现的错误</h2><h3 id=\"出现-“Not-a-Doxygen-trailing-comment”-错误\"><a href=\"#出现-“Not-a-Doxygen-trailing-comment”-错误\" class=\"headerlink\" title=\"出现 “Not a Doxygen trailing comment” 错误\"></a>出现 “Not a Doxygen trailing comment” 错误</h3>\n\n<p>在 <em>Build Settings</em> 中搜索 “Documentation Comments”，将 <em>Documentation Comments</em> 设置为”No”即可解决该问题。<code>Doxygen</code> 只是一种格式可以选择跳过检查。</p>\n<h3 id=\"出现-“dyld-Library-not-loaded…”-错误\"><a href=\"#出现-“dyld-Library-not-loaded…”-错误\" class=\"headerlink\" title=\"出现 “dyld: Library not loaded…” 错误\"></a>出现 “dyld: Library not loaded…” 错误</h3>\n\n<p>在 <em>Signing &amp; Capabilities</em> 中打开<em>Disable Library Validation</em>，即可解决该问题。问题的原因是<code>brew</code>安装的<code>OpenCV</code>存在签名问题，暂且可以先认可没有被签名的 Library。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://medium.com/@jaskaranvirdi/setting-up-opencv-and-c-development-environment-in-xcode-b6027728003\" target=\"_blank\" rel=\"noopener\">Setting up OpenCV and C++ development environment in Xcode for Computer Vision projects</a></p>\n<p><a href=\"https://github.com/opencv/opencv/issues/15645#issuecomment-554495051\" target=\"_blank\" rel=\"noopener\">Xcode in macox 10.15 beta library code signature problem</a></p>\n<p><a href=\"https://stackoverflow.com/questions/39929199/not-a-doxygen-trailing-comment\" target=\"_blank\" rel=\"noopener\">Not a Doxygen trailing comment</a></p>\n<p><a href=\"https://docs.opencv.org/2.4/doc/tutorials/introduction/display_image/display_image.html\" target=\"_blank\" rel=\"noopener\">Load and Display an Image</a></p>\n","site":{"data":{}},"excerpt":"<p>下学期选了数字图像处理课程，接下来的<code>OpenCV</code>学习过程我会从零开始记录，第零课是开发环境的配置。</p>\n<p>由于笔者使用的是Mac，相较于<code>C++</code>，笔者的<code>Python</code>功底不是很扎实，所以使用Xcode与<code>C++</code>实践<code>OpenCV</code>项目。在网络上搜寻了许多关于<code>OpenCV</code>与 Xcode 开发环境的配置资料均不是很完善,于是决定自己写一篇，希望对 Mac 用户有所帮助。</p>","more":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"1-安装-Xcode\"><a href=\"#1-安装-Xcode\" class=\"headerlink\" title=\"1.安装 Xcode\"></a>1.安装 Xcode</h3>\n\n<p>从 App Store 安装 Xcode。目前 Xcode（11.3）的安装后大小约为19 GB，因此可能需要近半小时的下载与安装时间，具体取决于互联网速度与设备运行速度。</p>\n<h3 id=\"2-安装-Homebrew\"><a href=\"#2-安装-Homebrew\" class=\"headerlink\" title=\"2.安装 Homebrew\"></a>2.安装 Homebrew</h3><p><a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a> 是 Mac 上必备的包管理工具，诸多优点不复赘述。<br>如果你还没有安装过 <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a> ，只需打开任意终端并粘贴以下代码并回车即可完成安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;bin&#x2F;ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-安装-OpenCV\"><a href=\"#3-安装-OpenCV\" class=\"headerlink\" title=\"3.安装 OpenCV\"></a>3.安装 OpenCV</h3><p>完成 Homebrew 的安装后， 即可使用<code>brew</code>命令完成<code>OpenCV</code>的安装部署。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install opencv</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-安装-pkg-config\"><a href=\"#4-安装-pkg-config\" class=\"headerlink\" title=\"4.安装 pkg-config\"></a>4.安装 pkg-config</h3><p><code>pkg-config</code>是在编译应用程序和库时使用的辅助工具，可以帮助我们找到找到正确的OpenCV 链接器符号 (Linker Flags) ，在后续的步骤中会用到。<br>你需要使用如下命令完成对<code>pkg-config</code>的安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install pkg-config</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-使用-pkg-config\"><a href=\"#5-使用-pkg-config\" class=\"headerlink\" title=\"5.使用 pkg-config\"></a>5.使用 pkg-config</h3><p>查看您的<code>opencv.pc</code>文件所在位置，一般<code>opencv.pc</code>文件所在位置为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;&lt;版本号&gt;&#x2F;lib&#x2F;pkgconfig&#x2F;opencv.pc</span><br></pre></td></tr></table></figure>\n\n<p>如我安装的最新版本<code>OpenCV</code>的相关<code>opencv.pc</code>文件在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;lib&#x2F;pkgconfig&#x2F;opencv.pc</span><br></pre></td></tr></table></figure>\n\n<p>使用下面的命令查看<code>OpenCV</code>的链接器符号 (Linker Flags) ，请务必修改其中的版本信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg-config --cflags --libs &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;&lt;版本号&gt;&#x2F;lib&#x2F;pkgconfig&#x2F;opencv.pc</span><br></pre></td></tr></table></figure>\n\n<p>你会得到类似于如下的输出结果，我们需要参照输出结果在 Xcode 中进行配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-I&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;include&#x2F;opencv4&#x2F;opencv -I&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;include&#x2F;opencv4 -L&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;lib -lopencv_gapi -lopencv_stitching -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_highgui -lopencv_face -lopencv_freetype -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_quality -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_sfm -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-Xcode\"><a href=\"#配置-Xcode\" class=\"headerlink\" title=\"配置 Xcode\"></a>配置 Xcode</h2><h3 id=\"6-创建-Xcode-项目\"><a href=\"#6-创建-Xcode-项目\" class=\"headerlink\" title=\"6.创建 Xcode 项目\"></a>6.创建 Xcode 项目</h3><p>在正式运行 OpenCV C++代码之前，首先需要在 Xcode 中创建一个空的<code>C++</code>项目。具体创建过程不在这里叙述。</p>\n\n\n<p>需要注意的是项目的 <em>Language</em> 应选择为 C++。</p>\n<h3 id=\"7-设置-Header-Search-Paths\"><a href=\"#7-设置-Header-Search-Paths\" class=\"headerlink\" title=\"7.设置 Header Search Paths\"></a>7.设置 Header Search Paths</h3>\n\n<p>在 Xcode 中设置 <em>Header Search Paths<em>，先单击 Xco​​de 项目，然后点击 *Build Settings</em>，然后搜索“Header Search Paths”。将 *Header Search Paths</em> 路径设置为刚才得到的输出结果“-I”之后的路径，如我需要对如下路径进行添加。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;include&#x2F;opencv4&#x2F;opencv </span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;include&#x2F;opencv4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-设置-Library-Search-Paths\"><a href=\"#8-设置-Library-Search-Paths\" class=\"headerlink\" title=\"8.设置 Library Search Paths\"></a>8.设置 Library Search Paths</h3>\n\n<p>类似地，在 <em>Build Settings</em> 中搜索“Library Search Paths”，将 <em>Library Search Paths</em> 路径设置为刚才得到的输出结果“-L”之后的路径，如我需要对如下路径进行添加。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;lib</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-设置-Other-Linker-Flags\"><a href=\"#9-设置-Other-Linker-Flags\" class=\"headerlink\" title=\"9.设置 Other Linker Flags\"></a>9.设置 Other Linker Flags</h3>\n\n<p>同样，在 <em>Build Settings</em> 中搜索“Other Linker Flags”，将 <em>Other Linker Flags</em> 路径设置为刚才得到的输出结果中的其他内容，即 Linker Flags，我需要对如下 Linker Flags 进行添加。（无需手动输入，只需单击输入框粘贴相关内容）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-lopencv_gapi -lopencv_stitching -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_highgui -lopencv_face -lopencv_freetype -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_quality -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_sfm -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-测试运行\"><a href=\"#9-测试运行\" class=\"headerlink\" title=\"9.测试运行\"></a>9.测试运行</h3><p>配置到这一步 Xcode 相关内容已经结束。可以尝试运行简单的<code>OpenCV</code>程序判断是否能够正常运行，以下给出简单的示例程序，功能仅为打开图片与退出。</p>\n<p>你需要按照后文中“使用相对路径”方法配置相对路径并添加图片<code>test.jpeg</code>到项目文件夹。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Mat image= imread(<span class=\"string\">\"test.jpeg\"</span>);<span class=\"comment\">// 读取图片</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!image.data)             <span class=\"comment\">// 检查非法输入</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"built_in\">cout</span> &lt;&lt;  <span class=\"string\">\"无法读取照片\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    namedWindow(<span class=\"string\">\"Display window\"</span>,WINDOW_AUTOSIZE);   <span class=\"comment\">// 创建图片显示自动调整大小的窗口</span></span><br><span class=\"line\">    imshow(<span class=\"string\">\"img\"</span>,image);    <span class=\"comment\">// 在窗口显示图片</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    waitKey(<span class=\"number\">0</span>); <span class=\"comment\">// 按键等待，需要在窗口任意输入字符退出，0代表永久等待</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>若运行过程出现问题请检查上述步骤是否正确，后文中给出了部分问题的解决方案，可能对您有帮助。</p>\n<h2 id=\"其他设置\"><a href=\"#其他设置\" class=\"headerlink\" title=\"其他设置\"></a>其他设置</h2><h3 id=\"使用相对路径\"><a href=\"#使用相对路径\" class=\"headerlink\" title=\"使用相对路径\"></a>使用相对路径</h3>\n\n<p>Xcode使用图像或资源的绝对路径。为了设置相对路径需要设置<em>Working Directory</em>。依次点击 <code>菜单栏Product &gt; Scheme &gt; Edit Scheme</code> 中转到<em>Run</em>中的<em>check Use Custom Working Directory</em>选项，然后自定义项目目录。</p>\n<h2 id=\"可能出现的错误\"><a href=\"#可能出现的错误\" class=\"headerlink\" title=\"可能出现的错误\"></a>可能出现的错误</h2><h3 id=\"出现-“Not-a-Doxygen-trailing-comment”-错误\"><a href=\"#出现-“Not-a-Doxygen-trailing-comment”-错误\" class=\"headerlink\" title=\"出现 “Not a Doxygen trailing comment” 错误\"></a>出现 “Not a Doxygen trailing comment” 错误</h3>\n\n<p>在 <em>Build Settings</em> 中搜索 “Documentation Comments”，将 <em>Documentation Comments</em> 设置为”No”即可解决该问题。<code>Doxygen</code> 只是一种格式可以选择跳过检查。</p>\n<h3 id=\"出现-“dyld-Library-not-loaded…”-错误\"><a href=\"#出现-“dyld-Library-not-loaded…”-错误\" class=\"headerlink\" title=\"出现 “dyld: Library not loaded…” 错误\"></a>出现 “dyld: Library not loaded…” 错误</h3>\n\n<p>在 <em>Signing &amp; Capabilities</em> 中打开<em>Disable Library Validation</em>，即可解决该问题。问题的原因是<code>brew</code>安装的<code>OpenCV</code>存在签名问题，暂且可以先认可没有被签名的 Library。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://medium.com/@jaskaranvirdi/setting-up-opencv-and-c-development-environment-in-xcode-b6027728003\" target=\"_blank\" rel=\"noopener\">Setting up OpenCV and C++ development environment in Xcode for Computer Vision projects</a></p>\n<p><a href=\"https://github.com/opencv/opencv/issues/15645#issuecomment-554495051\" target=\"_blank\" rel=\"noopener\">Xcode in macox 10.15 beta library code signature problem</a></p>\n<p><a href=\"https://stackoverflow.com/questions/39929199/not-a-doxygen-trailing-comment\" target=\"_blank\" rel=\"noopener\">Not a Doxygen trailing comment</a></p>\n<p><a href=\"https://docs.opencv.org/2.4/doc/tutorials/introduction/display_image/display_image.html\" target=\"_blank\" rel=\"noopener\">Load and Display an Image</a></p>"},{"title":"软件设计模式 - 单例模式","date":"2020-06-07T05:23:20.000Z","copyright":true,"_content":"\n单例模式(Singleton Pattern)，也叫单子模式，属于创建型模式的一种。单例模式重点解决几个不同的客户对象需要引用同个对象，且这种类型的对象数目不止一个的问题。通过确保一个类只能有一个实例，提供对该实例的全局访问，使得客户对象无需操心是否存在单例类的实例，实例化由单例类自己控制。\n\n<!--more-->\n\n## 模式简介\n某些时候整个系统只需要拥有一个全局对象，却有利于协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息，这种方式简化了在复杂环境下的配置管理。 \n单例类存在多种实现方式，较为普遍的实现方式为饿汉式单例类与懒汉式单例类。其中饿汉式单例类在被加载时就将自己实例化。单从资源利用效率角度来讲，饿汉式单例类比懒汉式单例类稍差些。从速度和反应时间角度来讲，饿汉式单例类则比懒汉式单例类稍好些。懒汉式单例类在实例化时，必须处理好在多个线程同时首次引用此类时的访问限制问题，特别是当单例类作为资源控制器，在实例化时必然涉及资源初始化，而资源初始化很有可能耗费大量时间，这意味着出现多线程同时首次引用此类的机率变得较大，需要通过同步化机制进行控制。具体的单例模式实现方式会在后文重点讨论。\n单例模式的优点在于可以严格控制客户怎样以及何时访问它，为设计及开发团队提供了共享的概念。同时由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能。然而，由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。单例类的职责过重，在一定程度上违背了“单一职责原则”。至于单例模式相关的设计原则会在后文中逐一列举。\n单例模式应用十分广泛，如需创建一个对象需要耗费大量时间与空间资源时，如IO，数据库连接等，再如需要生成唯一id、静态类型的的工具类等情形也需要使用单例模式。\n\n## 设计原则\n与单例设计模式相关的有以下OOP设计原则。\n- 迪米特原则\n迪米特法则（Law of Demeter），一个类对于其他类知道的越少越好，就是说一个对象应当对其他对象有尽可能少的了解,只和朋友通信，不和陌生人说话。\n在单例模式中表现为其他类对该单例类了解的尽量少。其他类获取该单例类的对象只需要通过其暴露的方法即可，而不需要了解单例具体是怎么创建的。假如该单例类创建的过程变得更加复杂，其他类的调用还是通过这个简单的方法获得对象，不用关心单例类增加了哪些代码。\n- 单一职责原则\n单一职责模式的定义为，就一个类而言，应该仅有一个引起它变化的原因。单例类的职责过重，既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起，在一定程度上违背了单一职责原则。违背单一职责原则带来的弊端不限于复用能力越弱、多个职责，一个职责的变化可能会影响到其他的职责等。\n在使用具体的设计模式前应该思考与之相关的设计原则，进而确定该设计模式是否符合需要，以单例模式为例，单例类没有接口，不能继承，与单一职责原则冲突，仅适用于只关心内部逻辑而不关心外面如何实例化的情形。\n\n## 实现方法\n单例模式的实现需以下三个部分：\n- 一个引用单例对象的静态私有成员变量\n- 一个公共静态方法，负责实现一次性的实例化并返回对单例对象的引用\n- 设置为保护型或私有型的构造方法\n根据单例模式的成员可以画出相应的类图，其中包含引用单例对象的静态私有成员变量instance；公共静态方法getInstance()负责实现一次性的实例化并返回对单例对象的引用；设置私有型的构造方法Singleton()。\n\n![](http://images.stephenfang.xyz/mweb/15917501563785.jpg)\n图3.1 单例模式的类图\n\n在所有常见的设计模式中，singleton模式是唯一一个能够用短短几十行代码完成实现的模式，接下来以不同的例子探讨单例模式的解法。\n\n1. 只适用于单线程模式的解法（懒汉式）\n由于单例模式要求只能生成一个实例，因此我们必须把构造函数设为私有函数以禁止他人创建实例。可以通过定义一个静态的实例，在需要的时候创建该实例。下面定义类型Singleton1就是基于这个思路的实现：\n\n```java\npackage com.singleton;\n\npublic class Singleton1 {\n    private Singleton1() {\n    }\n\n    private static Singleton1 instance = null;\n\n    public static Singleton1 getInstance() {\n        if (instance == null) {\n            instance = new Singleton1();\n        }\n        return instance;\n    }\n}\n```\n\n代码3.1 只适用于单线程模式的解法\n\t上述代码只有在instance为null时才创建一个实例从而避免重复创建，同时我们把构造函数定义为私有函数从而确保只创建一个实例。该代码仔单线程的时候工作正常，但是在多线程的情况下就会出现问题。设想如果两个线程同时运行到判断instance是否为null的if语句，并且instance的确没有创建时，那么两个线程都会创建一个实例，此时类型Singleton1就不再满足单例模式的要求，可以通过以下解法改变该局面。\n\n2. 适用于多线程的解法（效率欠佳的懒汉式）\n为了保证在多线程环境下还是只能得到类型的一个实例，需要加上一个同步锁。假设有两个线程同时想创建一个实例。由于在一个时刻只有一个线程能得到同步锁，当第一个线程加上锁时，第二个线程只能等待。当第一个线程发现实例还没有创建时，它创建出一个实例。接着第一个线程释放同步锁，此时第二个线程可以加上同步锁，并运行接下来的代码。这个时候由于实例已经被第一个线程创建出来了，第二个线程就不会重复创建实例了，这样就保证了在多线程环境中也只能得到一个实例。把Singleton1稍做修改得到了如下代码：\n\n```java\npackage com.singleton;\n\npublic class Singleton2 {\n    private Singleton2() {\n    }\n\n    private static Singleton2 instance = null;\n\n    public static synchronized Singleton2 getInstance() {\n        if (instance == null) {\n            instance = new Singleton2();\n        }\n        return instance;\n    }\n}\n```\n\n代码3.2 适用于多线程的低效率解法\n\t但是 Singleton2 还不是很完美。我们每次通过 getInstance 方法得到Singleton2的实例，都会试图加上一个同步锁，而加锁是一个非常耗时的操作，在没有必要的时候应该尽量避免。\n\t\n\t\n3.\t加同步锁前后两次判断实例是否已存在的解法（DCL）\n在实例还没有创建之前需要加锁操作，以保证只有一个线程创建出实例。然而当实例已经完成创建之后，已经不需要再做加锁操作了。Singleton3中只有当instance为null即没有创建时，需要加锁操作。当instance 已经创建出来之后，则无须加锁。参考以下改进后的Singleton2代码，其时间效率能够比Singleton2提升很多。其中instance被volatile 修饰，增加线程之间的可见性，并且任何线程对它的写操作都会立即刷新到主内存中，并且会强制让缓存了instance变量的线程中的数据清空，必须从主内存重新读取最新数据。\n\n```java \npackage com.singleton;\n\npublic class Singleton3 {\n    private volatile static Singleton3 instance;\n\n    private Singleton3() {\n    }\n\n    public static Singleton3 getInstance() {\n        if (instance == null) {\n            synchronized (Singleton3.class) {\n                if (instance == null) {\n                    instance = new Singleton3();\n                }\n            }\n        }\n        return instance;\n    }\n}\n\n```\n\n代码3.3 加同步锁前后两次判断实例是否已存在的解法\nSingleton3用加锁机制来确保在多线程环境下只创建一个实例，并且用两个 if 判断来提高效率。这样的代码实现起来比较复杂，容易出错，然而还有其他解法。\n\n4.\t利用静态构造函数的解法（饿汉式）\n静态构造函数的实现代码非常简洁。因为单例对象只创建一次，所以考虑使用 static 修饰，这样在 JVM 加载该类的时候就会自动创建对象，又因为不希望其他类执行该单例类的构造方法再去创建单例对象，所以把构造函数的属性设置为 private。效果为在调用静态构造函数时初始化静态变量，确保只调用一次静态构造函数，从而保证只初始化一次instance。\n\n```java\npackage com.singleton;\n\npublic class Singleton4 {\n    private Singleton4() {\n    }\n\n    private static final Singleton4 instance = new Singleton4();\n\n    public static Singleton4 getInstance() {\n        return instance;\n    }\n}\n```\n\n代码3.4 利用静态构造函数的解法\n假设我们在Singleton4 中添加一个静态方法，调用该静态函数是不需要创建一个实例的，但如果按照Singleton4的方式实现单例模式，则仍然会过早地创建实例，从而降低内存的使用效率。\n\n5.\t利用静态内部类的解法\n静态内部类的优点为，外部类加载时不需要立即加载内部类，内部类不被加载则不去初始化instance，即不会在内存中占据位置。如下巧妙运用了这种方法，即第一次调用getInstance() 方法使得JVM加载SingletonStatic类，从某种程度上而言实现了按需创建实例。\n\n```java\npackage com.singleton;\n\npublic class Singleton5 {\n    private Singleton5() {\n    }\n\n    private static class SingletonStatic {\n        private static Singleton5 instance = new Singleton5();\n    }\n\n    public static Singleton5 getInstance() {\n        return SingletonStatic.instance;\n    }\n}\n```\n\n代码3.5 利用静态内部类的解法\n当Singleton5类第一次被加载时，并不需要立即加载SingletonStatic内部类，只有当 getInstance() 方法第一次被调用时，才会初始化instance对象。这种方法不仅能确保线程安全，也能保证单例的唯一性，同时也延迟了单例的实例化。\n\n6.\t利用枚举的解法\n引用 《Effective Java》书中的一句话，“单元素的枚举类型已经成为实现Singleton的最佳方法。”这种解法利用枚举的特性保证了按需加载、线程同步。\n\n```java\npackage com.singleton;\n\npublic enum Singleton6 {\n    instance;\n\n    public void testMethod() {\n    }\n}\n```\n\n代码3.6 利用枚举类型的解法\n目前该实现方式还没有被广泛采用，但它更简洁，自动支持序列化机制，绝对防止多次实例化。它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏。\n\n\n7.\t解法总结\n以简洁明了的表格总结前文中实现的六种单例模式的解法，对于不同解法的参考指标为是否懒加载、是否容易实现、是否线程安全以及是否高效率。\n\n| 实现方法 | 解法一 | 解法二 | 解法三 | 解法四 | 解法五 | 解法六 |\n| -------- | ------ | ------ | ------ | ------ | ------ | ------ |\n| 懒加载   | 是     | 是     | 是     | 否     | 是     | 是     |\n| 易实现   | 是     | 是     | 否     | 是     | 是     | 是     |\n| 线程安全 | 否     | 是     | 是     | 是     | 是     | 是     |\n| 高效率   | 否     | 否     | 是     | 是     | 是     | 是     |\n\n表格3.1 解法总结表\n\n一般情况下不建议使用第一种和第二种懒汉解法，第三种解法补足了前两者的短板然而编写逻辑较为复杂，第四种解法虽然没有实现懒加载的效果但仍为比较通用的解法，静态内部类的解法能够实现按需加载不失为一种优秀的算法，而如果涉及到反序列化创建对象时，可以尝试使用最后一种枚举类型的算法。\n\n## 模式简例\n在JDK内部也存在对单例模式的运用。Runtime类就是十分典型的例子。\n![](http://images.stephenfang.xyz/mweb/15917515167469.jpg)\n\n\n图4.2  Runtime类图\n\t在每一个Java应用程序中，都有唯一的一个Runtime对象，通过这个对象应用程序可以与其运行环境发生相互作用。Runtime类提供私有的静态的Runtime对象 currentRuntime、私有的空Runtime构造方法以及一个静态工厂方法getRuntime（），通过调用getRuntime（）方法，可以获得Runtime类唯一的一个实例，并且从源代码代码中可以看出，Runtime使用了饿汉式单例模式。\n\t\n```java\npackage java.lang;\npublic class Runtime {\n    private static final Runtime currentRuntime = new Runtime();\npublic static Runtime getRuntime() {\n    return currentRuntime;\n    }\n    private Runtime() {}\n…\n}\n```\n\n代码4.3  Runtime源代码\n前文中有提及，单例模式还可以用于生成唯一id 的情形，这里以前文中的Singleton4 实现方式为例。通过创建Main主类，并且在该类的main()方法中，创建2个Singleton4对象，获取对象的hashCode。\n```java\npackage com.singleton;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"创建单例对象1：\");\n        Singleton4 singleton1 = Singleton4.getInstance();\n        System.out.println(singleton1.hashCode());\n        System.out.println(\"创建单例对象2\");\n        Singleton4 singleton2 = Singleton4.getInstance();\n        System.out.println(singleton2.hashCode());\n    }\n}\n```\n\n代码4.5  测试类\n运行结果符合预期，测试类通过getInstance()方法获得的是同一对象，因而哈希值是一致的。此特点适用于生产唯一序列号的场景。\n![](http://images.stephenfang.xyz/mweb/15917516893500.jpg)\n\n图4.3  测试结果\n\t对于单例模式的应用与验证至此告一段落，显然单例模式的运用远不止于此，相关的还有Web计数器、数据库配置文件等等。\n\t\n## 问题与缺陷\n滥用单例可能带来一些负面问题，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出。在Java语言中，连接池采用持久化服务的方式，滥用单例将导致连接得不到释放，内存不断上升从而溢出。\nJVM提供了自动垃圾回收的机制，并且采用根搜索算法，其基本思路为：任何“活”的对象一定能最终追溯到其存储在堆栈或静态存储区中的引用。通过一系列根（GC Roots）的引用作为起点开始搜索，经过一系列的路径，如果可以到达java堆中的对象，那么这个对象就是不可回收的。可以作为根的对象有：\n\n- 虚拟机栈（栈桢中的本地变量表）中的引用的对象。\n- 方法区中的类静态属性引用的对象。\n- 方法区中的常量引用的对象。\n- 本地方法栈中JNI的引用的对象。\n\n方法区是JVM的一块内存区域，用来存放类相关的信息。java中单例模式创建的对象被自己类中的静态属性所引用，符合第二条，因此，单例对象不会被JVM垃圾收集。虽然JVM堆中的单例对象不会被垃圾收集，但是单例类本身如果长时间不用会不会被收集呢？因为JVM对方法区也是有垃圾收集机制的。如果单例类被收集，那么堆中的对象就会失去到根的路径，必然会被垃圾收集掉。\n通过以下代码测试单例对象是否会被回收。\n\n```java\npackage com.singleton;\n\nclass Singleton {\n    private byte[] test = new byte[6*1024*1024];\n    private static Singleton singleton = new Singleton();\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        return singleton;\n    }\n}\nclass Obj {\n    private byte[] test = new byte[3*1024*1024];\n}\n\npublic class Client{\n    public static void main(String[] args) throws Exception{\n        Singleton.getInstance();\n        while(true){\n            new Obj();\n        }\n    }\n}\n```\n\n代码5.1  测试代码\n运行时JVM 的参数被设定为：\n```-verbose:gc -Xms20M -Xmx20M```\n即每次JVM进行垃圾回收时显示内存信息，JVM的内存设为固定20M。\n通过模拟J2EE容器，实例化大小为6M的单例类，然后不断的创建对象，迫使JVM进行垃圾回收，观察垃圾收集信息，如果进行垃圾收集后，内存仍然大于6M，则说明垃圾回收不会回收单例对象。\n\n![](http://images.stephenfang.xyz/java.png)\n\n图5.1  测试结果\n从运行结果中可以看到有6M空间没有被收集。达到GC的条件其一为该类所有的实例都已经被回收，即java堆中不存在该类的任何实例。单例的类不满足该条件，因此单例类也不会被回收。也就是说，只要单例类中的静态引用指向JVM堆中的单例对象，那么单例类和单例对象都不会被垃圾收集。所以“如果实例化的对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致对象状态丢失。”这一点目前无法在实验中验证。\n至于违背了单一职责原则这一点前文已有讨论，不复引述。\n\n### 参考资料\n- 洁城浩，《设计模式-JAVA语言中的应用》，中国铁道出版社2005.1\n- （美） GoF, 《设计模式-可复用的面向对象软件的基础》，机械工业出版社，2005 \n- 何海涛，《剑指Offer》，电子工业出版社2012.1\n- （美）Alan Holub，《设计模式初学者指南》，机械工业出版社，2006\n\n","source":"_posts/Singleton_Pattern.md","raw":"---\ntitle: 软件设计模式 - 单例模式\ndate: 2020-06-07 13:23:20\ncategories: \n- tech\ntags: \n- 设计模式\n- Java\ncopyright: true\n---\n\n单例模式(Singleton Pattern)，也叫单子模式，属于创建型模式的一种。单例模式重点解决几个不同的客户对象需要引用同个对象，且这种类型的对象数目不止一个的问题。通过确保一个类只能有一个实例，提供对该实例的全局访问，使得客户对象无需操心是否存在单例类的实例，实例化由单例类自己控制。\n\n<!--more-->\n\n## 模式简介\n某些时候整个系统只需要拥有一个全局对象，却有利于协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息，这种方式简化了在复杂环境下的配置管理。 \n单例类存在多种实现方式，较为普遍的实现方式为饿汉式单例类与懒汉式单例类。其中饿汉式单例类在被加载时就将自己实例化。单从资源利用效率角度来讲，饿汉式单例类比懒汉式单例类稍差些。从速度和反应时间角度来讲，饿汉式单例类则比懒汉式单例类稍好些。懒汉式单例类在实例化时，必须处理好在多个线程同时首次引用此类时的访问限制问题，特别是当单例类作为资源控制器，在实例化时必然涉及资源初始化，而资源初始化很有可能耗费大量时间，这意味着出现多线程同时首次引用此类的机率变得较大，需要通过同步化机制进行控制。具体的单例模式实现方式会在后文重点讨论。\n单例模式的优点在于可以严格控制客户怎样以及何时访问它，为设计及开发团队提供了共享的概念。同时由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能。然而，由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。单例类的职责过重，在一定程度上违背了“单一职责原则”。至于单例模式相关的设计原则会在后文中逐一列举。\n单例模式应用十分广泛，如需创建一个对象需要耗费大量时间与空间资源时，如IO，数据库连接等，再如需要生成唯一id、静态类型的的工具类等情形也需要使用单例模式。\n\n## 设计原则\n与单例设计模式相关的有以下OOP设计原则。\n- 迪米特原则\n迪米特法则（Law of Demeter），一个类对于其他类知道的越少越好，就是说一个对象应当对其他对象有尽可能少的了解,只和朋友通信，不和陌生人说话。\n在单例模式中表现为其他类对该单例类了解的尽量少。其他类获取该单例类的对象只需要通过其暴露的方法即可，而不需要了解单例具体是怎么创建的。假如该单例类创建的过程变得更加复杂，其他类的调用还是通过这个简单的方法获得对象，不用关心单例类增加了哪些代码。\n- 单一职责原则\n单一职责模式的定义为，就一个类而言，应该仅有一个引起它变化的原因。单例类的职责过重，既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起，在一定程度上违背了单一职责原则。违背单一职责原则带来的弊端不限于复用能力越弱、多个职责，一个职责的变化可能会影响到其他的职责等。\n在使用具体的设计模式前应该思考与之相关的设计原则，进而确定该设计模式是否符合需要，以单例模式为例，单例类没有接口，不能继承，与单一职责原则冲突，仅适用于只关心内部逻辑而不关心外面如何实例化的情形。\n\n## 实现方法\n单例模式的实现需以下三个部分：\n- 一个引用单例对象的静态私有成员变量\n- 一个公共静态方法，负责实现一次性的实例化并返回对单例对象的引用\n- 设置为保护型或私有型的构造方法\n根据单例模式的成员可以画出相应的类图，其中包含引用单例对象的静态私有成员变量instance；公共静态方法getInstance()负责实现一次性的实例化并返回对单例对象的引用；设置私有型的构造方法Singleton()。\n\n![](http://images.stephenfang.xyz/mweb/15917501563785.jpg)\n图3.1 单例模式的类图\n\n在所有常见的设计模式中，singleton模式是唯一一个能够用短短几十行代码完成实现的模式，接下来以不同的例子探讨单例模式的解法。\n\n1. 只适用于单线程模式的解法（懒汉式）\n由于单例模式要求只能生成一个实例，因此我们必须把构造函数设为私有函数以禁止他人创建实例。可以通过定义一个静态的实例，在需要的时候创建该实例。下面定义类型Singleton1就是基于这个思路的实现：\n\n```java\npackage com.singleton;\n\npublic class Singleton1 {\n    private Singleton1() {\n    }\n\n    private static Singleton1 instance = null;\n\n    public static Singleton1 getInstance() {\n        if (instance == null) {\n            instance = new Singleton1();\n        }\n        return instance;\n    }\n}\n```\n\n代码3.1 只适用于单线程模式的解法\n\t上述代码只有在instance为null时才创建一个实例从而避免重复创建，同时我们把构造函数定义为私有函数从而确保只创建一个实例。该代码仔单线程的时候工作正常，但是在多线程的情况下就会出现问题。设想如果两个线程同时运行到判断instance是否为null的if语句，并且instance的确没有创建时，那么两个线程都会创建一个实例，此时类型Singleton1就不再满足单例模式的要求，可以通过以下解法改变该局面。\n\n2. 适用于多线程的解法（效率欠佳的懒汉式）\n为了保证在多线程环境下还是只能得到类型的一个实例，需要加上一个同步锁。假设有两个线程同时想创建一个实例。由于在一个时刻只有一个线程能得到同步锁，当第一个线程加上锁时，第二个线程只能等待。当第一个线程发现实例还没有创建时，它创建出一个实例。接着第一个线程释放同步锁，此时第二个线程可以加上同步锁，并运行接下来的代码。这个时候由于实例已经被第一个线程创建出来了，第二个线程就不会重复创建实例了，这样就保证了在多线程环境中也只能得到一个实例。把Singleton1稍做修改得到了如下代码：\n\n```java\npackage com.singleton;\n\npublic class Singleton2 {\n    private Singleton2() {\n    }\n\n    private static Singleton2 instance = null;\n\n    public static synchronized Singleton2 getInstance() {\n        if (instance == null) {\n            instance = new Singleton2();\n        }\n        return instance;\n    }\n}\n```\n\n代码3.2 适用于多线程的低效率解法\n\t但是 Singleton2 还不是很完美。我们每次通过 getInstance 方法得到Singleton2的实例，都会试图加上一个同步锁，而加锁是一个非常耗时的操作，在没有必要的时候应该尽量避免。\n\t\n\t\n3.\t加同步锁前后两次判断实例是否已存在的解法（DCL）\n在实例还没有创建之前需要加锁操作，以保证只有一个线程创建出实例。然而当实例已经完成创建之后，已经不需要再做加锁操作了。Singleton3中只有当instance为null即没有创建时，需要加锁操作。当instance 已经创建出来之后，则无须加锁。参考以下改进后的Singleton2代码，其时间效率能够比Singleton2提升很多。其中instance被volatile 修饰，增加线程之间的可见性，并且任何线程对它的写操作都会立即刷新到主内存中，并且会强制让缓存了instance变量的线程中的数据清空，必须从主内存重新读取最新数据。\n\n```java \npackage com.singleton;\n\npublic class Singleton3 {\n    private volatile static Singleton3 instance;\n\n    private Singleton3() {\n    }\n\n    public static Singleton3 getInstance() {\n        if (instance == null) {\n            synchronized (Singleton3.class) {\n                if (instance == null) {\n                    instance = new Singleton3();\n                }\n            }\n        }\n        return instance;\n    }\n}\n\n```\n\n代码3.3 加同步锁前后两次判断实例是否已存在的解法\nSingleton3用加锁机制来确保在多线程环境下只创建一个实例，并且用两个 if 判断来提高效率。这样的代码实现起来比较复杂，容易出错，然而还有其他解法。\n\n4.\t利用静态构造函数的解法（饿汉式）\n静态构造函数的实现代码非常简洁。因为单例对象只创建一次，所以考虑使用 static 修饰，这样在 JVM 加载该类的时候就会自动创建对象，又因为不希望其他类执行该单例类的构造方法再去创建单例对象，所以把构造函数的属性设置为 private。效果为在调用静态构造函数时初始化静态变量，确保只调用一次静态构造函数，从而保证只初始化一次instance。\n\n```java\npackage com.singleton;\n\npublic class Singleton4 {\n    private Singleton4() {\n    }\n\n    private static final Singleton4 instance = new Singleton4();\n\n    public static Singleton4 getInstance() {\n        return instance;\n    }\n}\n```\n\n代码3.4 利用静态构造函数的解法\n假设我们在Singleton4 中添加一个静态方法，调用该静态函数是不需要创建一个实例的，但如果按照Singleton4的方式实现单例模式，则仍然会过早地创建实例，从而降低内存的使用效率。\n\n5.\t利用静态内部类的解法\n静态内部类的优点为，外部类加载时不需要立即加载内部类，内部类不被加载则不去初始化instance，即不会在内存中占据位置。如下巧妙运用了这种方法，即第一次调用getInstance() 方法使得JVM加载SingletonStatic类，从某种程度上而言实现了按需创建实例。\n\n```java\npackage com.singleton;\n\npublic class Singleton5 {\n    private Singleton5() {\n    }\n\n    private static class SingletonStatic {\n        private static Singleton5 instance = new Singleton5();\n    }\n\n    public static Singleton5 getInstance() {\n        return SingletonStatic.instance;\n    }\n}\n```\n\n代码3.5 利用静态内部类的解法\n当Singleton5类第一次被加载时，并不需要立即加载SingletonStatic内部类，只有当 getInstance() 方法第一次被调用时，才会初始化instance对象。这种方法不仅能确保线程安全，也能保证单例的唯一性，同时也延迟了单例的实例化。\n\n6.\t利用枚举的解法\n引用 《Effective Java》书中的一句话，“单元素的枚举类型已经成为实现Singleton的最佳方法。”这种解法利用枚举的特性保证了按需加载、线程同步。\n\n```java\npackage com.singleton;\n\npublic enum Singleton6 {\n    instance;\n\n    public void testMethod() {\n    }\n}\n```\n\n代码3.6 利用枚举类型的解法\n目前该实现方式还没有被广泛采用，但它更简洁，自动支持序列化机制，绝对防止多次实例化。它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏。\n\n\n7.\t解法总结\n以简洁明了的表格总结前文中实现的六种单例模式的解法，对于不同解法的参考指标为是否懒加载、是否容易实现、是否线程安全以及是否高效率。\n\n| 实现方法 | 解法一 | 解法二 | 解法三 | 解法四 | 解法五 | 解法六 |\n| -------- | ------ | ------ | ------ | ------ | ------ | ------ |\n| 懒加载   | 是     | 是     | 是     | 否     | 是     | 是     |\n| 易实现   | 是     | 是     | 否     | 是     | 是     | 是     |\n| 线程安全 | 否     | 是     | 是     | 是     | 是     | 是     |\n| 高效率   | 否     | 否     | 是     | 是     | 是     | 是     |\n\n表格3.1 解法总结表\n\n一般情况下不建议使用第一种和第二种懒汉解法，第三种解法补足了前两者的短板然而编写逻辑较为复杂，第四种解法虽然没有实现懒加载的效果但仍为比较通用的解法，静态内部类的解法能够实现按需加载不失为一种优秀的算法，而如果涉及到反序列化创建对象时，可以尝试使用最后一种枚举类型的算法。\n\n## 模式简例\n在JDK内部也存在对单例模式的运用。Runtime类就是十分典型的例子。\n![](http://images.stephenfang.xyz/mweb/15917515167469.jpg)\n\n\n图4.2  Runtime类图\n\t在每一个Java应用程序中，都有唯一的一个Runtime对象，通过这个对象应用程序可以与其运行环境发生相互作用。Runtime类提供私有的静态的Runtime对象 currentRuntime、私有的空Runtime构造方法以及一个静态工厂方法getRuntime（），通过调用getRuntime（）方法，可以获得Runtime类唯一的一个实例，并且从源代码代码中可以看出，Runtime使用了饿汉式单例模式。\n\t\n```java\npackage java.lang;\npublic class Runtime {\n    private static final Runtime currentRuntime = new Runtime();\npublic static Runtime getRuntime() {\n    return currentRuntime;\n    }\n    private Runtime() {}\n…\n}\n```\n\n代码4.3  Runtime源代码\n前文中有提及，单例模式还可以用于生成唯一id 的情形，这里以前文中的Singleton4 实现方式为例。通过创建Main主类，并且在该类的main()方法中，创建2个Singleton4对象，获取对象的hashCode。\n```java\npackage com.singleton;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"创建单例对象1：\");\n        Singleton4 singleton1 = Singleton4.getInstance();\n        System.out.println(singleton1.hashCode());\n        System.out.println(\"创建单例对象2\");\n        Singleton4 singleton2 = Singleton4.getInstance();\n        System.out.println(singleton2.hashCode());\n    }\n}\n```\n\n代码4.5  测试类\n运行结果符合预期，测试类通过getInstance()方法获得的是同一对象，因而哈希值是一致的。此特点适用于生产唯一序列号的场景。\n![](http://images.stephenfang.xyz/mweb/15917516893500.jpg)\n\n图4.3  测试结果\n\t对于单例模式的应用与验证至此告一段落，显然单例模式的运用远不止于此，相关的还有Web计数器、数据库配置文件等等。\n\t\n## 问题与缺陷\n滥用单例可能带来一些负面问题，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出。在Java语言中，连接池采用持久化服务的方式，滥用单例将导致连接得不到释放，内存不断上升从而溢出。\nJVM提供了自动垃圾回收的机制，并且采用根搜索算法，其基本思路为：任何“活”的对象一定能最终追溯到其存储在堆栈或静态存储区中的引用。通过一系列根（GC Roots）的引用作为起点开始搜索，经过一系列的路径，如果可以到达java堆中的对象，那么这个对象就是不可回收的。可以作为根的对象有：\n\n- 虚拟机栈（栈桢中的本地变量表）中的引用的对象。\n- 方法区中的类静态属性引用的对象。\n- 方法区中的常量引用的对象。\n- 本地方法栈中JNI的引用的对象。\n\n方法区是JVM的一块内存区域，用来存放类相关的信息。java中单例模式创建的对象被自己类中的静态属性所引用，符合第二条，因此，单例对象不会被JVM垃圾收集。虽然JVM堆中的单例对象不会被垃圾收集，但是单例类本身如果长时间不用会不会被收集呢？因为JVM对方法区也是有垃圾收集机制的。如果单例类被收集，那么堆中的对象就会失去到根的路径，必然会被垃圾收集掉。\n通过以下代码测试单例对象是否会被回收。\n\n```java\npackage com.singleton;\n\nclass Singleton {\n    private byte[] test = new byte[6*1024*1024];\n    private static Singleton singleton = new Singleton();\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        return singleton;\n    }\n}\nclass Obj {\n    private byte[] test = new byte[3*1024*1024];\n}\n\npublic class Client{\n    public static void main(String[] args) throws Exception{\n        Singleton.getInstance();\n        while(true){\n            new Obj();\n        }\n    }\n}\n```\n\n代码5.1  测试代码\n运行时JVM 的参数被设定为：\n```-verbose:gc -Xms20M -Xmx20M```\n即每次JVM进行垃圾回收时显示内存信息，JVM的内存设为固定20M。\n通过模拟J2EE容器，实例化大小为6M的单例类，然后不断的创建对象，迫使JVM进行垃圾回收，观察垃圾收集信息，如果进行垃圾收集后，内存仍然大于6M，则说明垃圾回收不会回收单例对象。\n\n![](http://images.stephenfang.xyz/java.png)\n\n图5.1  测试结果\n从运行结果中可以看到有6M空间没有被收集。达到GC的条件其一为该类所有的实例都已经被回收，即java堆中不存在该类的任何实例。单例的类不满足该条件，因此单例类也不会被回收。也就是说，只要单例类中的静态引用指向JVM堆中的单例对象，那么单例类和单例对象都不会被垃圾收集。所以“如果实例化的对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致对象状态丢失。”这一点目前无法在实验中验证。\n至于违背了单一职责原则这一点前文已有讨论，不复引述。\n\n### 参考资料\n- 洁城浩，《设计模式-JAVA语言中的应用》，中国铁道出版社2005.1\n- （美） GoF, 《设计模式-可复用的面向对象软件的基础》，机械工业出版社，2005 \n- 何海涛，《剑指Offer》，电子工业出版社2012.1\n- （美）Alan Holub，《设计模式初学者指南》，机械工业出版社，2006\n\n","slug":"Singleton_Pattern","published":1,"updated":"2020-06-10T01:21:23.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcive9nk001gcv6bgw9egca8","content":"<p>单例模式(Singleton Pattern)，也叫单子模式，属于创建型模式的一种。单例模式重点解决几个不同的客户对象需要引用同个对象，且这种类型的对象数目不止一个的问题。通过确保一个类只能有一个实例，提供对该实例的全局访问，使得客户对象无需操心是否存在单例类的实例，实例化由单例类自己控制。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"模式简介\"><a href=\"#模式简介\" class=\"headerlink\" title=\"模式简介\"></a>模式简介</h2><p>某些时候整个系统只需要拥有一个全局对象，却有利于协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息，这种方式简化了在复杂环境下的配置管理。<br>单例类存在多种实现方式，较为普遍的实现方式为饿汉式单例类与懒汉式单例类。其中饿汉式单例类在被加载时就将自己实例化。单从资源利用效率角度来讲，饿汉式单例类比懒汉式单例类稍差些。从速度和反应时间角度来讲，饿汉式单例类则比懒汉式单例类稍好些。懒汉式单例类在实例化时，必须处理好在多个线程同时首次引用此类时的访问限制问题，特别是当单例类作为资源控制器，在实例化时必然涉及资源初始化，而资源初始化很有可能耗费大量时间，这意味着出现多线程同时首次引用此类的机率变得较大，需要通过同步化机制进行控制。具体的单例模式实现方式会在后文重点讨论。<br>单例模式的优点在于可以严格控制客户怎样以及何时访问它，为设计及开发团队提供了共享的概念。同时由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能。然而，由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。单例类的职责过重，在一定程度上违背了“单一职责原则”。至于单例模式相关的设计原则会在后文中逐一列举。<br>单例模式应用十分广泛，如需创建一个对象需要耗费大量时间与空间资源时，如IO，数据库连接等，再如需要生成唯一id、静态类型的的工具类等情形也需要使用单例模式。</p>\n<h2 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h2><p>与单例设计模式相关的有以下OOP设计原则。</p>\n<ul>\n<li>迪米特原则<br>迪米特法则（Law of Demeter），一个类对于其他类知道的越少越好，就是说一个对象应当对其他对象有尽可能少的了解,只和朋友通信，不和陌生人说话。<br>在单例模式中表现为其他类对该单例类了解的尽量少。其他类获取该单例类的对象只需要通过其暴露的方法即可，而不需要了解单例具体是怎么创建的。假如该单例类创建的过程变得更加复杂，其他类的调用还是通过这个简单的方法获得对象，不用关心单例类增加了哪些代码。</li>\n<li>单一职责原则<br>单一职责模式的定义为，就一个类而言，应该仅有一个引起它变化的原因。单例类的职责过重，既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起，在一定程度上违背了单一职责原则。违背单一职责原则带来的弊端不限于复用能力越弱、多个职责，一个职责的变化可能会影响到其他的职责等。<br>在使用具体的设计模式前应该思考与之相关的设计原则，进而确定该设计模式是否符合需要，以单例模式为例，单例类没有接口，不能继承，与单一职责原则冲突，仅适用于只关心内部逻辑而不关心外面如何实例化的情形。</li>\n</ul>\n<h2 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h2><p>单例模式的实现需以下三个部分：</p>\n<ul>\n<li>一个引用单例对象的静态私有成员变量</li>\n<li>一个公共静态方法，负责实现一次性的实例化并返回对单例对象的引用</li>\n<li>设置为保护型或私有型的构造方法<br>根据单例模式的成员可以画出相应的类图，其中包含引用单例对象的静态私有成员变量instance；公共静态方法getInstance()负责实现一次性的实例化并返回对单例对象的引用；设置私有型的构造方法Singleton()。</li>\n</ul>\n<p><img src=\"http://images.stephenfang.xyz/mweb/15917501563785.jpg\" alt=\"\"><br>图3.1 单例模式的类图</p>\n<p>在所有常见的设计模式中，singleton模式是唯一一个能够用短短几十行代码完成实现的模式，接下来以不同的例子探讨单例模式的解法。</p>\n<ol>\n<li>只适用于单线程模式的解法（懒汉式）<br>由于单例模式要求只能生成一个实例，因此我们必须把构造函数设为私有函数以禁止他人创建实例。可以通过定义一个静态的实例，在需要的时候创建该实例。下面定义类型Singleton1就是基于这个思路的实现：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton1 instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton1 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton1();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码3.1 只适用于单线程模式的解法<br>    上述代码只有在instance为null时才创建一个实例从而避免重复创建，同时我们把构造函数定义为私有函数从而确保只创建一个实例。该代码仔单线程的时候工作正常，但是在多线程的情况下就会出现问题。设想如果两个线程同时运行到判断instance是否为null的if语句，并且instance的确没有创建时，那么两个线程都会创建一个实例，此时类型Singleton1就不再满足单例模式的要求，可以通过以下解法改变该局面。</p>\n<ol start=\"2\">\n<li>适用于多线程的解法（效率欠佳的懒汉式）<br>为了保证在多线程环境下还是只能得到类型的一个实例，需要加上一个同步锁。假设有两个线程同时想创建一个实例。由于在一个时刻只有一个线程能得到同步锁，当第一个线程加上锁时，第二个线程只能等待。当第一个线程发现实例还没有创建时，它创建出一个实例。接着第一个线程释放同步锁，此时第二个线程可以加上同步锁，并运行接下来的代码。这个时候由于实例已经被第一个线程创建出来了，第二个线程就不会重复创建实例了，这样就保证了在多线程环境中也只能得到一个实例。把Singleton1稍做修改得到了如下代码：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton2 instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton2 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton2();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码3.2 适用于多线程的低效率解法<br>    但是 Singleton2 还不是很完美。我们每次通过 getInstance 方法得到Singleton2的实例，都会试图加上一个同步锁，而加锁是一个非常耗时的操作，在没有必要的时候应该尽量避免。</p>\n<ol start=\"3\">\n<li>加同步锁前后两次判断实例是否已存在的解法（DCL）<br>在实例还没有创建之前需要加锁操作，以保证只有一个线程创建出实例。然而当实例已经完成创建之后，已经不需要再做加锁操作了。Singleton3中只有当instance为null即没有创建时，需要加锁操作。当instance 已经创建出来之后，则无须加锁。参考以下改进后的Singleton2代码，其时间效率能够比Singleton2提升很多。其中instance被volatile 修饰，增加线程之间的可见性，并且任何线程对它的写操作都会立即刷新到主内存中，并且会强制让缓存了instance变量的线程中的数据清空，必须从主内存重新读取最新数据。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton3 instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton3 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton3<span class=\"class\">.<span class=\"keyword\">class</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> Singleton3();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码3.3 加同步锁前后两次判断实例是否已存在的解法<br>Singleton3用加锁机制来确保在多线程环境下只创建一个实例，并且用两个 if 判断来提高效率。这样的代码实现起来比较复杂，容易出错，然而还有其他解法。</p>\n<ol start=\"4\">\n<li>利用静态构造函数的解法（饿汉式）<br>静态构造函数的实现代码非常简洁。因为单例对象只创建一次，所以考虑使用 static 修饰，这样在 JVM 加载该类的时候就会自动创建对象，又因为不希望其他类执行该单例类的构造方法再去创建单例对象，所以把构造函数的属性设置为 private。效果为在调用静态构造函数时初始化静态变量，确保只调用一次静态构造函数，从而保证只初始化一次instance。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton4</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton4 instance = <span class=\"keyword\">new</span> Singleton4();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton4 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码3.4 利用静态构造函数的解法<br>假设我们在Singleton4 中添加一个静态方法，调用该静态函数是不需要创建一个实例的，但如果按照Singleton4的方式实现单例模式，则仍然会过早地创建实例，从而降低内存的使用效率。</p>\n<ol start=\"5\">\n<li>利用静态内部类的解法<br>静态内部类的优点为，外部类加载时不需要立即加载内部类，内部类不被加载则不去初始化instance，即不会在内存中占据位置。如下巧妙运用了这种方法，即第一次调用getInstance() 方法使得JVM加载SingletonStatic类，从某种程度上而言实现了按需创建实例。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton5</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton5</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonStatic</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton5 instance = <span class=\"keyword\">new</span> Singleton5();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton5 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonStatic.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码3.5 利用静态内部类的解法<br>当Singleton5类第一次被加载时，并不需要立即加载SingletonStatic内部类，只有当 getInstance() 方法第一次被调用时，才会初始化instance对象。这种方法不仅能确保线程安全，也能保证单例的唯一性，同时也延迟了单例的实例化。</p>\n<ol start=\"6\">\n<li>利用枚举的解法<br>引用 《Effective Java》书中的一句话，“单元素的枚举类型已经成为实现Singleton的最佳方法。”这种解法利用枚举的特性保证了按需加载、线程同步。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Singleton6 &#123;</span><br><span class=\"line\">    instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码3.6 利用枚举类型的解法<br>目前该实现方式还没有被广泛采用，但它更简洁，自动支持序列化机制，绝对防止多次实例化。它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏。</p>\n<ol start=\"7\">\n<li>解法总结<br>以简洁明了的表格总结前文中实现的六种单例模式的解法，对于不同解法的参考指标为是否懒加载、是否容易实现、是否线程安全以及是否高效率。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>实现方法</th>\n<th>解法一</th>\n<th>解法二</th>\n<th>解法三</th>\n<th>解法四</th>\n<th>解法五</th>\n<th>解法六</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>懒加载</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>易实现</td>\n<td>是</td>\n<td>是</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>线程安全</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>高效率</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n</tbody></table>\n<p>表格3.1 解法总结表</p>\n<p>一般情况下不建议使用第一种和第二种懒汉解法，第三种解法补足了前两者的短板然而编写逻辑较为复杂，第四种解法虽然没有实现懒加载的效果但仍为比较通用的解法，静态内部类的解法能够实现按需加载不失为一种优秀的算法，而如果涉及到反序列化创建对象时，可以尝试使用最后一种枚举类型的算法。</p>\n<h2 id=\"模式简例\"><a href=\"#模式简例\" class=\"headerlink\" title=\"模式简例\"></a>模式简例</h2><p>在JDK内部也存在对单例模式的运用。Runtime类就是十分典型的例子。<br><img src=\"http://images.stephenfang.xyz/mweb/15917515167469.jpg\" alt=\"\"></p>\n<p>图4.2  Runtime类图<br>    在每一个Java应用程序中，都有唯一的一个Runtime对象，通过这个对象应用程序可以与其运行环境发生相互作用。Runtime类提供私有的静态的Runtime对象 currentRuntime、私有的空Runtime构造方法以及一个静态工厂方法getRuntime（），通过调用getRuntime（）方法，可以获得Runtime类唯一的一个实例，并且从源代码代码中可以看出，Runtime使用了饿汉式单例模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.lang;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Runtime</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Runtime currentRuntime = <span class=\"keyword\">new</span> Runtime();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Runtime <span class=\"title\">getRuntime</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentRuntime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Runtime</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">…</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码4.3  Runtime源代码<br>前文中有提及，单例模式还可以用于生成唯一id 的情形，这里以前文中的Singleton4 实现方式为例。通过创建Main主类，并且在该类的main()方法中，创建2个Singleton4对象，获取对象的hashCode。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"创建单例对象1：\"</span>);</span><br><span class=\"line\">        Singleton4 singleton1 = Singleton4.getInstance();</span><br><span class=\"line\">        System.out.println(singleton1.hashCode());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"创建单例对象2\"</span>);</span><br><span class=\"line\">        Singleton4 singleton2 = Singleton4.getInstance();</span><br><span class=\"line\">        System.out.println(singleton2.hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码4.5  测试类<br>运行结果符合预期，测试类通过getInstance()方法获得的是同一对象，因而哈希值是一致的。此特点适用于生产唯一序列号的场景。<br><img src=\"http://images.stephenfang.xyz/mweb/15917516893500.jpg\" alt=\"\"></p>\n<p>图4.3  测试结果<br>    对于单例模式的应用与验证至此告一段落，显然单例模式的运用远不止于此，相关的还有Web计数器、数据库配置文件等等。</p>\n<h2 id=\"问题与缺陷\"><a href=\"#问题与缺陷\" class=\"headerlink\" title=\"问题与缺陷\"></a>问题与缺陷</h2><p>滥用单例可能带来一些负面问题，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出。在Java语言中，连接池采用持久化服务的方式，滥用单例将导致连接得不到释放，内存不断上升从而溢出。<br>JVM提供了自动垃圾回收的机制，并且采用根搜索算法，其基本思路为：任何“活”的对象一定能最终追溯到其存储在堆栈或静态存储区中的引用。通过一系列根（GC Roots）的引用作为起点开始搜索，经过一系列的路径，如果可以到达java堆中的对象，那么这个对象就是不可回收的。可以作为根的对象有：</p>\n<ul>\n<li>虚拟机栈（栈桢中的本地变量表）中的引用的对象。</li>\n<li>方法区中的类静态属性引用的对象。</li>\n<li>方法区中的常量引用的对象。</li>\n<li>本地方法栈中JNI的引用的对象。</li>\n</ul>\n<p>方法区是JVM的一块内存区域，用来存放类相关的信息。java中单例模式创建的对象被自己类中的静态属性所引用，符合第二条，因此，单例对象不会被JVM垃圾收集。虽然JVM堆中的单例对象不会被垃圾收集，但是单例类本身如果长时间不用会不会被收集呢？因为JVM对方法区也是有垃圾收集机制的。如果单例类被收集，那么堆中的对象就会失去到根的路径，必然会被垃圾收集掉。<br>通过以下代码测试单例对象是否会被回收。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] test = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">6</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Obj</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] test = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">3</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Singleton.getInstance();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Obj();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码5.1  测试代码<br>运行时JVM 的参数被设定为：<br><code>-verbose:gc -Xms20M -Xmx20M</code><br>即每次JVM进行垃圾回收时显示内存信息，JVM的内存设为固定20M。<br>通过模拟J2EE容器，实例化大小为6M的单例类，然后不断的创建对象，迫使JVM进行垃圾回收，观察垃圾收集信息，如果进行垃圾收集后，内存仍然大于6M，则说明垃圾回收不会回收单例对象。</p>\n<p><img src=\"http://images.stephenfang.xyz/java.png\" alt=\"\"></p>\n<p>图5.1  测试结果<br>从运行结果中可以看到有6M空间没有被收集。达到GC的条件其一为该类所有的实例都已经被回收，即java堆中不存在该类的任何实例。单例的类不满足该条件，因此单例类也不会被回收。也就是说，只要单例类中的静态引用指向JVM堆中的单例对象，那么单例类和单例对象都不会被垃圾收集。所以“如果实例化的对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致对象状态丢失。”这一点目前无法在实验中验证。<br>至于违背了单一职责原则这一点前文已有讨论，不复引述。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li>洁城浩，《设计模式-JAVA语言中的应用》，中国铁道出版社2005.1</li>\n<li>（美） GoF, 《设计模式-可复用的面向对象软件的基础》，机械工业出版社，2005 </li>\n<li>何海涛，《剑指Offer》，电子工业出版社2012.1</li>\n<li>（美）Alan Holub，《设计模式初学者指南》，机械工业出版社，2006</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>单例模式(Singleton Pattern)，也叫单子模式，属于创建型模式的一种。单例模式重点解决几个不同的客户对象需要引用同个对象，且这种类型的对象数目不止一个的问题。通过确保一个类只能有一个实例，提供对该实例的全局访问，使得客户对象无需操心是否存在单例类的实例，实例化由单例类自己控制。</p>","more":"<h2 id=\"模式简介\"><a href=\"#模式简介\" class=\"headerlink\" title=\"模式简介\"></a>模式简介</h2><p>某些时候整个系统只需要拥有一个全局对象，却有利于协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息，这种方式简化了在复杂环境下的配置管理。<br>单例类存在多种实现方式，较为普遍的实现方式为饿汉式单例类与懒汉式单例类。其中饿汉式单例类在被加载时就将自己实例化。单从资源利用效率角度来讲，饿汉式单例类比懒汉式单例类稍差些。从速度和反应时间角度来讲，饿汉式单例类则比懒汉式单例类稍好些。懒汉式单例类在实例化时，必须处理好在多个线程同时首次引用此类时的访问限制问题，特别是当单例类作为资源控制器，在实例化时必然涉及资源初始化，而资源初始化很有可能耗费大量时间，这意味着出现多线程同时首次引用此类的机率变得较大，需要通过同步化机制进行控制。具体的单例模式实现方式会在后文重点讨论。<br>单例模式的优点在于可以严格控制客户怎样以及何时访问它，为设计及开发团队提供了共享的概念。同时由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能。然而，由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。单例类的职责过重，在一定程度上违背了“单一职责原则”。至于单例模式相关的设计原则会在后文中逐一列举。<br>单例模式应用十分广泛，如需创建一个对象需要耗费大量时间与空间资源时，如IO，数据库连接等，再如需要生成唯一id、静态类型的的工具类等情形也需要使用单例模式。</p>\n<h2 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h2><p>与单例设计模式相关的有以下OOP设计原则。</p>\n<ul>\n<li>迪米特原则<br>迪米特法则（Law of Demeter），一个类对于其他类知道的越少越好，就是说一个对象应当对其他对象有尽可能少的了解,只和朋友通信，不和陌生人说话。<br>在单例模式中表现为其他类对该单例类了解的尽量少。其他类获取该单例类的对象只需要通过其暴露的方法即可，而不需要了解单例具体是怎么创建的。假如该单例类创建的过程变得更加复杂，其他类的调用还是通过这个简单的方法获得对象，不用关心单例类增加了哪些代码。</li>\n<li>单一职责原则<br>单一职责模式的定义为，就一个类而言，应该仅有一个引起它变化的原因。单例类的职责过重，既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起，在一定程度上违背了单一职责原则。违背单一职责原则带来的弊端不限于复用能力越弱、多个职责，一个职责的变化可能会影响到其他的职责等。<br>在使用具体的设计模式前应该思考与之相关的设计原则，进而确定该设计模式是否符合需要，以单例模式为例，单例类没有接口，不能继承，与单一职责原则冲突，仅适用于只关心内部逻辑而不关心外面如何实例化的情形。</li>\n</ul>\n<h2 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h2><p>单例模式的实现需以下三个部分：</p>\n<ul>\n<li>一个引用单例对象的静态私有成员变量</li>\n<li>一个公共静态方法，负责实现一次性的实例化并返回对单例对象的引用</li>\n<li>设置为保护型或私有型的构造方法<br>根据单例模式的成员可以画出相应的类图，其中包含引用单例对象的静态私有成员变量instance；公共静态方法getInstance()负责实现一次性的实例化并返回对单例对象的引用；设置私有型的构造方法Singleton()。</li>\n</ul>\n<p><img src=\"http://images.stephenfang.xyz/mweb/15917501563785.jpg\" alt=\"\"><br>图3.1 单例模式的类图</p>\n<p>在所有常见的设计模式中，singleton模式是唯一一个能够用短短几十行代码完成实现的模式，接下来以不同的例子探讨单例模式的解法。</p>\n<ol>\n<li>只适用于单线程模式的解法（懒汉式）<br>由于单例模式要求只能生成一个实例，因此我们必须把构造函数设为私有函数以禁止他人创建实例。可以通过定义一个静态的实例，在需要的时候创建该实例。下面定义类型Singleton1就是基于这个思路的实现：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton1 instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton1 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton1();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码3.1 只适用于单线程模式的解法<br>    上述代码只有在instance为null时才创建一个实例从而避免重复创建，同时我们把构造函数定义为私有函数从而确保只创建一个实例。该代码仔单线程的时候工作正常，但是在多线程的情况下就会出现问题。设想如果两个线程同时运行到判断instance是否为null的if语句，并且instance的确没有创建时，那么两个线程都会创建一个实例，此时类型Singleton1就不再满足单例模式的要求，可以通过以下解法改变该局面。</p>\n<ol start=\"2\">\n<li>适用于多线程的解法（效率欠佳的懒汉式）<br>为了保证在多线程环境下还是只能得到类型的一个实例，需要加上一个同步锁。假设有两个线程同时想创建一个实例。由于在一个时刻只有一个线程能得到同步锁，当第一个线程加上锁时，第二个线程只能等待。当第一个线程发现实例还没有创建时，它创建出一个实例。接着第一个线程释放同步锁，此时第二个线程可以加上同步锁，并运行接下来的代码。这个时候由于实例已经被第一个线程创建出来了，第二个线程就不会重复创建实例了，这样就保证了在多线程环境中也只能得到一个实例。把Singleton1稍做修改得到了如下代码：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton2 instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton2 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton2();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码3.2 适用于多线程的低效率解法<br>    但是 Singleton2 还不是很完美。我们每次通过 getInstance 方法得到Singleton2的实例，都会试图加上一个同步锁，而加锁是一个非常耗时的操作，在没有必要的时候应该尽量避免。</p>\n<ol start=\"3\">\n<li>加同步锁前后两次判断实例是否已存在的解法（DCL）<br>在实例还没有创建之前需要加锁操作，以保证只有一个线程创建出实例。然而当实例已经完成创建之后，已经不需要再做加锁操作了。Singleton3中只有当instance为null即没有创建时，需要加锁操作。当instance 已经创建出来之后，则无须加锁。参考以下改进后的Singleton2代码，其时间效率能够比Singleton2提升很多。其中instance被volatile 修饰，增加线程之间的可见性，并且任何线程对它的写操作都会立即刷新到主内存中，并且会强制让缓存了instance变量的线程中的数据清空，必须从主内存重新读取最新数据。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton3 instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton3 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton3<span class=\"class\">.<span class=\"keyword\">class</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> Singleton3();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码3.3 加同步锁前后两次判断实例是否已存在的解法<br>Singleton3用加锁机制来确保在多线程环境下只创建一个实例，并且用两个 if 判断来提高效率。这样的代码实现起来比较复杂，容易出错，然而还有其他解法。</p>\n<ol start=\"4\">\n<li>利用静态构造函数的解法（饿汉式）<br>静态构造函数的实现代码非常简洁。因为单例对象只创建一次，所以考虑使用 static 修饰，这样在 JVM 加载该类的时候就会自动创建对象，又因为不希望其他类执行该单例类的构造方法再去创建单例对象，所以把构造函数的属性设置为 private。效果为在调用静态构造函数时初始化静态变量，确保只调用一次静态构造函数，从而保证只初始化一次instance。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton4</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton4 instance = <span class=\"keyword\">new</span> Singleton4();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton4 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码3.4 利用静态构造函数的解法<br>假设我们在Singleton4 中添加一个静态方法，调用该静态函数是不需要创建一个实例的，但如果按照Singleton4的方式实现单例模式，则仍然会过早地创建实例，从而降低内存的使用效率。</p>\n<ol start=\"5\">\n<li>利用静态内部类的解法<br>静态内部类的优点为，外部类加载时不需要立即加载内部类，内部类不被加载则不去初始化instance，即不会在内存中占据位置。如下巧妙运用了这种方法，即第一次调用getInstance() 方法使得JVM加载SingletonStatic类，从某种程度上而言实现了按需创建实例。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton5</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton5</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonStatic</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton5 instance = <span class=\"keyword\">new</span> Singleton5();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton5 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonStatic.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码3.5 利用静态内部类的解法<br>当Singleton5类第一次被加载时，并不需要立即加载SingletonStatic内部类，只有当 getInstance() 方法第一次被调用时，才会初始化instance对象。这种方法不仅能确保线程安全，也能保证单例的唯一性，同时也延迟了单例的实例化。</p>\n<ol start=\"6\">\n<li>利用枚举的解法<br>引用 《Effective Java》书中的一句话，“单元素的枚举类型已经成为实现Singleton的最佳方法。”这种解法利用枚举的特性保证了按需加载、线程同步。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Singleton6 &#123;</span><br><span class=\"line\">    instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码3.6 利用枚举类型的解法<br>目前该实现方式还没有被广泛采用，但它更简洁，自动支持序列化机制，绝对防止多次实例化。它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏。</p>\n<ol start=\"7\">\n<li>解法总结<br>以简洁明了的表格总结前文中实现的六种单例模式的解法，对于不同解法的参考指标为是否懒加载、是否容易实现、是否线程安全以及是否高效率。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>实现方法</th>\n<th>解法一</th>\n<th>解法二</th>\n<th>解法三</th>\n<th>解法四</th>\n<th>解法五</th>\n<th>解法六</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>懒加载</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>易实现</td>\n<td>是</td>\n<td>是</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>线程安全</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>高效率</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n</tbody></table>\n<p>表格3.1 解法总结表</p>\n<p>一般情况下不建议使用第一种和第二种懒汉解法，第三种解法补足了前两者的短板然而编写逻辑较为复杂，第四种解法虽然没有实现懒加载的效果但仍为比较通用的解法，静态内部类的解法能够实现按需加载不失为一种优秀的算法，而如果涉及到反序列化创建对象时，可以尝试使用最后一种枚举类型的算法。</p>\n<h2 id=\"模式简例\"><a href=\"#模式简例\" class=\"headerlink\" title=\"模式简例\"></a>模式简例</h2><p>在JDK内部也存在对单例模式的运用。Runtime类就是十分典型的例子。<br><img src=\"http://images.stephenfang.xyz/mweb/15917515167469.jpg\" alt=\"\"></p>\n<p>图4.2  Runtime类图<br>    在每一个Java应用程序中，都有唯一的一个Runtime对象，通过这个对象应用程序可以与其运行环境发生相互作用。Runtime类提供私有的静态的Runtime对象 currentRuntime、私有的空Runtime构造方法以及一个静态工厂方法getRuntime（），通过调用getRuntime（）方法，可以获得Runtime类唯一的一个实例，并且从源代码代码中可以看出，Runtime使用了饿汉式单例模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.lang;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Runtime</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Runtime currentRuntime = <span class=\"keyword\">new</span> Runtime();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Runtime <span class=\"title\">getRuntime</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentRuntime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Runtime</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">…</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码4.3  Runtime源代码<br>前文中有提及，单例模式还可以用于生成唯一id 的情形，这里以前文中的Singleton4 实现方式为例。通过创建Main主类，并且在该类的main()方法中，创建2个Singleton4对象，获取对象的hashCode。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"创建单例对象1：\"</span>);</span><br><span class=\"line\">        Singleton4 singleton1 = Singleton4.getInstance();</span><br><span class=\"line\">        System.out.println(singleton1.hashCode());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"创建单例对象2\"</span>);</span><br><span class=\"line\">        Singleton4 singleton2 = Singleton4.getInstance();</span><br><span class=\"line\">        System.out.println(singleton2.hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码4.5  测试类<br>运行结果符合预期，测试类通过getInstance()方法获得的是同一对象，因而哈希值是一致的。此特点适用于生产唯一序列号的场景。<br><img src=\"http://images.stephenfang.xyz/mweb/15917516893500.jpg\" alt=\"\"></p>\n<p>图4.3  测试结果<br>    对于单例模式的应用与验证至此告一段落，显然单例模式的运用远不止于此，相关的还有Web计数器、数据库配置文件等等。</p>\n<h2 id=\"问题与缺陷\"><a href=\"#问题与缺陷\" class=\"headerlink\" title=\"问题与缺陷\"></a>问题与缺陷</h2><p>滥用单例可能带来一些负面问题，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出。在Java语言中，连接池采用持久化服务的方式，滥用单例将导致连接得不到释放，内存不断上升从而溢出。<br>JVM提供了自动垃圾回收的机制，并且采用根搜索算法，其基本思路为：任何“活”的对象一定能最终追溯到其存储在堆栈或静态存储区中的引用。通过一系列根（GC Roots）的引用作为起点开始搜索，经过一系列的路径，如果可以到达java堆中的对象，那么这个对象就是不可回收的。可以作为根的对象有：</p>\n<ul>\n<li>虚拟机栈（栈桢中的本地变量表）中的引用的对象。</li>\n<li>方法区中的类静态属性引用的对象。</li>\n<li>方法区中的常量引用的对象。</li>\n<li>本地方法栈中JNI的引用的对象。</li>\n</ul>\n<p>方法区是JVM的一块内存区域，用来存放类相关的信息。java中单例模式创建的对象被自己类中的静态属性所引用，符合第二条，因此，单例对象不会被JVM垃圾收集。虽然JVM堆中的单例对象不会被垃圾收集，但是单例类本身如果长时间不用会不会被收集呢？因为JVM对方法区也是有垃圾收集机制的。如果单例类被收集，那么堆中的对象就会失去到根的路径，必然会被垃圾收集掉。<br>通过以下代码测试单例对象是否会被回收。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] test = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">6</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Obj</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] test = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">3</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Singleton.getInstance();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Obj();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码5.1  测试代码<br>运行时JVM 的参数被设定为：<br><code>-verbose:gc -Xms20M -Xmx20M</code><br>即每次JVM进行垃圾回收时显示内存信息，JVM的内存设为固定20M。<br>通过模拟J2EE容器，实例化大小为6M的单例类，然后不断的创建对象，迫使JVM进行垃圾回收，观察垃圾收集信息，如果进行垃圾收集后，内存仍然大于6M，则说明垃圾回收不会回收单例对象。</p>\n<p><img src=\"http://images.stephenfang.xyz/java.png\" alt=\"\"></p>\n<p>图5.1  测试结果<br>从运行结果中可以看到有6M空间没有被收集。达到GC的条件其一为该类所有的实例都已经被回收，即java堆中不存在该类的任何实例。单例的类不满足该条件，因此单例类也不会被回收。也就是说，只要单例类中的静态引用指向JVM堆中的单例对象，那么单例类和单例对象都不会被垃圾收集。所以“如果实例化的对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致对象状态丢失。”这一点目前无法在实验中验证。<br>至于违背了单一职责原则这一点前文已有讨论，不复引述。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li>洁城浩，《设计模式-JAVA语言中的应用》，中国铁道出版社2005.1</li>\n<li>（美） GoF, 《设计模式-可复用的面向对象软件的基础》，机械工业出版社，2005 </li>\n<li>何海涛，《剑指Offer》，电子工业出版社2012.1</li>\n<li>（美）Alan Holub，《设计模式初学者指南》，机械工业出版社，2006</li>\n</ul>"},{"title":"OpenCV 图像直方图与均衡化","date":"2020-03-16T08:20:20.000Z","copyright":true,"_content":"\n> 如果您不知道如何在 Mac 上使用 Xcode 配置 `OpenCV`，可以参考我写的上一篇博文。\n\n直方图是图像的一种统计表达，反映了图像中灰度的分布情况。以概率论为基础的，通过改变图像的直方图来改变图象中像素的灰度，以达到图像增强的目标，常称直方图修正。\n\n<!--more-->\n{% asset_img 直方图.png %}\n\n直方图均衡化原理即借助直方图变换实现（归一的）灰度映射，实现思想为对在图像中像素个数多的灰度级进行展宽，而对像素个数少的灰度级进行缩减。从而达到清晰图像的目的。\n\n回到 `OpenCV`，`OpenCV`中提供了`equalizeHist`函数实现灰度图像直方图均衡化，给出如下函数原型及相关文档。\n\n```cpp\nvoid cv::equalizeHist\t(\tInputArray src,\nOutputArray \tdst \n)\t\n```\n\n{% asset_img equa.jpg %}\n\n实现的图像直方图均衡化算法就是把直方图的每个灰度级进行归一化处理，求各个灰度的累积分布并得到一个映射的灰度映射表，最后根据相应的灰度值来修正原图中的每个像素的像素值。\n\n`OpenCV`中提供了`cvtColor`函数实现彩色图像转为灰度图像，给出如下函数原型及相关文档。\n{% asset_img cvcolor.png %}\n\n至于直方图的绘制方法，`OpenCV`中提供了`calcList`函数计算图像直方图，尝试使用函数来实现会更符合操作流程。\n{% asset_img calcHist.jpg %}\n\n## 说明\n本次实验需要完成以下任务：\n1. 完成直方图的绘制\n2. 使 RGB 图像变为灰度图像\n3. 完成图像直方图均衡化\n给出如下代码：\n\n```cpp\n#include <opencv2/opencv.hpp>\n#include <iostream>\n\nusing namespace cv;\nusing namespace std;\n\n MatND getHistogram(Mat &image)\n{\n    MatND hist;\n    int channels[] = {0};\n    int dims = 1;\n    int histSize[] = {256};\n    float granges[] = {0, 255};\n    const float *ranges[] = {granges};\n    calcHist(&image, 1, channels, Mat(), hist, dims, histSize, ranges);\n    return hist;\n}\n //  将图像直方图展示出来\n Mat getHistogramImage(Mat &image)\n{\n    MatND hist = getHistogram(image);\n    Mat showImage(256,256, CV_8U,Scalar(0));\n    int i;\n    double maxValue = 0;\n    minMaxLoc(hist, 0, &maxValue, 0, 0);\n    for(i = 0; i < 256; i++)\n    {\n        float value = hist.at<float>(i);\n        int intensity = saturate_cast<int>(256 - 256* (value/maxValue));\n        rectangle(showImage, Point(i,256 - 1), Point((i+1)-1, intensity), Scalar(255));\n    }\n    return showImage;\n}\n\nint main()\n{\n    Mat src= imread(\"original.jpeg\");// 读取图片\n    Mat gray,equa;\n    Mat grayHistogram,equaHistogram;\n\n    if(!src.data)             // 检查非法输入\n      {\n          cout <<  \"无法读取照片\" << endl ;\n          return -1;\n      }\n\n    namedWindow(\"RGB\",WINDOW_AUTOSIZE);   // 创建图片显示自动调整大小的窗口\n    imshow(\"RGB\",src);    // 在窗口显示原始图片\n    \n    cvtColor(src, gray, COLOR_BGR2GRAY);\n    namedWindow(\"GRAY\",WINDOW_AUTOSIZE);\n    imshow(\"GRAY\",gray);    // 在窗口显示灰度图片\n    \n    grayHistogram = getHistogramImage(gray);\n    //获得灰度图直方图\n    namedWindow(\"FirstHistogram\",WINDOW_AUTOSIZE);\n    imshow(\"FirstHistogram\",grayHistogram); // 在窗口显示灰度图直方图\n    \n    equalizeHist(gray, equa);\n    namedWindow(\"EQUA\",WINDOW_AUTOSIZE); \n    imshow(\"EQUA\",equa);    // 在窗口显示均衡化处理后图片\n    \n    imwrite(\"result.jpg\", equa); // 存储实验结果\n    \n    equaHistogram = getHistogramImage(equa);  //获得均衡化处理后直方图\n    namedWindow(\"SecondHistogram\",WINDOW_AUTOSIZE; \n imshow(\"SecondHistogram\",equaHistogram);    // 在窗口显示均衡化处理后\n    \n    waitKey(0); // 按键等待，需要在窗口任意输入字符退出，0代表永久等待\n    \n    src.release();\n    gray.release();\n    equa.release();\n    grayHistogram.release();\n    equaHistogram.release();\n    destroyWindow(\"RGB\");\n    destroyWindow(\"GRAY\");\n    destroyWindow(\"EQUA\");\n    destroyWindow(\"FirstHistogram\");\n    destroyWindow(\"SecondHistogram\");\n    return 0;\n}\n```\n\n## 实验结果\n\n{% asset_img result.png %}\n第一张图片为未处理过的原图，第二张图片为灰度处理后的图片。第三张图片为均衡化处理后的灰度图，从直方图很能看出区别。\n\n## 参考\n[OpenCV官方文档](https://docs.opencv.org/master/)\n[Dongcheng Lai的知乎专栏](https://zhuanlan.zhihu.com/p/73201428)\n[opencv图像直方图的计算及绘制-Naruto_Q的博客](https://blog.csdn.net/piaoxuezhong/article/details/54588270)","source":"_posts/OpenCV_Grayscale.md","raw":"---\ntitle: OpenCV 图像直方图与均衡化\ndate: 2020-03-16 16:20:20\ncategories: \n- tech\ntags: \n- OpenCV\n- Xcode\n- Grayscale\ncopyright: true\n---\n\n> 如果您不知道如何在 Mac 上使用 Xcode 配置 `OpenCV`，可以参考我写的上一篇博文。\n\n直方图是图像的一种统计表达，反映了图像中灰度的分布情况。以概率论为基础的，通过改变图像的直方图来改变图象中像素的灰度，以达到图像增强的目标，常称直方图修正。\n\n<!--more-->\n{% asset_img 直方图.png %}\n\n直方图均衡化原理即借助直方图变换实现（归一的）灰度映射，实现思想为对在图像中像素个数多的灰度级进行展宽，而对像素个数少的灰度级进行缩减。从而达到清晰图像的目的。\n\n回到 `OpenCV`，`OpenCV`中提供了`equalizeHist`函数实现灰度图像直方图均衡化，给出如下函数原型及相关文档。\n\n```cpp\nvoid cv::equalizeHist\t(\tInputArray src,\nOutputArray \tdst \n)\t\n```\n\n{% asset_img equa.jpg %}\n\n实现的图像直方图均衡化算法就是把直方图的每个灰度级进行归一化处理，求各个灰度的累积分布并得到一个映射的灰度映射表，最后根据相应的灰度值来修正原图中的每个像素的像素值。\n\n`OpenCV`中提供了`cvtColor`函数实现彩色图像转为灰度图像，给出如下函数原型及相关文档。\n{% asset_img cvcolor.png %}\n\n至于直方图的绘制方法，`OpenCV`中提供了`calcList`函数计算图像直方图，尝试使用函数来实现会更符合操作流程。\n{% asset_img calcHist.jpg %}\n\n## 说明\n本次实验需要完成以下任务：\n1. 完成直方图的绘制\n2. 使 RGB 图像变为灰度图像\n3. 完成图像直方图均衡化\n给出如下代码：\n\n```cpp\n#include <opencv2/opencv.hpp>\n#include <iostream>\n\nusing namespace cv;\nusing namespace std;\n\n MatND getHistogram(Mat &image)\n{\n    MatND hist;\n    int channels[] = {0};\n    int dims = 1;\n    int histSize[] = {256};\n    float granges[] = {0, 255};\n    const float *ranges[] = {granges};\n    calcHist(&image, 1, channels, Mat(), hist, dims, histSize, ranges);\n    return hist;\n}\n //  将图像直方图展示出来\n Mat getHistogramImage(Mat &image)\n{\n    MatND hist = getHistogram(image);\n    Mat showImage(256,256, CV_8U,Scalar(0));\n    int i;\n    double maxValue = 0;\n    minMaxLoc(hist, 0, &maxValue, 0, 0);\n    for(i = 0; i < 256; i++)\n    {\n        float value = hist.at<float>(i);\n        int intensity = saturate_cast<int>(256 - 256* (value/maxValue));\n        rectangle(showImage, Point(i,256 - 1), Point((i+1)-1, intensity), Scalar(255));\n    }\n    return showImage;\n}\n\nint main()\n{\n    Mat src= imread(\"original.jpeg\");// 读取图片\n    Mat gray,equa;\n    Mat grayHistogram,equaHistogram;\n\n    if(!src.data)             // 检查非法输入\n      {\n          cout <<  \"无法读取照片\" << endl ;\n          return -1;\n      }\n\n    namedWindow(\"RGB\",WINDOW_AUTOSIZE);   // 创建图片显示自动调整大小的窗口\n    imshow(\"RGB\",src);    // 在窗口显示原始图片\n    \n    cvtColor(src, gray, COLOR_BGR2GRAY);\n    namedWindow(\"GRAY\",WINDOW_AUTOSIZE);\n    imshow(\"GRAY\",gray);    // 在窗口显示灰度图片\n    \n    grayHistogram = getHistogramImage(gray);\n    //获得灰度图直方图\n    namedWindow(\"FirstHistogram\",WINDOW_AUTOSIZE);\n    imshow(\"FirstHistogram\",grayHistogram); // 在窗口显示灰度图直方图\n    \n    equalizeHist(gray, equa);\n    namedWindow(\"EQUA\",WINDOW_AUTOSIZE); \n    imshow(\"EQUA\",equa);    // 在窗口显示均衡化处理后图片\n    \n    imwrite(\"result.jpg\", equa); // 存储实验结果\n    \n    equaHistogram = getHistogramImage(equa);  //获得均衡化处理后直方图\n    namedWindow(\"SecondHistogram\",WINDOW_AUTOSIZE; \n imshow(\"SecondHistogram\",equaHistogram);    // 在窗口显示均衡化处理后\n    \n    waitKey(0); // 按键等待，需要在窗口任意输入字符退出，0代表永久等待\n    \n    src.release();\n    gray.release();\n    equa.release();\n    grayHistogram.release();\n    equaHistogram.release();\n    destroyWindow(\"RGB\");\n    destroyWindow(\"GRAY\");\n    destroyWindow(\"EQUA\");\n    destroyWindow(\"FirstHistogram\");\n    destroyWindow(\"SecondHistogram\");\n    return 0;\n}\n```\n\n## 实验结果\n\n{% asset_img result.png %}\n第一张图片为未处理过的原图，第二张图片为灰度处理后的图片。第三张图片为均衡化处理后的灰度图，从直方图很能看出区别。\n\n## 参考\n[OpenCV官方文档](https://docs.opencv.org/master/)\n[Dongcheng Lai的知乎专栏](https://zhuanlan.zhihu.com/p/73201428)\n[opencv图像直方图的计算及绘制-Naruto_Q的博客](https://blog.csdn.net/piaoxuezhong/article/details/54588270)","slug":"OpenCV_Grayscale","published":1,"updated":"2021-07-26T07:59:35.679Z","_id":"ckcive9nm001jcv6b9oleclbr","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>如果您不知道如何在 Mac 上使用 Xcode 配置 <code>OpenCV</code>，可以参考我写的上一篇博文。</p>\n</blockquote>\n<p>直方图是图像的一种统计表达，反映了图像中灰度的分布情况。以概率论为基础的，通过改变图像的直方图来改变图象中像素的灰度，以达到图像增强的目标，常称直方图修正。</p>\n<a id=\"more\"></a>\n<img src=\"/2020/03/16/OpenCV_Grayscale/%E7%9B%B4%E6%96%B9%E5%9B%BE.png\" class=\"\">\n\n<p>直方图均衡化原理即借助直方图变换实现（归一的）灰度映射，实现思想为对在图像中像素个数多的灰度级进行展宽，而对像素个数少的灰度级进行缩减。从而达到清晰图像的目的。</p>\n<p>回到 <code>OpenCV</code>，<code>OpenCV</code>中提供了<code>equalizeHist</code>函数实现灰度图像直方图均衡化，给出如下函数原型及相关文档。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cv::equalizeHist</span>\t<span class=\"params\">(\tInputArray src,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">OutputArray \tdst </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span></span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2020/03/16/OpenCV_Grayscale/equa.jpg\" class=\"\">\n\n<p>实现的图像直方图均衡化算法就是把直方图的每个灰度级进行归一化处理，求各个灰度的累积分布并得到一个映射的灰度映射表，最后根据相应的灰度值来修正原图中的每个像素的像素值。</p>\n<p><code>OpenCV</code>中提供了<code>cvtColor</code>函数实现彩色图像转为灰度图像，给出如下函数原型及相关文档。</p>\n<img src=\"/2020/03/16/OpenCV_Grayscale/cvcolor.png\" class=\"\">\n\n<p>至于直方图的绘制方法，<code>OpenCV</code>中提供了<code>calcList</code>函数计算图像直方图，尝试使用函数来实现会更符合操作流程。</p>\n<img src=\"/2020/03/16/OpenCV_Grayscale/calcHist.jpg\" class=\"\">\n\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>本次实验需要完成以下任务：</p>\n<ol>\n<li>完成直方图的绘制</li>\n<li>使 RGB 图像变为灰度图像</li>\n<li>完成图像直方图均衡化<br>给出如下代码：</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\">MatND <span class=\"title\">getHistogram</span><span class=\"params\">(Mat &amp;image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    MatND hist;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> channels[] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dims = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> histSize[] = &#123;<span class=\"number\">256</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> granges[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">255</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> *ranges[] = &#123;granges&#125;;</span><br><span class=\"line\">    calcHist(&amp;image, <span class=\"number\">1</span>, channels, Mat(), hist, dims, histSize, ranges);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hist;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"comment\">//  将图像直方图展示出来</span></span><br><span class=\"line\"> <span class=\"function\">Mat <span class=\"title\">getHistogramImage</span><span class=\"params\">(Mat &amp;image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    MatND hist = getHistogram(image);</span><br><span class=\"line\">    <span class=\"function\">Mat <span class=\"title\">showImage</span><span class=\"params\">(<span class=\"number\">256</span>,<span class=\"number\">256</span>, CV_8U,Scalar(<span class=\"number\">0</span>))</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> maxValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">    minMaxLoc(hist, <span class=\"number\">0</span>, &amp;maxValue, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> value = hist.at&lt;<span class=\"keyword\">float</span>&gt;(i);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> intensity = saturate_cast&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">256</span> - <span class=\"number\">256</span>* (value/maxValue));</span><br><span class=\"line\">        rectangle(showImage, Point(i,<span class=\"number\">256</span> - <span class=\"number\">1</span>), Point((i+<span class=\"number\">1</span>)<span class=\"number\">-1</span>, intensity), Scalar(<span class=\"number\">255</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> showImage;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Mat src= imread(<span class=\"string\">\"original.jpeg\"</span>);<span class=\"comment\">// 读取图片</span></span><br><span class=\"line\">    Mat gray,equa;</span><br><span class=\"line\">    Mat grayHistogram,equaHistogram;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!src.data)             <span class=\"comment\">// 检查非法输入</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"built_in\">cout</span> &lt;&lt;  <span class=\"string\">\"无法读取照片\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    namedWindow(<span class=\"string\">\"RGB\"</span>,WINDOW_AUTOSIZE);   <span class=\"comment\">// 创建图片显示自动调整大小的窗口</span></span><br><span class=\"line\">    imshow(<span class=\"string\">\"RGB\"</span>,src);    <span class=\"comment\">// 在窗口显示原始图片</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    cvtColor(src, gray, COLOR_BGR2GRAY);</span><br><span class=\"line\">    namedWindow(<span class=\"string\">\"GRAY\"</span>,WINDOW_AUTOSIZE);</span><br><span class=\"line\">    imshow(<span class=\"string\">\"GRAY\"</span>,gray);    <span class=\"comment\">// 在窗口显示灰度图片</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    grayHistogram = getHistogramImage(gray);</span><br><span class=\"line\">    <span class=\"comment\">//获得灰度图直方图</span></span><br><span class=\"line\">    namedWindow(<span class=\"string\">\"FirstHistogram\"</span>,WINDOW_AUTOSIZE);</span><br><span class=\"line\">    imshow(<span class=\"string\">\"FirstHistogram\"</span>,grayHistogram); <span class=\"comment\">// 在窗口显示灰度图直方图</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    equalizeHist(gray, equa);</span><br><span class=\"line\">    namedWindow(<span class=\"string\">\"EQUA\"</span>,WINDOW_AUTOSIZE); </span><br><span class=\"line\">    imshow(<span class=\"string\">\"EQUA\"</span>,equa);    <span class=\"comment\">// 在窗口显示均衡化处理后图片</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    imwrite(<span class=\"string\">\"result.jpg\"</span>, equa); <span class=\"comment\">// 存储实验结果</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    equaHistogram = getHistogramImage(equa);  <span class=\"comment\">//获得均衡化处理后直方图</span></span><br><span class=\"line\">    namedWindow(<span class=\"string\">\"SecondHistogram\"</span>,WINDOW_AUTOSIZE; </span><br><span class=\"line\"> imshow(<span class=\"string\">\"SecondHistogram\"</span>,equaHistogram);    <span class=\"comment\">// 在窗口显示均衡化处理后</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    waitKey(<span class=\"number\">0</span>); <span class=\"comment\">// 按键等待，需要在窗口任意输入字符退出，0代表永久等待</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    src.release();</span><br><span class=\"line\">    gray.release();</span><br><span class=\"line\">    equa.release();</span><br><span class=\"line\">    grayHistogram.release();</span><br><span class=\"line\">    equaHistogram.release();</span><br><span class=\"line\">    destroyWindow(<span class=\"string\">\"RGB\"</span>);</span><br><span class=\"line\">    destroyWindow(<span class=\"string\">\"GRAY\"</span>);</span><br><span class=\"line\">    destroyWindow(<span class=\"string\">\"EQUA\"</span>);</span><br><span class=\"line\">    destroyWindow(<span class=\"string\">\"FirstHistogram\"</span>);</span><br><span class=\"line\">    destroyWindow(<span class=\"string\">\"SecondHistogram\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h2><img src=\"/2020/03/16/OpenCV_Grayscale/result.png\" class=\"\">\n<p>第一张图片为未处理过的原图，第二张图片为灰度处理后的图片。第三张图片为均衡化处理后的灰度图，从直方图很能看出区别。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://docs.opencv.org/master/\" target=\"_blank\" rel=\"noopener\">OpenCV官方文档</a><br><a href=\"https://zhuanlan.zhihu.com/p/73201428\" target=\"_blank\" rel=\"noopener\">Dongcheng Lai的知乎专栏</a><br><a href=\"https://blog.csdn.net/piaoxuezhong/article/details/54588270\" target=\"_blank\" rel=\"noopener\">opencv图像直方图的计算及绘制-Naruto_Q的博客</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>如果您不知道如何在 Mac 上使用 Xcode 配置 <code>OpenCV</code>，可以参考我写的上一篇博文。</p>\n</blockquote>\n<p>直方图是图像的一种统计表达，反映了图像中灰度的分布情况。以概率论为基础的，通过改变图像的直方图来改变图象中像素的灰度，以达到图像增强的目标，常称直方图修正。</p>","more":"<img src=\"/2020/03/16/OpenCV_Grayscale/%E7%9B%B4%E6%96%B9%E5%9B%BE.png\" class=\"\">\n\n<p>直方图均衡化原理即借助直方图变换实现（归一的）灰度映射，实现思想为对在图像中像素个数多的灰度级进行展宽，而对像素个数少的灰度级进行缩减。从而达到清晰图像的目的。</p>\n<p>回到 <code>OpenCV</code>，<code>OpenCV</code>中提供了<code>equalizeHist</code>函数实现灰度图像直方图均衡化，给出如下函数原型及相关文档。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cv::equalizeHist</span>\t<span class=\"params\">(\tInputArray src,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">OutputArray \tdst </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span></span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2020/03/16/OpenCV_Grayscale/equa.jpg\" class=\"\">\n\n<p>实现的图像直方图均衡化算法就是把直方图的每个灰度级进行归一化处理，求各个灰度的累积分布并得到一个映射的灰度映射表，最后根据相应的灰度值来修正原图中的每个像素的像素值。</p>\n<p><code>OpenCV</code>中提供了<code>cvtColor</code>函数实现彩色图像转为灰度图像，给出如下函数原型及相关文档。</p>\n<img src=\"/2020/03/16/OpenCV_Grayscale/cvcolor.png\" class=\"\">\n\n<p>至于直方图的绘制方法，<code>OpenCV</code>中提供了<code>calcList</code>函数计算图像直方图，尝试使用函数来实现会更符合操作流程。</p>\n<img src=\"/2020/03/16/OpenCV_Grayscale/calcHist.jpg\" class=\"\">\n\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>本次实验需要完成以下任务：</p>\n<ol>\n<li>完成直方图的绘制</li>\n<li>使 RGB 图像变为灰度图像</li>\n<li>完成图像直方图均衡化<br>给出如下代码：</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\">MatND <span class=\"title\">getHistogram</span><span class=\"params\">(Mat &amp;image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    MatND hist;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> channels[] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dims = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> histSize[] = &#123;<span class=\"number\">256</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> granges[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">255</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> *ranges[] = &#123;granges&#125;;</span><br><span class=\"line\">    calcHist(&amp;image, <span class=\"number\">1</span>, channels, Mat(), hist, dims, histSize, ranges);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hist;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"comment\">//  将图像直方图展示出来</span></span><br><span class=\"line\"> <span class=\"function\">Mat <span class=\"title\">getHistogramImage</span><span class=\"params\">(Mat &amp;image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    MatND hist = getHistogram(image);</span><br><span class=\"line\">    <span class=\"function\">Mat <span class=\"title\">showImage</span><span class=\"params\">(<span class=\"number\">256</span>,<span class=\"number\">256</span>, CV_8U,Scalar(<span class=\"number\">0</span>))</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> maxValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">    minMaxLoc(hist, <span class=\"number\">0</span>, &amp;maxValue, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> value = hist.at&lt;<span class=\"keyword\">float</span>&gt;(i);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> intensity = saturate_cast&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">256</span> - <span class=\"number\">256</span>* (value/maxValue));</span><br><span class=\"line\">        rectangle(showImage, Point(i,<span class=\"number\">256</span> - <span class=\"number\">1</span>), Point((i+<span class=\"number\">1</span>)<span class=\"number\">-1</span>, intensity), Scalar(<span class=\"number\">255</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> showImage;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Mat src= imread(<span class=\"string\">\"original.jpeg\"</span>);<span class=\"comment\">// 读取图片</span></span><br><span class=\"line\">    Mat gray,equa;</span><br><span class=\"line\">    Mat grayHistogram,equaHistogram;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!src.data)             <span class=\"comment\">// 检查非法输入</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"built_in\">cout</span> &lt;&lt;  <span class=\"string\">\"无法读取照片\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    namedWindow(<span class=\"string\">\"RGB\"</span>,WINDOW_AUTOSIZE);   <span class=\"comment\">// 创建图片显示自动调整大小的窗口</span></span><br><span class=\"line\">    imshow(<span class=\"string\">\"RGB\"</span>,src);    <span class=\"comment\">// 在窗口显示原始图片</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    cvtColor(src, gray, COLOR_BGR2GRAY);</span><br><span class=\"line\">    namedWindow(<span class=\"string\">\"GRAY\"</span>,WINDOW_AUTOSIZE);</span><br><span class=\"line\">    imshow(<span class=\"string\">\"GRAY\"</span>,gray);    <span class=\"comment\">// 在窗口显示灰度图片</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    grayHistogram = getHistogramImage(gray);</span><br><span class=\"line\">    <span class=\"comment\">//获得灰度图直方图</span></span><br><span class=\"line\">    namedWindow(<span class=\"string\">\"FirstHistogram\"</span>,WINDOW_AUTOSIZE);</span><br><span class=\"line\">    imshow(<span class=\"string\">\"FirstHistogram\"</span>,grayHistogram); <span class=\"comment\">// 在窗口显示灰度图直方图</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    equalizeHist(gray, equa);</span><br><span class=\"line\">    namedWindow(<span class=\"string\">\"EQUA\"</span>,WINDOW_AUTOSIZE); </span><br><span class=\"line\">    imshow(<span class=\"string\">\"EQUA\"</span>,equa);    <span class=\"comment\">// 在窗口显示均衡化处理后图片</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    imwrite(<span class=\"string\">\"result.jpg\"</span>, equa); <span class=\"comment\">// 存储实验结果</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    equaHistogram = getHistogramImage(equa);  <span class=\"comment\">//获得均衡化处理后直方图</span></span><br><span class=\"line\">    namedWindow(<span class=\"string\">\"SecondHistogram\"</span>,WINDOW_AUTOSIZE; </span><br><span class=\"line\"> imshow(<span class=\"string\">\"SecondHistogram\"</span>,equaHistogram);    <span class=\"comment\">// 在窗口显示均衡化处理后</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    waitKey(<span class=\"number\">0</span>); <span class=\"comment\">// 按键等待，需要在窗口任意输入字符退出，0代表永久等待</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    src.release();</span><br><span class=\"line\">    gray.release();</span><br><span class=\"line\">    equa.release();</span><br><span class=\"line\">    grayHistogram.release();</span><br><span class=\"line\">    equaHistogram.release();</span><br><span class=\"line\">    destroyWindow(<span class=\"string\">\"RGB\"</span>);</span><br><span class=\"line\">    destroyWindow(<span class=\"string\">\"GRAY\"</span>);</span><br><span class=\"line\">    destroyWindow(<span class=\"string\">\"EQUA\"</span>);</span><br><span class=\"line\">    destroyWindow(<span class=\"string\">\"FirstHistogram\"</span>);</span><br><span class=\"line\">    destroyWindow(<span class=\"string\">\"SecondHistogram\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h2><img src=\"/2020/03/16/OpenCV_Grayscale/result.png\" class=\"\">\n<p>第一张图片为未处理过的原图，第二张图片为灰度处理后的图片。第三张图片为均衡化处理后的灰度图，从直方图很能看出区别。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://docs.opencv.org/master/\" target=\"_blank\" rel=\"noopener\">OpenCV官方文档</a><br><a href=\"https://zhuanlan.zhihu.com/p/73201428\" target=\"_blank\" rel=\"noopener\">Dongcheng Lai的知乎专栏</a><br><a href=\"https://blog.csdn.net/piaoxuezhong/article/details/54588270\" target=\"_blank\" rel=\"noopener\">opencv图像直方图的计算及绘制-Naruto_Q的博客</a></p>"},{"title":"Struts 2 基础应用实验","date":"2020-02-23T10:10:20.000Z","_content":"\n包含Struts 2知识梳理、实验总结、实验步骤三方面的总结。\n<!--more-->\n## 知识梳理\n\n1、Struts2 是从 WebWork 框架上发展起来的 MVC 框架； \n\n2、FilterDispatcher 是 Struts2 中的核心控制器，客户端对服务器端的请求将被 FilterDispatcher 过滤；若请求需要调用某个 Action，则框架将根据配置文件`struts.xml`，找到需要调用的 Action 类； \n\n3、Action 类是一个符合一定命名规范的 JavaSE 类，作为业务控制器使用； Action \n中的 execute()方法用于调用 Model 层的业务逻辑类，并根据返回结果决定页面导航； \n\n4、若 Action 类中需要使用表单提交的请求参数，那么必须在 Action 类中声明与 \n表单域的名字对应的变量，并为变量提供 getters/setters 方法； \n\n5、Action 类需要在 `struts.xml` 中进行配置才能使用； \n\n6、编译运行基于 Struts2 框架的 Web 工程，需要导入 struts2 的 8 个核心 jar 包： \n\n| 文件名                     | 说明                                 |\n| -------------------------- | ------------------------------------ |\n| struts2-core-2.3.15.1.jar  | Struts 2 框架的核心类库              |\n| xwork-core-2.3.15.1.jar    | XWork 类库，Struts 2 的构建基础      |\n| Ognl-3.0.6.jar             | Struts 2 使用的一种表达式语言类库    |\n| freemarker-2.3.19.jar      | Struts 2 的标签模板使用类库          |\n| javassist-3.11.0.GA.jar    | 代码生成工具包                       |\n| commons-lang3-3.1.jar      | Apache 语言包，是 java.lang 包的扩展 |\n| commons-io-2.0.1.jar       | Apache IO 包                         |\n| commons-fileupload-1.3.jar | Struts 2 文件上传依赖包              |\n\n7、使用 Struts2 标签的形式来表达页面逻辑，可以尽量避免在视图中使用 Java 代码，让逻辑与显示分离，提高视图的可维护性； \n\n8、Struts2 标签库的主要 tld 文件为 `struts-tags.tld`， 在 `struts2-core-2.3.15.1.jar` 包中， 另一个与 Ajax 相关的标签库 tld 文件为 `struts-dojo-tags.tld`，在 `struts2-dojo -plugin-2.3.15.1.jar` 包中； \n\n9、Struts2 标签的使用步骤和使用 JSTL 相同，只需在 JSP 页面中使用 taglib 指令 引入标签库中 tld 文件的 uri， 并指定前缀即可，例如： `<%@ taglib prefix=\"s\" uri=\"/struts-tags\"%>`； \n\n10、根据 Struts2 标签的主要作用，可以将其分为：用于生成页面元素的 UI 标签、 用于实现流程控制的控制类标签、用于控制数据的数据标签和用于支持Ajax的标签。\n\n11、通过将不同语言版本的字符保存在属性文件中，Struts2 的国际化机制能够在不需要修改程序主体的前提下，实现不同语言版本的应用； \n\n12、在 Web 应用中选择需要进行国际化的内容，不在页面中直接输出该信息，而是通过 Struts2 标签输出一个键值，该键值在不同语言环境下对应不同的字符串；如：`<s:textfield name=\"loginUser.account\" lable=\"请输入用户名\"/>`代码中的“请输入用户名”是需要国际化的内容,将其以键值代替为`<s:textfield name=\"loginUser.account\" key=\"login.account.lable\"/>` \n\n13、需要进行国际化的内容以键值对（key=value） 的形式写入 Struts2 的国际化资源文件中，如`login.account.lable=请输入用户名”；`该资源文件名可以自定义，但是后缀必须是 properties；资源文件应放在 Web 应用的类加载路径下； 每一个语言版本需要创建一个资源文件； \n\n14、通过 Struts2 的配置文件 `struts.properties` 来配置资源文件的基础名，若资源文 件的基础名为 message，则 `message_zh_CN.properties` 是对应的中文资源文件， `message_en_US.properties` 是对应的美国英语资源文件； \n\n15、浏览器将根据其默认的语言版本，自动调用相应语言的资源文件，从而在页面中展示不同的语言效果。\n\n## 实验总结\n1、实验中各个文件的作用：\n\n(1)jsp页面：负责展示视图\n\n(2)Action类：负责处理业务逻辑\n\n(3)Service类：用于实现登录逻辑\n\n(4)JavaBean：用于定义用户信息\n\n(5)Filter：起中央控制器作用的过滤器\n\n(6)struts.xml：核心配置文件\n\n2、Struts2 应用中从请求到响应的完整流程\n\n客户端首先向Action发送一个请求Request,Container通过`web.xml`映射请求，并获得Controller的名字；Container调用控制StrutsPrepareAndExecuteFilter；Controller通过ActionMapper获得Action的信息，调用ActionProxy；ActionProxy读取`struts.xml`文件获取action和interceptor stack的信息，把request请求传递给ActionInvocation；ActionInvocation依次调用action和interceptor；根据action的配置信息，产生result，Result信息返回给ActionInvocation，产生一个HttpServletResponse响应，产生的响应行为发送给客户端。\n\n3、MVC框架体现：\n\nModel：JavaBean、Action类\n\nView：JSP页面\n\nController：FilterDispatcher\n\n4、表单参数与 Action 属性的赋值关系\n\n表单元素的action属性值对应了action的name属性值，Action只是一个逻辑控制器，他不直接对请求者生成任何响应，而是通过result子元素将指定的返回值呈现给客户端，如返回字符串为success则跳转至loginSuccess.jsp页面.\n\n5、Action 的 execute() 方法的作用和特点\n\n作用：处理业务逻辑\n\n特点：无参数；不需要实现或者继承任何接口或者父类；execute方法一定要返回String类型的对象,每一个字符串都可以对应一个跳转的页面。\n\n6、struts.xml 里各元素及其属性的作用\n\n(1)package：管理Action、拦截器等核心组件。包含作为包名的name属性、用于继承的extends属性、用于设置命名空间的namespace属性、设置为抽象包的abstract属性。\n\n(2)action元素：定义与Action操作有关的一系列配置信息。包含作为Action名的name属性、具体处理请求类的class属性、指定调用Action中放发明的method属性、指定使用Action类型转换器converter属性。\n\n(3)result元素：将Action类返回的字符串转发给对应的是图，实现逻辑视图和物理视图资源的映射。包含制定配置逻辑视图名的name属性、指定结果类型的type属性。\n\n(4)constant元素：改变Struts2的一些默认行为。包含指定框架功能的name属性、与name配合使用的value属性。\n\n(5)interceptors元素：定义拦截器集合的元素\n\n(6)interceptor元素：用于配置拦截器。包含指定拦截器逻辑名称的name属性和指定具体处理拦截类的class属性。\n\n(7)interceptors-ref元素：在某个action中引用拦截器。\n\n(8)interceptors-stack元素：定义拦截器栈\n\n7、Struts2 中标签及其属性的作用和用法：\n\n(1)form标签：生成表单元素。包含提交Action名字的action属性、命名空间namespace属性、定义GET/POST的method属性等\n\n(2)textfield标签：用来输入一小段文字。包含定义可输入最大长度值的maxlength属性、定义字段尺寸size属性、用于标示元素的id属性等\n\n(3)password标签：默认不显示输入内容的textfield。包含确定是否显示内容的showPassword属性、字段最大长度maxlength属性、定义字段尺寸size属性等\n\n(4)if/elseif/else标签：通过逻辑值控制流程。包含决定标签内容是否显示的test属性、标示元素id的id属性。\n\n(5)iterator标签：用于遍历集合元素。包含产生IteratorStatus对象实例的status属性、标示元素id的id属性等\n\n8、配置文件 `struts.properties` 的作用\n\n定义了Struts 2框架的大量属性，开发者可以通过改变这些属性来满足应用的需求。其中`struts.configuration`属性指定加载Struts 2配置文件的配置文件管理器。struts.locale属性指定Web应用的默认`Locale。struts.i18n.encoding`指定Web应用的默认编码集。\n\n## 实验步骤\n### 基础实验\n\n1、登录 http://struts.apache.org/download.cgi 站点，下载 Struts2 的最新版（Full Distribution）； \n\n2、新建 Web 工程 struts-prj1； \n\n3、将 Struts2 中的 8 个核心包增加到 Web 应用中，即复制到“%workspace% \nstruts-prj1\\WebContent\\WEB-INF\\lib”路径下； \n\n4、在 struts-prj1 中新建 login.jsp 页面，作为用户登录的视图（代码片段如下）， 注意表单（form）中 action 属性的值，注意用户名与密码输入框中 name 属性的值； \n\n5、在 struts-prj1 中新建 loginSuccess.jsp 和 loginFail.jsp 页面，分别作为登录成功 或登录失败的视图，在页面中显示“登录成功”或“登录失败”；\n\n![](1.png)\n \n6、在 struts-prj1 中新建 cn.edu.zjut.bean 包，并在其中创建 UserBean.java，用于记录登录用户信息，注意该 JavaBean 中属性名的写法； \n\n![](2.png)\n \n7、在 struts-prj1 中新建 cn.edu.zjut.service 包，并在其中创建 UserService.java， 用于实现登录逻辑，为简化登录逻辑，将登录成功的条件设置为：用户名和密码相同\n\n![](3.png)\n \n8、在 struts-prj1 中新建 cn.edu.zjut.action 包，并在其中创建 UserAction.java，调 用登录逻辑，并根据登录结果不同而返回不同的内容，注意该 Action 中的属性名及相应的 getters 和 setters 方法、execute()方法及返回值；  \n\n![](4.png)\n\n9、在工程 struts-prj1 的 src 目录中创建 struts.xml 文件，用于配置 Action 并设置 页面导航，注意 action 标签中 name 属性和 class 属性的值， 以及 result 子标签的属性； \n\n![](5.png)\n \n10、编辑 Web 应用的 web.xml 文件，增加 Struts2 核心 Filter 的配置； \n\n![](6.png)\n \n11、将 struts-prj1 部署在 Tomcat 服务器上； \n\n12、通过浏览器访问 login.jsp 页面，并记录运行结果；\n\n![](7.png)\n\n### 提高实验\n\n1、为能使用与 Ajax 相关的标签，将 Struts2 中的 `struts2-dojo-plugin-2.3.15.1.jar` 包增加到工程 struts-prj1 中，即复制到`%workspace%struts-prj1\\WebContent\\ WEB-INF\\lib`路径下，刷新工程； \n\n![](8.png)\n\n2、在工程 struts-prj1 中增加用户注册功能，新建 register.jsp 页面作为用户注册的 视图，页面使用 Struts2 的 UI 标签来生成表单元素，包括用户名、密码、确认密码、真实姓名、性别、生日、联系地址、联系电话和电子邮箱 \n\n![](9.png)\n\n3、在 struts-prj1 中新建 `regFail.jsp` 页面，作为注册失败的视图，在页面中显示“注册失败”； \n\n4、在 struts-prj1 中新建 `regSuccess.jsp` 页面，作为注册成功的视图，使用 Struts2 的数据标签和控制标签来生成注册成功的信息，并将登录用户信息保存在会话范围内 \n\n5、修改 `UserBean.java`，增加属性用于记录注册用户信息 \n\n![](10.png)\n \n6、修改 `UserService.java`，增加用户注册逻辑，为简化注册逻辑，将注册成功的条件设置为：用户名、密码和确认密码相同，而且不为空字串； \n\n![](11.png)\n \n7、修改 `UserAction.java` 中的 execute()方法，参照基础实验部分写入代码，用于调用注册逻辑，并根据注册成功与否而返回不同的内容； \n\n![](12.png)\n \n8、修改 `struts.xml` 文件，对用户注册进行配置并设置页面导航； \n\n![](13.png)\n \n9、将 struts-prj1 重新布署在 Tomcat 服务器上，通过浏览器访问 `register.jsp` 页面， 并记录运行结果； \n\n![](14.png)\n\n### 拓展实验\n\n1、在工程 struts-prj1 的 src 目录下新建一个 `cn.edu.zjut.local` 包，把所有的资源文件放置其中，如：`message_zh_CN.properties`、`message_en_US.properties` 等； \n\n![](15.png)\n  \n2、将工程 struts-prj1 中用户登录模块的三个 JSP 页面进行国际化处理，选择需要进行国际化的内容，以键值对的形式写入资源文件中 \n\n3、使用 JDK 中的 native2ASCII 工具，将 `message_zh_CN.properties` 重新编码，将中文字符都转化为 unicode 码，从而避免乱码问题； \n\n4、在工程 struts-prj1 的 src 目录中创建 `struts.properties` 文件，通过它加载资源文件,或者在JSP页面中临时加载资源文件  \n\n![](16.png)\n\n5、修改 `login.jsp`、`loginSuccess.jsp` 和 `loginFail.jsp` 页面，通过 Struts2 标签实现国际化； \n\n6、将 struts-prj1 重新布署在 Tomcat 服务器上； \n\n7、设置浏览器的首语言选项（如下图所示），通过浏览器访问 `login.jsp` 页面， 观察并记录运行结果；\n\n![](17.png)\n \n8、尝试修改用户注册模块，实现国际化，并记录运行结果。 \n\n![](18.png)\n\n![](19.png)\n\n> 注册中文页面\n\n![](20.png)\n\n> 注册英文页面\n","source":"_posts/Struts_Experiment.md","raw":"---\ntitle: Struts 2 基础应用实验\ndate: 2020-02-23 18:10:20\ncategories: \n- tech\ntags: \n- struts\n- JavaEE\n- 总结\n- 实验\n---\n\n包含Struts 2知识梳理、实验总结、实验步骤三方面的总结。\n<!--more-->\n## 知识梳理\n\n1、Struts2 是从 WebWork 框架上发展起来的 MVC 框架； \n\n2、FilterDispatcher 是 Struts2 中的核心控制器，客户端对服务器端的请求将被 FilterDispatcher 过滤；若请求需要调用某个 Action，则框架将根据配置文件`struts.xml`，找到需要调用的 Action 类； \n\n3、Action 类是一个符合一定命名规范的 JavaSE 类，作为业务控制器使用； Action \n中的 execute()方法用于调用 Model 层的业务逻辑类，并根据返回结果决定页面导航； \n\n4、若 Action 类中需要使用表单提交的请求参数，那么必须在 Action 类中声明与 \n表单域的名字对应的变量，并为变量提供 getters/setters 方法； \n\n5、Action 类需要在 `struts.xml` 中进行配置才能使用； \n\n6、编译运行基于 Struts2 框架的 Web 工程，需要导入 struts2 的 8 个核心 jar 包： \n\n| 文件名                     | 说明                                 |\n| -------------------------- | ------------------------------------ |\n| struts2-core-2.3.15.1.jar  | Struts 2 框架的核心类库              |\n| xwork-core-2.3.15.1.jar    | XWork 类库，Struts 2 的构建基础      |\n| Ognl-3.0.6.jar             | Struts 2 使用的一种表达式语言类库    |\n| freemarker-2.3.19.jar      | Struts 2 的标签模板使用类库          |\n| javassist-3.11.0.GA.jar    | 代码生成工具包                       |\n| commons-lang3-3.1.jar      | Apache 语言包，是 java.lang 包的扩展 |\n| commons-io-2.0.1.jar       | Apache IO 包                         |\n| commons-fileupload-1.3.jar | Struts 2 文件上传依赖包              |\n\n7、使用 Struts2 标签的形式来表达页面逻辑，可以尽量避免在视图中使用 Java 代码，让逻辑与显示分离，提高视图的可维护性； \n\n8、Struts2 标签库的主要 tld 文件为 `struts-tags.tld`， 在 `struts2-core-2.3.15.1.jar` 包中， 另一个与 Ajax 相关的标签库 tld 文件为 `struts-dojo-tags.tld`，在 `struts2-dojo -plugin-2.3.15.1.jar` 包中； \n\n9、Struts2 标签的使用步骤和使用 JSTL 相同，只需在 JSP 页面中使用 taglib 指令 引入标签库中 tld 文件的 uri， 并指定前缀即可，例如： `<%@ taglib prefix=\"s\" uri=\"/struts-tags\"%>`； \n\n10、根据 Struts2 标签的主要作用，可以将其分为：用于生成页面元素的 UI 标签、 用于实现流程控制的控制类标签、用于控制数据的数据标签和用于支持Ajax的标签。\n\n11、通过将不同语言版本的字符保存在属性文件中，Struts2 的国际化机制能够在不需要修改程序主体的前提下，实现不同语言版本的应用； \n\n12、在 Web 应用中选择需要进行国际化的内容，不在页面中直接输出该信息，而是通过 Struts2 标签输出一个键值，该键值在不同语言环境下对应不同的字符串；如：`<s:textfield name=\"loginUser.account\" lable=\"请输入用户名\"/>`代码中的“请输入用户名”是需要国际化的内容,将其以键值代替为`<s:textfield name=\"loginUser.account\" key=\"login.account.lable\"/>` \n\n13、需要进行国际化的内容以键值对（key=value） 的形式写入 Struts2 的国际化资源文件中，如`login.account.lable=请输入用户名”；`该资源文件名可以自定义，但是后缀必须是 properties；资源文件应放在 Web 应用的类加载路径下； 每一个语言版本需要创建一个资源文件； \n\n14、通过 Struts2 的配置文件 `struts.properties` 来配置资源文件的基础名，若资源文 件的基础名为 message，则 `message_zh_CN.properties` 是对应的中文资源文件， `message_en_US.properties` 是对应的美国英语资源文件； \n\n15、浏览器将根据其默认的语言版本，自动调用相应语言的资源文件，从而在页面中展示不同的语言效果。\n\n## 实验总结\n1、实验中各个文件的作用：\n\n(1)jsp页面：负责展示视图\n\n(2)Action类：负责处理业务逻辑\n\n(3)Service类：用于实现登录逻辑\n\n(4)JavaBean：用于定义用户信息\n\n(5)Filter：起中央控制器作用的过滤器\n\n(6)struts.xml：核心配置文件\n\n2、Struts2 应用中从请求到响应的完整流程\n\n客户端首先向Action发送一个请求Request,Container通过`web.xml`映射请求，并获得Controller的名字；Container调用控制StrutsPrepareAndExecuteFilter；Controller通过ActionMapper获得Action的信息，调用ActionProxy；ActionProxy读取`struts.xml`文件获取action和interceptor stack的信息，把request请求传递给ActionInvocation；ActionInvocation依次调用action和interceptor；根据action的配置信息，产生result，Result信息返回给ActionInvocation，产生一个HttpServletResponse响应，产生的响应行为发送给客户端。\n\n3、MVC框架体现：\n\nModel：JavaBean、Action类\n\nView：JSP页面\n\nController：FilterDispatcher\n\n4、表单参数与 Action 属性的赋值关系\n\n表单元素的action属性值对应了action的name属性值，Action只是一个逻辑控制器，他不直接对请求者生成任何响应，而是通过result子元素将指定的返回值呈现给客户端，如返回字符串为success则跳转至loginSuccess.jsp页面.\n\n5、Action 的 execute() 方法的作用和特点\n\n作用：处理业务逻辑\n\n特点：无参数；不需要实现或者继承任何接口或者父类；execute方法一定要返回String类型的对象,每一个字符串都可以对应一个跳转的页面。\n\n6、struts.xml 里各元素及其属性的作用\n\n(1)package：管理Action、拦截器等核心组件。包含作为包名的name属性、用于继承的extends属性、用于设置命名空间的namespace属性、设置为抽象包的abstract属性。\n\n(2)action元素：定义与Action操作有关的一系列配置信息。包含作为Action名的name属性、具体处理请求类的class属性、指定调用Action中放发明的method属性、指定使用Action类型转换器converter属性。\n\n(3)result元素：将Action类返回的字符串转发给对应的是图，实现逻辑视图和物理视图资源的映射。包含制定配置逻辑视图名的name属性、指定结果类型的type属性。\n\n(4)constant元素：改变Struts2的一些默认行为。包含指定框架功能的name属性、与name配合使用的value属性。\n\n(5)interceptors元素：定义拦截器集合的元素\n\n(6)interceptor元素：用于配置拦截器。包含指定拦截器逻辑名称的name属性和指定具体处理拦截类的class属性。\n\n(7)interceptors-ref元素：在某个action中引用拦截器。\n\n(8)interceptors-stack元素：定义拦截器栈\n\n7、Struts2 中标签及其属性的作用和用法：\n\n(1)form标签：生成表单元素。包含提交Action名字的action属性、命名空间namespace属性、定义GET/POST的method属性等\n\n(2)textfield标签：用来输入一小段文字。包含定义可输入最大长度值的maxlength属性、定义字段尺寸size属性、用于标示元素的id属性等\n\n(3)password标签：默认不显示输入内容的textfield。包含确定是否显示内容的showPassword属性、字段最大长度maxlength属性、定义字段尺寸size属性等\n\n(4)if/elseif/else标签：通过逻辑值控制流程。包含决定标签内容是否显示的test属性、标示元素id的id属性。\n\n(5)iterator标签：用于遍历集合元素。包含产生IteratorStatus对象实例的status属性、标示元素id的id属性等\n\n8、配置文件 `struts.properties` 的作用\n\n定义了Struts 2框架的大量属性，开发者可以通过改变这些属性来满足应用的需求。其中`struts.configuration`属性指定加载Struts 2配置文件的配置文件管理器。struts.locale属性指定Web应用的默认`Locale。struts.i18n.encoding`指定Web应用的默认编码集。\n\n## 实验步骤\n### 基础实验\n\n1、登录 http://struts.apache.org/download.cgi 站点，下载 Struts2 的最新版（Full Distribution）； \n\n2、新建 Web 工程 struts-prj1； \n\n3、将 Struts2 中的 8 个核心包增加到 Web 应用中，即复制到“%workspace% \nstruts-prj1\\WebContent\\WEB-INF\\lib”路径下； \n\n4、在 struts-prj1 中新建 login.jsp 页面，作为用户登录的视图（代码片段如下）， 注意表单（form）中 action 属性的值，注意用户名与密码输入框中 name 属性的值； \n\n5、在 struts-prj1 中新建 loginSuccess.jsp 和 loginFail.jsp 页面，分别作为登录成功 或登录失败的视图，在页面中显示“登录成功”或“登录失败”；\n\n![](1.png)\n \n6、在 struts-prj1 中新建 cn.edu.zjut.bean 包，并在其中创建 UserBean.java，用于记录登录用户信息，注意该 JavaBean 中属性名的写法； \n\n![](2.png)\n \n7、在 struts-prj1 中新建 cn.edu.zjut.service 包，并在其中创建 UserService.java， 用于实现登录逻辑，为简化登录逻辑，将登录成功的条件设置为：用户名和密码相同\n\n![](3.png)\n \n8、在 struts-prj1 中新建 cn.edu.zjut.action 包，并在其中创建 UserAction.java，调 用登录逻辑，并根据登录结果不同而返回不同的内容，注意该 Action 中的属性名及相应的 getters 和 setters 方法、execute()方法及返回值；  \n\n![](4.png)\n\n9、在工程 struts-prj1 的 src 目录中创建 struts.xml 文件，用于配置 Action 并设置 页面导航，注意 action 标签中 name 属性和 class 属性的值， 以及 result 子标签的属性； \n\n![](5.png)\n \n10、编辑 Web 应用的 web.xml 文件，增加 Struts2 核心 Filter 的配置； \n\n![](6.png)\n \n11、将 struts-prj1 部署在 Tomcat 服务器上； \n\n12、通过浏览器访问 login.jsp 页面，并记录运行结果；\n\n![](7.png)\n\n### 提高实验\n\n1、为能使用与 Ajax 相关的标签，将 Struts2 中的 `struts2-dojo-plugin-2.3.15.1.jar` 包增加到工程 struts-prj1 中，即复制到`%workspace%struts-prj1\\WebContent\\ WEB-INF\\lib`路径下，刷新工程； \n\n![](8.png)\n\n2、在工程 struts-prj1 中增加用户注册功能，新建 register.jsp 页面作为用户注册的 视图，页面使用 Struts2 的 UI 标签来生成表单元素，包括用户名、密码、确认密码、真实姓名、性别、生日、联系地址、联系电话和电子邮箱 \n\n![](9.png)\n\n3、在 struts-prj1 中新建 `regFail.jsp` 页面，作为注册失败的视图，在页面中显示“注册失败”； \n\n4、在 struts-prj1 中新建 `regSuccess.jsp` 页面，作为注册成功的视图，使用 Struts2 的数据标签和控制标签来生成注册成功的信息，并将登录用户信息保存在会话范围内 \n\n5、修改 `UserBean.java`，增加属性用于记录注册用户信息 \n\n![](10.png)\n \n6、修改 `UserService.java`，增加用户注册逻辑，为简化注册逻辑，将注册成功的条件设置为：用户名、密码和确认密码相同，而且不为空字串； \n\n![](11.png)\n \n7、修改 `UserAction.java` 中的 execute()方法，参照基础实验部分写入代码，用于调用注册逻辑，并根据注册成功与否而返回不同的内容； \n\n![](12.png)\n \n8、修改 `struts.xml` 文件，对用户注册进行配置并设置页面导航； \n\n![](13.png)\n \n9、将 struts-prj1 重新布署在 Tomcat 服务器上，通过浏览器访问 `register.jsp` 页面， 并记录运行结果； \n\n![](14.png)\n\n### 拓展实验\n\n1、在工程 struts-prj1 的 src 目录下新建一个 `cn.edu.zjut.local` 包，把所有的资源文件放置其中，如：`message_zh_CN.properties`、`message_en_US.properties` 等； \n\n![](15.png)\n  \n2、将工程 struts-prj1 中用户登录模块的三个 JSP 页面进行国际化处理，选择需要进行国际化的内容，以键值对的形式写入资源文件中 \n\n3、使用 JDK 中的 native2ASCII 工具，将 `message_zh_CN.properties` 重新编码，将中文字符都转化为 unicode 码，从而避免乱码问题； \n\n4、在工程 struts-prj1 的 src 目录中创建 `struts.properties` 文件，通过它加载资源文件,或者在JSP页面中临时加载资源文件  \n\n![](16.png)\n\n5、修改 `login.jsp`、`loginSuccess.jsp` 和 `loginFail.jsp` 页面，通过 Struts2 标签实现国际化； \n\n6、将 struts-prj1 重新布署在 Tomcat 服务器上； \n\n7、设置浏览器的首语言选项（如下图所示），通过浏览器访问 `login.jsp` 页面， 观察并记录运行结果；\n\n![](17.png)\n \n8、尝试修改用户注册模块，实现国际化，并记录运行结果。 \n\n![](18.png)\n\n![](19.png)\n\n> 注册中文页面\n\n![](20.png)\n\n> 注册英文页面\n","slug":"Struts_Experiment","published":1,"updated":"2020-03-22T12:57:27.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcive9nn001lcv6beakrhlst","content":"<p>包含Struts 2知识梳理、实验总结、实验步骤三方面的总结。</p>\n<a id=\"more\"></a>\n<h2 id=\"知识梳理\"><a href=\"#知识梳理\" class=\"headerlink\" title=\"知识梳理\"></a>知识梳理</h2><p>1、Struts2 是从 WebWork 框架上发展起来的 MVC 框架； </p>\n<p>2、FilterDispatcher 是 Struts2 中的核心控制器，客户端对服务器端的请求将被 FilterDispatcher 过滤；若请求需要调用某个 Action，则框架将根据配置文件<code>struts.xml</code>，找到需要调用的 Action 类； </p>\n<p>3、Action 类是一个符合一定命名规范的 JavaSE 类，作为业务控制器使用； Action<br>中的 execute()方法用于调用 Model 层的业务逻辑类，并根据返回结果决定页面导航； </p>\n<p>4、若 Action 类中需要使用表单提交的请求参数，那么必须在 Action 类中声明与<br>表单域的名字对应的变量，并为变量提供 getters/setters 方法； </p>\n<p>5、Action 类需要在 <code>struts.xml</code> 中进行配置才能使用； </p>\n<p>6、编译运行基于 Struts2 框架的 Web 工程，需要导入 struts2 的 8 个核心 jar 包： </p>\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>struts2-core-2.3.15.1.jar</td>\n<td>Struts 2 框架的核心类库</td>\n</tr>\n<tr>\n<td>xwork-core-2.3.15.1.jar</td>\n<td>XWork 类库，Struts 2 的构建基础</td>\n</tr>\n<tr>\n<td>Ognl-3.0.6.jar</td>\n<td>Struts 2 使用的一种表达式语言类库</td>\n</tr>\n<tr>\n<td>freemarker-2.3.19.jar</td>\n<td>Struts 2 的标签模板使用类库</td>\n</tr>\n<tr>\n<td>javassist-3.11.0.GA.jar</td>\n<td>代码生成工具包</td>\n</tr>\n<tr>\n<td>commons-lang3-3.1.jar</td>\n<td>Apache 语言包，是 java.lang 包的扩展</td>\n</tr>\n<tr>\n<td>commons-io-2.0.1.jar</td>\n<td>Apache IO 包</td>\n</tr>\n<tr>\n<td>commons-fileupload-1.3.jar</td>\n<td>Struts 2 文件上传依赖包</td>\n</tr>\n</tbody></table>\n<p>7、使用 Struts2 标签的形式来表达页面逻辑，可以尽量避免在视图中使用 Java 代码，让逻辑与显示分离，提高视图的可维护性； </p>\n<p>8、Struts2 标签库的主要 tld 文件为 <code>struts-tags.tld</code>， 在 <code>struts2-core-2.3.15.1.jar</code> 包中， 另一个与 Ajax 相关的标签库 tld 文件为 <code>struts-dojo-tags.tld</code>，在 <code>struts2-dojo -plugin-2.3.15.1.jar</code> 包中； </p>\n<p>9、Struts2 标签的使用步骤和使用 JSTL 相同，只需在 JSP 页面中使用 taglib 指令 引入标签库中 tld 文件的 uri， 并指定前缀即可，例如： <code>&lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot;%&gt;</code>； </p>\n<p>10、根据 Struts2 标签的主要作用，可以将其分为：用于生成页面元素的 UI 标签、 用于实现流程控制的控制类标签、用于控制数据的数据标签和用于支持Ajax的标签。</p>\n<p>11、通过将不同语言版本的字符保存在属性文件中，Struts2 的国际化机制能够在不需要修改程序主体的前提下，实现不同语言版本的应用； </p>\n<p>12、在 Web 应用中选择需要进行国际化的内容，不在页面中直接输出该信息，而是通过 Struts2 标签输出一个键值，该键值在不同语言环境下对应不同的字符串；如：<code>&lt;s:textfield name=&quot;loginUser.account&quot; lable=&quot;请输入用户名&quot;/&gt;</code>代码中的“请输入用户名”是需要国际化的内容,将其以键值代替为<code>&lt;s:textfield name=&quot;loginUser.account&quot; key=&quot;login.account.lable&quot;/&gt;</code> </p>\n<p>13、需要进行国际化的内容以键值对（key=value） 的形式写入 Struts2 的国际化资源文件中，如<code>login.account.lable=请输入用户名”；</code>该资源文件名可以自定义，但是后缀必须是 properties；资源文件应放在 Web 应用的类加载路径下； 每一个语言版本需要创建一个资源文件； </p>\n<p>14、通过 Struts2 的配置文件 <code>struts.properties</code> 来配置资源文件的基础名，若资源文 件的基础名为 message，则 <code>message_zh_CN.properties</code> 是对应的中文资源文件， <code>message_en_US.properties</code> 是对应的美国英语资源文件； </p>\n<p>15、浏览器将根据其默认的语言版本，自动调用相应语言的资源文件，从而在页面中展示不同的语言效果。</p>\n<h2 id=\"实验总结\"><a href=\"#实验总结\" class=\"headerlink\" title=\"实验总结\"></a>实验总结</h2><p>1、实验中各个文件的作用：</p>\n<p>(1)jsp页面：负责展示视图</p>\n<p>(2)Action类：负责处理业务逻辑</p>\n<p>(3)Service类：用于实现登录逻辑</p>\n<p>(4)JavaBean：用于定义用户信息</p>\n<p>(5)Filter：起中央控制器作用的过滤器</p>\n<p>(6)struts.xml：核心配置文件</p>\n<p>2、Struts2 应用中从请求到响应的完整流程</p>\n<p>客户端首先向Action发送一个请求Request,Container通过<code>web.xml</code>映射请求，并获得Controller的名字；Container调用控制StrutsPrepareAndExecuteFilter；Controller通过ActionMapper获得Action的信息，调用ActionProxy；ActionProxy读取<code>struts.xml</code>文件获取action和interceptor stack的信息，把request请求传递给ActionInvocation；ActionInvocation依次调用action和interceptor；根据action的配置信息，产生result，Result信息返回给ActionInvocation，产生一个HttpServletResponse响应，产生的响应行为发送给客户端。</p>\n<p>3、MVC框架体现：</p>\n<p>Model：JavaBean、Action类</p>\n<p>View：JSP页面</p>\n<p>Controller：FilterDispatcher</p>\n<p>4、表单参数与 Action 属性的赋值关系</p>\n<p>表单元素的action属性值对应了action的name属性值，Action只是一个逻辑控制器，他不直接对请求者生成任何响应，而是通过result子元素将指定的返回值呈现给客户端，如返回字符串为success则跳转至loginSuccess.jsp页面.</p>\n<p>5、Action 的 execute() 方法的作用和特点</p>\n<p>作用：处理业务逻辑</p>\n<p>特点：无参数；不需要实现或者继承任何接口或者父类；execute方法一定要返回String类型的对象,每一个字符串都可以对应一个跳转的页面。</p>\n<p>6、struts.xml 里各元素及其属性的作用</p>\n<p>(1)package：管理Action、拦截器等核心组件。包含作为包名的name属性、用于继承的extends属性、用于设置命名空间的namespace属性、设置为抽象包的abstract属性。</p>\n<p>(2)action元素：定义与Action操作有关的一系列配置信息。包含作为Action名的name属性、具体处理请求类的class属性、指定调用Action中放发明的method属性、指定使用Action类型转换器converter属性。</p>\n<p>(3)result元素：将Action类返回的字符串转发给对应的是图，实现逻辑视图和物理视图资源的映射。包含制定配置逻辑视图名的name属性、指定结果类型的type属性。</p>\n<p>(4)constant元素：改变Struts2的一些默认行为。包含指定框架功能的name属性、与name配合使用的value属性。</p>\n<p>(5)interceptors元素：定义拦截器集合的元素</p>\n<p>(6)interceptor元素：用于配置拦截器。包含指定拦截器逻辑名称的name属性和指定具体处理拦截类的class属性。</p>\n<p>(7)interceptors-ref元素：在某个action中引用拦截器。</p>\n<p>(8)interceptors-stack元素：定义拦截器栈</p>\n<p>7、Struts2 中标签及其属性的作用和用法：</p>\n<p>(1)form标签：生成表单元素。包含提交Action名字的action属性、命名空间namespace属性、定义GET/POST的method属性等</p>\n<p>(2)textfield标签：用来输入一小段文字。包含定义可输入最大长度值的maxlength属性、定义字段尺寸size属性、用于标示元素的id属性等</p>\n<p>(3)password标签：默认不显示输入内容的textfield。包含确定是否显示内容的showPassword属性、字段最大长度maxlength属性、定义字段尺寸size属性等</p>\n<p>(4)if/elseif/else标签：通过逻辑值控制流程。包含决定标签内容是否显示的test属性、标示元素id的id属性。</p>\n<p>(5)iterator标签：用于遍历集合元素。包含产生IteratorStatus对象实例的status属性、标示元素id的id属性等</p>\n<p>8、配置文件 <code>struts.properties</code> 的作用</p>\n<p>定义了Struts 2框架的大量属性，开发者可以通过改变这些属性来满足应用的需求。其中<code>struts.configuration</code>属性指定加载Struts 2配置文件的配置文件管理器。struts.locale属性指定Web应用的默认<code>Locale。struts.i18n.encoding</code>指定Web应用的默认编码集。</p>\n<h2 id=\"实验步骤\"><a href=\"#实验步骤\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h2><h3 id=\"基础实验\"><a href=\"#基础实验\" class=\"headerlink\" title=\"基础实验\"></a>基础实验</h3><p>1、登录 <a href=\"http://struts.apache.org/download.cgi\" target=\"_blank\" rel=\"noopener\">http://struts.apache.org/download.cgi</a> 站点，下载 Struts2 的最新版（Full Distribution）； </p>\n<p>2、新建 Web 工程 struts-prj1； </p>\n<p>3、将 Struts2 中的 8 个核心包增加到 Web 应用中，即复制到“%workspace%<br>struts-prj1\\WebContent\\WEB-INF\\lib”路径下； </p>\n<p>4、在 struts-prj1 中新建 login.jsp 页面，作为用户登录的视图（代码片段如下）， 注意表单（form）中 action 属性的值，注意用户名与密码输入框中 name 属性的值； </p>\n<p>5、在 struts-prj1 中新建 loginSuccess.jsp 和 loginFail.jsp 页面，分别作为登录成功 或登录失败的视图，在页面中显示“登录成功”或“登录失败”；</p>\n<p><img src=\"1.png\" alt=\"\"></p>\n<p>6、在 struts-prj1 中新建 cn.edu.zjut.bean 包，并在其中创建 UserBean.java，用于记录登录用户信息，注意该 JavaBean 中属性名的写法； </p>\n<p><img src=\"2.png\" alt=\"\"></p>\n<p>7、在 struts-prj1 中新建 cn.edu.zjut.service 包，并在其中创建 UserService.java， 用于实现登录逻辑，为简化登录逻辑，将登录成功的条件设置为：用户名和密码相同</p>\n<p><img src=\"3.png\" alt=\"\"></p>\n<p>8、在 struts-prj1 中新建 cn.edu.zjut.action 包，并在其中创建 UserAction.java，调 用登录逻辑，并根据登录结果不同而返回不同的内容，注意该 Action 中的属性名及相应的 getters 和 setters 方法、execute()方法及返回值；  </p>\n<p><img src=\"4.png\" alt=\"\"></p>\n<p>9、在工程 struts-prj1 的 src 目录中创建 struts.xml 文件，用于配置 Action 并设置 页面导航，注意 action 标签中 name 属性和 class 属性的值， 以及 result 子标签的属性； </p>\n<p><img src=\"5.png\" alt=\"\"></p>\n<p>10、编辑 Web 应用的 web.xml 文件，增加 Struts2 核心 Filter 的配置； </p>\n<p><img src=\"6.png\" alt=\"\"></p>\n<p>11、将 struts-prj1 部署在 Tomcat 服务器上； </p>\n<p>12、通过浏览器访问 login.jsp 页面，并记录运行结果；</p>\n<p><img src=\"7.png\" alt=\"\"></p>\n<h3 id=\"提高实验\"><a href=\"#提高实验\" class=\"headerlink\" title=\"提高实验\"></a>提高实验</h3><p>1、为能使用与 Ajax 相关的标签，将 Struts2 中的 <code>struts2-dojo-plugin-2.3.15.1.jar</code> 包增加到工程 struts-prj1 中，即复制到<code>%workspace%struts-prj1\\WebContent\\ WEB-INF\\lib</code>路径下，刷新工程； </p>\n<p><img src=\"8.png\" alt=\"\"></p>\n<p>2、在工程 struts-prj1 中增加用户注册功能，新建 register.jsp 页面作为用户注册的 视图，页面使用 Struts2 的 UI 标签来生成表单元素，包括用户名、密码、确认密码、真实姓名、性别、生日、联系地址、联系电话和电子邮箱 </p>\n<p><img src=\"9.png\" alt=\"\"></p>\n<p>3、在 struts-prj1 中新建 <code>regFail.jsp</code> 页面，作为注册失败的视图，在页面中显示“注册失败”； </p>\n<p>4、在 struts-prj1 中新建 <code>regSuccess.jsp</code> 页面，作为注册成功的视图，使用 Struts2 的数据标签和控制标签来生成注册成功的信息，并将登录用户信息保存在会话范围内 </p>\n<p>5、修改 <code>UserBean.java</code>，增加属性用于记录注册用户信息 </p>\n<p><img src=\"10.png\" alt=\"\"></p>\n<p>6、修改 <code>UserService.java</code>，增加用户注册逻辑，为简化注册逻辑，将注册成功的条件设置为：用户名、密码和确认密码相同，而且不为空字串； </p>\n<p><img src=\"11.png\" alt=\"\"></p>\n<p>7、修改 <code>UserAction.java</code> 中的 execute()方法，参照基础实验部分写入代码，用于调用注册逻辑，并根据注册成功与否而返回不同的内容； </p>\n<p><img src=\"12.png\" alt=\"\"></p>\n<p>8、修改 <code>struts.xml</code> 文件，对用户注册进行配置并设置页面导航； </p>\n<p><img src=\"13.png\" alt=\"\"></p>\n<p>9、将 struts-prj1 重新布署在 Tomcat 服务器上，通过浏览器访问 <code>register.jsp</code> 页面， 并记录运行结果； </p>\n<p><img src=\"14.png\" alt=\"\"></p>\n<h3 id=\"拓展实验\"><a href=\"#拓展实验\" class=\"headerlink\" title=\"拓展实验\"></a>拓展实验</h3><p>1、在工程 struts-prj1 的 src 目录下新建一个 <code>cn.edu.zjut.local</code> 包，把所有的资源文件放置其中，如：<code>message_zh_CN.properties</code>、<code>message_en_US.properties</code> 等； </p>\n<p><img src=\"15.png\" alt=\"\"></p>\n<p>2、将工程 struts-prj1 中用户登录模块的三个 JSP 页面进行国际化处理，选择需要进行国际化的内容，以键值对的形式写入资源文件中 </p>\n<p>3、使用 JDK 中的 native2ASCII 工具，将 <code>message_zh_CN.properties</code> 重新编码，将中文字符都转化为 unicode 码，从而避免乱码问题； </p>\n<p>4、在工程 struts-prj1 的 src 目录中创建 <code>struts.properties</code> 文件，通过它加载资源文件,或者在JSP页面中临时加载资源文件  </p>\n<p><img src=\"16.png\" alt=\"\"></p>\n<p>5、修改 <code>login.jsp</code>、<code>loginSuccess.jsp</code> 和 <code>loginFail.jsp</code> 页面，通过 Struts2 标签实现国际化； </p>\n<p>6、将 struts-prj1 重新布署在 Tomcat 服务器上； </p>\n<p>7、设置浏览器的首语言选项（如下图所示），通过浏览器访问 <code>login.jsp</code> 页面， 观察并记录运行结果；</p>\n<p><img src=\"17.png\" alt=\"\"></p>\n<p>8、尝试修改用户注册模块，实现国际化，并记录运行结果。 </p>\n<p><img src=\"18.png\" alt=\"\"></p>\n<p><img src=\"19.png\" alt=\"\"></p>\n<blockquote>\n<p>注册中文页面</p>\n</blockquote>\n<p><img src=\"20.png\" alt=\"\"></p>\n<blockquote>\n<p>注册英文页面</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>包含Struts 2知识梳理、实验总结、实验步骤三方面的总结。</p>","more":"<h2 id=\"知识梳理\"><a href=\"#知识梳理\" class=\"headerlink\" title=\"知识梳理\"></a>知识梳理</h2><p>1、Struts2 是从 WebWork 框架上发展起来的 MVC 框架； </p>\n<p>2、FilterDispatcher 是 Struts2 中的核心控制器，客户端对服务器端的请求将被 FilterDispatcher 过滤；若请求需要调用某个 Action，则框架将根据配置文件<code>struts.xml</code>，找到需要调用的 Action 类； </p>\n<p>3、Action 类是一个符合一定命名规范的 JavaSE 类，作为业务控制器使用； Action<br>中的 execute()方法用于调用 Model 层的业务逻辑类，并根据返回结果决定页面导航； </p>\n<p>4、若 Action 类中需要使用表单提交的请求参数，那么必须在 Action 类中声明与<br>表单域的名字对应的变量，并为变量提供 getters/setters 方法； </p>\n<p>5、Action 类需要在 <code>struts.xml</code> 中进行配置才能使用； </p>\n<p>6、编译运行基于 Struts2 框架的 Web 工程，需要导入 struts2 的 8 个核心 jar 包： </p>\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>struts2-core-2.3.15.1.jar</td>\n<td>Struts 2 框架的核心类库</td>\n</tr>\n<tr>\n<td>xwork-core-2.3.15.1.jar</td>\n<td>XWork 类库，Struts 2 的构建基础</td>\n</tr>\n<tr>\n<td>Ognl-3.0.6.jar</td>\n<td>Struts 2 使用的一种表达式语言类库</td>\n</tr>\n<tr>\n<td>freemarker-2.3.19.jar</td>\n<td>Struts 2 的标签模板使用类库</td>\n</tr>\n<tr>\n<td>javassist-3.11.0.GA.jar</td>\n<td>代码生成工具包</td>\n</tr>\n<tr>\n<td>commons-lang3-3.1.jar</td>\n<td>Apache 语言包，是 java.lang 包的扩展</td>\n</tr>\n<tr>\n<td>commons-io-2.0.1.jar</td>\n<td>Apache IO 包</td>\n</tr>\n<tr>\n<td>commons-fileupload-1.3.jar</td>\n<td>Struts 2 文件上传依赖包</td>\n</tr>\n</tbody></table>\n<p>7、使用 Struts2 标签的形式来表达页面逻辑，可以尽量避免在视图中使用 Java 代码，让逻辑与显示分离，提高视图的可维护性； </p>\n<p>8、Struts2 标签库的主要 tld 文件为 <code>struts-tags.tld</code>， 在 <code>struts2-core-2.3.15.1.jar</code> 包中， 另一个与 Ajax 相关的标签库 tld 文件为 <code>struts-dojo-tags.tld</code>，在 <code>struts2-dojo -plugin-2.3.15.1.jar</code> 包中； </p>\n<p>9、Struts2 标签的使用步骤和使用 JSTL 相同，只需在 JSP 页面中使用 taglib 指令 引入标签库中 tld 文件的 uri， 并指定前缀即可，例如： <code>&lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot;%&gt;</code>； </p>\n<p>10、根据 Struts2 标签的主要作用，可以将其分为：用于生成页面元素的 UI 标签、 用于实现流程控制的控制类标签、用于控制数据的数据标签和用于支持Ajax的标签。</p>\n<p>11、通过将不同语言版本的字符保存在属性文件中，Struts2 的国际化机制能够在不需要修改程序主体的前提下，实现不同语言版本的应用； </p>\n<p>12、在 Web 应用中选择需要进行国际化的内容，不在页面中直接输出该信息，而是通过 Struts2 标签输出一个键值，该键值在不同语言环境下对应不同的字符串；如：<code>&lt;s:textfield name=&quot;loginUser.account&quot; lable=&quot;请输入用户名&quot;/&gt;</code>代码中的“请输入用户名”是需要国际化的内容,将其以键值代替为<code>&lt;s:textfield name=&quot;loginUser.account&quot; key=&quot;login.account.lable&quot;/&gt;</code> </p>\n<p>13、需要进行国际化的内容以键值对（key=value） 的形式写入 Struts2 的国际化资源文件中，如<code>login.account.lable=请输入用户名”；</code>该资源文件名可以自定义，但是后缀必须是 properties；资源文件应放在 Web 应用的类加载路径下； 每一个语言版本需要创建一个资源文件； </p>\n<p>14、通过 Struts2 的配置文件 <code>struts.properties</code> 来配置资源文件的基础名，若资源文 件的基础名为 message，则 <code>message_zh_CN.properties</code> 是对应的中文资源文件， <code>message_en_US.properties</code> 是对应的美国英语资源文件； </p>\n<p>15、浏览器将根据其默认的语言版本，自动调用相应语言的资源文件，从而在页面中展示不同的语言效果。</p>\n<h2 id=\"实验总结\"><a href=\"#实验总结\" class=\"headerlink\" title=\"实验总结\"></a>实验总结</h2><p>1、实验中各个文件的作用：</p>\n<p>(1)jsp页面：负责展示视图</p>\n<p>(2)Action类：负责处理业务逻辑</p>\n<p>(3)Service类：用于实现登录逻辑</p>\n<p>(4)JavaBean：用于定义用户信息</p>\n<p>(5)Filter：起中央控制器作用的过滤器</p>\n<p>(6)struts.xml：核心配置文件</p>\n<p>2、Struts2 应用中从请求到响应的完整流程</p>\n<p>客户端首先向Action发送一个请求Request,Container通过<code>web.xml</code>映射请求，并获得Controller的名字；Container调用控制StrutsPrepareAndExecuteFilter；Controller通过ActionMapper获得Action的信息，调用ActionProxy；ActionProxy读取<code>struts.xml</code>文件获取action和interceptor stack的信息，把request请求传递给ActionInvocation；ActionInvocation依次调用action和interceptor；根据action的配置信息，产生result，Result信息返回给ActionInvocation，产生一个HttpServletResponse响应，产生的响应行为发送给客户端。</p>\n<p>3、MVC框架体现：</p>\n<p>Model：JavaBean、Action类</p>\n<p>View：JSP页面</p>\n<p>Controller：FilterDispatcher</p>\n<p>4、表单参数与 Action 属性的赋值关系</p>\n<p>表单元素的action属性值对应了action的name属性值，Action只是一个逻辑控制器，他不直接对请求者生成任何响应，而是通过result子元素将指定的返回值呈现给客户端，如返回字符串为success则跳转至loginSuccess.jsp页面.</p>\n<p>5、Action 的 execute() 方法的作用和特点</p>\n<p>作用：处理业务逻辑</p>\n<p>特点：无参数；不需要实现或者继承任何接口或者父类；execute方法一定要返回String类型的对象,每一个字符串都可以对应一个跳转的页面。</p>\n<p>6、struts.xml 里各元素及其属性的作用</p>\n<p>(1)package：管理Action、拦截器等核心组件。包含作为包名的name属性、用于继承的extends属性、用于设置命名空间的namespace属性、设置为抽象包的abstract属性。</p>\n<p>(2)action元素：定义与Action操作有关的一系列配置信息。包含作为Action名的name属性、具体处理请求类的class属性、指定调用Action中放发明的method属性、指定使用Action类型转换器converter属性。</p>\n<p>(3)result元素：将Action类返回的字符串转发给对应的是图，实现逻辑视图和物理视图资源的映射。包含制定配置逻辑视图名的name属性、指定结果类型的type属性。</p>\n<p>(4)constant元素：改变Struts2的一些默认行为。包含指定框架功能的name属性、与name配合使用的value属性。</p>\n<p>(5)interceptors元素：定义拦截器集合的元素</p>\n<p>(6)interceptor元素：用于配置拦截器。包含指定拦截器逻辑名称的name属性和指定具体处理拦截类的class属性。</p>\n<p>(7)interceptors-ref元素：在某个action中引用拦截器。</p>\n<p>(8)interceptors-stack元素：定义拦截器栈</p>\n<p>7、Struts2 中标签及其属性的作用和用法：</p>\n<p>(1)form标签：生成表单元素。包含提交Action名字的action属性、命名空间namespace属性、定义GET/POST的method属性等</p>\n<p>(2)textfield标签：用来输入一小段文字。包含定义可输入最大长度值的maxlength属性、定义字段尺寸size属性、用于标示元素的id属性等</p>\n<p>(3)password标签：默认不显示输入内容的textfield。包含确定是否显示内容的showPassword属性、字段最大长度maxlength属性、定义字段尺寸size属性等</p>\n<p>(4)if/elseif/else标签：通过逻辑值控制流程。包含决定标签内容是否显示的test属性、标示元素id的id属性。</p>\n<p>(5)iterator标签：用于遍历集合元素。包含产生IteratorStatus对象实例的status属性、标示元素id的id属性等</p>\n<p>8、配置文件 <code>struts.properties</code> 的作用</p>\n<p>定义了Struts 2框架的大量属性，开发者可以通过改变这些属性来满足应用的需求。其中<code>struts.configuration</code>属性指定加载Struts 2配置文件的配置文件管理器。struts.locale属性指定Web应用的默认<code>Locale。struts.i18n.encoding</code>指定Web应用的默认编码集。</p>\n<h2 id=\"实验步骤\"><a href=\"#实验步骤\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h2><h3 id=\"基础实验\"><a href=\"#基础实验\" class=\"headerlink\" title=\"基础实验\"></a>基础实验</h3><p>1、登录 <a href=\"http://struts.apache.org/download.cgi\" target=\"_blank\" rel=\"noopener\">http://struts.apache.org/download.cgi</a> 站点，下载 Struts2 的最新版（Full Distribution）； </p>\n<p>2、新建 Web 工程 struts-prj1； </p>\n<p>3、将 Struts2 中的 8 个核心包增加到 Web 应用中，即复制到“%workspace%<br>struts-prj1\\WebContent\\WEB-INF\\lib”路径下； </p>\n<p>4、在 struts-prj1 中新建 login.jsp 页面，作为用户登录的视图（代码片段如下）， 注意表单（form）中 action 属性的值，注意用户名与密码输入框中 name 属性的值； </p>\n<p>5、在 struts-prj1 中新建 loginSuccess.jsp 和 loginFail.jsp 页面，分别作为登录成功 或登录失败的视图，在页面中显示“登录成功”或“登录失败”；</p>\n<p><img src=\"1.png\" alt=\"\"></p>\n<p>6、在 struts-prj1 中新建 cn.edu.zjut.bean 包，并在其中创建 UserBean.java，用于记录登录用户信息，注意该 JavaBean 中属性名的写法； </p>\n<p><img src=\"2.png\" alt=\"\"></p>\n<p>7、在 struts-prj1 中新建 cn.edu.zjut.service 包，并在其中创建 UserService.java， 用于实现登录逻辑，为简化登录逻辑，将登录成功的条件设置为：用户名和密码相同</p>\n<p><img src=\"3.png\" alt=\"\"></p>\n<p>8、在 struts-prj1 中新建 cn.edu.zjut.action 包，并在其中创建 UserAction.java，调 用登录逻辑，并根据登录结果不同而返回不同的内容，注意该 Action 中的属性名及相应的 getters 和 setters 方法、execute()方法及返回值；  </p>\n<p><img src=\"4.png\" alt=\"\"></p>\n<p>9、在工程 struts-prj1 的 src 目录中创建 struts.xml 文件，用于配置 Action 并设置 页面导航，注意 action 标签中 name 属性和 class 属性的值， 以及 result 子标签的属性； </p>\n<p><img src=\"5.png\" alt=\"\"></p>\n<p>10、编辑 Web 应用的 web.xml 文件，增加 Struts2 核心 Filter 的配置； </p>\n<p><img src=\"6.png\" alt=\"\"></p>\n<p>11、将 struts-prj1 部署在 Tomcat 服务器上； </p>\n<p>12、通过浏览器访问 login.jsp 页面，并记录运行结果；</p>\n<p><img src=\"7.png\" alt=\"\"></p>\n<h3 id=\"提高实验\"><a href=\"#提高实验\" class=\"headerlink\" title=\"提高实验\"></a>提高实验</h3><p>1、为能使用与 Ajax 相关的标签，将 Struts2 中的 <code>struts2-dojo-plugin-2.3.15.1.jar</code> 包增加到工程 struts-prj1 中，即复制到<code>%workspace%struts-prj1\\WebContent\\ WEB-INF\\lib</code>路径下，刷新工程； </p>\n<p><img src=\"8.png\" alt=\"\"></p>\n<p>2、在工程 struts-prj1 中增加用户注册功能，新建 register.jsp 页面作为用户注册的 视图，页面使用 Struts2 的 UI 标签来生成表单元素，包括用户名、密码、确认密码、真实姓名、性别、生日、联系地址、联系电话和电子邮箱 </p>\n<p><img src=\"9.png\" alt=\"\"></p>\n<p>3、在 struts-prj1 中新建 <code>regFail.jsp</code> 页面，作为注册失败的视图，在页面中显示“注册失败”； </p>\n<p>4、在 struts-prj1 中新建 <code>regSuccess.jsp</code> 页面，作为注册成功的视图，使用 Struts2 的数据标签和控制标签来生成注册成功的信息，并将登录用户信息保存在会话范围内 </p>\n<p>5、修改 <code>UserBean.java</code>，增加属性用于记录注册用户信息 </p>\n<p><img src=\"10.png\" alt=\"\"></p>\n<p>6、修改 <code>UserService.java</code>，增加用户注册逻辑，为简化注册逻辑，将注册成功的条件设置为：用户名、密码和确认密码相同，而且不为空字串； </p>\n<p><img src=\"11.png\" alt=\"\"></p>\n<p>7、修改 <code>UserAction.java</code> 中的 execute()方法，参照基础实验部分写入代码，用于调用注册逻辑，并根据注册成功与否而返回不同的内容； </p>\n<p><img src=\"12.png\" alt=\"\"></p>\n<p>8、修改 <code>struts.xml</code> 文件，对用户注册进行配置并设置页面导航； </p>\n<p><img src=\"13.png\" alt=\"\"></p>\n<p>9、将 struts-prj1 重新布署在 Tomcat 服务器上，通过浏览器访问 <code>register.jsp</code> 页面， 并记录运行结果； </p>\n<p><img src=\"14.png\" alt=\"\"></p>\n<h3 id=\"拓展实验\"><a href=\"#拓展实验\" class=\"headerlink\" title=\"拓展实验\"></a>拓展实验</h3><p>1、在工程 struts-prj1 的 src 目录下新建一个 <code>cn.edu.zjut.local</code> 包，把所有的资源文件放置其中，如：<code>message_zh_CN.properties</code>、<code>message_en_US.properties</code> 等； </p>\n<p><img src=\"15.png\" alt=\"\"></p>\n<p>2、将工程 struts-prj1 中用户登录模块的三个 JSP 页面进行国际化处理，选择需要进行国际化的内容，以键值对的形式写入资源文件中 </p>\n<p>3、使用 JDK 中的 native2ASCII 工具，将 <code>message_zh_CN.properties</code> 重新编码，将中文字符都转化为 unicode 码，从而避免乱码问题； </p>\n<p>4、在工程 struts-prj1 的 src 目录中创建 <code>struts.properties</code> 文件，通过它加载资源文件,或者在JSP页面中临时加载资源文件  </p>\n<p><img src=\"16.png\" alt=\"\"></p>\n<p>5、修改 <code>login.jsp</code>、<code>loginSuccess.jsp</code> 和 <code>loginFail.jsp</code> 页面，通过 Struts2 标签实现国际化； </p>\n<p>6、将 struts-prj1 重新布署在 Tomcat 服务器上； </p>\n<p>7、设置浏览器的首语言选项（如下图所示），通过浏览器访问 <code>login.jsp</code> 页面， 观察并记录运行结果；</p>\n<p><img src=\"17.png\" alt=\"\"></p>\n<p>8、尝试修改用户注册模块，实现国际化，并记录运行结果。 </p>\n<p><img src=\"18.png\" alt=\"\"></p>\n<p><img src=\"19.png\" alt=\"\"></p>\n<blockquote>\n<p>注册中文页面</p>\n</blockquote>\n<p><img src=\"20.png\" alt=\"\"></p>\n<blockquote>\n<p>注册英文页面</p>\n</blockquote>"},{"title":"Struts 工作流程总结","date":"2020-02-24T03:10:20.000Z","_content":"\n包含Struts 工作流程知识梳理、实验总结、实验步骤三方面的总结。\n<!--more-->\n\n## 知识梳理\n\n1、Struts2 的控制器主要由三个层次组成，分别是过滤器、拦截器和业务控制 Action； \n\n2、过滤器是 Struts2 控制器的最前端控制器，过滤器的使用需要在 `web.xml` 中进行配置；FilterDispatcher 是 Struts2 应用中必须配置使用的过滤器，该过滤器的主要功能 包括执行 Action、清空 ActionContext 对象等； \n\n3、拦截器是 Struts2 中第二个层次的控制器，能够在 Action 执行前后完成一些通用功能； \n\n\n4、Struts2 内建了大量拦截器， 这些拦截器以 name-class 对的形式配置在 `strutsdefault.xml` 文件中，如果 `struts.xml 中定义的 package 继承了 Struts2 默 认的 `struts-default` 包，便可以直接使用默认拦截器栈 defaultStack； \n\n5、Struts2 也允许自定义拦截器，自定义拦截器类须实现 Interceptor 接口，并覆盖接 口中的 intercept 方法用于实现拦截器的主要功能；自定义拦截器须在 `struts.xml` 中进 行配置才能使用； \n\n6、若在 `struts.xml` 中为 Action 指定了一个拦截器，则默认拦截器栈 defaultStack 将会失效，为了继续使用默认拦截器，必须将其进行显式地配置。\n\n7、Struts API 中的 `com.opensymphony.xwork2.util.ValueStack` 称为值栈，值栈是一 个数据区域，该区域中保存了应用范围内的所有数据和 Action 处理的用户请求数据； \n\n8、值栈被存储在 ActionContext 对象中，因此可以在任何节点访问其中的内容； \n\n9、ValueStack 接口中主要方法有：`Object findValue(String expr)`可以通过表达式查 找值栈中对应的值，`void setValue(String expr, Object value)`用于将对象及其表达式 存到值栈中； \n\n10、OGNL，即对象图导航语言，是 Struts 默认的表达式语言； \n\n11、OGNL 基础单位称为导航链，基本的链由属性名、方法调用、数组或集合元素组成；\n\n12、在 Struts2 中，值栈是 OGNL 上下文的根对象，可以直接访问，而 application、session 等其它对象不是根对象，需要使用#进行访问。\n\n13、Struts2 应用中使用 Action 调用 Model，因此 Struts2 应用中的异常在 Model 层抛 出后，通常在 Action 类中进行处理； \n\n14、Action 可以直接使用 try/catch 捕获异常，然后返回结果视图，跳转到相关页面处理 异常； \n\n15、抛出异常后，也可以不在 Action 类中捕获，而使用 throws 声明异常，交给 Struts2 框架处理； \n\n16、Struts2 允许通过 `struts.xml` 文件来配置异常的处理，使用 `<exception-mapping>` 标签声明异常映射，指定发生该类型异常时跳转的结果视图。\n\n## 实验总结\n**1、自定义拦截器类的作用和实现方法**\n\n**作用：** \nStruts2第二个层次的控制器，能够在Action执行前后完成一些通用功能，完成一些通用的控制逻辑：解析请求参数、类型转换、输入校验、防止表单多次提交。 \n\n**实现方法：**\n\n(1) 创建拦截器Interceptor \n\n(2) 继承 AbstractInterceptor 类，重写 intercept()方法（AbstractInterceptor 类实现了 Interceptor 接口） \n\n(3) Action 内使用拦截器 \n\n(4) 修改 `struts.xml` 文件，增加拦截器的配置 \n\n**2、Interceptor 接口中 intercept(ActionInvocation inv)、init()和 destroy()方法的作用**\n\n- **intercept(ActionInvocation inv)**： 允许 Interceptor 在 ActionInvocation 对请求的其余处理之前和/或之后对请求进行某些 处理，或者使处理短路，并仅返回 String 数值 \n\n- **init()**： 在 interceptor 生成后产生，但在 interceptor 接受任何请求之前调用，使得 interceptor 进行初始化 \n\n- **destroy()**： 让 interceptor 清理它产生的资源 \n\n**3、defaultStack 拦截器栈中包含的主要拦截功能** \n\n- **params**：解析 HTTP 请求参数，并设置成 Action 属性 \n\n- **validation**：执行 xxxAction-validate 中定义的校验器 \n\n- **workflow**：调用 Action 中的 validate 方法 \n\n- **i18n**：负责把用户所选的语言、区域放入用户 Session 中。 \n\n- **createSession**：创建 HttpSession 对象 \n\n- **timer**：负责输出 Action 执行时间，分析性能 \n\n- **autowiring**：自动装配，访问 Spring 中的 Bean \n\n**4、自定义过滤器的实现方法和配置步骤，将拦截器与过滤器进行比较，并将两者的特点及区别**\n\n**配置步骤：**\n\n(1) 创建拦截器类，继承Filter类，重写doFilter方法\n\n(2) `web.xml` 文件配置\n\n**拦截器与过滤器特点和区别：** \n\n- 拦截器：Struts2 中第二个层次的控制器；允许自定义；需要在 web.xml 文件中配置； \n- 过滤器：Struts2 控制器的最前端控制器；允许自定义；需要在 struts.xml 文件中配置。 \n\n**5、ValueStack 接口及其主要方法的作用和开发步骤**\nValueStack 接口中主要方法:findValue(), setValue() \n\n**findValue()**：通过以默认搜索顺序针对堆栈评估给定表达式来查找值。 \n\n**setValue()**：使用默认搜索顺序使用给定的表达式在堆栈中的 bean 上设置属性。 \n\n开发需要引入 `com.opensymphony.xwork2.util.ValueStack` 并实例化 ValueStack 对象，之后通过方法调用实现相关功能。 \n\n**6、OGNL 可访问的对象和基本语法**\n\n可以直接访问值栈 ValueStack（OGNL 上下文的根对象）；Action 实例被保存在值栈中，因此可以直接访问。 基本语法包含#、%、$三种符号，作用见下文 \n\n**7、OGNL 三种常用符号:#、%和$的作用和使用方法**\n\n **%符号**：计算 OGNL 表达式的值 \n \n **$符号**：在国际化资源文件中，引用 OGNL 表达式；在 Struts 2 框架配置文件中引用 OGNL 表达式 \n \n **#符号**：访问 OGNL 上下文和 Action 上下文；构造 Map；过滤和投影集合 \n \n **8、自定义异常类的方法和步骤** \n \n （1）创建自定义异常类并继承 Exception 类 \n \n （2）在 Model 中抛出自定义异常 \n \n （3）在 Action 中捕获异常 \n \n （4）在 `struts.xml` 中设置异常页面导航 \n \n （5）在 Action 中抛出异常，将其交给框架处理 \n \n （6）在 `struts.xml` 中使用标签<exception- mapping>进行异常配置 \n \n **9、整理 Struts2 框架处理异常的机制，整理 `struts.xml` 文件配置异常映射的方法以及相关标签的作用** \n \n Struts2 的异常处理机制是通过在 `struts.xml` 文件中配置<exception-mapping……/>元素完成，配置该元素时，需要指定两个属性： \n \n **exception**：指定该异常类型的完全限定名。\n  \n **result**：指定逻辑视图名。 \n \n 根据`<exception-mapping…../>`元素出现位置的不同，异常映射又可分为两种： \n \n **局部异常映射**：将`<exception-mapping… />`元素作为`<action…/>`元素的子元素配置； \n \n **全局异常映射**：将`<exception-mapping… />`元素作为`<global-exception-mappings… />` 元素的子元素配置； \n \n 全局异常映射对所有的 Action 都有效，但局部异常映射仅对该异常映射所在的 Action 有 效。如果局部异常映射和全局异常映射配置了同一个异常类型，在`<action…./>` 元素内的局部异常映射将覆盖全局异常映射。\n\n","source":"_posts/Struts_Workflow.md","raw":"---\ntitle: Struts 工作流程总结\ndate: 2020-02-24 11:10:20\ncategories: \n- tech\ntags: \n- struts\n- workflow\n- JavaEE\n- 总结\n---\n\n包含Struts 工作流程知识梳理、实验总结、实验步骤三方面的总结。\n<!--more-->\n\n## 知识梳理\n\n1、Struts2 的控制器主要由三个层次组成，分别是过滤器、拦截器和业务控制 Action； \n\n2、过滤器是 Struts2 控制器的最前端控制器，过滤器的使用需要在 `web.xml` 中进行配置；FilterDispatcher 是 Struts2 应用中必须配置使用的过滤器，该过滤器的主要功能 包括执行 Action、清空 ActionContext 对象等； \n\n3、拦截器是 Struts2 中第二个层次的控制器，能够在 Action 执行前后完成一些通用功能； \n\n\n4、Struts2 内建了大量拦截器， 这些拦截器以 name-class 对的形式配置在 `strutsdefault.xml` 文件中，如果 `struts.xml 中定义的 package 继承了 Struts2 默 认的 `struts-default` 包，便可以直接使用默认拦截器栈 defaultStack； \n\n5、Struts2 也允许自定义拦截器，自定义拦截器类须实现 Interceptor 接口，并覆盖接 口中的 intercept 方法用于实现拦截器的主要功能；自定义拦截器须在 `struts.xml` 中进 行配置才能使用； \n\n6、若在 `struts.xml` 中为 Action 指定了一个拦截器，则默认拦截器栈 defaultStack 将会失效，为了继续使用默认拦截器，必须将其进行显式地配置。\n\n7、Struts API 中的 `com.opensymphony.xwork2.util.ValueStack` 称为值栈，值栈是一 个数据区域，该区域中保存了应用范围内的所有数据和 Action 处理的用户请求数据； \n\n8、值栈被存储在 ActionContext 对象中，因此可以在任何节点访问其中的内容； \n\n9、ValueStack 接口中主要方法有：`Object findValue(String expr)`可以通过表达式查 找值栈中对应的值，`void setValue(String expr, Object value)`用于将对象及其表达式 存到值栈中； \n\n10、OGNL，即对象图导航语言，是 Struts 默认的表达式语言； \n\n11、OGNL 基础单位称为导航链，基本的链由属性名、方法调用、数组或集合元素组成；\n\n12、在 Struts2 中，值栈是 OGNL 上下文的根对象，可以直接访问，而 application、session 等其它对象不是根对象，需要使用#进行访问。\n\n13、Struts2 应用中使用 Action 调用 Model，因此 Struts2 应用中的异常在 Model 层抛 出后，通常在 Action 类中进行处理； \n\n14、Action 可以直接使用 try/catch 捕获异常，然后返回结果视图，跳转到相关页面处理 异常； \n\n15、抛出异常后，也可以不在 Action 类中捕获，而使用 throws 声明异常，交给 Struts2 框架处理； \n\n16、Struts2 允许通过 `struts.xml` 文件来配置异常的处理，使用 `<exception-mapping>` 标签声明异常映射，指定发生该类型异常时跳转的结果视图。\n\n## 实验总结\n**1、自定义拦截器类的作用和实现方法**\n\n**作用：** \nStruts2第二个层次的控制器，能够在Action执行前后完成一些通用功能，完成一些通用的控制逻辑：解析请求参数、类型转换、输入校验、防止表单多次提交。 \n\n**实现方法：**\n\n(1) 创建拦截器Interceptor \n\n(2) 继承 AbstractInterceptor 类，重写 intercept()方法（AbstractInterceptor 类实现了 Interceptor 接口） \n\n(3) Action 内使用拦截器 \n\n(4) 修改 `struts.xml` 文件，增加拦截器的配置 \n\n**2、Interceptor 接口中 intercept(ActionInvocation inv)、init()和 destroy()方法的作用**\n\n- **intercept(ActionInvocation inv)**： 允许 Interceptor 在 ActionInvocation 对请求的其余处理之前和/或之后对请求进行某些 处理，或者使处理短路，并仅返回 String 数值 \n\n- **init()**： 在 interceptor 生成后产生，但在 interceptor 接受任何请求之前调用，使得 interceptor 进行初始化 \n\n- **destroy()**： 让 interceptor 清理它产生的资源 \n\n**3、defaultStack 拦截器栈中包含的主要拦截功能** \n\n- **params**：解析 HTTP 请求参数，并设置成 Action 属性 \n\n- **validation**：执行 xxxAction-validate 中定义的校验器 \n\n- **workflow**：调用 Action 中的 validate 方法 \n\n- **i18n**：负责把用户所选的语言、区域放入用户 Session 中。 \n\n- **createSession**：创建 HttpSession 对象 \n\n- **timer**：负责输出 Action 执行时间，分析性能 \n\n- **autowiring**：自动装配，访问 Spring 中的 Bean \n\n**4、自定义过滤器的实现方法和配置步骤，将拦截器与过滤器进行比较，并将两者的特点及区别**\n\n**配置步骤：**\n\n(1) 创建拦截器类，继承Filter类，重写doFilter方法\n\n(2) `web.xml` 文件配置\n\n**拦截器与过滤器特点和区别：** \n\n- 拦截器：Struts2 中第二个层次的控制器；允许自定义；需要在 web.xml 文件中配置； \n- 过滤器：Struts2 控制器的最前端控制器；允许自定义；需要在 struts.xml 文件中配置。 \n\n**5、ValueStack 接口及其主要方法的作用和开发步骤**\nValueStack 接口中主要方法:findValue(), setValue() \n\n**findValue()**：通过以默认搜索顺序针对堆栈评估给定表达式来查找值。 \n\n**setValue()**：使用默认搜索顺序使用给定的表达式在堆栈中的 bean 上设置属性。 \n\n开发需要引入 `com.opensymphony.xwork2.util.ValueStack` 并实例化 ValueStack 对象，之后通过方法调用实现相关功能。 \n\n**6、OGNL 可访问的对象和基本语法**\n\n可以直接访问值栈 ValueStack（OGNL 上下文的根对象）；Action 实例被保存在值栈中，因此可以直接访问。 基本语法包含#、%、$三种符号，作用见下文 \n\n**7、OGNL 三种常用符号:#、%和$的作用和使用方法**\n\n **%符号**：计算 OGNL 表达式的值 \n \n **$符号**：在国际化资源文件中，引用 OGNL 表达式；在 Struts 2 框架配置文件中引用 OGNL 表达式 \n \n **#符号**：访问 OGNL 上下文和 Action 上下文；构造 Map；过滤和投影集合 \n \n **8、自定义异常类的方法和步骤** \n \n （1）创建自定义异常类并继承 Exception 类 \n \n （2）在 Model 中抛出自定义异常 \n \n （3）在 Action 中捕获异常 \n \n （4）在 `struts.xml` 中设置异常页面导航 \n \n （5）在 Action 中抛出异常，将其交给框架处理 \n \n （6）在 `struts.xml` 中使用标签<exception- mapping>进行异常配置 \n \n **9、整理 Struts2 框架处理异常的机制，整理 `struts.xml` 文件配置异常映射的方法以及相关标签的作用** \n \n Struts2 的异常处理机制是通过在 `struts.xml` 文件中配置<exception-mapping……/>元素完成，配置该元素时，需要指定两个属性： \n \n **exception**：指定该异常类型的完全限定名。\n  \n **result**：指定逻辑视图名。 \n \n 根据`<exception-mapping…../>`元素出现位置的不同，异常映射又可分为两种： \n \n **局部异常映射**：将`<exception-mapping… />`元素作为`<action…/>`元素的子元素配置； \n \n **全局异常映射**：将`<exception-mapping… />`元素作为`<global-exception-mappings… />` 元素的子元素配置； \n \n 全局异常映射对所有的 Action 都有效，但局部异常映射仅对该异常映射所在的 Action 有 效。如果局部异常映射和全局异常映射配置了同一个异常类型，在`<action…./>` 元素内的局部异常映射将覆盖全局异常映射。\n\n","slug":"Struts_Workflow","published":1,"updated":"2020-03-22T12:54:53.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcive9nn001ncv6b1q8m6it5","content":"<p>包含Struts 工作流程知识梳理、实验总结、实验步骤三方面的总结。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"知识梳理\"><a href=\"#知识梳理\" class=\"headerlink\" title=\"知识梳理\"></a>知识梳理</h2><p>1、Struts2 的控制器主要由三个层次组成，分别是过滤器、拦截器和业务控制 Action； </p>\n<p>2、过滤器是 Struts2 控制器的最前端控制器，过滤器的使用需要在 <code>web.xml</code> 中进行配置；FilterDispatcher 是 Struts2 应用中必须配置使用的过滤器，该过滤器的主要功能 包括执行 Action、清空 ActionContext 对象等； </p>\n<p>3、拦截器是 Struts2 中第二个层次的控制器，能够在 Action 执行前后完成一些通用功能； </p>\n<p>4、Struts2 内建了大量拦截器， 这些拦截器以 name-class 对的形式配置在 <code>strutsdefault.xml</code> 文件中，如果 <code>struts.xml 中定义的 package 继承了 Struts2 默 认的</code>struts-default` 包，便可以直接使用默认拦截器栈 defaultStack； </p>\n<p>5、Struts2 也允许自定义拦截器，自定义拦截器类须实现 Interceptor 接口，并覆盖接 口中的 intercept 方法用于实现拦截器的主要功能；自定义拦截器须在 <code>struts.xml</code> 中进 行配置才能使用； </p>\n<p>6、若在 <code>struts.xml</code> 中为 Action 指定了一个拦截器，则默认拦截器栈 defaultStack 将会失效，为了继续使用默认拦截器，必须将其进行显式地配置。</p>\n<p>7、Struts API 中的 <code>com.opensymphony.xwork2.util.ValueStack</code> 称为值栈，值栈是一 个数据区域，该区域中保存了应用范围内的所有数据和 Action 处理的用户请求数据； </p>\n<p>8、值栈被存储在 ActionContext 对象中，因此可以在任何节点访问其中的内容； </p>\n<p>9、ValueStack 接口中主要方法有：<code>Object findValue(String expr)</code>可以通过表达式查 找值栈中对应的值，<code>void setValue(String expr, Object value)</code>用于将对象及其表达式 存到值栈中； </p>\n<p>10、OGNL，即对象图导航语言，是 Struts 默认的表达式语言； </p>\n<p>11、OGNL 基础单位称为导航链，基本的链由属性名、方法调用、数组或集合元素组成；</p>\n<p>12、在 Struts2 中，值栈是 OGNL 上下文的根对象，可以直接访问，而 application、session 等其它对象不是根对象，需要使用#进行访问。</p>\n<p>13、Struts2 应用中使用 Action 调用 Model，因此 Struts2 应用中的异常在 Model 层抛 出后，通常在 Action 类中进行处理； </p>\n<p>14、Action 可以直接使用 try/catch 捕获异常，然后返回结果视图，跳转到相关页面处理 异常； </p>\n<p>15、抛出异常后，也可以不在 Action 类中捕获，而使用 throws 声明异常，交给 Struts2 框架处理； </p>\n<p>16、Struts2 允许通过 <code>struts.xml</code> 文件来配置异常的处理，使用 <code>&lt;exception-mapping&gt;</code> 标签声明异常映射，指定发生该类型异常时跳转的结果视图。</p>\n<h2 id=\"实验总结\"><a href=\"#实验总结\" class=\"headerlink\" title=\"实验总结\"></a>实验总结</h2><p><strong>1、自定义拦截器类的作用和实现方法</strong></p>\n<p><strong>作用：</strong><br>Struts2第二个层次的控制器，能够在Action执行前后完成一些通用功能，完成一些通用的控制逻辑：解析请求参数、类型转换、输入校验、防止表单多次提交。 </p>\n<p><strong>实现方法：</strong></p>\n<p>(1) 创建拦截器Interceptor </p>\n<p>(2) 继承 AbstractInterceptor 类，重写 intercept()方法（AbstractInterceptor 类实现了 Interceptor 接口） </p>\n<p>(3) Action 内使用拦截器 </p>\n<p>(4) 修改 <code>struts.xml</code> 文件，增加拦截器的配置 </p>\n<p><strong>2、Interceptor 接口中 intercept(ActionInvocation inv)、init()和 destroy()方法的作用</strong></p>\n<ul>\n<li><p><strong>intercept(ActionInvocation inv)</strong>： 允许 Interceptor 在 ActionInvocation 对请求的其余处理之前和/或之后对请求进行某些 处理，或者使处理短路，并仅返回 String 数值 </p>\n</li>\n<li><p><strong>init()</strong>： 在 interceptor 生成后产生，但在 interceptor 接受任何请求之前调用，使得 interceptor 进行初始化 </p>\n</li>\n<li><p><strong>destroy()</strong>： 让 interceptor 清理它产生的资源 </p>\n</li>\n</ul>\n<p><strong>3、defaultStack 拦截器栈中包含的主要拦截功能</strong> </p>\n<ul>\n<li><p><strong>params</strong>：解析 HTTP 请求参数，并设置成 Action 属性 </p>\n</li>\n<li><p><strong>validation</strong>：执行 xxxAction-validate 中定义的校验器 </p>\n</li>\n<li><p><strong>workflow</strong>：调用 Action 中的 validate 方法 </p>\n</li>\n<li><p><strong>i18n</strong>：负责把用户所选的语言、区域放入用户 Session 中。 </p>\n</li>\n<li><p><strong>createSession</strong>：创建 HttpSession 对象 </p>\n</li>\n<li><p><strong>timer</strong>：负责输出 Action 执行时间，分析性能 </p>\n</li>\n<li><p><strong>autowiring</strong>：自动装配，访问 Spring 中的 Bean </p>\n</li>\n</ul>\n<p><strong>4、自定义过滤器的实现方法和配置步骤，将拦截器与过滤器进行比较，并将两者的特点及区别</strong></p>\n<p><strong>配置步骤：</strong></p>\n<p>(1) 创建拦截器类，继承Filter类，重写doFilter方法</p>\n<p>(2) <code>web.xml</code> 文件配置</p>\n<p><strong>拦截器与过滤器特点和区别：</strong> </p>\n<ul>\n<li>拦截器：Struts2 中第二个层次的控制器；允许自定义；需要在 web.xml 文件中配置； </li>\n<li>过滤器：Struts2 控制器的最前端控制器；允许自定义；需要在 struts.xml 文件中配置。 </li>\n</ul>\n<p><strong>5、ValueStack 接口及其主要方法的作用和开发步骤</strong><br>ValueStack 接口中主要方法:findValue(), setValue() </p>\n<p><strong>findValue()</strong>：通过以默认搜索顺序针对堆栈评估给定表达式来查找值。 </p>\n<p><strong>setValue()</strong>：使用默认搜索顺序使用给定的表达式在堆栈中的 bean 上设置属性。 </p>\n<p>开发需要引入 <code>com.opensymphony.xwork2.util.ValueStack</code> 并实例化 ValueStack 对象，之后通过方法调用实现相关功能。 </p>\n<p><strong>6、OGNL 可访问的对象和基本语法</strong></p>\n<p>可以直接访问值栈 ValueStack（OGNL 上下文的根对象）；Action 实例被保存在值栈中，因此可以直接访问。 基本语法包含#、%、$三种符号，作用见下文 </p>\n<p><strong>7、OGNL 三种常用符号:#、%和$的作用和使用方法</strong></p>\n<p> <strong>%符号</strong>：计算 OGNL 表达式的值 </p>\n<p> <strong>$符号</strong>：在国际化资源文件中，引用 OGNL 表达式；在 Struts 2 框架配置文件中引用 OGNL 表达式 </p>\n<p> <strong>#符号</strong>：访问 OGNL 上下文和 Action 上下文；构造 Map；过滤和投影集合 </p>\n<p> <strong>8、自定义异常类的方法和步骤</strong> </p>\n<p> （1）创建自定义异常类并继承 Exception 类 </p>\n<p> （2）在 Model 中抛出自定义异常 </p>\n<p> （3）在 Action 中捕获异常 </p>\n<p> （4）在 <code>struts.xml</code> 中设置异常页面导航 </p>\n<p> （5）在 Action 中抛出异常，将其交给框架处理 </p>\n<p> （6）在 <code>struts.xml</code> 中使用标签<exception- mapping>进行异常配置 </p>\n<p> <strong>9、整理 Struts2 框架处理异常的机制，整理 <code>struts.xml</code> 文件配置异常映射的方法以及相关标签的作用</strong> </p>\n<p> Struts2 的异常处理机制是通过在 <code>struts.xml</code> 文件中配置&lt;exception-mapping……/&gt;元素完成，配置该元素时，需要指定两个属性： </p>\n<p> <strong>exception</strong>：指定该异常类型的完全限定名。</p>\n<p> <strong>result</strong>：指定逻辑视图名。 </p>\n<p> 根据<code>&lt;exception-mapping…../&gt;</code>元素出现位置的不同，异常映射又可分为两种： </p>\n<p> <strong>局部异常映射</strong>：将<code>&lt;exception-mapping… /&gt;</code>元素作为<code>&lt;action…/&gt;</code>元素的子元素配置； </p>\n<p> <strong>全局异常映射</strong>：将<code>&lt;exception-mapping… /&gt;</code>元素作为<code>&lt;global-exception-mappings… /&gt;</code> 元素的子元素配置； </p>\n<p> 全局异常映射对所有的 Action 都有效，但局部异常映射仅对该异常映射所在的 Action 有 效。如果局部异常映射和全局异常映射配置了同一个异常类型，在<code>&lt;action…./&gt;</code> 元素内的局部异常映射将覆盖全局异常映射。</p>\n","site":{"data":{}},"excerpt":"<p>包含Struts 工作流程知识梳理、实验总结、实验步骤三方面的总结。</p>","more":"<h2 id=\"知识梳理\"><a href=\"#知识梳理\" class=\"headerlink\" title=\"知识梳理\"></a>知识梳理</h2><p>1、Struts2 的控制器主要由三个层次组成，分别是过滤器、拦截器和业务控制 Action； </p>\n<p>2、过滤器是 Struts2 控制器的最前端控制器，过滤器的使用需要在 <code>web.xml</code> 中进行配置；FilterDispatcher 是 Struts2 应用中必须配置使用的过滤器，该过滤器的主要功能 包括执行 Action、清空 ActionContext 对象等； </p>\n<p>3、拦截器是 Struts2 中第二个层次的控制器，能够在 Action 执行前后完成一些通用功能； </p>\n<p>4、Struts2 内建了大量拦截器， 这些拦截器以 name-class 对的形式配置在 <code>strutsdefault.xml</code> 文件中，如果 <code>struts.xml 中定义的 package 继承了 Struts2 默 认的</code>struts-default` 包，便可以直接使用默认拦截器栈 defaultStack； </p>\n<p>5、Struts2 也允许自定义拦截器，自定义拦截器类须实现 Interceptor 接口，并覆盖接 口中的 intercept 方法用于实现拦截器的主要功能；自定义拦截器须在 <code>struts.xml</code> 中进 行配置才能使用； </p>\n<p>6、若在 <code>struts.xml</code> 中为 Action 指定了一个拦截器，则默认拦截器栈 defaultStack 将会失效，为了继续使用默认拦截器，必须将其进行显式地配置。</p>\n<p>7、Struts API 中的 <code>com.opensymphony.xwork2.util.ValueStack</code> 称为值栈，值栈是一 个数据区域，该区域中保存了应用范围内的所有数据和 Action 处理的用户请求数据； </p>\n<p>8、值栈被存储在 ActionContext 对象中，因此可以在任何节点访问其中的内容； </p>\n<p>9、ValueStack 接口中主要方法有：<code>Object findValue(String expr)</code>可以通过表达式查 找值栈中对应的值，<code>void setValue(String expr, Object value)</code>用于将对象及其表达式 存到值栈中； </p>\n<p>10、OGNL，即对象图导航语言，是 Struts 默认的表达式语言； </p>\n<p>11、OGNL 基础单位称为导航链，基本的链由属性名、方法调用、数组或集合元素组成；</p>\n<p>12、在 Struts2 中，值栈是 OGNL 上下文的根对象，可以直接访问，而 application、session 等其它对象不是根对象，需要使用#进行访问。</p>\n<p>13、Struts2 应用中使用 Action 调用 Model，因此 Struts2 应用中的异常在 Model 层抛 出后，通常在 Action 类中进行处理； </p>\n<p>14、Action 可以直接使用 try/catch 捕获异常，然后返回结果视图，跳转到相关页面处理 异常； </p>\n<p>15、抛出异常后，也可以不在 Action 类中捕获，而使用 throws 声明异常，交给 Struts2 框架处理； </p>\n<p>16、Struts2 允许通过 <code>struts.xml</code> 文件来配置异常的处理，使用 <code>&lt;exception-mapping&gt;</code> 标签声明异常映射，指定发生该类型异常时跳转的结果视图。</p>\n<h2 id=\"实验总结\"><a href=\"#实验总结\" class=\"headerlink\" title=\"实验总结\"></a>实验总结</h2><p><strong>1、自定义拦截器类的作用和实现方法</strong></p>\n<p><strong>作用：</strong><br>Struts2第二个层次的控制器，能够在Action执行前后完成一些通用功能，完成一些通用的控制逻辑：解析请求参数、类型转换、输入校验、防止表单多次提交。 </p>\n<p><strong>实现方法：</strong></p>\n<p>(1) 创建拦截器Interceptor </p>\n<p>(2) 继承 AbstractInterceptor 类，重写 intercept()方法（AbstractInterceptor 类实现了 Interceptor 接口） </p>\n<p>(3) Action 内使用拦截器 </p>\n<p>(4) 修改 <code>struts.xml</code> 文件，增加拦截器的配置 </p>\n<p><strong>2、Interceptor 接口中 intercept(ActionInvocation inv)、init()和 destroy()方法的作用</strong></p>\n<ul>\n<li><p><strong>intercept(ActionInvocation inv)</strong>： 允许 Interceptor 在 ActionInvocation 对请求的其余处理之前和/或之后对请求进行某些 处理，或者使处理短路，并仅返回 String 数值 </p>\n</li>\n<li><p><strong>init()</strong>： 在 interceptor 生成后产生，但在 interceptor 接受任何请求之前调用，使得 interceptor 进行初始化 </p>\n</li>\n<li><p><strong>destroy()</strong>： 让 interceptor 清理它产生的资源 </p>\n</li>\n</ul>\n<p><strong>3、defaultStack 拦截器栈中包含的主要拦截功能</strong> </p>\n<ul>\n<li><p><strong>params</strong>：解析 HTTP 请求参数，并设置成 Action 属性 </p>\n</li>\n<li><p><strong>validation</strong>：执行 xxxAction-validate 中定义的校验器 </p>\n</li>\n<li><p><strong>workflow</strong>：调用 Action 中的 validate 方法 </p>\n</li>\n<li><p><strong>i18n</strong>：负责把用户所选的语言、区域放入用户 Session 中。 </p>\n</li>\n<li><p><strong>createSession</strong>：创建 HttpSession 对象 </p>\n</li>\n<li><p><strong>timer</strong>：负责输出 Action 执行时间，分析性能 </p>\n</li>\n<li><p><strong>autowiring</strong>：自动装配，访问 Spring 中的 Bean </p>\n</li>\n</ul>\n<p><strong>4、自定义过滤器的实现方法和配置步骤，将拦截器与过滤器进行比较，并将两者的特点及区别</strong></p>\n<p><strong>配置步骤：</strong></p>\n<p>(1) 创建拦截器类，继承Filter类，重写doFilter方法</p>\n<p>(2) <code>web.xml</code> 文件配置</p>\n<p><strong>拦截器与过滤器特点和区别：</strong> </p>\n<ul>\n<li>拦截器：Struts2 中第二个层次的控制器；允许自定义；需要在 web.xml 文件中配置； </li>\n<li>过滤器：Struts2 控制器的最前端控制器；允许自定义；需要在 struts.xml 文件中配置。 </li>\n</ul>\n<p><strong>5、ValueStack 接口及其主要方法的作用和开发步骤</strong><br>ValueStack 接口中主要方法:findValue(), setValue() </p>\n<p><strong>findValue()</strong>：通过以默认搜索顺序针对堆栈评估给定表达式来查找值。 </p>\n<p><strong>setValue()</strong>：使用默认搜索顺序使用给定的表达式在堆栈中的 bean 上设置属性。 </p>\n<p>开发需要引入 <code>com.opensymphony.xwork2.util.ValueStack</code> 并实例化 ValueStack 对象，之后通过方法调用实现相关功能。 </p>\n<p><strong>6、OGNL 可访问的对象和基本语法</strong></p>\n<p>可以直接访问值栈 ValueStack（OGNL 上下文的根对象）；Action 实例被保存在值栈中，因此可以直接访问。 基本语法包含#、%、$三种符号，作用见下文 </p>\n<p><strong>7、OGNL 三种常用符号:#、%和$的作用和使用方法</strong></p>\n<p> <strong>%符号</strong>：计算 OGNL 表达式的值 </p>\n<p> <strong>$符号</strong>：在国际化资源文件中，引用 OGNL 表达式；在 Struts 2 框架配置文件中引用 OGNL 表达式 </p>\n<p> <strong>#符号</strong>：访问 OGNL 上下文和 Action 上下文；构造 Map；过滤和投影集合 </p>\n<p> <strong>8、自定义异常类的方法和步骤</strong> </p>\n<p> （1）创建自定义异常类并继承 Exception 类 </p>\n<p> （2）在 Model 中抛出自定义异常 </p>\n<p> （3）在 Action 中捕获异常 </p>\n<p> （4）在 <code>struts.xml</code> 中设置异常页面导航 </p>\n<p> （5）在 Action 中抛出异常，将其交给框架处理 </p>\n<p> （6）在 <code>struts.xml</code> 中使用标签<exception- mapping>进行异常配置 </p>\n<p> <strong>9、整理 Struts2 框架处理异常的机制，整理 <code>struts.xml</code> 文件配置异常映射的方法以及相关标签的作用</strong> </p>\n<p> Struts2 的异常处理机制是通过在 <code>struts.xml</code> 文件中配置&lt;exception-mapping……/&gt;元素完成，配置该元素时，需要指定两个属性： </p>\n<p> <strong>exception</strong>：指定该异常类型的完全限定名。</p>\n<p> <strong>result</strong>：指定逻辑视图名。 </p>\n<p> 根据<code>&lt;exception-mapping…../&gt;</code>元素出现位置的不同，异常映射又可分为两种： </p>\n<p> <strong>局部异常映射</strong>：将<code>&lt;exception-mapping… /&gt;</code>元素作为<code>&lt;action…/&gt;</code>元素的子元素配置； </p>\n<p> <strong>全局异常映射</strong>：将<code>&lt;exception-mapping… /&gt;</code>元素作为<code>&lt;global-exception-mappings… /&gt;</code> 元素的子元素配置； </p>\n<p> 全局异常映射对所有的 Action 都有效，但局部异常映射仅对该异常映射所在的 Action 有 效。如果局部异常映射和全局异常映射配置了同一个异常类型，在<code>&lt;action…./&gt;</code> 元素内的局部异常映射将覆盖全局异常映射。</p>"},{"title":"WEKA数据挖掘 - 关联算法","date":"2020-04-22T04:23:20.000Z","copyright":true,"_content":"\n本文总结了 WEKA 中 Apriori关联 与 FPgrowth关联 的操作方法。\n\n<!--more-->\n\n### 实验简介\n关联规则表示不同数据项目在同一事件中出现的相关性，下图中超市市场分析员分析顾客购买商品的场景可以直观地理解关联规则。 \n\n![](http://images.stephenfang.xyz/mweb/15877849125580.jpg)\n\n顾客购买面包同时也购买牛奶的购物模式可以用以下关联规则表示：\n```\n面包 => 牛奶 [ 支持度 =2%, 置信度 =60%]\n```\n其中面包是规则前项（Antecedent），牛奶是规则后项 (Consequent)。实例数（Instances）表示所有购买记录中包含面包的记录的数量。支持度（Support）表示购买面包的记录数占所有购买记录数的百分比。规则支持度（Rule Support）表示同时购买面包和牛奶的记录数占所有的购买记录数的百分比。置信度（confidence）表示同时购买面包和牛奶的记录数占购买面包记录数的百分比。提升（Lift）表示置信度与已知购买牛奶的百分比的比值，提升大于 1 的规则才是有意义的。\n如果关联满足最小支持度阈值和最小置信度阈值就可以认为关联规则是有意义的。这些阈值由用户或领域专家设定。就顾客购物而言，根据以往的购买记录，找出满足最小支持度阈值和最小置信度阈值的关联规则，就找到顾客经常同时购买的商品。\n\n#### Apriori\nApriori算法是第一个关联规则挖掘算法，也是最经典的算法。它利用逐层搜索的迭代方法找出数据库中项集的关系，以形成规则，其过程由连接（类矩阵运算）与剪枝（去掉那些没必要的中间结果）组成。\n本次实验中有如下步骤：\n- 使用 WEKA 的 Apriori 策略对数据集进行关联操作\n- 查看并分析关联结果\n- 分析 Apriori 的算法与特征\n\n#### FPgrowth\nApriori算法在产生频繁模式完全集前需要对数据库进行多次扫描，同时产生大量的候选频繁集，这就使Apriori算法时间和空间复杂度较大。\nFP-Growth算法针对Apriori算法在挖掘长频繁模式时性能低下的特点提出了改进，它采取如下分治策略：将提供频繁项集的数据库压缩到一棵频繁模式树（FP-tree），但仍保留项集关联信息。FP-Growth算法使用了一种称为频繁模式树（Frequent Pattern Tree）的数据结构，FP-tree是一种特殊的前缀树，由频繁项头表和项前缀树构成。FP-Growth算法基于以上的结构加快整个挖掘过程。\n实验包含如下步骤：\n- 使用 WEKA 的FPgrowth 策略对数据集进行关联操作\n- \t查看并分析关联结果\n- \t对比分析 FPgrowth 策略与 Apriori 策略的效果\n\n### 实验数据\n本次实验的数据我参照Waikato大学的数据挖掘教程，选择了vote.arff 数据集，这是一个关于1984年美国国会投票记录数据集，其中包含投票者的身份（民主党人或共和党人）以及多项议题的投票结果，如下图所示：\n![](http://images.stephenfang.xyz/mweb/15877850041138.jpg)\n![](http://images.stephenfang.xyz/test-1.png)\n这个数据集包含435条实例（投票信息），其中包含 267 位民主党人投票信息, 168 位共和党人投票信息。投票结果中有移民（immigration）、教育开支（education-spending）、、免税出口（duty-free-exports）等共16个议题。议员对于议题的表决不仅仅只用简单的“Y”、“N”标记，需要注意的是，被标记为“？”的数据并不是代表数据的缺失，可能代表议员持保留意见没有表决，部分数据集摘录如下：\n\n![](http://images.stephenfang.xyz/mweb/15877851693946.jpg)\n\n由于数据集经过实验验证，数据已完成去噪声处理，并且数据中的“？”并非代表数据缺失，前文交代了相关意义，故不复进行数据预处理的步骤。\n### 算法简介\n#### Apriori\nApriori算法的主要思想为：首先找出所有频繁性至少和预定义的最小支持度一样的频繁项集，由频繁项集产生满足最小支持度和最小可信度的强关联规则，然后使用频繁项集产生期望的规则，产生只包含集合的项的所有规则，每一条规则的右部只有一项。一旦这些规则生成，那么只有那些大于用户给定的最小可信度的规则才被保留。\nApriori算法利用了“任一频繁项集的所有非空子集必须是频繁的”这一个性质。举例说，如果 {0, 1} 是频繁的，那么 {0}, {1} 也是频繁的，将条件倒置，可得“如果一个项集是非频繁项集，那么它的所有超集也是非频繁项集”这一结论。在算法流程中，首先需要找出频繁1-项集，记为L1；然后用L1来产生候选项集C2，对C2中的项进行判定挖掘产生L2，即频繁2-项集；如此循环往复直至无法发现更多的频繁k-项集。\n由于Apriori算法每挖掘一层Lk就需要扫描整个数据库一遍，会产生大量的候选频繁集，使得Apriori算法时间和空间复杂度较大，以下为简单的算法示意图。\n\n![](http://images.stephenfang.xyz/mweb/15877852247683.jpg)\n\n#### FP-Growth\nFP-Growth算法针对Apriori算法在挖掘时可能出现的性能低下问题提出了改进，无论多少数据，只需要扫描两次数据集，提高了算法运行的效率。FP-Growth算法提供频繁项集的数据库压缩到一棵频繁模式树（FP-tree），但仍保留项集关联信息，基于频繁模式树加快整个挖掘过程。\nFP-Growth算法思路即不断迭代FP-tree的构造和投影过程，其算法过程大致如下：\n1.\t扫描数据集一次，找到频繁1-项集(单项模式)\n2.\t按频率降序对频繁项排序\n3.\t再次扫描数据集，按F-list的逆序构造条件FP树\n4.\t按F-list的逆序构造条件FP树，生成频繁项目集\n\n### 实验过程\n#### Apriori\n使用WEKA进行Apriori相关性分析，其生成结果如下所示，WEKA默认显示十条最佳item sets结果。\n\n```\nApriori\n=======\n\nMinimum support: 0.45 (196 instances)\nMinimum metric <confidence>: 0.9\nNumber of cycles performed: 11\n\nGenerated sets of large itemsets:\n\nSize of set of large itemsets L(1): 20\n\nSize of set of large itemsets L(2): 17\n\nSize of set of large itemsets L(3): 6\n\nSize of set of large itemsets L(4): 1\n\nBest rules found:\n\n 1. adoption-of-the-budget-resolution=y physician-fee-freeze=n 219 ==> Class=democrat 219    <conf:(1)> lift:(1.63) lev:(0.19) [84] conv:(84.58)\n 2. adoption-of-the-budget-resolution=y physician-fee-freeze=n aid-to-nicaraguan-contras=y 198 ==> Class=democrat 198    <conf:(1)> lift:(1.63) lev:(0.18) [76] conv:(76.47)\n 3. physician-fee-freeze=n aid-to-nicaraguan-contras=y 211 ==> Class=democrat 210    <conf:(1)> lift:(1.62) lev:(0.19) [80] conv:(40.74)\n 4. physician-fee-freeze=n education-spending=n 202 ==> Class=democrat 201    <conf:(1)> lift:(1.62) lev:(0.18) [77] conv:(39.01)\n 5. physician-fee-freeze=n 247 ==> Class=democrat 245    <conf:(0.99)> lift:(1.62) lev:(0.21) [93] conv:(31.8)\n 6. el-salvador-aid=n Class=democrat 200 ==> aid-to-nicaraguan-contras=y 197    <conf:(0.98)> lift:(1.77) lev:(0.2) [85] conv:(22.18)\n 7. el-salvador-aid=n 208 ==> aid-to-nicaraguan-contras=y 204    <conf:(0.98)> lift:(1.76) lev:(0.2) [88] conv:(18.46)\n 8. adoption-of-the-budget-resolution=y aid-to-nicaraguan-contras=y Class=democrat 203 ==> physician-fee-freeze=n 198    <conf:(0.98)> lift:(1.72) lev:(0.19) [82] conv:(14.62)\n 9. el-salvador-aid=n aid-to-nicaraguan-contras=y 204 ==> Class=democrat 197    <conf:(0.97)> lift:(1.57) lev:(0.17) [71] conv:(9.85)\n10. aid-to-nicaraguan-contras=y Class=democrat 218 ==> physician-fee-freeze=n 210    <conf:(0.96)> lift:(1.7) lev:(0.2) [86] conv:(10.47)\n```\n\n由于对类进行关联分析，故度量类型为置信度，将最小支持度下界（lowerBoundMinSupport）设置为0.1，迭代递减单位（delta）设置为0.05，度量最小值（minMetric）保持默认值0.9，WEKA会重复运行Apriori 算法几次，从最小支持度上界（upperBoundMinSupport）开始，以delta为单位进行迭代运算，当迭代次数达到设定的numRules数值时，或数值达到最小支持度下界（lowerBoundMinSupport）时停止迭代操作。\n当前获取结果可以看出，最小支持度为0.45，包含196个实例，其中最小置信度为0.9，整个循环操作进行了11次，生成的频繁1-项集包含20个实例，频繁2-项集包含17个实例，频繁3-项集包含6个实例，而频繁4-项集只包含1个实例。\n关联挖掘结果中最好的Rule得到了219条数据的确认，简要查看一下这条数据代表的意义，若一个议员为收养开支预算投赞成票、为冻结医师的费用投反对票，那么他很可能是民主党人。这是一条很有意思的信息，得到这样的信息也就是关联规则算法的意义所在。\n评定Ranking Rules的方式不止有Confidence，还有Lift，Leverage和Conviction等，结果中对于每一个Rules也分别给出了各个排序规则的结果，如刚才列举的规则置信度达到了1，Lift值达到了1.63，Leverage值达到了0.19，等等，由于本次关联主要对类进行操作，由置信度的结果我们可以推断出这一规则可信度价值较高。\n\n#### FPgrowth\n\n使用WEKA进行FPgrowth相关性分析，将参数保持与Apriori相关性分析时不变，可见的效果是生成结果的时间缩短了不少，其生成结果如下图所示。\n\n```\n=== Associator model (full training set) ===\n\nFPGrowth found 41 rules (displaying top 10)\n\n 1. [el-salvador-aid=y, Class=republican]: 157 ==> [physician-fee-freeze=y]: 156   <conf:(0.99)> lift:(2.44) lev:(0.21) conv:(46.56) \n 2. [crime=y, Class=republican]: 158 ==> [physician-fee-freeze=y]: 155   <conf:(0.98)> lift:(2.41) lev:(0.21) conv:(23.43) \n 3. [religious-groups-in-schools=y, physician-fee-freeze=y]: 160 ==> [el-salvador-aid=y]: 156   <conf:(0.97)> lift:(2) lev:(0.18) conv:(16.4) \n 4. [Class=republican]: 168 ==> [physician-fee-freeze=y]: 163   <conf:(0.97)> lift:(2.38) lev:(0.22) conv:(16.61) \n 5. [adoption-of-the-budget-resolution=y, anti-satellite-test-ban=y, mx-missile=y]: 161 ==> [aid-to-nicaraguan-contras=y]: 155   <conf:(0.96)> lift:(1.73) lev:(0.15) conv:(10.2) \n 6. [physician-fee-freeze=y, Class=republican]: 163 ==> [el-salvador-aid=y]: 156   <conf:(0.96)> lift:(1.96) lev:(0.18) conv:(10.45) \n 7. [religious-groups-in-schools=y, el-salvador-aid=y, superfund-right-to-sue=y]: 160 ==> [crime=y]: 153   <conf:(0.96)> lift:(1.68) lev:(0.14) conv:(8.6) \n 8. [el-salvador-aid=y, superfund-right-to-sue=y]: 170 ==> [crime=y]: 162   <conf:(0.95)> lift:(1.67) lev:(0.15) conv:(8.12) \n 9. [crime=y, physician-fee-freeze=y]: 168 ==> [el-salvador-aid=y]: 160   <conf:(0.95)> lift:(1.95) lev:(0.18) conv:(9.57) \n10. [el-salvador-aid=y, physician-fee-freeze=y]: 168 ==> [crime=y]: 160   <conf:(0.95)> lift:(1.67) lev:(0.15) conv:(8.02) \n```\n\nWEKA中给予FPgrowth的描述是：实现FP-growth算法的类，用于查找大型项集而无需生成候选项。由于WEKA中的FPgrowth机制，无法实现对class进行关联分析（我没有找到相关选项），所以我使用FPgrowth得到的关联结果与之前Apriori关联分析的结果不同。\n得到的置信度最高的规则代表着如果医院对萨尔瓦多议题投了赞成票并且他的身份是共和党人，那么大概率他会给冻结医师的费用投赞成票，支持该Rule的记录存在156条，置信度达到了0.99，Lift值达到了2.44。\n至于计算的复杂度问题，运行过程花费的时间也可以预见一些结果，通过查资料得到一般性结论：Apriori算法的效率最低，因为需要很多次的扫描数据库；其次FP—Growth算法在长事物数据上表现很差，因为当事物很长时树的深度也很大，需要求解的子问题就变得特别多，因此效率会迅速下降。\n\n### 参考资料\n[Sample Weka Data Sets](https://storm.cis.fordham.edu/~gweiss/data-mining/datasets.html)\n[应用关联规则模型提高超市销量-IBM](https://www.ibm.com/developerworks/cn/data/library/techarticle/dm-1108zhangzy/index.html)\n[Association Rule Mining Algorithms ](http://athena.ecs.csus.edu/~associationcw/FpGrowth.html)\n[频繁模式挖掘中Apriori、FP-Growth和Eclat算法的实现和对比](https://www.cnblogs.com/infaraway/p/6774521.html)\n","source":"_posts/WEKA_Association.md","raw":"---\ntitle: WEKA数据挖掘 - 关联算法\ndate: 2020-04-22 12:23:20\ncategories: \n- tech\ntags: \n- 数据挖掘\n- 关联算法\n- WEKA\ncopyright: true\n---\n\n本文总结了 WEKA 中 Apriori关联 与 FPgrowth关联 的操作方法。\n\n<!--more-->\n\n### 实验简介\n关联规则表示不同数据项目在同一事件中出现的相关性，下图中超市市场分析员分析顾客购买商品的场景可以直观地理解关联规则。 \n\n![](http://images.stephenfang.xyz/mweb/15877849125580.jpg)\n\n顾客购买面包同时也购买牛奶的购物模式可以用以下关联规则表示：\n```\n面包 => 牛奶 [ 支持度 =2%, 置信度 =60%]\n```\n其中面包是规则前项（Antecedent），牛奶是规则后项 (Consequent)。实例数（Instances）表示所有购买记录中包含面包的记录的数量。支持度（Support）表示购买面包的记录数占所有购买记录数的百分比。规则支持度（Rule Support）表示同时购买面包和牛奶的记录数占所有的购买记录数的百分比。置信度（confidence）表示同时购买面包和牛奶的记录数占购买面包记录数的百分比。提升（Lift）表示置信度与已知购买牛奶的百分比的比值，提升大于 1 的规则才是有意义的。\n如果关联满足最小支持度阈值和最小置信度阈值就可以认为关联规则是有意义的。这些阈值由用户或领域专家设定。就顾客购物而言，根据以往的购买记录，找出满足最小支持度阈值和最小置信度阈值的关联规则，就找到顾客经常同时购买的商品。\n\n#### Apriori\nApriori算法是第一个关联规则挖掘算法，也是最经典的算法。它利用逐层搜索的迭代方法找出数据库中项集的关系，以形成规则，其过程由连接（类矩阵运算）与剪枝（去掉那些没必要的中间结果）组成。\n本次实验中有如下步骤：\n- 使用 WEKA 的 Apriori 策略对数据集进行关联操作\n- 查看并分析关联结果\n- 分析 Apriori 的算法与特征\n\n#### FPgrowth\nApriori算法在产生频繁模式完全集前需要对数据库进行多次扫描，同时产生大量的候选频繁集，这就使Apriori算法时间和空间复杂度较大。\nFP-Growth算法针对Apriori算法在挖掘长频繁模式时性能低下的特点提出了改进，它采取如下分治策略：将提供频繁项集的数据库压缩到一棵频繁模式树（FP-tree），但仍保留项集关联信息。FP-Growth算法使用了一种称为频繁模式树（Frequent Pattern Tree）的数据结构，FP-tree是一种特殊的前缀树，由频繁项头表和项前缀树构成。FP-Growth算法基于以上的结构加快整个挖掘过程。\n实验包含如下步骤：\n- 使用 WEKA 的FPgrowth 策略对数据集进行关联操作\n- \t查看并分析关联结果\n- \t对比分析 FPgrowth 策略与 Apriori 策略的效果\n\n### 实验数据\n本次实验的数据我参照Waikato大学的数据挖掘教程，选择了vote.arff 数据集，这是一个关于1984年美国国会投票记录数据集，其中包含投票者的身份（民主党人或共和党人）以及多项议题的投票结果，如下图所示：\n![](http://images.stephenfang.xyz/mweb/15877850041138.jpg)\n![](http://images.stephenfang.xyz/test-1.png)\n这个数据集包含435条实例（投票信息），其中包含 267 位民主党人投票信息, 168 位共和党人投票信息。投票结果中有移民（immigration）、教育开支（education-spending）、、免税出口（duty-free-exports）等共16个议题。议员对于议题的表决不仅仅只用简单的“Y”、“N”标记，需要注意的是，被标记为“？”的数据并不是代表数据的缺失，可能代表议员持保留意见没有表决，部分数据集摘录如下：\n\n![](http://images.stephenfang.xyz/mweb/15877851693946.jpg)\n\n由于数据集经过实验验证，数据已完成去噪声处理，并且数据中的“？”并非代表数据缺失，前文交代了相关意义，故不复进行数据预处理的步骤。\n### 算法简介\n#### Apriori\nApriori算法的主要思想为：首先找出所有频繁性至少和预定义的最小支持度一样的频繁项集，由频繁项集产生满足最小支持度和最小可信度的强关联规则，然后使用频繁项集产生期望的规则，产生只包含集合的项的所有规则，每一条规则的右部只有一项。一旦这些规则生成，那么只有那些大于用户给定的最小可信度的规则才被保留。\nApriori算法利用了“任一频繁项集的所有非空子集必须是频繁的”这一个性质。举例说，如果 {0, 1} 是频繁的，那么 {0}, {1} 也是频繁的，将条件倒置，可得“如果一个项集是非频繁项集，那么它的所有超集也是非频繁项集”这一结论。在算法流程中，首先需要找出频繁1-项集，记为L1；然后用L1来产生候选项集C2，对C2中的项进行判定挖掘产生L2，即频繁2-项集；如此循环往复直至无法发现更多的频繁k-项集。\n由于Apriori算法每挖掘一层Lk就需要扫描整个数据库一遍，会产生大量的候选频繁集，使得Apriori算法时间和空间复杂度较大，以下为简单的算法示意图。\n\n![](http://images.stephenfang.xyz/mweb/15877852247683.jpg)\n\n#### FP-Growth\nFP-Growth算法针对Apriori算法在挖掘时可能出现的性能低下问题提出了改进，无论多少数据，只需要扫描两次数据集，提高了算法运行的效率。FP-Growth算法提供频繁项集的数据库压缩到一棵频繁模式树（FP-tree），但仍保留项集关联信息，基于频繁模式树加快整个挖掘过程。\nFP-Growth算法思路即不断迭代FP-tree的构造和投影过程，其算法过程大致如下：\n1.\t扫描数据集一次，找到频繁1-项集(单项模式)\n2.\t按频率降序对频繁项排序\n3.\t再次扫描数据集，按F-list的逆序构造条件FP树\n4.\t按F-list的逆序构造条件FP树，生成频繁项目集\n\n### 实验过程\n#### Apriori\n使用WEKA进行Apriori相关性分析，其生成结果如下所示，WEKA默认显示十条最佳item sets结果。\n\n```\nApriori\n=======\n\nMinimum support: 0.45 (196 instances)\nMinimum metric <confidence>: 0.9\nNumber of cycles performed: 11\n\nGenerated sets of large itemsets:\n\nSize of set of large itemsets L(1): 20\n\nSize of set of large itemsets L(2): 17\n\nSize of set of large itemsets L(3): 6\n\nSize of set of large itemsets L(4): 1\n\nBest rules found:\n\n 1. adoption-of-the-budget-resolution=y physician-fee-freeze=n 219 ==> Class=democrat 219    <conf:(1)> lift:(1.63) lev:(0.19) [84] conv:(84.58)\n 2. adoption-of-the-budget-resolution=y physician-fee-freeze=n aid-to-nicaraguan-contras=y 198 ==> Class=democrat 198    <conf:(1)> lift:(1.63) lev:(0.18) [76] conv:(76.47)\n 3. physician-fee-freeze=n aid-to-nicaraguan-contras=y 211 ==> Class=democrat 210    <conf:(1)> lift:(1.62) lev:(0.19) [80] conv:(40.74)\n 4. physician-fee-freeze=n education-spending=n 202 ==> Class=democrat 201    <conf:(1)> lift:(1.62) lev:(0.18) [77] conv:(39.01)\n 5. physician-fee-freeze=n 247 ==> Class=democrat 245    <conf:(0.99)> lift:(1.62) lev:(0.21) [93] conv:(31.8)\n 6. el-salvador-aid=n Class=democrat 200 ==> aid-to-nicaraguan-contras=y 197    <conf:(0.98)> lift:(1.77) lev:(0.2) [85] conv:(22.18)\n 7. el-salvador-aid=n 208 ==> aid-to-nicaraguan-contras=y 204    <conf:(0.98)> lift:(1.76) lev:(0.2) [88] conv:(18.46)\n 8. adoption-of-the-budget-resolution=y aid-to-nicaraguan-contras=y Class=democrat 203 ==> physician-fee-freeze=n 198    <conf:(0.98)> lift:(1.72) lev:(0.19) [82] conv:(14.62)\n 9. el-salvador-aid=n aid-to-nicaraguan-contras=y 204 ==> Class=democrat 197    <conf:(0.97)> lift:(1.57) lev:(0.17) [71] conv:(9.85)\n10. aid-to-nicaraguan-contras=y Class=democrat 218 ==> physician-fee-freeze=n 210    <conf:(0.96)> lift:(1.7) lev:(0.2) [86] conv:(10.47)\n```\n\n由于对类进行关联分析，故度量类型为置信度，将最小支持度下界（lowerBoundMinSupport）设置为0.1，迭代递减单位（delta）设置为0.05，度量最小值（minMetric）保持默认值0.9，WEKA会重复运行Apriori 算法几次，从最小支持度上界（upperBoundMinSupport）开始，以delta为单位进行迭代运算，当迭代次数达到设定的numRules数值时，或数值达到最小支持度下界（lowerBoundMinSupport）时停止迭代操作。\n当前获取结果可以看出，最小支持度为0.45，包含196个实例，其中最小置信度为0.9，整个循环操作进行了11次，生成的频繁1-项集包含20个实例，频繁2-项集包含17个实例，频繁3-项集包含6个实例，而频繁4-项集只包含1个实例。\n关联挖掘结果中最好的Rule得到了219条数据的确认，简要查看一下这条数据代表的意义，若一个议员为收养开支预算投赞成票、为冻结医师的费用投反对票，那么他很可能是民主党人。这是一条很有意思的信息，得到这样的信息也就是关联规则算法的意义所在。\n评定Ranking Rules的方式不止有Confidence，还有Lift，Leverage和Conviction等，结果中对于每一个Rules也分别给出了各个排序规则的结果，如刚才列举的规则置信度达到了1，Lift值达到了1.63，Leverage值达到了0.19，等等，由于本次关联主要对类进行操作，由置信度的结果我们可以推断出这一规则可信度价值较高。\n\n#### FPgrowth\n\n使用WEKA进行FPgrowth相关性分析，将参数保持与Apriori相关性分析时不变，可见的效果是生成结果的时间缩短了不少，其生成结果如下图所示。\n\n```\n=== Associator model (full training set) ===\n\nFPGrowth found 41 rules (displaying top 10)\n\n 1. [el-salvador-aid=y, Class=republican]: 157 ==> [physician-fee-freeze=y]: 156   <conf:(0.99)> lift:(2.44) lev:(0.21) conv:(46.56) \n 2. [crime=y, Class=republican]: 158 ==> [physician-fee-freeze=y]: 155   <conf:(0.98)> lift:(2.41) lev:(0.21) conv:(23.43) \n 3. [religious-groups-in-schools=y, physician-fee-freeze=y]: 160 ==> [el-salvador-aid=y]: 156   <conf:(0.97)> lift:(2) lev:(0.18) conv:(16.4) \n 4. [Class=republican]: 168 ==> [physician-fee-freeze=y]: 163   <conf:(0.97)> lift:(2.38) lev:(0.22) conv:(16.61) \n 5. [adoption-of-the-budget-resolution=y, anti-satellite-test-ban=y, mx-missile=y]: 161 ==> [aid-to-nicaraguan-contras=y]: 155   <conf:(0.96)> lift:(1.73) lev:(0.15) conv:(10.2) \n 6. [physician-fee-freeze=y, Class=republican]: 163 ==> [el-salvador-aid=y]: 156   <conf:(0.96)> lift:(1.96) lev:(0.18) conv:(10.45) \n 7. [religious-groups-in-schools=y, el-salvador-aid=y, superfund-right-to-sue=y]: 160 ==> [crime=y]: 153   <conf:(0.96)> lift:(1.68) lev:(0.14) conv:(8.6) \n 8. [el-salvador-aid=y, superfund-right-to-sue=y]: 170 ==> [crime=y]: 162   <conf:(0.95)> lift:(1.67) lev:(0.15) conv:(8.12) \n 9. [crime=y, physician-fee-freeze=y]: 168 ==> [el-salvador-aid=y]: 160   <conf:(0.95)> lift:(1.95) lev:(0.18) conv:(9.57) \n10. [el-salvador-aid=y, physician-fee-freeze=y]: 168 ==> [crime=y]: 160   <conf:(0.95)> lift:(1.67) lev:(0.15) conv:(8.02) \n```\n\nWEKA中给予FPgrowth的描述是：实现FP-growth算法的类，用于查找大型项集而无需生成候选项。由于WEKA中的FPgrowth机制，无法实现对class进行关联分析（我没有找到相关选项），所以我使用FPgrowth得到的关联结果与之前Apriori关联分析的结果不同。\n得到的置信度最高的规则代表着如果医院对萨尔瓦多议题投了赞成票并且他的身份是共和党人，那么大概率他会给冻结医师的费用投赞成票，支持该Rule的记录存在156条，置信度达到了0.99，Lift值达到了2.44。\n至于计算的复杂度问题，运行过程花费的时间也可以预见一些结果，通过查资料得到一般性结论：Apriori算法的效率最低，因为需要很多次的扫描数据库；其次FP—Growth算法在长事物数据上表现很差，因为当事物很长时树的深度也很大，需要求解的子问题就变得特别多，因此效率会迅速下降。\n\n### 参考资料\n[Sample Weka Data Sets](https://storm.cis.fordham.edu/~gweiss/data-mining/datasets.html)\n[应用关联规则模型提高超市销量-IBM](https://www.ibm.com/developerworks/cn/data/library/techarticle/dm-1108zhangzy/index.html)\n[Association Rule Mining Algorithms ](http://athena.ecs.csus.edu/~associationcw/FpGrowth.html)\n[频繁模式挖掘中Apriori、FP-Growth和Eclat算法的实现和对比](https://www.cnblogs.com/infaraway/p/6774521.html)\n","slug":"WEKA_Association","published":1,"updated":"2020-04-25T03:49:54.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcive9no001rcv6bfrdvcldr","content":"<p>本文总结了 WEKA 中 Apriori关联 与 FPgrowth关联 的操作方法。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"实验简介\"><a href=\"#实验简介\" class=\"headerlink\" title=\"实验简介\"></a>实验简介</h3><p>关联规则表示不同数据项目在同一事件中出现的相关性，下图中超市市场分析员分析顾客购买商品的场景可以直观地理解关联规则。 </p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/15877849125580.jpg\" alt=\"\"></p>\n<p>顾客购买面包同时也购买牛奶的购物模式可以用以下关联规则表示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">面包 &#x3D;&gt; 牛奶 [ 支持度 &#x3D;2%, 置信度 &#x3D;60%]</span><br></pre></td></tr></table></figure>\n<p>其中面包是规则前项（Antecedent），牛奶是规则后项 (Consequent)。实例数（Instances）表示所有购买记录中包含面包的记录的数量。支持度（Support）表示购买面包的记录数占所有购买记录数的百分比。规则支持度（Rule Support）表示同时购买面包和牛奶的记录数占所有的购买记录数的百分比。置信度（confidence）表示同时购买面包和牛奶的记录数占购买面包记录数的百分比。提升（Lift）表示置信度与已知购买牛奶的百分比的比值，提升大于 1 的规则才是有意义的。<br>如果关联满足最小支持度阈值和最小置信度阈值就可以认为关联规则是有意义的。这些阈值由用户或领域专家设定。就顾客购物而言，根据以往的购买记录，找出满足最小支持度阈值和最小置信度阈值的关联规则，就找到顾客经常同时购买的商品。</p>\n<h4 id=\"Apriori\"><a href=\"#Apriori\" class=\"headerlink\" title=\"Apriori\"></a>Apriori</h4><p>Apriori算法是第一个关联规则挖掘算法，也是最经典的算法。它利用逐层搜索的迭代方法找出数据库中项集的关系，以形成规则，其过程由连接（类矩阵运算）与剪枝（去掉那些没必要的中间结果）组成。<br>本次实验中有如下步骤：</p>\n<ul>\n<li>使用 WEKA 的 Apriori 策略对数据集进行关联操作</li>\n<li>查看并分析关联结果</li>\n<li>分析 Apriori 的算法与特征</li>\n</ul>\n<h4 id=\"FPgrowth\"><a href=\"#FPgrowth\" class=\"headerlink\" title=\"FPgrowth\"></a>FPgrowth</h4><p>Apriori算法在产生频繁模式完全集前需要对数据库进行多次扫描，同时产生大量的候选频繁集，这就使Apriori算法时间和空间复杂度较大。<br>FP-Growth算法针对Apriori算法在挖掘长频繁模式时性能低下的特点提出了改进，它采取如下分治策略：将提供频繁项集的数据库压缩到一棵频繁模式树（FP-tree），但仍保留项集关联信息。FP-Growth算法使用了一种称为频繁模式树（Frequent Pattern Tree）的数据结构，FP-tree是一种特殊的前缀树，由频繁项头表和项前缀树构成。FP-Growth算法基于以上的结构加快整个挖掘过程。<br>实验包含如下步骤：</p>\n<ul>\n<li>使用 WEKA 的FPgrowth 策略对数据集进行关联操作</li>\n<li>查看并分析关联结果</li>\n<li>对比分析 FPgrowth 策略与 Apriori 策略的效果</li>\n</ul>\n<h3 id=\"实验数据\"><a href=\"#实验数据\" class=\"headerlink\" title=\"实验数据\"></a>实验数据</h3><p>本次实验的数据我参照Waikato大学的数据挖掘教程，选择了vote.arff 数据集，这是一个关于1984年美国国会投票记录数据集，其中包含投票者的身份（民主党人或共和党人）以及多项议题的投票结果，如下图所示：<br><img src=\"http://images.stephenfang.xyz/mweb/15877850041138.jpg\" alt=\"\"><br><img src=\"http://images.stephenfang.xyz/test-1.png\" alt=\"\"><br>这个数据集包含435条实例（投票信息），其中包含 267 位民主党人投票信息, 168 位共和党人投票信息。投票结果中有移民（immigration）、教育开支（education-spending）、、免税出口（duty-free-exports）等共16个议题。议员对于议题的表决不仅仅只用简单的“Y”、“N”标记，需要注意的是，被标记为“？”的数据并不是代表数据的缺失，可能代表议员持保留意见没有表决，部分数据集摘录如下：</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/15877851693946.jpg\" alt=\"\"></p>\n<p>由于数据集经过实验验证，数据已完成去噪声处理，并且数据中的“？”并非代表数据缺失，前文交代了相关意义，故不复进行数据预处理的步骤。</p>\n<h3 id=\"算法简介\"><a href=\"#算法简介\" class=\"headerlink\" title=\"算法简介\"></a>算法简介</h3><h4 id=\"Apriori-1\"><a href=\"#Apriori-1\" class=\"headerlink\" title=\"Apriori\"></a>Apriori</h4><p>Apriori算法的主要思想为：首先找出所有频繁性至少和预定义的最小支持度一样的频繁项集，由频繁项集产生满足最小支持度和最小可信度的强关联规则，然后使用频繁项集产生期望的规则，产生只包含集合的项的所有规则，每一条规则的右部只有一项。一旦这些规则生成，那么只有那些大于用户给定的最小可信度的规则才被保留。<br>Apriori算法利用了“任一频繁项集的所有非空子集必须是频繁的”这一个性质。举例说，如果 {0, 1} 是频繁的，那么 {0}, {1} 也是频繁的，将条件倒置，可得“如果一个项集是非频繁项集，那么它的所有超集也是非频繁项集”这一结论。在算法流程中，首先需要找出频繁1-项集，记为L1；然后用L1来产生候选项集C2，对C2中的项进行判定挖掘产生L2，即频繁2-项集；如此循环往复直至无法发现更多的频繁k-项集。<br>由于Apriori算法每挖掘一层Lk就需要扫描整个数据库一遍，会产生大量的候选频繁集，使得Apriori算法时间和空间复杂度较大，以下为简单的算法示意图。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/15877852247683.jpg\" alt=\"\"></p>\n<h4 id=\"FP-Growth\"><a href=\"#FP-Growth\" class=\"headerlink\" title=\"FP-Growth\"></a>FP-Growth</h4><p>FP-Growth算法针对Apriori算法在挖掘时可能出现的性能低下问题提出了改进，无论多少数据，只需要扫描两次数据集，提高了算法运行的效率。FP-Growth算法提供频繁项集的数据库压缩到一棵频繁模式树（FP-tree），但仍保留项集关联信息，基于频繁模式树加快整个挖掘过程。<br>FP-Growth算法思路即不断迭代FP-tree的构造和投影过程，其算法过程大致如下：</p>\n<ol>\n<li>扫描数据集一次，找到频繁1-项集(单项模式)</li>\n<li>按频率降序对频繁项排序</li>\n<li>再次扫描数据集，按F-list的逆序构造条件FP树</li>\n<li>按F-list的逆序构造条件FP树，生成频繁项目集</li>\n</ol>\n<h3 id=\"实验过程\"><a href=\"#实验过程\" class=\"headerlink\" title=\"实验过程\"></a>实验过程</h3><h4 id=\"Apriori-2\"><a href=\"#Apriori-2\" class=\"headerlink\" title=\"Apriori\"></a>Apriori</h4><p>使用WEKA进行Apriori相关性分析，其生成结果如下所示，WEKA默认显示十条最佳item sets结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Apriori</span><br><span class=\"line\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">Minimum support: 0.45 (196 instances)</span><br><span class=\"line\">Minimum metric &lt;confidence&gt;: 0.9</span><br><span class=\"line\">Number of cycles performed: 11</span><br><span class=\"line\"></span><br><span class=\"line\">Generated sets of large itemsets:</span><br><span class=\"line\"></span><br><span class=\"line\">Size of set of large itemsets L(1): 20</span><br><span class=\"line\"></span><br><span class=\"line\">Size of set of large itemsets L(2): 17</span><br><span class=\"line\"></span><br><span class=\"line\">Size of set of large itemsets L(3): 6</span><br><span class=\"line\"></span><br><span class=\"line\">Size of set of large itemsets L(4): 1</span><br><span class=\"line\"></span><br><span class=\"line\">Best rules found:</span><br><span class=\"line\"></span><br><span class=\"line\"> 1. adoption-of-the-budget-resolution&#x3D;y physician-fee-freeze&#x3D;n 219 &#x3D;&#x3D;&gt; Class&#x3D;democrat 219    &lt;conf:(1)&gt; lift:(1.63) lev:(0.19) [84] conv:(84.58)</span><br><span class=\"line\"> 2. adoption-of-the-budget-resolution&#x3D;y physician-fee-freeze&#x3D;n aid-to-nicaraguan-contras&#x3D;y 198 &#x3D;&#x3D;&gt; Class&#x3D;democrat 198    &lt;conf:(1)&gt; lift:(1.63) lev:(0.18) [76] conv:(76.47)</span><br><span class=\"line\"> 3. physician-fee-freeze&#x3D;n aid-to-nicaraguan-contras&#x3D;y 211 &#x3D;&#x3D;&gt; Class&#x3D;democrat 210    &lt;conf:(1)&gt; lift:(1.62) lev:(0.19) [80] conv:(40.74)</span><br><span class=\"line\"> 4. physician-fee-freeze&#x3D;n education-spending&#x3D;n 202 &#x3D;&#x3D;&gt; Class&#x3D;democrat 201    &lt;conf:(1)&gt; lift:(1.62) lev:(0.18) [77] conv:(39.01)</span><br><span class=\"line\"> 5. physician-fee-freeze&#x3D;n 247 &#x3D;&#x3D;&gt; Class&#x3D;democrat 245    &lt;conf:(0.99)&gt; lift:(1.62) lev:(0.21) [93] conv:(31.8)</span><br><span class=\"line\"> 6. el-salvador-aid&#x3D;n Class&#x3D;democrat 200 &#x3D;&#x3D;&gt; aid-to-nicaraguan-contras&#x3D;y 197    &lt;conf:(0.98)&gt; lift:(1.77) lev:(0.2) [85] conv:(22.18)</span><br><span class=\"line\"> 7. el-salvador-aid&#x3D;n 208 &#x3D;&#x3D;&gt; aid-to-nicaraguan-contras&#x3D;y 204    &lt;conf:(0.98)&gt; lift:(1.76) lev:(0.2) [88] conv:(18.46)</span><br><span class=\"line\"> 8. adoption-of-the-budget-resolution&#x3D;y aid-to-nicaraguan-contras&#x3D;y Class&#x3D;democrat 203 &#x3D;&#x3D;&gt; physician-fee-freeze&#x3D;n 198    &lt;conf:(0.98)&gt; lift:(1.72) lev:(0.19) [82] conv:(14.62)</span><br><span class=\"line\"> 9. el-salvador-aid&#x3D;n aid-to-nicaraguan-contras&#x3D;y 204 &#x3D;&#x3D;&gt; Class&#x3D;democrat 197    &lt;conf:(0.97)&gt; lift:(1.57) lev:(0.17) [71] conv:(9.85)</span><br><span class=\"line\">10. aid-to-nicaraguan-contras&#x3D;y Class&#x3D;democrat 218 &#x3D;&#x3D;&gt; physician-fee-freeze&#x3D;n 210    &lt;conf:(0.96)&gt; lift:(1.7) lev:(0.2) [86] conv:(10.47)</span><br></pre></td></tr></table></figure>\n\n<p>由于对类进行关联分析，故度量类型为置信度，将最小支持度下界（lowerBoundMinSupport）设置为0.1，迭代递减单位（delta）设置为0.05，度量最小值（minMetric）保持默认值0.9，WEKA会重复运行Apriori 算法几次，从最小支持度上界（upperBoundMinSupport）开始，以delta为单位进行迭代运算，当迭代次数达到设定的numRules数值时，或数值达到最小支持度下界（lowerBoundMinSupport）时停止迭代操作。<br>当前获取结果可以看出，最小支持度为0.45，包含196个实例，其中最小置信度为0.9，整个循环操作进行了11次，生成的频繁1-项集包含20个实例，频繁2-项集包含17个实例，频繁3-项集包含6个实例，而频繁4-项集只包含1个实例。<br>关联挖掘结果中最好的Rule得到了219条数据的确认，简要查看一下这条数据代表的意义，若一个议员为收养开支预算投赞成票、为冻结医师的费用投反对票，那么他很可能是民主党人。这是一条很有意思的信息，得到这样的信息也就是关联规则算法的意义所在。<br>评定Ranking Rules的方式不止有Confidence，还有Lift，Leverage和Conviction等，结果中对于每一个Rules也分别给出了各个排序规则的结果，如刚才列举的规则置信度达到了1，Lift值达到了1.63，Leverage值达到了0.19，等等，由于本次关联主要对类进行操作，由置信度的结果我们可以推断出这一规则可信度价值较高。</p>\n<h4 id=\"FPgrowth-1\"><a href=\"#FPgrowth-1\" class=\"headerlink\" title=\"FPgrowth\"></a>FPgrowth</h4><p>使用WEKA进行FPgrowth相关性分析，将参数保持与Apriori相关性分析时不变，可见的效果是生成结果的时间缩短了不少，其生成结果如下图所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x3D;&#x3D;&#x3D; Associator model (full training set) &#x3D;&#x3D;&#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">FPGrowth found 41 rules (displaying top 10)</span><br><span class=\"line\"></span><br><span class=\"line\"> 1. [el-salvador-aid&#x3D;y, Class&#x3D;republican]: 157 &#x3D;&#x3D;&gt; [physician-fee-freeze&#x3D;y]: 156   &lt;conf:(0.99)&gt; lift:(2.44) lev:(0.21) conv:(46.56) </span><br><span class=\"line\"> 2. [crime&#x3D;y, Class&#x3D;republican]: 158 &#x3D;&#x3D;&gt; [physician-fee-freeze&#x3D;y]: 155   &lt;conf:(0.98)&gt; lift:(2.41) lev:(0.21) conv:(23.43) </span><br><span class=\"line\"> 3. [religious-groups-in-schools&#x3D;y, physician-fee-freeze&#x3D;y]: 160 &#x3D;&#x3D;&gt; [el-salvador-aid&#x3D;y]: 156   &lt;conf:(0.97)&gt; lift:(2) lev:(0.18) conv:(16.4) </span><br><span class=\"line\"> 4. [Class&#x3D;republican]: 168 &#x3D;&#x3D;&gt; [physician-fee-freeze&#x3D;y]: 163   &lt;conf:(0.97)&gt; lift:(2.38) lev:(0.22) conv:(16.61) </span><br><span class=\"line\"> 5. [adoption-of-the-budget-resolution&#x3D;y, anti-satellite-test-ban&#x3D;y, mx-missile&#x3D;y]: 161 &#x3D;&#x3D;&gt; [aid-to-nicaraguan-contras&#x3D;y]: 155   &lt;conf:(0.96)&gt; lift:(1.73) lev:(0.15) conv:(10.2) </span><br><span class=\"line\"> 6. [physician-fee-freeze&#x3D;y, Class&#x3D;republican]: 163 &#x3D;&#x3D;&gt; [el-salvador-aid&#x3D;y]: 156   &lt;conf:(0.96)&gt; lift:(1.96) lev:(0.18) conv:(10.45) </span><br><span class=\"line\"> 7. [religious-groups-in-schools&#x3D;y, el-salvador-aid&#x3D;y, superfund-right-to-sue&#x3D;y]: 160 &#x3D;&#x3D;&gt; [crime&#x3D;y]: 153   &lt;conf:(0.96)&gt; lift:(1.68) lev:(0.14) conv:(8.6) </span><br><span class=\"line\"> 8. [el-salvador-aid&#x3D;y, superfund-right-to-sue&#x3D;y]: 170 &#x3D;&#x3D;&gt; [crime&#x3D;y]: 162   &lt;conf:(0.95)&gt; lift:(1.67) lev:(0.15) conv:(8.12) </span><br><span class=\"line\"> 9. [crime&#x3D;y, physician-fee-freeze&#x3D;y]: 168 &#x3D;&#x3D;&gt; [el-salvador-aid&#x3D;y]: 160   &lt;conf:(0.95)&gt; lift:(1.95) lev:(0.18) conv:(9.57) </span><br><span class=\"line\">10. [el-salvador-aid&#x3D;y, physician-fee-freeze&#x3D;y]: 168 &#x3D;&#x3D;&gt; [crime&#x3D;y]: 160   &lt;conf:(0.95)&gt; lift:(1.67) lev:(0.15) conv:(8.02)</span><br></pre></td></tr></table></figure>\n\n<p>WEKA中给予FPgrowth的描述是：实现FP-growth算法的类，用于查找大型项集而无需生成候选项。由于WEKA中的FPgrowth机制，无法实现对class进行关联分析（我没有找到相关选项），所以我使用FPgrowth得到的关联结果与之前Apriori关联分析的结果不同。<br>得到的置信度最高的规则代表着如果医院对萨尔瓦多议题投了赞成票并且他的身份是共和党人，那么大概率他会给冻结医师的费用投赞成票，支持该Rule的记录存在156条，置信度达到了0.99，Lift值达到了2.44。<br>至于计算的复杂度问题，运行过程花费的时间也可以预见一些结果，通过查资料得到一般性结论：Apriori算法的效率最低，因为需要很多次的扫描数据库；其次FP—Growth算法在长事物数据上表现很差，因为当事物很长时树的深度也很大，需要求解的子问题就变得特别多，因此效率会迅速下降。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://storm.cis.fordham.edu/~gweiss/data-mining/datasets.html\" target=\"_blank\" rel=\"noopener\">Sample Weka Data Sets</a><br><a href=\"https://www.ibm.com/developerworks/cn/data/library/techarticle/dm-1108zhangzy/index.html\" target=\"_blank\" rel=\"noopener\">应用关联规则模型提高超市销量-IBM</a><br><a href=\"http://athena.ecs.csus.edu/~associationcw/FpGrowth.html\" target=\"_blank\" rel=\"noopener\">Association Rule Mining Algorithms </a><br><a href=\"https://www.cnblogs.com/infaraway/p/6774521.html\" target=\"_blank\" rel=\"noopener\">频繁模式挖掘中Apriori、FP-Growth和Eclat算法的实现和对比</a></p>\n","site":{"data":{}},"excerpt":"<p>本文总结了 WEKA 中 Apriori关联 与 FPgrowth关联 的操作方法。</p>","more":"<h3 id=\"实验简介\"><a href=\"#实验简介\" class=\"headerlink\" title=\"实验简介\"></a>实验简介</h3><p>关联规则表示不同数据项目在同一事件中出现的相关性，下图中超市市场分析员分析顾客购买商品的场景可以直观地理解关联规则。 </p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/15877849125580.jpg\" alt=\"\"></p>\n<p>顾客购买面包同时也购买牛奶的购物模式可以用以下关联规则表示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">面包 &#x3D;&gt; 牛奶 [ 支持度 &#x3D;2%, 置信度 &#x3D;60%]</span><br></pre></td></tr></table></figure>\n<p>其中面包是规则前项（Antecedent），牛奶是规则后项 (Consequent)。实例数（Instances）表示所有购买记录中包含面包的记录的数量。支持度（Support）表示购买面包的记录数占所有购买记录数的百分比。规则支持度（Rule Support）表示同时购买面包和牛奶的记录数占所有的购买记录数的百分比。置信度（confidence）表示同时购买面包和牛奶的记录数占购买面包记录数的百分比。提升（Lift）表示置信度与已知购买牛奶的百分比的比值，提升大于 1 的规则才是有意义的。<br>如果关联满足最小支持度阈值和最小置信度阈值就可以认为关联规则是有意义的。这些阈值由用户或领域专家设定。就顾客购物而言，根据以往的购买记录，找出满足最小支持度阈值和最小置信度阈值的关联规则，就找到顾客经常同时购买的商品。</p>\n<h4 id=\"Apriori\"><a href=\"#Apriori\" class=\"headerlink\" title=\"Apriori\"></a>Apriori</h4><p>Apriori算法是第一个关联规则挖掘算法，也是最经典的算法。它利用逐层搜索的迭代方法找出数据库中项集的关系，以形成规则，其过程由连接（类矩阵运算）与剪枝（去掉那些没必要的中间结果）组成。<br>本次实验中有如下步骤：</p>\n<ul>\n<li>使用 WEKA 的 Apriori 策略对数据集进行关联操作</li>\n<li>查看并分析关联结果</li>\n<li>分析 Apriori 的算法与特征</li>\n</ul>\n<h4 id=\"FPgrowth\"><a href=\"#FPgrowth\" class=\"headerlink\" title=\"FPgrowth\"></a>FPgrowth</h4><p>Apriori算法在产生频繁模式完全集前需要对数据库进行多次扫描，同时产生大量的候选频繁集，这就使Apriori算法时间和空间复杂度较大。<br>FP-Growth算法针对Apriori算法在挖掘长频繁模式时性能低下的特点提出了改进，它采取如下分治策略：将提供频繁项集的数据库压缩到一棵频繁模式树（FP-tree），但仍保留项集关联信息。FP-Growth算法使用了一种称为频繁模式树（Frequent Pattern Tree）的数据结构，FP-tree是一种特殊的前缀树，由频繁项头表和项前缀树构成。FP-Growth算法基于以上的结构加快整个挖掘过程。<br>实验包含如下步骤：</p>\n<ul>\n<li>使用 WEKA 的FPgrowth 策略对数据集进行关联操作</li>\n<li>查看并分析关联结果</li>\n<li>对比分析 FPgrowth 策略与 Apriori 策略的效果</li>\n</ul>\n<h3 id=\"实验数据\"><a href=\"#实验数据\" class=\"headerlink\" title=\"实验数据\"></a>实验数据</h3><p>本次实验的数据我参照Waikato大学的数据挖掘教程，选择了vote.arff 数据集，这是一个关于1984年美国国会投票记录数据集，其中包含投票者的身份（民主党人或共和党人）以及多项议题的投票结果，如下图所示：<br><img src=\"http://images.stephenfang.xyz/mweb/15877850041138.jpg\" alt=\"\"><br><img src=\"http://images.stephenfang.xyz/test-1.png\" alt=\"\"><br>这个数据集包含435条实例（投票信息），其中包含 267 位民主党人投票信息, 168 位共和党人投票信息。投票结果中有移民（immigration）、教育开支（education-spending）、、免税出口（duty-free-exports）等共16个议题。议员对于议题的表决不仅仅只用简单的“Y”、“N”标记，需要注意的是，被标记为“？”的数据并不是代表数据的缺失，可能代表议员持保留意见没有表决，部分数据集摘录如下：</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/15877851693946.jpg\" alt=\"\"></p>\n<p>由于数据集经过实验验证，数据已完成去噪声处理，并且数据中的“？”并非代表数据缺失，前文交代了相关意义，故不复进行数据预处理的步骤。</p>\n<h3 id=\"算法简介\"><a href=\"#算法简介\" class=\"headerlink\" title=\"算法简介\"></a>算法简介</h3><h4 id=\"Apriori-1\"><a href=\"#Apriori-1\" class=\"headerlink\" title=\"Apriori\"></a>Apriori</h4><p>Apriori算法的主要思想为：首先找出所有频繁性至少和预定义的最小支持度一样的频繁项集，由频繁项集产生满足最小支持度和最小可信度的强关联规则，然后使用频繁项集产生期望的规则，产生只包含集合的项的所有规则，每一条规则的右部只有一项。一旦这些规则生成，那么只有那些大于用户给定的最小可信度的规则才被保留。<br>Apriori算法利用了“任一频繁项集的所有非空子集必须是频繁的”这一个性质。举例说，如果 {0, 1} 是频繁的，那么 {0}, {1} 也是频繁的，将条件倒置，可得“如果一个项集是非频繁项集，那么它的所有超集也是非频繁项集”这一结论。在算法流程中，首先需要找出频繁1-项集，记为L1；然后用L1来产生候选项集C2，对C2中的项进行判定挖掘产生L2，即频繁2-项集；如此循环往复直至无法发现更多的频繁k-项集。<br>由于Apriori算法每挖掘一层Lk就需要扫描整个数据库一遍，会产生大量的候选频繁集，使得Apriori算法时间和空间复杂度较大，以下为简单的算法示意图。</p>\n<p><img src=\"http://images.stephenfang.xyz/mweb/15877852247683.jpg\" alt=\"\"></p>\n<h4 id=\"FP-Growth\"><a href=\"#FP-Growth\" class=\"headerlink\" title=\"FP-Growth\"></a>FP-Growth</h4><p>FP-Growth算法针对Apriori算法在挖掘时可能出现的性能低下问题提出了改进，无论多少数据，只需要扫描两次数据集，提高了算法运行的效率。FP-Growth算法提供频繁项集的数据库压缩到一棵频繁模式树（FP-tree），但仍保留项集关联信息，基于频繁模式树加快整个挖掘过程。<br>FP-Growth算法思路即不断迭代FP-tree的构造和投影过程，其算法过程大致如下：</p>\n<ol>\n<li>扫描数据集一次，找到频繁1-项集(单项模式)</li>\n<li>按频率降序对频繁项排序</li>\n<li>再次扫描数据集，按F-list的逆序构造条件FP树</li>\n<li>按F-list的逆序构造条件FP树，生成频繁项目集</li>\n</ol>\n<h3 id=\"实验过程\"><a href=\"#实验过程\" class=\"headerlink\" title=\"实验过程\"></a>实验过程</h3><h4 id=\"Apriori-2\"><a href=\"#Apriori-2\" class=\"headerlink\" title=\"Apriori\"></a>Apriori</h4><p>使用WEKA进行Apriori相关性分析，其生成结果如下所示，WEKA默认显示十条最佳item sets结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Apriori</span><br><span class=\"line\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">Minimum support: 0.45 (196 instances)</span><br><span class=\"line\">Minimum metric &lt;confidence&gt;: 0.9</span><br><span class=\"line\">Number of cycles performed: 11</span><br><span class=\"line\"></span><br><span class=\"line\">Generated sets of large itemsets:</span><br><span class=\"line\"></span><br><span class=\"line\">Size of set of large itemsets L(1): 20</span><br><span class=\"line\"></span><br><span class=\"line\">Size of set of large itemsets L(2): 17</span><br><span class=\"line\"></span><br><span class=\"line\">Size of set of large itemsets L(3): 6</span><br><span class=\"line\"></span><br><span class=\"line\">Size of set of large itemsets L(4): 1</span><br><span class=\"line\"></span><br><span class=\"line\">Best rules found:</span><br><span class=\"line\"></span><br><span class=\"line\"> 1. adoption-of-the-budget-resolution&#x3D;y physician-fee-freeze&#x3D;n 219 &#x3D;&#x3D;&gt; Class&#x3D;democrat 219    &lt;conf:(1)&gt; lift:(1.63) lev:(0.19) [84] conv:(84.58)</span><br><span class=\"line\"> 2. adoption-of-the-budget-resolution&#x3D;y physician-fee-freeze&#x3D;n aid-to-nicaraguan-contras&#x3D;y 198 &#x3D;&#x3D;&gt; Class&#x3D;democrat 198    &lt;conf:(1)&gt; lift:(1.63) lev:(0.18) [76] conv:(76.47)</span><br><span class=\"line\"> 3. physician-fee-freeze&#x3D;n aid-to-nicaraguan-contras&#x3D;y 211 &#x3D;&#x3D;&gt; Class&#x3D;democrat 210    &lt;conf:(1)&gt; lift:(1.62) lev:(0.19) [80] conv:(40.74)</span><br><span class=\"line\"> 4. physician-fee-freeze&#x3D;n education-spending&#x3D;n 202 &#x3D;&#x3D;&gt; Class&#x3D;democrat 201    &lt;conf:(1)&gt; lift:(1.62) lev:(0.18) [77] conv:(39.01)</span><br><span class=\"line\"> 5. physician-fee-freeze&#x3D;n 247 &#x3D;&#x3D;&gt; Class&#x3D;democrat 245    &lt;conf:(0.99)&gt; lift:(1.62) lev:(0.21) [93] conv:(31.8)</span><br><span class=\"line\"> 6. el-salvador-aid&#x3D;n Class&#x3D;democrat 200 &#x3D;&#x3D;&gt; aid-to-nicaraguan-contras&#x3D;y 197    &lt;conf:(0.98)&gt; lift:(1.77) lev:(0.2) [85] conv:(22.18)</span><br><span class=\"line\"> 7. el-salvador-aid&#x3D;n 208 &#x3D;&#x3D;&gt; aid-to-nicaraguan-contras&#x3D;y 204    &lt;conf:(0.98)&gt; lift:(1.76) lev:(0.2) [88] conv:(18.46)</span><br><span class=\"line\"> 8. adoption-of-the-budget-resolution&#x3D;y aid-to-nicaraguan-contras&#x3D;y Class&#x3D;democrat 203 &#x3D;&#x3D;&gt; physician-fee-freeze&#x3D;n 198    &lt;conf:(0.98)&gt; lift:(1.72) lev:(0.19) [82] conv:(14.62)</span><br><span class=\"line\"> 9. el-salvador-aid&#x3D;n aid-to-nicaraguan-contras&#x3D;y 204 &#x3D;&#x3D;&gt; Class&#x3D;democrat 197    &lt;conf:(0.97)&gt; lift:(1.57) lev:(0.17) [71] conv:(9.85)</span><br><span class=\"line\">10. aid-to-nicaraguan-contras&#x3D;y Class&#x3D;democrat 218 &#x3D;&#x3D;&gt; physician-fee-freeze&#x3D;n 210    &lt;conf:(0.96)&gt; lift:(1.7) lev:(0.2) [86] conv:(10.47)</span><br></pre></td></tr></table></figure>\n\n<p>由于对类进行关联分析，故度量类型为置信度，将最小支持度下界（lowerBoundMinSupport）设置为0.1，迭代递减单位（delta）设置为0.05，度量最小值（minMetric）保持默认值0.9，WEKA会重复运行Apriori 算法几次，从最小支持度上界（upperBoundMinSupport）开始，以delta为单位进行迭代运算，当迭代次数达到设定的numRules数值时，或数值达到最小支持度下界（lowerBoundMinSupport）时停止迭代操作。<br>当前获取结果可以看出，最小支持度为0.45，包含196个实例，其中最小置信度为0.9，整个循环操作进行了11次，生成的频繁1-项集包含20个实例，频繁2-项集包含17个实例，频繁3-项集包含6个实例，而频繁4-项集只包含1个实例。<br>关联挖掘结果中最好的Rule得到了219条数据的确认，简要查看一下这条数据代表的意义，若一个议员为收养开支预算投赞成票、为冻结医师的费用投反对票，那么他很可能是民主党人。这是一条很有意思的信息，得到这样的信息也就是关联规则算法的意义所在。<br>评定Ranking Rules的方式不止有Confidence，还有Lift，Leverage和Conviction等，结果中对于每一个Rules也分别给出了各个排序规则的结果，如刚才列举的规则置信度达到了1，Lift值达到了1.63，Leverage值达到了0.19，等等，由于本次关联主要对类进行操作，由置信度的结果我们可以推断出这一规则可信度价值较高。</p>\n<h4 id=\"FPgrowth-1\"><a href=\"#FPgrowth-1\" class=\"headerlink\" title=\"FPgrowth\"></a>FPgrowth</h4><p>使用WEKA进行FPgrowth相关性分析，将参数保持与Apriori相关性分析时不变，可见的效果是生成结果的时间缩短了不少，其生成结果如下图所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x3D;&#x3D;&#x3D; Associator model (full training set) &#x3D;&#x3D;&#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">FPGrowth found 41 rules (displaying top 10)</span><br><span class=\"line\"></span><br><span class=\"line\"> 1. [el-salvador-aid&#x3D;y, Class&#x3D;republican]: 157 &#x3D;&#x3D;&gt; [physician-fee-freeze&#x3D;y]: 156   &lt;conf:(0.99)&gt; lift:(2.44) lev:(0.21) conv:(46.56) </span><br><span class=\"line\"> 2. [crime&#x3D;y, Class&#x3D;republican]: 158 &#x3D;&#x3D;&gt; [physician-fee-freeze&#x3D;y]: 155   &lt;conf:(0.98)&gt; lift:(2.41) lev:(0.21) conv:(23.43) </span><br><span class=\"line\"> 3. [religious-groups-in-schools&#x3D;y, physician-fee-freeze&#x3D;y]: 160 &#x3D;&#x3D;&gt; [el-salvador-aid&#x3D;y]: 156   &lt;conf:(0.97)&gt; lift:(2) lev:(0.18) conv:(16.4) </span><br><span class=\"line\"> 4. [Class&#x3D;republican]: 168 &#x3D;&#x3D;&gt; [physician-fee-freeze&#x3D;y]: 163   &lt;conf:(0.97)&gt; lift:(2.38) lev:(0.22) conv:(16.61) </span><br><span class=\"line\"> 5. [adoption-of-the-budget-resolution&#x3D;y, anti-satellite-test-ban&#x3D;y, mx-missile&#x3D;y]: 161 &#x3D;&#x3D;&gt; [aid-to-nicaraguan-contras&#x3D;y]: 155   &lt;conf:(0.96)&gt; lift:(1.73) lev:(0.15) conv:(10.2) </span><br><span class=\"line\"> 6. [physician-fee-freeze&#x3D;y, Class&#x3D;republican]: 163 &#x3D;&#x3D;&gt; [el-salvador-aid&#x3D;y]: 156   &lt;conf:(0.96)&gt; lift:(1.96) lev:(0.18) conv:(10.45) </span><br><span class=\"line\"> 7. [religious-groups-in-schools&#x3D;y, el-salvador-aid&#x3D;y, superfund-right-to-sue&#x3D;y]: 160 &#x3D;&#x3D;&gt; [crime&#x3D;y]: 153   &lt;conf:(0.96)&gt; lift:(1.68) lev:(0.14) conv:(8.6) </span><br><span class=\"line\"> 8. [el-salvador-aid&#x3D;y, superfund-right-to-sue&#x3D;y]: 170 &#x3D;&#x3D;&gt; [crime&#x3D;y]: 162   &lt;conf:(0.95)&gt; lift:(1.67) lev:(0.15) conv:(8.12) </span><br><span class=\"line\"> 9. [crime&#x3D;y, physician-fee-freeze&#x3D;y]: 168 &#x3D;&#x3D;&gt; [el-salvador-aid&#x3D;y]: 160   &lt;conf:(0.95)&gt; lift:(1.95) lev:(0.18) conv:(9.57) </span><br><span class=\"line\">10. [el-salvador-aid&#x3D;y, physician-fee-freeze&#x3D;y]: 168 &#x3D;&#x3D;&gt; [crime&#x3D;y]: 160   &lt;conf:(0.95)&gt; lift:(1.67) lev:(0.15) conv:(8.02)</span><br></pre></td></tr></table></figure>\n\n<p>WEKA中给予FPgrowth的描述是：实现FP-growth算法的类，用于查找大型项集而无需生成候选项。由于WEKA中的FPgrowth机制，无法实现对class进行关联分析（我没有找到相关选项），所以我使用FPgrowth得到的关联结果与之前Apriori关联分析的结果不同。<br>得到的置信度最高的规则代表着如果医院对萨尔瓦多议题投了赞成票并且他的身份是共和党人，那么大概率他会给冻结医师的费用投赞成票，支持该Rule的记录存在156条，置信度达到了0.99，Lift值达到了2.44。<br>至于计算的复杂度问题，运行过程花费的时间也可以预见一些结果，通过查资料得到一般性结论：Apriori算法的效率最低，因为需要很多次的扫描数据库；其次FP—Growth算法在长事物数据上表现很差，因为当事物很长时树的深度也很大，需要求解的子问题就变得特别多，因此效率会迅速下降。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://storm.cis.fordham.edu/~gweiss/data-mining/datasets.html\" target=\"_blank\" rel=\"noopener\">Sample Weka Data Sets</a><br><a href=\"https://www.ibm.com/developerworks/cn/data/library/techarticle/dm-1108zhangzy/index.html\" target=\"_blank\" rel=\"noopener\">应用关联规则模型提高超市销量-IBM</a><br><a href=\"http://athena.ecs.csus.edu/~associationcw/FpGrowth.html\" target=\"_blank\" rel=\"noopener\">Association Rule Mining Algorithms </a><br><a href=\"https://www.cnblogs.com/infaraway/p/6774521.html\" target=\"_blank\" rel=\"noopener\">频繁模式挖掘中Apriori、FP-Growth和Eclat算法的实现和对比</a></p>"},{"title":"Muzik开发总结 — 设计与实现","date":"2020-07-15T11:15:20.000Z","copyright":true,"_content":"\n我希望有一款 Tab Based 的 iOS App 带来简约轻量的音乐播放体验，作为一个有一些 iOS 基础的人，我决定自己开发一个简单的本地音乐播放器，正好实践一些 UIKit 控件的使用。\n\n<!--more-->\n\n## 目的\n本系列文章是开发一个简易的音乐播放器（暂时命名为“Muzik”）的博客记录，本篇目的在于展示设计与实现方面的进度。\n\n## 环境\n- iOS 13.6\n- Xcode 11.6\n\n## 设计\n![截图2020-07-27 at 22.58.20](http://images.stephenfang.xyz/sketch.png)\n在项目开始编写代码前，我使用 Sketch 对整个App 进行设计，确定了字体与元素的使用规范，方便之后针对我想要实现的设计进行微调。其实这一步也可以直接在 StoryBoard 中完成，然而添加阴影等操作在 Sketch 等原型创作工具中更为直观。\n在完成设计后我尝试使用 Sketch Mirror、MockUp工具对 App 上手的感受进行评估，并发送原型给朋友了解他们提出的一些建议。\n![](http://images.stephenfang.xyz/mweb/15958622925026.png)\n至少在 MockUp 效果下 App的整体观感还让我比较满意。我希望这种简单的风格贯穿整个 App，使得我能够用 UIKit 较为轻松地实现 App 的功能。\n ![](http://images.stephenfang.xyz/mweb/15958623328077.png)\n\n支持 Dark Mode 也是大势所趋，针对 iOS 13 之后的 App 都应该加入支持。为了给 iPhone X设备带来更好的视觉观感，我选择了纯黑作为 App 的底色。\n![](http://images.stephenfang.xyz/mweb/15958624669288.jpg)\n\n\n## 组织\n按照 Sketch 中的页面设计，我将整体 App 分为精选、专辑、歌曲、音乐人、播放列表、正在播放这几个部分，其中我希望有一个小组件能像原生音乐App一样能够看到当前播放进度以及进行快捷操作，于是我将包含显示当前播放内容的 UIView 置于App的顶层位置，其中UIView中包含 UIProgressView 等控件。这是我目前能够想到且实现的理想方法，缺点即需要为下层的所有视图添加 Offset。\nTab + Navigation 是 iOS 开发中一种非常常见的模式，每一个页面依次对应了精选、专辑、歌曲、音乐人、播放列表的功能。\n![](http://images.stephenfang.xyz/strc.png)\n\n## 页面实现\n### 精选页面\n页面包含最近添加的专辑、收听最多的歌曲、常听的播放列表等栏目组成，点击不同栏目的项目可以触发不同的二级功能。从此页面可以简述我的设计理念，即专辑使用卡片式的设计语言，更契合 iOS 13 的设计风格。\n![-w301](http://images.stephenfang.xyz/mweb/15958633632257.jpg)\n\n### 专辑页面\n卡片式的专辑页面，点击不同的专辑进入详情页面。需要注意的是我为该页面添加了可隐藏的索引栏，避免索引栏与专辑页面重合，显得过于拥挤，这一点在歌曲页面可以看到。\n![-w301](http://images.stephenfang.xyz/mweb/15958635741661.jpg)\n\n点击专辑卡片进入相应的详情页面，简单的 TableView 实现。\n![-w301](http://images.stephenfang.xyz/mweb/15958637814033.jpg)\n\n## 歌曲页面\n从歌曲页面可以看到右侧的可隐藏的索引栏，这里学习了 Ecoute 的设计。App 整体的设计风格十分统一，无论是字体还是网格。\n![-w301](http://images.stephenfang.xyz/mweb/15958640618143.jpg)\n\n## 音乐人页面\n这个页面是我目前不满意的一个页面，因为 iOS 的MediaLibrary 框架中并没有提供获取 ```albumArtist```的 ```artwork``` 的方法。目前有改进的方案，即通过请求 iTunes Store 数据库返回 JSON，获取其中的艺人封面 url 并缓存其中的艺人封面。思路有一些类似于 [SDWebImage](https://github.com/SDWebImage/SDWebImage)，然而希望以自己的方式进行简单实现。\n![-w301](http://images.stephenfang.xyz/mweb/15958641787194.jpg)\n\n同样，点击不同的 row 进入相应的音乐人详情页面，区别是这个采用 CollectionView 实现。\n![-w301](http://images.stephenfang.xyz/mweb/15958647723869.jpg)\n\n## 播放列表页面\n根据播放列表的实际需求实现了显示页面，由于时间过于仓促没有认真适配播放列表的缩略图。\n正打算自己花时间写一个类似于原声音乐播放器的播放列表的缩略图效果，我在 GitHub 上找到了一个类似的开源项目: [\nStitchingImage](https://github.com/zhengjinghua/StitchingImage)\n![-w301](http://images.stephenfang.xyz/mweb/15958648056682.jpg)\n\n然而实现语言为 Objective-C，我正在尝试用 Swift 将其进行重写，之后会开源到 GitHub 上。\n\n详情页还是同样的味道，目前做的仍然十分粗糙，我会尝试对 UI 进行持续改进。\n![-w301](http://images.stephenfang.xyz/mweb/15958650862897.jpg)\n\n\n## 搜索页面\n点击任意一级页面导航栏的搜索按钮会激活搜索页面，使用框架的方法调用实现了简单的检索。\n![-w301](http://images.stephenfang.xyz/mweb/15958640040336.jpg)\n\n## 正在播放页面\n类似于原生的播放页面，目前正在对整个页面进行重构，包括 UI 部分与代码部分。\n目前主要通过 Timer 与 Observer 实现了简单的功能实现，但是为了达到优雅听歌的目标功能远不于此，我正在尝试接入[LyricsKit](https://github.com/ddddxxx/LyricsKit) 使得页面具有显示歌词的功能，这里需要用到 ScrollView 与 PageControl的加持。\n![-w301](http://images.stephenfang.xyz/mweb/15958655245499.jpg)\n\n\n## 总结\n以上为目前的进度总结，我会持续更新 App 的开发过程，包括代码总结与功能实现。","source":"_posts/Muzik_Progress.md","raw":"---\ntitle: Muzik开发总结 — 设计与实现\ndate: 2020-07-15 19:15:20\ncategories: \n- tech\ntags: \n- iOS\n- Music\n- Swift\ncopyright: true\n---\n\n我希望有一款 Tab Based 的 iOS App 带来简约轻量的音乐播放体验，作为一个有一些 iOS 基础的人，我决定自己开发一个简单的本地音乐播放器，正好实践一些 UIKit 控件的使用。\n\n<!--more-->\n\n## 目的\n本系列文章是开发一个简易的音乐播放器（暂时命名为“Muzik”）的博客记录，本篇目的在于展示设计与实现方面的进度。\n\n## 环境\n- iOS 13.6\n- Xcode 11.6\n\n## 设计\n![截图2020-07-27 at 22.58.20](http://images.stephenfang.xyz/sketch.png)\n在项目开始编写代码前，我使用 Sketch 对整个App 进行设计，确定了字体与元素的使用规范，方便之后针对我想要实现的设计进行微调。其实这一步也可以直接在 StoryBoard 中完成，然而添加阴影等操作在 Sketch 等原型创作工具中更为直观。\n在完成设计后我尝试使用 Sketch Mirror、MockUp工具对 App 上手的感受进行评估，并发送原型给朋友了解他们提出的一些建议。\n![](http://images.stephenfang.xyz/mweb/15958622925026.png)\n至少在 MockUp 效果下 App的整体观感还让我比较满意。我希望这种简单的风格贯穿整个 App，使得我能够用 UIKit 较为轻松地实现 App 的功能。\n ![](http://images.stephenfang.xyz/mweb/15958623328077.png)\n\n支持 Dark Mode 也是大势所趋，针对 iOS 13 之后的 App 都应该加入支持。为了给 iPhone X设备带来更好的视觉观感，我选择了纯黑作为 App 的底色。\n![](http://images.stephenfang.xyz/mweb/15958624669288.jpg)\n\n\n## 组织\n按照 Sketch 中的页面设计，我将整体 App 分为精选、专辑、歌曲、音乐人、播放列表、正在播放这几个部分，其中我希望有一个小组件能像原生音乐App一样能够看到当前播放进度以及进行快捷操作，于是我将包含显示当前播放内容的 UIView 置于App的顶层位置，其中UIView中包含 UIProgressView 等控件。这是我目前能够想到且实现的理想方法，缺点即需要为下层的所有视图添加 Offset。\nTab + Navigation 是 iOS 开发中一种非常常见的模式，每一个页面依次对应了精选、专辑、歌曲、音乐人、播放列表的功能。\n![](http://images.stephenfang.xyz/strc.png)\n\n## 页面实现\n### 精选页面\n页面包含最近添加的专辑、收听最多的歌曲、常听的播放列表等栏目组成，点击不同栏目的项目可以触发不同的二级功能。从此页面可以简述我的设计理念，即专辑使用卡片式的设计语言，更契合 iOS 13 的设计风格。\n![-w301](http://images.stephenfang.xyz/mweb/15958633632257.jpg)\n\n### 专辑页面\n卡片式的专辑页面，点击不同的专辑进入详情页面。需要注意的是我为该页面添加了可隐藏的索引栏，避免索引栏与专辑页面重合，显得过于拥挤，这一点在歌曲页面可以看到。\n![-w301](http://images.stephenfang.xyz/mweb/15958635741661.jpg)\n\n点击专辑卡片进入相应的详情页面，简单的 TableView 实现。\n![-w301](http://images.stephenfang.xyz/mweb/15958637814033.jpg)\n\n## 歌曲页面\n从歌曲页面可以看到右侧的可隐藏的索引栏，这里学习了 Ecoute 的设计。App 整体的设计风格十分统一，无论是字体还是网格。\n![-w301](http://images.stephenfang.xyz/mweb/15958640618143.jpg)\n\n## 音乐人页面\n这个页面是我目前不满意的一个页面，因为 iOS 的MediaLibrary 框架中并没有提供获取 ```albumArtist```的 ```artwork``` 的方法。目前有改进的方案，即通过请求 iTunes Store 数据库返回 JSON，获取其中的艺人封面 url 并缓存其中的艺人封面。思路有一些类似于 [SDWebImage](https://github.com/SDWebImage/SDWebImage)，然而希望以自己的方式进行简单实现。\n![-w301](http://images.stephenfang.xyz/mweb/15958641787194.jpg)\n\n同样，点击不同的 row 进入相应的音乐人详情页面，区别是这个采用 CollectionView 实现。\n![-w301](http://images.stephenfang.xyz/mweb/15958647723869.jpg)\n\n## 播放列表页面\n根据播放列表的实际需求实现了显示页面，由于时间过于仓促没有认真适配播放列表的缩略图。\n正打算自己花时间写一个类似于原声音乐播放器的播放列表的缩略图效果，我在 GitHub 上找到了一个类似的开源项目: [\nStitchingImage](https://github.com/zhengjinghua/StitchingImage)\n![-w301](http://images.stephenfang.xyz/mweb/15958648056682.jpg)\n\n然而实现语言为 Objective-C，我正在尝试用 Swift 将其进行重写，之后会开源到 GitHub 上。\n\n详情页还是同样的味道，目前做的仍然十分粗糙，我会尝试对 UI 进行持续改进。\n![-w301](http://images.stephenfang.xyz/mweb/15958650862897.jpg)\n\n\n## 搜索页面\n点击任意一级页面导航栏的搜索按钮会激活搜索页面，使用框架的方法调用实现了简单的检索。\n![-w301](http://images.stephenfang.xyz/mweb/15958640040336.jpg)\n\n## 正在播放页面\n类似于原生的播放页面，目前正在对整个页面进行重构，包括 UI 部分与代码部分。\n目前主要通过 Timer 与 Observer 实现了简单的功能实现，但是为了达到优雅听歌的目标功能远不于此，我正在尝试接入[LyricsKit](https://github.com/ddddxxx/LyricsKit) 使得页面具有显示歌词的功能，这里需要用到 ScrollView 与 PageControl的加持。\n![-w301](http://images.stephenfang.xyz/mweb/15958655245499.jpg)\n\n\n## 总结\n以上为目前的进度总结，我会持续更新 App 的开发过程，包括代码总结与功能实现。","slug":"Muzik_Progress","published":1,"updated":"2020-07-27T16:14:18.559Z","_id":"ckd4pfkpw0000hw6bctyz8p4y","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我希望有一款 Tab Based 的 iOS App 带来简约轻量的音乐播放体验，作为一个有一些 iOS 基础的人，我决定自己开发一个简单的本地音乐播放器，正好实践一些 UIKit 控件的使用。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>本系列文章是开发一个简易的音乐播放器（暂时命名为“Muzik”）的博客记录，本篇目的在于展示设计与实现方面的进度。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>iOS 13.6</li>\n<li>Xcode 11.6</li>\n</ul>\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><p><img src=\"http://images.stephenfang.xyz/sketch.png\" alt=\"截图2020-07-27 at 22.58.20\"><br>在项目开始编写代码前，我使用 Sketch 对整个App 进行设计，确定了字体与元素的使用规范，方便之后针对我想要实现的设计进行微调。其实这一步也可以直接在 StoryBoard 中完成，然而添加阴影等操作在 Sketch 等原型创作工具中更为直观。<br>在完成设计后我尝试使用 Sketch Mirror、MockUp工具对 App 上手的感受进行评估，并发送原型给朋友了解他们提出的一些建议。<br><img src=\"http://images.stephenfang.xyz/mweb/15958622925026.png\" alt=\"\"><br>至少在 MockUp 效果下 App的整体观感还让我比较满意。我希望这种简单的风格贯穿整个 App，使得我能够用 UIKit 较为轻松地实现 App 的功能。<br> <img src=\"http://images.stephenfang.xyz/mweb/15958623328077.png\" alt=\"\"></p>\n<p>支持 Dark Mode 也是大势所趋，针对 iOS 13 之后的 App 都应该加入支持。为了给 iPhone X设备带来更好的视觉观感，我选择了纯黑作为 App 的底色。<br><img src=\"http://images.stephenfang.xyz/mweb/15958624669288.jpg\" alt=\"\"></p>\n<h2 id=\"组织\"><a href=\"#组织\" class=\"headerlink\" title=\"组织\"></a>组织</h2><p>按照 Sketch 中的页面设计，我将整体 App 分为精选、专辑、歌曲、音乐人、播放列表、正在播放这几个部分，其中我希望有一个小组件能像原生音乐App一样能够看到当前播放进度以及进行快捷操作，于是我将包含显示当前播放内容的 UIView 置于App的顶层位置，其中UIView中包含 UIProgressView 等控件。这是我目前能够想到且实现的理想方法，缺点即需要为下层的所有视图添加 Offset。<br>Tab + Navigation 是 iOS 开发中一种非常常见的模式，每一个页面依次对应了精选、专辑、歌曲、音乐人、播放列表的功能。<br><img src=\"http://images.stephenfang.xyz/strc.png\" alt=\"\"></p>\n<h2 id=\"页面实现\"><a href=\"#页面实现\" class=\"headerlink\" title=\"页面实现\"></a>页面实现</h2><h3 id=\"精选页面\"><a href=\"#精选页面\" class=\"headerlink\" title=\"精选页面\"></a>精选页面</h3><p>页面包含最近添加的专辑、收听最多的歌曲、常听的播放列表等栏目组成，点击不同栏目的项目可以触发不同的二级功能。从此页面可以简述我的设计理念，即专辑使用卡片式的设计语言，更契合 iOS 13 的设计风格。<br><img src=\"http://images.stephenfang.xyz/mweb/15958633632257.jpg\" alt=\"-w301\"></p>\n<h3 id=\"专辑页面\"><a href=\"#专辑页面\" class=\"headerlink\" title=\"专辑页面\"></a>专辑页面</h3><p>卡片式的专辑页面，点击不同的专辑进入详情页面。需要注意的是我为该页面添加了可隐藏的索引栏，避免索引栏与专辑页面重合，显得过于拥挤，这一点在歌曲页面可以看到。<br><img src=\"http://images.stephenfang.xyz/mweb/15958635741661.jpg\" alt=\"-w301\"></p>\n<p>点击专辑卡片进入相应的详情页面，简单的 TableView 实现。<br><img src=\"http://images.stephenfang.xyz/mweb/15958637814033.jpg\" alt=\"-w301\"></p>\n<h2 id=\"歌曲页面\"><a href=\"#歌曲页面\" class=\"headerlink\" title=\"歌曲页面\"></a>歌曲页面</h2><p>从歌曲页面可以看到右侧的可隐藏的索引栏，这里学习了 Ecoute 的设计。App 整体的设计风格十分统一，无论是字体还是网格。<br><img src=\"http://images.stephenfang.xyz/mweb/15958640618143.jpg\" alt=\"-w301\"></p>\n<h2 id=\"音乐人页面\"><a href=\"#音乐人页面\" class=\"headerlink\" title=\"音乐人页面\"></a>音乐人页面</h2><p>这个页面是我目前不满意的一个页面，因为 iOS 的MediaLibrary 框架中并没有提供获取 <code>albumArtist</code>的 <code>artwork</code> 的方法。目前有改进的方案，即通过请求 iTunes Store 数据库返回 JSON，获取其中的艺人封面 url 并缓存其中的艺人封面。思路有一些类似于 <a href=\"https://github.com/SDWebImage/SDWebImage\" target=\"_blank\" rel=\"noopener\">SDWebImage</a>，然而希望以自己的方式进行简单实现。<br><img src=\"http://images.stephenfang.xyz/mweb/15958641787194.jpg\" alt=\"-w301\"></p>\n<p>同样，点击不同的 row 进入相应的音乐人详情页面，区别是这个采用 CollectionView 实现。<br><img src=\"http://images.stephenfang.xyz/mweb/15958647723869.jpg\" alt=\"-w301\"></p>\n<h2 id=\"播放列表页面\"><a href=\"#播放列表页面\" class=\"headerlink\" title=\"播放列表页面\"></a>播放列表页面</h2><p>根据播放列表的实际需求实现了显示页面，由于时间过于仓促没有认真适配播放列表的缩略图。<br>正打算自己花时间写一个类似于原声音乐播放器的播放列表的缩略图效果，我在 GitHub 上找到了一个类似的开源项目: <a href=\"https://github.com/zhengjinghua/StitchingImage\" target=\"_blank\" rel=\"noopener\"><br>StitchingImage</a><br><img src=\"http://images.stephenfang.xyz/mweb/15958648056682.jpg\" alt=\"-w301\"></p>\n<p>然而实现语言为 Objective-C，我正在尝试用 Swift 将其进行重写，之后会开源到 GitHub 上。</p>\n<p>详情页还是同样的味道，目前做的仍然十分粗糙，我会尝试对 UI 进行持续改进。<br><img src=\"http://images.stephenfang.xyz/mweb/15958650862897.jpg\" alt=\"-w301\"></p>\n<h2 id=\"搜索页面\"><a href=\"#搜索页面\" class=\"headerlink\" title=\"搜索页面\"></a>搜索页面</h2><p>点击任意一级页面导航栏的搜索按钮会激活搜索页面，使用框架的方法调用实现了简单的检索。<br><img src=\"http://images.stephenfang.xyz/mweb/15958640040336.jpg\" alt=\"-w301\"></p>\n<h2 id=\"正在播放页面\"><a href=\"#正在播放页面\" class=\"headerlink\" title=\"正在播放页面\"></a>正在播放页面</h2><p>类似于原生的播放页面，目前正在对整个页面进行重构，包括 UI 部分与代码部分。<br>目前主要通过 Timer 与 Observer 实现了简单的功能实现，但是为了达到优雅听歌的目标功能远不于此，我正在尝试接入<a href=\"https://github.com/ddddxxx/LyricsKit\" target=\"_blank\" rel=\"noopener\">LyricsKit</a> 使得页面具有显示歌词的功能，这里需要用到 ScrollView 与 PageControl的加持。<br><img src=\"http://images.stephenfang.xyz/mweb/15958655245499.jpg\" alt=\"-w301\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上为目前的进度总结，我会持续更新 App 的开发过程，包括代码总结与功能实现。</p>\n","site":{"data":{}},"excerpt":"<p>我希望有一款 Tab Based 的 iOS App 带来简约轻量的音乐播放体验，作为一个有一些 iOS 基础的人，我决定自己开发一个简单的本地音乐播放器，正好实践一些 UIKit 控件的使用。</p>","more":"<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>本系列文章是开发一个简易的音乐播放器（暂时命名为“Muzik”）的博客记录，本篇目的在于展示设计与实现方面的进度。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>iOS 13.6</li>\n<li>Xcode 11.6</li>\n</ul>\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><p><img src=\"http://images.stephenfang.xyz/sketch.png\" alt=\"截图2020-07-27 at 22.58.20\"><br>在项目开始编写代码前，我使用 Sketch 对整个App 进行设计，确定了字体与元素的使用规范，方便之后针对我想要实现的设计进行微调。其实这一步也可以直接在 StoryBoard 中完成，然而添加阴影等操作在 Sketch 等原型创作工具中更为直观。<br>在完成设计后我尝试使用 Sketch Mirror、MockUp工具对 App 上手的感受进行评估，并发送原型给朋友了解他们提出的一些建议。<br><img src=\"http://images.stephenfang.xyz/mweb/15958622925026.png\" alt=\"\"><br>至少在 MockUp 效果下 App的整体观感还让我比较满意。我希望这种简单的风格贯穿整个 App，使得我能够用 UIKit 较为轻松地实现 App 的功能。<br> <img src=\"http://images.stephenfang.xyz/mweb/15958623328077.png\" alt=\"\"></p>\n<p>支持 Dark Mode 也是大势所趋，针对 iOS 13 之后的 App 都应该加入支持。为了给 iPhone X设备带来更好的视觉观感，我选择了纯黑作为 App 的底色。<br><img src=\"http://images.stephenfang.xyz/mweb/15958624669288.jpg\" alt=\"\"></p>\n<h2 id=\"组织\"><a href=\"#组织\" class=\"headerlink\" title=\"组织\"></a>组织</h2><p>按照 Sketch 中的页面设计，我将整体 App 分为精选、专辑、歌曲、音乐人、播放列表、正在播放这几个部分，其中我希望有一个小组件能像原生音乐App一样能够看到当前播放进度以及进行快捷操作，于是我将包含显示当前播放内容的 UIView 置于App的顶层位置，其中UIView中包含 UIProgressView 等控件。这是我目前能够想到且实现的理想方法，缺点即需要为下层的所有视图添加 Offset。<br>Tab + Navigation 是 iOS 开发中一种非常常见的模式，每一个页面依次对应了精选、专辑、歌曲、音乐人、播放列表的功能。<br><img src=\"http://images.stephenfang.xyz/strc.png\" alt=\"\"></p>\n<h2 id=\"页面实现\"><a href=\"#页面实现\" class=\"headerlink\" title=\"页面实现\"></a>页面实现</h2><h3 id=\"精选页面\"><a href=\"#精选页面\" class=\"headerlink\" title=\"精选页面\"></a>精选页面</h3><p>页面包含最近添加的专辑、收听最多的歌曲、常听的播放列表等栏目组成，点击不同栏目的项目可以触发不同的二级功能。从此页面可以简述我的设计理念，即专辑使用卡片式的设计语言，更契合 iOS 13 的设计风格。<br><img src=\"http://images.stephenfang.xyz/mweb/15958633632257.jpg\" alt=\"-w301\"></p>\n<h3 id=\"专辑页面\"><a href=\"#专辑页面\" class=\"headerlink\" title=\"专辑页面\"></a>专辑页面</h3><p>卡片式的专辑页面，点击不同的专辑进入详情页面。需要注意的是我为该页面添加了可隐藏的索引栏，避免索引栏与专辑页面重合，显得过于拥挤，这一点在歌曲页面可以看到。<br><img src=\"http://images.stephenfang.xyz/mweb/15958635741661.jpg\" alt=\"-w301\"></p>\n<p>点击专辑卡片进入相应的详情页面，简单的 TableView 实现。<br><img src=\"http://images.stephenfang.xyz/mweb/15958637814033.jpg\" alt=\"-w301\"></p>\n<h2 id=\"歌曲页面\"><a href=\"#歌曲页面\" class=\"headerlink\" title=\"歌曲页面\"></a>歌曲页面</h2><p>从歌曲页面可以看到右侧的可隐藏的索引栏，这里学习了 Ecoute 的设计。App 整体的设计风格十分统一，无论是字体还是网格。<br><img src=\"http://images.stephenfang.xyz/mweb/15958640618143.jpg\" alt=\"-w301\"></p>\n<h2 id=\"音乐人页面\"><a href=\"#音乐人页面\" class=\"headerlink\" title=\"音乐人页面\"></a>音乐人页面</h2><p>这个页面是我目前不满意的一个页面，因为 iOS 的MediaLibrary 框架中并没有提供获取 <code>albumArtist</code>的 <code>artwork</code> 的方法。目前有改进的方案，即通过请求 iTunes Store 数据库返回 JSON，获取其中的艺人封面 url 并缓存其中的艺人封面。思路有一些类似于 <a href=\"https://github.com/SDWebImage/SDWebImage\" target=\"_blank\" rel=\"noopener\">SDWebImage</a>，然而希望以自己的方式进行简单实现。<br><img src=\"http://images.stephenfang.xyz/mweb/15958641787194.jpg\" alt=\"-w301\"></p>\n<p>同样，点击不同的 row 进入相应的音乐人详情页面，区别是这个采用 CollectionView 实现。<br><img src=\"http://images.stephenfang.xyz/mweb/15958647723869.jpg\" alt=\"-w301\"></p>\n<h2 id=\"播放列表页面\"><a href=\"#播放列表页面\" class=\"headerlink\" title=\"播放列表页面\"></a>播放列表页面</h2><p>根据播放列表的实际需求实现了显示页面，由于时间过于仓促没有认真适配播放列表的缩略图。<br>正打算自己花时间写一个类似于原声音乐播放器的播放列表的缩略图效果，我在 GitHub 上找到了一个类似的开源项目: <a href=\"https://github.com/zhengjinghua/StitchingImage\" target=\"_blank\" rel=\"noopener\"><br>StitchingImage</a><br><img src=\"http://images.stephenfang.xyz/mweb/15958648056682.jpg\" alt=\"-w301\"></p>\n<p>然而实现语言为 Objective-C，我正在尝试用 Swift 将其进行重写，之后会开源到 GitHub 上。</p>\n<p>详情页还是同样的味道，目前做的仍然十分粗糙，我会尝试对 UI 进行持续改进。<br><img src=\"http://images.stephenfang.xyz/mweb/15958650862897.jpg\" alt=\"-w301\"></p>\n<h2 id=\"搜索页面\"><a href=\"#搜索页面\" class=\"headerlink\" title=\"搜索页面\"></a>搜索页面</h2><p>点击任意一级页面导航栏的搜索按钮会激活搜索页面，使用框架的方法调用实现了简单的检索。<br><img src=\"http://images.stephenfang.xyz/mweb/15958640040336.jpg\" alt=\"-w301\"></p>\n<h2 id=\"正在播放页面\"><a href=\"#正在播放页面\" class=\"headerlink\" title=\"正在播放页面\"></a>正在播放页面</h2><p>类似于原生的播放页面，目前正在对整个页面进行重构，包括 UI 部分与代码部分。<br>目前主要通过 Timer 与 Observer 实现了简单的功能实现，但是为了达到优雅听歌的目标功能远不于此，我正在尝试接入<a href=\"https://github.com/ddddxxx/LyricsKit\" target=\"_blank\" rel=\"noopener\">LyricsKit</a> 使得页面具有显示歌词的功能，这里需要用到 ScrollView 与 PageControl的加持。<br><img src=\"http://images.stephenfang.xyz/mweb/15958655245499.jpg\" alt=\"-w301\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上为目前的进度总结，我会持续更新 App 的开发过程，包括代码总结与功能实现。</p>"},{"title":"Effective Objective-C 总结","date":"2021-07-12T03:34:32.000Z","copyright":true,"_content":"\n准备开始写 Objective-C 之前花了一些时间重新阅读这本经典的《Effective Objective-C》，在阅读的过程中对重点内容进行了一些摘录，在方便自己复习的同时将相关内容在博客分享出来供参考。\n\n<!--more-->\n\n## 第一节\n\n- Objective-C 采用了动态绑定的消息结构，在运行时检查对象的类型，运行期环境决定了接受消息后需要执行的代码。\n- Objective-C 对象所占内存分配在堆空间中，分配在堆空间中的内存必须直接管理。\n- 定义中不含*的变量分配在栈空间上，分配在栈的用于保存变量的内存会在栈帧弹出时自动清理。\n- 如果需要存储int、float、double、char等非对象类型推荐使用结构体。\n\n## 第二节\n\n- 在 .h 文件中使用@class 标识需要引入的类并且在 .m 文件中引入相关头文件，该种方式被称为向前声明，简单的说，将引入头文件的时机尽量向后可以减短编译的时间，并且能够解决互相引用问题。尽量不要引入头文件，降低类之间的耦合。\n- 有时无法使用向前声明，比如要声明某个类遵循一项协议。此时应尽量把“该类遵循某协议〞的这条声明移至“class-continuation 分类” 中。如果不行就把协议单独放在一个头文件中然后将其引人。\n\n## 第三节\n\n- 尽量使用字面量语法创建字符串、数值、数组、字典\n\n```objectivec\nNSNumber *intNumber = @1;\nNSNumber *floatNumber = @1.1f;\nNSNumber *doubleNumber = @1.123456;\nNSNumber *boolNumber = @YES;\nNSNumber *charNumber = @'a';\n\nint numberInt = 5;\nfloat numberFloat = 1.23f;\n\nNSArray *animals = @[@\"cat\", @\"dog\", @\"mouse\"];\nNSString *dog = @\"shiba\";\n\nNSDictionary *personData = @{@\"firstName\" : @\"Stephen\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t @\"lastName\" : @\"Fang\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t @\"gender\" : @\"male\"};\n```\n\n- NSArray 的 arrayWithObjects 方法依次处理各个参数直到发现nil，而如果使用字面量的方法在创建时就会抛出异常终止程序执行，需要确保创建的数组与字典中不含有nil\n- 尽量使用取下标的方式来访问数组或字典中的元素\n\n```objectivec\nNSString *dog = animals[1];\nNSString *lastName = personData[@\"lastName\"];\n```\n\n## 第四节\n\n- #define预处理指令声明全局变量尽量少用，编译器只会执行查找和替换操作，不会产生重复定义的警告信息\n- 尽量使用 static const 声明的方式来完成变量的声明，static表示该变量在定义此变量的编译单元中可见，而static const不会创建符号，只是将变量替换为常量\n\n```objectivec\nstatic const NSTimeInterval kAnimationDuration = 0.3;\n```\n\n- 编译器看到extern关键字得知全局符号表中包含该符号无需查看该定义就允许只用该常量，该类常量只可以定义一次，命名最好使用与之相关的类名作为前缀\n\n```objectivec\n// In the header file\nextern NSString *const EOCStringConstant;\n\n// In the implementation file \nNSString *const EOCStringConstant = @\"DEMO\";\n```\n\n## 第五节\n\n- 保证枚举由底层数据类型实现，不采用编译器所选类型\n- 凡是需要以按位或操作来组合的枚举都应使用NS_OPTIONS定义，若枚举不需要相互组合应使用NS_ENUM来定义\n\n```objectivec\ntypedef NS_ENUM(NSUInteger, STFFeedPageType) {\n    STFFeedPageTypeNone = 0,             // 未知\n    STFFeedPageTypeFollow = 1,           // 关注页\n    STFFeedPageTypeRecommend = 2,        // 推荐页\n    STFFeedPageTypeFeatured = 3,         // 精选页\n};\n\ntypedef NS_OPTIONS(NSUInteger, AgoraAudioSessionOperationRestriction) {\n    /** No restriction, the SDK has full control of the audio session operations. */\n    AgoraAudioSessionOperationRestrictionNone              = 0,\n    /** The SDK does not change the audio session category. */\n    AgoraAudioSessionOperationRestrictionSetCategory       = 1,\n    /** The SDK does not change any setting of the audio session (category, mode, categoryOptions). */\n    AgoraAudioSessionOperationRestrictionConfigureSession  = 1 << 1,\n    /** The SDK keeps the audio session active when leaving a channel. */\n    AgoraAudioSessionOperationRestrictionDeactivateSession = 1 << 2,\n    /** The SDK does not configure the audio session anymore. */\n    AgoraAudioSessionOperationRestrictionAll               = 1 << 7\n};\n```\n\n- 处理枚举类型的switch语句不要实现default分支\n\n## 第六节\n\n- 在iOS中一般不使用atomic，因为同步锁会带来较大的开销，且无法保证线程安全\n- 尽量使用@property语法定义对象封装的数据\n- 在设置属性对应的实例变量时需要遵从属性声明的语义\n- 针对CGFloat、NSInteger此类纯量类型采用assign声明即可\n- copy类型用于保护NSString*类型的封装性，在ARC下直接访问一个声明为copy的属性并不会直接拷贝而是保留新值释放旧值\n\n## 第七节\n\n- 在对象内部尽量直接访问实例变量\n    - 速度更快且生成的代码会直接访问对象实例变量的那块内存\n    - 不会调用“设置方法”\n    - 不会触发KVO，但需要确定是否会产生问题\n    - 通过给getter、setter设置断点可以进行监控和确定访问时机\n- 在写入实例变量时可以通过属性写入，读取实例变量时直接访问，可以作为一种折中方案\n- 在初始化方法及dealloc方法中，应该直接通过实例变量读取数据，即_\n- 懒加载方式中必须使用getter的方式访问属性，如果在没有用getter的情况下直接访问实例变量会导致得到是尚未设置好的变量\n\n```objectivec\n- (STFComponent*)component {\n\t\tif (!_component) {\n\t\t\t\t\t_component = [SFComponent new];\n\t\t\t}\n\t\t\treturn _component;\n\t\t}\n```\n\n## 第八节\n\n- == 操作符对比的是两个指针本身并非所指对象\n- NSString类实现了一个等同判断方法即isEqualToString，执行该方法的速度快于执行isEqual\n- 检测对象的等同性需要提供 isEqual 与 hash 方法，NSObject对于两个方法默认实现是仅当指针值完全相等才返回相等，需要针对具体的需求制定检测方案\n- 编写hash方法时需要使用计算速度快且哈希碰撞低的算法\n\n```objectivec\n- （BOOL）isEqual:(id)object {\n\t\tif (self == object) return YES; // 指向同一个对象必然相等\n\t\tif ([self class] != [object class]) return NO; //不属于同一个类不相等\n\n\t\t// 检测每一个属性是否相等\n\t\tSTFPerson *someone = (STFPerson*) object;\n\t\tif (![_firstName isEqualToString:someone.firstName])\n\t\t\treturn NO;\n\t\tif (![_lastName isEqualToString:someone.lastName])\n\t\t\treturn NO;\n\t\tif (![_age != someone.age])\n\t\t\treturn NO;\n\t\treturn YES;\n\t}\n\n - (NSUInteger)hash {\n\t\tNSUInteger firstNameHash = [_firstName hash]；\n\t\tNSUInteger lastNameHash = [_lastName hash]；\n\t\tNSUInteger ageHash = [_ageHash hash]；\n\t\treturn firstNameHash ^ lastNameHash ^ ageHash；\n\t}\n```\n\n- NSArray有等同性判定方法\"isEqualToArray:\"，而NSDictionary有等同性判定方法\"isEqualToDictionary:\"， NSArray检测方式为首先核对两个数组包含对象的个数是否相等，若相等在每个对应位置调用\"isEqual:\"方法\n- 在编写判定方法时应一并覆写\"isEqual:\"方法，如果接收该消息的对象与受测参数来自一个类就调用自己编写的判定方法，负责交由超类判定\n\n```objectivec\n-  (BOOL)isEqual:(id)object {\n\t\tif ([self class] == [object class]) \n\t\t\t\treturn [self isEqualToPerson:(STFPerson*)object];\n\t\t} else {\n\t\t\t\treturn [super isEqual: object];\n\t\t}\n```\n\n## 第九节\n\n- UIButton类使用者无需关系创建出来的按钮属于哪个子类也无需考虑按钮绘制方式等细节\n- 类族的使用需要遵循以下原则\n    - 子类应该继承自类族的抽象基类\n    - 子类应该定义自己的数据存储方式\n    - 子类应该覆写超类文档中需要覆写的方法\n\n## 第十节\n\n- 在其他做法不可行的条件下可以选用关联对象，因为这种做法同样会引入难以查找的bug（不建议使用）\n\n## 第十一节\n\n- 在编译期就能决定运行时所需要调用的函数为静态绑定，而所需要调用的函数直到运行期才能确定为动态绑定\n- runtime决定了对象收到消息后调用哪个方法，甚至在程序运行时可以改变。发送给对象的所有消息都由动态信息派发系统处理\n- objc_msgSend函数根据receive和selector的类型调用适当的方法，通过查找每个类中的“表格”查找需要执行的方法并跳转至相应的实现\n- 尾调用优化在函数的最后一项是调用另一个函数时生效，编译器生成跳转至另一个函数所需的指令码\n\n## 第十二节\n\n- 消息转发分为两个阶段\n    - 第一阶段：动态方法解析\n    - 第二阶段：消息转发机制\n  \n    {% asset_img Untitled.png %}\n\n- receiver在每一步都有机会处理消息且步骤越往后处理消息的代价越大\n- 如果对象没有办法响应某个selector则进入消息转发流程,runtime的动态方法解析可以在需要某个方法时将其加入类中，对象可以将无法解析的selector转交给其他对象处理。这一步结束后若仍然无法处理selector则启动消息转发机制\n\n## 第十三节\n\n- 在runtime中可以向类中新增或替换selector对应的方法实现，但一般只用于调试\n- method swizzling，即使用另一份实现替换原有的方法实现，可以用于向原有的实现中添加新功能\n\n## 第十四节\n\n- 每个Objective-C对象实例都有指向Class对象的指针，每个对象结构体的首个成员是Class类的变量，该变量定义了对象所属的类，通常称为\"is a\"指针\n- isMemberOfClass 判断对象是否为某个特定类的实例，isKindOfClass 判断对象是否是某类或派生类的实例\n- 动态类型特性可以用于从 collection 中获取对象（类型信息查询方法）\n- 假设名为SomeClass的子类继承自NSObject可以得到以下继承体系\n\n{% asset_img Untitled1.png %}\n\n## 第十五节\n\n- 类名、分类名都应该加上相应的前缀，如果使用三方库编写自己的代码并分发尤其需要注意重复符号问题\n\n{% asset_img Untitled2.png %}\n\n## 第十六节\n\n- 在类中实现一个designated initializer，尽量在文档中指明初始化需要调用该方法\n- 若designated initializer不同于超类则需覆写超类对应方法\n- 如果超类的初始化方法不适用于子类应覆写超类方法并抛出异常\n\n## 第十七节\n\n- 实现description方法能够返回一个有意义的字符串来描述实例，需要打印出类的名字和指针地址因为有时候会用到\n- 使用NSDictionary来编写description方法使代码更容易维护\n\n{% asset_img Untitled3.png %}\n\n- 在调试时打印更为详尽的对象描述信息应实现debugDescription方法\n\n{% asset_img Untitled4.png %}\n\n## 第十八节\n\n- 尽量创建不可变对象，把对外公开的属性设置为只读且在必要时对外公布属性\n- 某属性仅用于对象内部修改应将其从readonly改为readwrite属性\n- 可变的collection不应作为属性公开，而应提供相关方法修改可变的collection\n\n## 第十九节\n\n如果从其他框架中继承子类务必遵循命名惯例，如从UIView中继承自定义子类则类名末尾词为View，若创建自定义委托协议末尾应跟上Delegate一词。\n\n{% asset_img Untitled5.png %}\n\n## 第二十节\n\n- 适当给私有方法加上前缀可以很容易将其与公共方法进行区分\n- 不应使用一个下划线做私有方法的前缀，如 _resetViewController 方法已经被苹果实现\n\n## 第二十一节\n\n- Objective-C对于异常采取的态度为：只有在极为罕见的情况下才抛出异常，并在异常抛出后无需考虑恢复问题，应用程序此时应该退出。异常应该运用于极其严重的问题\n\n{% asset_img Untitled6.png %}\n\n```objectivec\n- (BOOL)doSomething:(NSError**) error\n\n- (BOOL)doSomething:(NSError**) error {\n\t// do something that may cause an error\n\n\tif ( /* there was an error */ ) {\n\t\t\tif (error) {\n\t\t\t\t\t*error = [NSErrorerrorwithDomain:domain code:code userInfo:userInfo];\n\t\t\t}\n\t\t\treturn NO;\n\t\t} else {\n\t\treturn YES;\n\t\t}\n}\n\nNSError *error = nil;\nBOOL ret = [object doSomething: &error];\nif (ret) {\n     // handle error \n}\n```\n\n{% asset_img Untitled7.png %}\n\n传递给方法的是个指针，指针本身指向另一个指向NSError对象的指针，或认为其为一个直接指向NSError对象的指针。在 ARC 中，指针所指向的对象会在方法执行完毕后自动释放。\n\n## 第二十二节\n\n- 使自己的类支持拷贝操作需要实现NSCopying协议，该协议只有一个方法且不必担心zone参数。覆写copy方法真正需要实现的是copyWithZone方法。\n\n```objectivec\n- (id)copyWithZone:(NSZone*)zone\n\n- (id)copyWithZone:(NSZone*)zone {\n\t\tSTFPerson *copy = [[self class] allocWithZone:zone]initWithFirstName:_firstName andLastName:_lastName];\n\t\treturn copy;\n}\n```\n\n- 在可变对象上调用copy会返回一个不可变类的实例，可能会把NSMutableArray对象当作NSArray返回，为了安全起见使用copy和mutableCopy这两个方法复制对象\n- 深拷贝与浅拷贝\n    - 深拷贝：拷贝对象自身时一并拷贝其底层数据，需要新增一个专门执行深拷贝的方法\n    - 浅拷贝：只拷贝容器对象本身不拷贝其中数据；Foundation框架所有collection类执行拷贝的默认情况；实现copyWithZone方法\n    - 图解：\n\n   {% asset_img Untitled8.png %}\n\n## 第二十三节\n\n   {% asset_img Untitled9.png %}\n\n   {% asset_img Untitled10.png %}\n\n   {% asset_img Untitled11.png %}\n\n   {% asset_img Untitled12.png %}\n\n   {% asset_img Untitled13.png %}\n\n   {% asset_img Untitled14.png %}\n\n存放委托对象的属性需要为weak（在对象销毁时自动清空）或unsafe_unretained（不需要自动清空）。\n\n   {% asset_img Untitled15.png %}\n\n   {% asset_img Untitled16.png %}\n\n   {% asset_img Untitled17.png %}\n\n- 某个对象从另一个对象获取数据可以使用委托模式，亦成为数据源模式，数据的流动如上图所示\n- 如果有必要可以实现有段位的结构体将委托对象是否能响应相关协议的信息缓存至其中\n\n## 第二十四条\n\n- 通过分类机制将代码划分为易于管理的小块\n\n   {% asset_img Untitled18.png %}\n\n   {% asset_img Untitled19.png %}\n\n   {% asset_img Untitled20.png %}\n\n   {% asset_img Untitled21.png %}\n\n- 可以创建名为Private的分类并将私有方法放在里面，这个分类的方法只在类和框架内部使用无需对外公布\n\n## 第二十五条\n\n- 向第三方类中添加分类时给分类名与方法名加上前缀\n\n   {% asset_img Untitled22.png %}\n\n## 第二十六条\n\n- 在实现分类时所有属性都应该定义在主接口内，类所封装的所有数据都应该定义在主接口内\n\n   {% asset_img Untitled23.png %}\n\n## 第二十七条\n\n- class-continuation 分类中可以定义方法和实例变量，如下方式中_anotherInstanceVariable 是隐藏的状态\n\n    ```objectivec\n    @interface STFPerson() {\n    \t\tNSString *_anInstanceVariable;\n    }\n    // Methods declaration\n    @end\n\n    @implementation STFPerson {\n    \tint _anotherInstanceVariable;\n    }\n    // Methods implementation \n    @end\n    ```\n\n   {% asset_img Untitled24.png %}\n\n- WebKit、CoreAnimation 底层大部分代码用C++编写，对外展示的为Objective-C接口\n\n   {% asset_img Untitled25.png %}\n\n- 上图方式可以随意调用setFirstName与setLastName方法与点语法设置属性，同时外界无法修改对象，完成了类型的拓展\n\n   {% asset_img Untitled26.png %}\n\n    - 不需要在公共接口中声明类遵从了私有协议，而应该改到 class-continuation 分类内进行声明\n\n## 第二十八条\n\n- 协议可以在某种程度上提供匿名类型，具体的对象类型淡化成为遵从某个协议的id类型，协议离规定对象应该实现的方法。下图中与数据库连接相关的类名称就无法泄漏\n\n    {% asset_img Untitled27.png %}\n\n- 使用匿名对象实现类型名称的隐藏，需要注意的是对象需要能够响应定义在协议中的方法\n- 下图中其中sectionInfo为匿名对象，把section数组中返回的内部状态对象视为遵从NSFetchedResultsSectionInfo的匿名对象，隐藏了相关实现细节。\n\n    {% asset_img Untitled28.png %}\n\n## 第二十九条\n\n- 对象创建完成后引用计数至少为1，如果需要保留该对象需要调用retain方法，如果不再需要该对象则调用release、autorelease方法，当引用计数归零时对象被回收\n\n    {% asset_img Untitled29.png %}\n\n- 为了避免使用无效对象一般在完成调用release之后清空指针，保证不会出现指向无效对象的指针\n\n    ```objectivec\n    NSNumber *number = [[NSNumber alloc]initWithInt: 1234];\n    [array addObject: number];\n    [number release];\n    number = nil;\n    ```\n\n## 第三十条\n\n- ARC会自动执行retain、release、autorelease等操作，不能直接对这些方法（还包括dealloc）进行调用\n- ARC在调用这些方法并不通过Objective-C消息派发机制，而是直接调用底层C语言版本，能够带来更好的性能\n- 若方法名以以下的几个四个词语开头则表示返回的对象归调用者所有，反之返回的对象会自动释放\n    - copy\n    - mutableCopy\n    - new\n    - alloc\n\n## 第三十一条\n\n   {% asset_img Untitled30.png %}\n\n- 如果对象持有文件描述符等系统资源，应该专门写一个方法释放此类资源，用完使用close方法\n- 执行异步任务的方法和只能在正常状态下执行的方法不应在dealloc中调用\n\n## 第三十二条\n\n- ARC不生成安全处理异常所需的清理代码，开启编译器标志后可以生成这种代码但是会导致应用程序变大，且会降低运行效率\n\n   {% asset_img Untitled31.png %}\n\n## 第三十三条\n\n- 当指向EOCClassA的实例引用移除后unsafe_unretained属性仍然指向已经回收的实例，而weak属性指向nil\n\n    {% asset_img Untitled32.png %}\n\n## 第三十四条\n\n系统会自动创建一些线程，如主线程或GCD机制中的线程都有自动释放池，这些线程都有autoreleasepool，每次执行event loop就会将其清空\n\n   {% asset_img Untitled33.png %}\n\n   {% asset_img Untitled34.png %}\n\n## 第三十五条\n\n- 系统在回收对象时可以将其转化为僵尸对象，通过环境变量NSZombieEnabled可以开启该功能，或在Xcode中开启\n\n{% asset_img Untitled35.png %}\n\n- 系统修改对象的isa指针指向特殊的僵尸类可以时该对象成为僵尸对鲜花，僵尸类能够响应所有的selector，在打印一条包含消息内容及接受者的消息后终止应用程序\n\n## 第三十六条\n\n在 ARC 下调用查询对象当前引用计数的方法会触发崩溃\n\n    ```objectivec\n    - (NSUInteger)retainCount\n    ```\n\n事实上该方法不应该调用，方法返回的retainCount是某个给定时间点上的数值，并未考虑系统会稍后清空自动释放池，无法反应对象生命期的全貌。\n\n## 第三十七条\n\n- Block与定义它的函数共享同一个范围内的信息，块自有其相关类型，可以将块赋值给变量并使用它\n\n    ```objectivec\n    void (^someBlock) () = ^ {\n    \t\t// Block implementation\n    };\n\n    int other = 10;\n    int (^addBlock) (int a, int b) = ^ (int a, int b) {\n    \t\treturn other + a + b;\n    };\n    int sum = addBlock(1, 2);\n    ```\n\n    - 需要在Block内修改的变量需要加上 _block 修饰符，如果将块定义在Objective-C类的实例方法中，除了可以访问类的所有的实例变量外还可以使用self变量且无需添加_block。\n    - 定义Block的时候分配的内存区域在栈上，即块只在定义的范围内有效，可以创建不会捕捉任何状态的全局块\n\n{% asset_img Untitled36.png %}\n\n{% asset_img Untitled37.png %}\n\n## 第三十八条\n\n{% asset_img Untitled38.png %}\n\n- 以下展示了SDWebImage中Block的写法\n\n    ```objectivec\n    typedef void(^SDWebImageDownloaderProgressBlock)(NSUInteger receivedSize, long long expectedSize);\n    typedef void(^SDWebImageDownloaderCompletedBlock)(UIImage *image, NSData *data, NSError *error, BOOL finished);\n\n    ****- (void)setImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholder options:(SDWebImageOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageCompletedBlock)completedBlock;\n    - (id<SDWebImageOperation>)downloadImageWithURL:(NSURL *)url\n                                            options:(SDWebImageDownloaderOptions)options\n                                           progress:(SDWebImageDownloaderProgressBlock)progressBlock\n                                          completed:(SDWebImageDownloaderCompletedBlock)completedBlock;\n\n    - (id<SDWebImageOperation>)downloadImageWithURL:(NSURL *)url\n                                    timeOutInterval:(NSTimeInterval)timeOutInterval\n                                            options:(SDWebImageDownloaderOptions)options\n                                           progress:(SDWebImageDownloaderProgressBlock)progressBlock\n                                          completed:(SDWebImageDownloaderCompletedBlock)completedBlock;\n    ```\n\n## 第三十九条\n\n- 简洁程度上Delegate与Block的对比\n\n   {% asset_img Untitled39.png %}\n\n   {% asset_img Untitled40.png %}\n\n- 处理多个请求时Delegate与Block的对比\n\n   {% asset_img Untitled41.png %}\n\n   {% asset_img Untitled42.png %}\n\n   {% asset_img Untitled43.png %}\n\n   {% asset_img Untitled44.png %}\n\n- 在处理请求时采用两个独立的处理Block（1/2）\n\n   {% asset_img Untitled45.png %}\n\n   {% asset_img Untitled46.png %}\n\n   {% asset_img Untitled47.png %}\n\n- 在处理请求时采用同一个处理Block，令Block更为灵活但更为冗长\n\n   {% asset_img Untitled48.png %}\n\n   {% asset_img Untitled49.png %}\n\n## 第四十条\n\n大部分网络通信库写法\n\n   {% asset_img Untitled50.png %}\n\n为了使得在下载完成后通过以下方法执行调用者指定的Block，需要将completion handler保存至实例变量，一旦运行完completion handler之后没有必要对其进行保留，从而避免出现retain cycle\n\n   {% asset_img Untitled51.png %}\n\n   {% asset_img Untitled52.png %}\n\n## 第四十一条\n\n- 串行队列，将读取操作与写入操作安排到同个队列中保证数据同步，可以将设置方法由同步派发改为异步执派发\n\n   {% asset_img Untitled53.png %}\n\n   {% asset_img Untitled54.png %}\n\n    - 并发队列，读取与写入操作可以随时执行\n\n   {% asset_img Untitled55.png %}\n\n    创建栅栏使得barrier块单独执行不与其他Block并行，对并发队列有意义，因为串行Block按顺序逐个执行\n\n   {% asset_img Untitled56.png %}\n\n   {% asset_img Untitled57.png %}\n\n   {% asset_img Untitled58.png %}\n\n## 第四十二条\n\n- performSelector接受的参数类型为id，限定了传入参数必须是对象，不能是整数或者浮点数，并且最多只能接受两个参数\n\n   {% asset_img Untitled59.png %}\n\n- 延后执行某项任务，优先使用GCD的方式\n\n   {% asset_img Untitled60.png %}\n\n- 把任务放到主线程上执行，把任务封装至Block中用GCD相关方法更为合适\n\n   {% asset_img Untitled61.png %}\n\n- performSelector在内存管理方面存在缺失，无法确定将执行的Selector具体是什么\n\n## 第四十三条\n\n- GCD是纯C的API，操作队列是Objective-C的对象\n- Block是轻量级的书籍结构而Operation是重量级的Objective-C对象\n- 在执行后台任务时GCD并不一定是最佳方式\n- 使用NSOperation与NSOperationQueue有以下好处，能够实现纯GCD具备的绝大部分功能\n\n   {% asset_img Untitled62.png %}\n\n   {% asset_img Untitled63.png %}\n\n   {% asset_img Untitled64.png %}\n\n- NSNotificationCenter 的 addObserverForName: 方法接受的参数是块而不是Selector\n\n   {% asset_img Untitled65.png %}\n\n- 确定哪一种方法的最好方式是测试性能\n\n    ## 第四十四条\n\n- dispatch group 能够将任务分组，调用者可以等待这组任务执行完毕同时也可以在提供回调函数之后继续执行\n- 如下函数是dispatch_async的变体\n\n{% asset_img Untitled66.png %}\n\n- 如下函数用于等待 dispatch group 执行完毕，timeout 参数表示阻塞时间，若执行时间短于timeout返回0\n\n{% asset_img Untitled67.png %}\n\n- 如下函数中可以传入在特定线程上执行的Block\n\n{% asset_img Untitled68.png %}\n\n- 令数组每个对象都执行某个任务，并且等待每个任务都执行完毕可以使用如下GCD特性\n\n{% asset_img Untitled69.png %}\n\n- 若当前线程不阻塞可以使用notify函数取代wait\n\n{% asset_img Untitled70.png %}\n\n- 区分任务的优先级放置于不同的线程执行，同时将所有任务归于一个dispatch group，并且在执行完毕后获得通知（并发队列）\n\n{% asset_img Untitled71.png %}\n\n- 将任务提交到串行队列中并用dispatch group 跟踪执行情况\n\n{% asset_img Untitled72.png %}\n\n{% asset_img Untitled73.png %}\n\n## 第四十五条\n\n- 常用的一种共享单例的方法\n\n   {% asset_img Untitled74.png %}\n\n- 使用GCD实现共享单例的方法\n\n   {% asset_img Untitled75.png %}\n\n- 使用 dispatch_once 能够简化代码并且彻底保证线程安全开发者无需关心加锁或同步，所有问题都由GCD在底层进行处理，static 作用域能够保证编译器在每次执行该方法时复用该变量而不是重复创建\n\n## 第四十六条\n\n- dispatch_get_current_queue 函数尽量不要使用\n\n## 第四十七条\n\n- 框架指一系列代码被封装为动态库，并且在其中放入描述接口的头文件，iOS平台的系统框架仍然采用了动态库\n- iOS应用程序不允许在其中包含动态库于是就出现了静态库\n- 关于静态库与动态库的了解可以参考 [细说iOS静态库和动态库](https://juejin.cn/post/6844904031937101838)\n\n- Cocoa 本身并不是框架而是集成了一批创建应用程序时需要用到的框架\n- Objective-C编程的一个重要特点是经常需要用到底层的C语言级API\n- CoreAnimation 使用Objective-C进行编写，而 CoreGraphics 框架采用C语言进行编写，两者均为 UI 框架之下的一等框架\n\n## 第四十八条\n\n- 遍历方式\n    - for循环\n\n   {% asset_img Untitled76.png %}\n\n    字典与 set 均无顺序，无法根据下标访问数值。于是需要获取字典内所有键或 set 内所有对象，从而产生空间上的额外开销。然而执行反向遍历时 for 循环会更为方便。\n\n    - NSEnumerator\n\n    ```objectivec\n    // Dictionary\n    NSDictionary *dict = /* ... */;\n    NSEnumerator *enumerator = [dict keyEnumerator];\n    id key;\n    while ((key = [enumerator nextObject]) != nil) {\n    \tid value = dict[key];\n    \t// do something here\n    }\n\n    // Set\n    NSSet *set = /* ... */;\n    NSEnumerator *enumerator = [set objectEnumerator];\n    id object;\n    while ((object = [enumerator nextObject]) != nil) {\n    \t// do something here\n    }\n\n    // Array\n    NSArray *array = /* ... */;\n    NSEnumerator *enumerator = [array reverseObjectEnumerator];\n    id object;\n    while ((object = [enumerator nextObject]) != nil) {\n    \t// do something here\n    }\n    ```\n\n    对于所有的collection都可以采用这套语法，在读法上更容易被理解\n\n    - for in 快速遍历\n\n    ```objectivec\n    // Dictionary\n    NSDictionary *dict = /* ... */;\n    for (id key in dict) {\n    \tid value = dict[key];\n    \t// do something here\n    }\n\n    // Set\n    NSSet *set = /* ... */;\n    for (id object in set) {\n    \t// do something here\n    }\n\n    // Array\n    NSArray *array = /* ... */;\n    for (id object in array) {\n    \t// do something here\n    }\n    for (id object in [array reverseObjectEnumerator]) {\n    \t// do something here\n    }\n    ```\n\n    某个支持快速遍历的类的对象遵从 NSFastEnumeration 协议可以实现对象的迭代，而NSEnumerator 也实现了该协议，该遍历方法无法获取遍历操作针对的下标。\n\n    - 基于Block的遍历\n\n    ```objectivec\n    // Dictionary\n    NSDictionary *dict = /* ... */;\n    [array enumerateKeysAndObjectsUsingBlock:\n    \t^(id key, id object, BOOL *stop) {\n    \t\t// do something here\n    \t\t\tif (shouldStopHere) {\n    \t\t\t\t*stop = YES;\n    \t\t}\n    }];\n\n    // Set\n    NSSet *set = /* ... */;\n    [array enumerateObjectsUsingBlock:\n    \t^(id object, BOOL *stop) {\n    \t\t// do something here\n    \t\t\tif (shouldStopHere) {\n    \t\t\t\t*stop = YES;\n    \t\t}\n    }];\n\n    // Array\n    NSArray *array = /* ... */;\n    [array enumerateObjectsUsingBlock:\n    \t^(id object, NSUInteger idx, BOOL *stop) {\n    \t\t// do something here\n    \t\t\tif (shouldStopHere) {\n    \t\t\t\t*stop = YES;\n    \t\t}\n    }];\n    ```\n\n    使得遍历能够从Block中获取信息，并且可以在遍历数组获取数组的下标。\n\n    NSEnumerationOptions 类型为enum，如果开启了NSEnumerationConcurrent 底层会使用GCD处理出发执行事宜，采用其他方法很难实现。\n\n## 第四十九条\n\n- 使用桥接技术可以实现定义在Foundation框架内的Objective-C类与CoreFoundation 框架中的 C 数据结构的相互转换\n\n    ```objectivec\n    NSArray *anNSArray = @[@1, @2, @3, @4, @5];\n    CFArrayRef *aCGArray = (__bridge CFArrayRef)anNSArray;\n    NSLog(@\"size of array = %li\", CFArrayGetCount(aCFArray)); \n\n    gradientLayer.colors = @[(__bridge id)[UIColor ne_colorWithHexString:@\"000000\" alpha:0.95].CGColor,\n                                                (__bridge id)[UIColor ne_colorWithHexString:@\"000000\" alpha:0.95].CGColor,\n                                                (__bridge id)[UIColor ne_colorWithHexString:@\"000000\" alpha:0.72].CGColor,\n                                                (__bridge id)[UIColor ne_colorWithHexString:@\"000000\" alpha:0.45].CGColor,\n                                                (__bridge id)[UIColor ne_colorWithHexString:@\"000000\" alpha:0.28].CGColor,\n                                                ]; \n    ```\n\n- __bridge 含义为ARC具备该对象的所有权，__bridge_retained表示ARC交出该对象的所有权， 通过__bridge告诉ARC如何处理转换涉及的Objective-C对象\n- Foundation 框架中的 Objective-C 类具备的某些功能是 CoreFoundation 框架中的 C语言数据结构不具备的\n\n## 第五十条\n\n- NSCache 在系统资源耗尽时能够自动删减缓存，采用LRU策略\n- NSCache并不会直接拷贝键，而是保留键\n- NSCache是线程安全的，多个线程可以同时访问NSCache\n- NSCache可以设置针对对象个数以及总成本的上限\n\n缓存的一般用法\n\n   {% asset_img Untitled77.png %}\n\n   {% asset_img Untitled78.png %}\n\n加入 NSPurgeable 的缓存用法\n\n   {% asset_img Untitled79.png %}\n\n   {% asset_img Untitled80.png %}\n\n- 重复计算会带来性能开销的数据值得被放入缓存，从而提高应用程序的响应速度\n- NSPurgeableData 与 NSCache 一起使用能够实现自动清除数据的功能\n\n## 第五十一条\n\n- load 方法并不像普通的方法那样，她不遵从继承规则，如果某个类本身不实现load方法那么无论其各级超类是否实现此方法系统都不会调用\n- load 与 initialize 方法务必精简实现，因为会产生阻塞从而使得应用程序无响应\n- initialize 方法在程序首次用该类前调用一次，并且使用runtime进行调用，只应该用来设置内部数据而不应该调用其他方法\n- 如果某个类本身不实现 initialize 方法然而超类完成了就会调用超类的实现方法，如下图中初始化子类后由于该类未覆写该方法于是需要执行父类的实现代码，于是得到了通常的子类实现方法\n\n{% asset_img Untitled81.png %}\n\n{% asset_img Untitled82.png %}\n\n{% asset_img Untitled83.png %}\n\n## 第五十二条\n\n- NSTimer 对象会保留目标直到计时器失效，需要调用invalidate方法令其失效\n\n   {% asset_img Untitled84.png %}\n\n   {% asset_img Untitled85.png %}\n\n- 反复执行的计时器容易引入retain cycle，可以使用 Block 的方式打破，需要注意的是必须创建分类来加入相关实现代码","source":"_posts/EffectiveObjcTips.md","raw":"---\ntitle: Effective Objective-C 总结\ndate: 21-07-14 14:21:22\ncategories: \n- tech\ntags: \n- iOS\n- Objective-C\n- Xcode\ncopyright: true\n---\n\n准备开始写 Objective-C 之前花了一些时间重新阅读这本经典的《Effective Objective-C》，在阅读的过程中对重点内容进行了一些摘录，在方便自己复习的同时将相关内容在博客分享出来供参考。\n\n<!--more-->\n\n## 第一节\n\n- Objective-C 采用了动态绑定的消息结构，在运行时检查对象的类型，运行期环境决定了接受消息后需要执行的代码。\n- Objective-C 对象所占内存分配在堆空间中，分配在堆空间中的内存必须直接管理。\n- 定义中不含*的变量分配在栈空间上，分配在栈的用于保存变量的内存会在栈帧弹出时自动清理。\n- 如果需要存储int、float、double、char等非对象类型推荐使用结构体。\n\n## 第二节\n\n- 在 .h 文件中使用@class 标识需要引入的类并且在 .m 文件中引入相关头文件，该种方式被称为向前声明，简单的说，将引入头文件的时机尽量向后可以减短编译的时间，并且能够解决互相引用问题。尽量不要引入头文件，降低类之间的耦合。\n- 有时无法使用向前声明，比如要声明某个类遵循一项协议。此时应尽量把“该类遵循某协议〞的这条声明移至“class-continuation 分类” 中。如果不行就把协议单独放在一个头文件中然后将其引人。\n\n## 第三节\n\n- 尽量使用字面量语法创建字符串、数值、数组、字典\n\n```objectivec\nNSNumber *intNumber = @1;\nNSNumber *floatNumber = @1.1f;\nNSNumber *doubleNumber = @1.123456;\nNSNumber *boolNumber = @YES;\nNSNumber *charNumber = @'a';\n\nint numberInt = 5;\nfloat numberFloat = 1.23f;\n\nNSArray *animals = @[@\"cat\", @\"dog\", @\"mouse\"];\nNSString *dog = @\"shiba\";\n\nNSDictionary *personData = @{@\"firstName\" : @\"Stephen\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t @\"lastName\" : @\"Fang\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t @\"gender\" : @\"male\"};\n```\n\n- NSArray 的 arrayWithObjects 方法依次处理各个参数直到发现nil，而如果使用字面量的方法在创建时就会抛出异常终止程序执行，需要确保创建的数组与字典中不含有nil\n- 尽量使用取下标的方式来访问数组或字典中的元素\n\n```objectivec\nNSString *dog = animals[1];\nNSString *lastName = personData[@\"lastName\"];\n```\n\n## 第四节\n\n- #define预处理指令声明全局变量尽量少用，编译器只会执行查找和替换操作，不会产生重复定义的警告信息\n- 尽量使用 static const 声明的方式来完成变量的声明，static表示该变量在定义此变量的编译单元中可见，而static const不会创建符号，只是将变量替换为常量\n\n```objectivec\nstatic const NSTimeInterval kAnimationDuration = 0.3;\n```\n\n- 编译器看到extern关键字得知全局符号表中包含该符号无需查看该定义就允许只用该常量，该类常量只可以定义一次，命名最好使用与之相关的类名作为前缀\n\n```objectivec\n// In the header file\nextern NSString *const EOCStringConstant;\n\n// In the implementation file \nNSString *const EOCStringConstant = @\"DEMO\";\n```\n\n## 第五节\n\n- 保证枚举由底层数据类型实现，不采用编译器所选类型\n- 凡是需要以按位或操作来组合的枚举都应使用NS_OPTIONS定义，若枚举不需要相互组合应使用NS_ENUM来定义\n\n```objectivec\ntypedef NS_ENUM(NSUInteger, STFFeedPageType) {\n    STFFeedPageTypeNone = 0,             // 未知\n    STFFeedPageTypeFollow = 1,           // 关注页\n    STFFeedPageTypeRecommend = 2,        // 推荐页\n    STFFeedPageTypeFeatured = 3,         // 精选页\n};\n\ntypedef NS_OPTIONS(NSUInteger, AgoraAudioSessionOperationRestriction) {\n    /** No restriction, the SDK has full control of the audio session operations. */\n    AgoraAudioSessionOperationRestrictionNone              = 0,\n    /** The SDK does not change the audio session category. */\n    AgoraAudioSessionOperationRestrictionSetCategory       = 1,\n    /** The SDK does not change any setting of the audio session (category, mode, categoryOptions). */\n    AgoraAudioSessionOperationRestrictionConfigureSession  = 1 << 1,\n    /** The SDK keeps the audio session active when leaving a channel. */\n    AgoraAudioSessionOperationRestrictionDeactivateSession = 1 << 2,\n    /** The SDK does not configure the audio session anymore. */\n    AgoraAudioSessionOperationRestrictionAll               = 1 << 7\n};\n```\n\n- 处理枚举类型的switch语句不要实现default分支\n\n## 第六节\n\n- 在iOS中一般不使用atomic，因为同步锁会带来较大的开销，且无法保证线程安全\n- 尽量使用@property语法定义对象封装的数据\n- 在设置属性对应的实例变量时需要遵从属性声明的语义\n- 针对CGFloat、NSInteger此类纯量类型采用assign声明即可\n- copy类型用于保护NSString*类型的封装性，在ARC下直接访问一个声明为copy的属性并不会直接拷贝而是保留新值释放旧值\n\n## 第七节\n\n- 在对象内部尽量直接访问实例变量\n    - 速度更快且生成的代码会直接访问对象实例变量的那块内存\n    - 不会调用“设置方法”\n    - 不会触发KVO，但需要确定是否会产生问题\n    - 通过给getter、setter设置断点可以进行监控和确定访问时机\n- 在写入实例变量时可以通过属性写入，读取实例变量时直接访问，可以作为一种折中方案\n- 在初始化方法及dealloc方法中，应该直接通过实例变量读取数据，即_\n- 懒加载方式中必须使用getter的方式访问属性，如果在没有用getter的情况下直接访问实例变量会导致得到是尚未设置好的变量\n\n```objectivec\n- (STFComponent*)component {\n\t\tif (!_component) {\n\t\t\t\t\t_component = [SFComponent new];\n\t\t\t}\n\t\t\treturn _component;\n\t\t}\n```\n\n## 第八节\n\n- == 操作符对比的是两个指针本身并非所指对象\n- NSString类实现了一个等同判断方法即isEqualToString，执行该方法的速度快于执行isEqual\n- 检测对象的等同性需要提供 isEqual 与 hash 方法，NSObject对于两个方法默认实现是仅当指针值完全相等才返回相等，需要针对具体的需求制定检测方案\n- 编写hash方法时需要使用计算速度快且哈希碰撞低的算法\n\n```objectivec\n- （BOOL）isEqual:(id)object {\n\t\tif (self == object) return YES; // 指向同一个对象必然相等\n\t\tif ([self class] != [object class]) return NO; //不属于同一个类不相等\n\n\t\t// 检测每一个属性是否相等\n\t\tSTFPerson *someone = (STFPerson*) object;\n\t\tif (![_firstName isEqualToString:someone.firstName])\n\t\t\treturn NO;\n\t\tif (![_lastName isEqualToString:someone.lastName])\n\t\t\treturn NO;\n\t\tif (![_age != someone.age])\n\t\t\treturn NO;\n\t\treturn YES;\n\t}\n\n - (NSUInteger)hash {\n\t\tNSUInteger firstNameHash = [_firstName hash]；\n\t\tNSUInteger lastNameHash = [_lastName hash]；\n\t\tNSUInteger ageHash = [_ageHash hash]；\n\t\treturn firstNameHash ^ lastNameHash ^ ageHash；\n\t}\n```\n\n- NSArray有等同性判定方法\"isEqualToArray:\"，而NSDictionary有等同性判定方法\"isEqualToDictionary:\"， NSArray检测方式为首先核对两个数组包含对象的个数是否相等，若相等在每个对应位置调用\"isEqual:\"方法\n- 在编写判定方法时应一并覆写\"isEqual:\"方法，如果接收该消息的对象与受测参数来自一个类就调用自己编写的判定方法，负责交由超类判定\n\n```objectivec\n-  (BOOL)isEqual:(id)object {\n\t\tif ([self class] == [object class]) \n\t\t\t\treturn [self isEqualToPerson:(STFPerson*)object];\n\t\t} else {\n\t\t\t\treturn [super isEqual: object];\n\t\t}\n```\n\n## 第九节\n\n- UIButton类使用者无需关系创建出来的按钮属于哪个子类也无需考虑按钮绘制方式等细节\n- 类族的使用需要遵循以下原则\n    - 子类应该继承自类族的抽象基类\n    - 子类应该定义自己的数据存储方式\n    - 子类应该覆写超类文档中需要覆写的方法\n\n## 第十节\n\n- 在其他做法不可行的条件下可以选用关联对象，因为这种做法同样会引入难以查找的bug（不建议使用）\n\n## 第十一节\n\n- 在编译期就能决定运行时所需要调用的函数为静态绑定，而所需要调用的函数直到运行期才能确定为动态绑定\n- runtime决定了对象收到消息后调用哪个方法，甚至在程序运行时可以改变。发送给对象的所有消息都由动态信息派发系统处理\n- objc_msgSend函数根据receive和selector的类型调用适当的方法，通过查找每个类中的“表格”查找需要执行的方法并跳转至相应的实现\n- 尾调用优化在函数的最后一项是调用另一个函数时生效，编译器生成跳转至另一个函数所需的指令码\n\n## 第十二节\n\n- 消息转发分为两个阶段\n    - 第一阶段：动态方法解析\n    - 第二阶段：消息转发机制\n  \n    {% asset_img Untitled.png %}\n\n- receiver在每一步都有机会处理消息且步骤越往后处理消息的代价越大\n- 如果对象没有办法响应某个selector则进入消息转发流程,runtime的动态方法解析可以在需要某个方法时将其加入类中，对象可以将无法解析的selector转交给其他对象处理。这一步结束后若仍然无法处理selector则启动消息转发机制\n\n## 第十三节\n\n- 在runtime中可以向类中新增或替换selector对应的方法实现，但一般只用于调试\n- method swizzling，即使用另一份实现替换原有的方法实现，可以用于向原有的实现中添加新功能\n\n## 第十四节\n\n- 每个Objective-C对象实例都有指向Class对象的指针，每个对象结构体的首个成员是Class类的变量，该变量定义了对象所属的类，通常称为\"is a\"指针\n- isMemberOfClass 判断对象是否为某个特定类的实例，isKindOfClass 判断对象是否是某类或派生类的实例\n- 动态类型特性可以用于从 collection 中获取对象（类型信息查询方法）\n- 假设名为SomeClass的子类继承自NSObject可以得到以下继承体系\n\n{% asset_img Untitled1.png %}\n\n## 第十五节\n\n- 类名、分类名都应该加上相应的前缀，如果使用三方库编写自己的代码并分发尤其需要注意重复符号问题\n\n{% asset_img Untitled2.png %}\n\n## 第十六节\n\n- 在类中实现一个designated initializer，尽量在文档中指明初始化需要调用该方法\n- 若designated initializer不同于超类则需覆写超类对应方法\n- 如果超类的初始化方法不适用于子类应覆写超类方法并抛出异常\n\n## 第十七节\n\n- 实现description方法能够返回一个有意义的字符串来描述实例，需要打印出类的名字和指针地址因为有时候会用到\n- 使用NSDictionary来编写description方法使代码更容易维护\n\n{% asset_img Untitled3.png %}\n\n- 在调试时打印更为详尽的对象描述信息应实现debugDescription方法\n\n{% asset_img Untitled4.png %}\n\n## 第十八节\n\n- 尽量创建不可变对象，把对外公开的属性设置为只读且在必要时对外公布属性\n- 某属性仅用于对象内部修改应将其从readonly改为readwrite属性\n- 可变的collection不应作为属性公开，而应提供相关方法修改可变的collection\n\n## 第十九节\n\n如果从其他框架中继承子类务必遵循命名惯例，如从UIView中继承自定义子类则类名末尾词为View，若创建自定义委托协议末尾应跟上Delegate一词。\n\n{% asset_img Untitled5.png %}\n\n## 第二十节\n\n- 适当给私有方法加上前缀可以很容易将其与公共方法进行区分\n- 不应使用一个下划线做私有方法的前缀，如 _resetViewController 方法已经被苹果实现\n\n## 第二十一节\n\n- Objective-C对于异常采取的态度为：只有在极为罕见的情况下才抛出异常，并在异常抛出后无需考虑恢复问题，应用程序此时应该退出。异常应该运用于极其严重的问题\n\n{% asset_img Untitled6.png %}\n\n```objectivec\n- (BOOL)doSomething:(NSError**) error\n\n- (BOOL)doSomething:(NSError**) error {\n\t// do something that may cause an error\n\n\tif ( /* there was an error */ ) {\n\t\t\tif (error) {\n\t\t\t\t\t*error = [NSErrorerrorwithDomain:domain code:code userInfo:userInfo];\n\t\t\t}\n\t\t\treturn NO;\n\t\t} else {\n\t\treturn YES;\n\t\t}\n}\n\nNSError *error = nil;\nBOOL ret = [object doSomething: &error];\nif (ret) {\n     // handle error \n}\n```\n\n{% asset_img Untitled7.png %}\n\n传递给方法的是个指针，指针本身指向另一个指向NSError对象的指针，或认为其为一个直接指向NSError对象的指针。在 ARC 中，指针所指向的对象会在方法执行完毕后自动释放。\n\n## 第二十二节\n\n- 使自己的类支持拷贝操作需要实现NSCopying协议，该协议只有一个方法且不必担心zone参数。覆写copy方法真正需要实现的是copyWithZone方法。\n\n```objectivec\n- (id)copyWithZone:(NSZone*)zone\n\n- (id)copyWithZone:(NSZone*)zone {\n\t\tSTFPerson *copy = [[self class] allocWithZone:zone]initWithFirstName:_firstName andLastName:_lastName];\n\t\treturn copy;\n}\n```\n\n- 在可变对象上调用copy会返回一个不可变类的实例，可能会把NSMutableArray对象当作NSArray返回，为了安全起见使用copy和mutableCopy这两个方法复制对象\n- 深拷贝与浅拷贝\n    - 深拷贝：拷贝对象自身时一并拷贝其底层数据，需要新增一个专门执行深拷贝的方法\n    - 浅拷贝：只拷贝容器对象本身不拷贝其中数据；Foundation框架所有collection类执行拷贝的默认情况；实现copyWithZone方法\n    - 图解：\n\n   {% asset_img Untitled8.png %}\n\n## 第二十三节\n\n   {% asset_img Untitled9.png %}\n\n   {% asset_img Untitled10.png %}\n\n   {% asset_img Untitled11.png %}\n\n   {% asset_img Untitled12.png %}\n\n   {% asset_img Untitled13.png %}\n\n   {% asset_img Untitled14.png %}\n\n存放委托对象的属性需要为weak（在对象销毁时自动清空）或unsafe_unretained（不需要自动清空）。\n\n   {% asset_img Untitled15.png %}\n\n   {% asset_img Untitled16.png %}\n\n   {% asset_img Untitled17.png %}\n\n- 某个对象从另一个对象获取数据可以使用委托模式，亦成为数据源模式，数据的流动如上图所示\n- 如果有必要可以实现有段位的结构体将委托对象是否能响应相关协议的信息缓存至其中\n\n## 第二十四条\n\n- 通过分类机制将代码划分为易于管理的小块\n\n   {% asset_img Untitled18.png %}\n\n   {% asset_img Untitled19.png %}\n\n   {% asset_img Untitled20.png %}\n\n   {% asset_img Untitled21.png %}\n\n- 可以创建名为Private的分类并将私有方法放在里面，这个分类的方法只在类和框架内部使用无需对外公布\n\n## 第二十五条\n\n- 向第三方类中添加分类时给分类名与方法名加上前缀\n\n   {% asset_img Untitled22.png %}\n\n## 第二十六条\n\n- 在实现分类时所有属性都应该定义在主接口内，类所封装的所有数据都应该定义在主接口内\n\n   {% asset_img Untitled23.png %}\n\n## 第二十七条\n\n- class-continuation 分类中可以定义方法和实例变量，如下方式中_anotherInstanceVariable 是隐藏的状态\n\n    ```objectivec\n    @interface STFPerson() {\n    \t\tNSString *_anInstanceVariable;\n    }\n    // Methods declaration\n    @end\n\n    @implementation STFPerson {\n    \tint _anotherInstanceVariable;\n    }\n    // Methods implementation \n    @end\n    ```\n\n   {% asset_img Untitled24.png %}\n\n- WebKit、CoreAnimation 底层大部分代码用C++编写，对外展示的为Objective-C接口\n\n   {% asset_img Untitled25.png %}\n\n- 上图方式可以随意调用setFirstName与setLastName方法与点语法设置属性，同时外界无法修改对象，完成了类型的拓展\n\n   {% asset_img Untitled26.png %}\n\n    - 不需要在公共接口中声明类遵从了私有协议，而应该改到 class-continuation 分类内进行声明\n\n## 第二十八条\n\n- 协议可以在某种程度上提供匿名类型，具体的对象类型淡化成为遵从某个协议的id类型，协议离规定对象应该实现的方法。下图中与数据库连接相关的类名称就无法泄漏\n\n    {% asset_img Untitled27.png %}\n\n- 使用匿名对象实现类型名称的隐藏，需要注意的是对象需要能够响应定义在协议中的方法\n- 下图中其中sectionInfo为匿名对象，把section数组中返回的内部状态对象视为遵从NSFetchedResultsSectionInfo的匿名对象，隐藏了相关实现细节。\n\n    {% asset_img Untitled28.png %}\n\n## 第二十九条\n\n- 对象创建完成后引用计数至少为1，如果需要保留该对象需要调用retain方法，如果不再需要该对象则调用release、autorelease方法，当引用计数归零时对象被回收\n\n    {% asset_img Untitled29.png %}\n\n- 为了避免使用无效对象一般在完成调用release之后清空指针，保证不会出现指向无效对象的指针\n\n    ```objectivec\n    NSNumber *number = [[NSNumber alloc]initWithInt: 1234];\n    [array addObject: number];\n    [number release];\n    number = nil;\n    ```\n\n## 第三十条\n\n- ARC会自动执行retain、release、autorelease等操作，不能直接对这些方法（还包括dealloc）进行调用\n- ARC在调用这些方法并不通过Objective-C消息派发机制，而是直接调用底层C语言版本，能够带来更好的性能\n- 若方法名以以下的几个四个词语开头则表示返回的对象归调用者所有，反之返回的对象会自动释放\n    - copy\n    - mutableCopy\n    - new\n    - alloc\n\n## 第三十一条\n\n   {% asset_img Untitled30.png %}\n\n- 如果对象持有文件描述符等系统资源，应该专门写一个方法释放此类资源，用完使用close方法\n- 执行异步任务的方法和只能在正常状态下执行的方法不应在dealloc中调用\n\n## 第三十二条\n\n- ARC不生成安全处理异常所需的清理代码，开启编译器标志后可以生成这种代码但是会导致应用程序变大，且会降低运行效率\n\n   {% asset_img Untitled31.png %}\n\n## 第三十三条\n\n- 当指向EOCClassA的实例引用移除后unsafe_unretained属性仍然指向已经回收的实例，而weak属性指向nil\n\n    {% asset_img Untitled32.png %}\n\n## 第三十四条\n\n系统会自动创建一些线程，如主线程或GCD机制中的线程都有自动释放池，这些线程都有autoreleasepool，每次执行event loop就会将其清空\n\n   {% asset_img Untitled33.png %}\n\n   {% asset_img Untitled34.png %}\n\n## 第三十五条\n\n- 系统在回收对象时可以将其转化为僵尸对象，通过环境变量NSZombieEnabled可以开启该功能，或在Xcode中开启\n\n{% asset_img Untitled35.png %}\n\n- 系统修改对象的isa指针指向特殊的僵尸类可以时该对象成为僵尸对鲜花，僵尸类能够响应所有的selector，在打印一条包含消息内容及接受者的消息后终止应用程序\n\n## 第三十六条\n\n在 ARC 下调用查询对象当前引用计数的方法会触发崩溃\n\n    ```objectivec\n    - (NSUInteger)retainCount\n    ```\n\n事实上该方法不应该调用，方法返回的retainCount是某个给定时间点上的数值，并未考虑系统会稍后清空自动释放池，无法反应对象生命期的全貌。\n\n## 第三十七条\n\n- Block与定义它的函数共享同一个范围内的信息，块自有其相关类型，可以将块赋值给变量并使用它\n\n    ```objectivec\n    void (^someBlock) () = ^ {\n    \t\t// Block implementation\n    };\n\n    int other = 10;\n    int (^addBlock) (int a, int b) = ^ (int a, int b) {\n    \t\treturn other + a + b;\n    };\n    int sum = addBlock(1, 2);\n    ```\n\n    - 需要在Block内修改的变量需要加上 _block 修饰符，如果将块定义在Objective-C类的实例方法中，除了可以访问类的所有的实例变量外还可以使用self变量且无需添加_block。\n    - 定义Block的时候分配的内存区域在栈上，即块只在定义的范围内有效，可以创建不会捕捉任何状态的全局块\n\n{% asset_img Untitled36.png %}\n\n{% asset_img Untitled37.png %}\n\n## 第三十八条\n\n{% asset_img Untitled38.png %}\n\n- 以下展示了SDWebImage中Block的写法\n\n    ```objectivec\n    typedef void(^SDWebImageDownloaderProgressBlock)(NSUInteger receivedSize, long long expectedSize);\n    typedef void(^SDWebImageDownloaderCompletedBlock)(UIImage *image, NSData *data, NSError *error, BOOL finished);\n\n    ****- (void)setImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholder options:(SDWebImageOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageCompletedBlock)completedBlock;\n    - (id<SDWebImageOperation>)downloadImageWithURL:(NSURL *)url\n                                            options:(SDWebImageDownloaderOptions)options\n                                           progress:(SDWebImageDownloaderProgressBlock)progressBlock\n                                          completed:(SDWebImageDownloaderCompletedBlock)completedBlock;\n\n    - (id<SDWebImageOperation>)downloadImageWithURL:(NSURL *)url\n                                    timeOutInterval:(NSTimeInterval)timeOutInterval\n                                            options:(SDWebImageDownloaderOptions)options\n                                           progress:(SDWebImageDownloaderProgressBlock)progressBlock\n                                          completed:(SDWebImageDownloaderCompletedBlock)completedBlock;\n    ```\n\n## 第三十九条\n\n- 简洁程度上Delegate与Block的对比\n\n   {% asset_img Untitled39.png %}\n\n   {% asset_img Untitled40.png %}\n\n- 处理多个请求时Delegate与Block的对比\n\n   {% asset_img Untitled41.png %}\n\n   {% asset_img Untitled42.png %}\n\n   {% asset_img Untitled43.png %}\n\n   {% asset_img Untitled44.png %}\n\n- 在处理请求时采用两个独立的处理Block（1/2）\n\n   {% asset_img Untitled45.png %}\n\n   {% asset_img Untitled46.png %}\n\n   {% asset_img Untitled47.png %}\n\n- 在处理请求时采用同一个处理Block，令Block更为灵活但更为冗长\n\n   {% asset_img Untitled48.png %}\n\n   {% asset_img Untitled49.png %}\n\n## 第四十条\n\n大部分网络通信库写法\n\n   {% asset_img Untitled50.png %}\n\n为了使得在下载完成后通过以下方法执行调用者指定的Block，需要将completion handler保存至实例变量，一旦运行完completion handler之后没有必要对其进行保留，从而避免出现retain cycle\n\n   {% asset_img Untitled51.png %}\n\n   {% asset_img Untitled52.png %}\n\n## 第四十一条\n\n- 串行队列，将读取操作与写入操作安排到同个队列中保证数据同步，可以将设置方法由同步派发改为异步执派发\n\n   {% asset_img Untitled53.png %}\n\n   {% asset_img Untitled54.png %}\n\n    - 并发队列，读取与写入操作可以随时执行\n\n   {% asset_img Untitled55.png %}\n\n    创建栅栏使得barrier块单独执行不与其他Block并行，对并发队列有意义，因为串行Block按顺序逐个执行\n\n   {% asset_img Untitled56.png %}\n\n   {% asset_img Untitled57.png %}\n\n   {% asset_img Untitled58.png %}\n\n## 第四十二条\n\n- performSelector接受的参数类型为id，限定了传入参数必须是对象，不能是整数或者浮点数，并且最多只能接受两个参数\n\n   {% asset_img Untitled59.png %}\n\n- 延后执行某项任务，优先使用GCD的方式\n\n   {% asset_img Untitled60.png %}\n\n- 把任务放到主线程上执行，把任务封装至Block中用GCD相关方法更为合适\n\n   {% asset_img Untitled61.png %}\n\n- performSelector在内存管理方面存在缺失，无法确定将执行的Selector具体是什么\n\n## 第四十三条\n\n- GCD是纯C的API，操作队列是Objective-C的对象\n- Block是轻量级的书籍结构而Operation是重量级的Objective-C对象\n- 在执行后台任务时GCD并不一定是最佳方式\n- 使用NSOperation与NSOperationQueue有以下好处，能够实现纯GCD具备的绝大部分功能\n\n   {% asset_img Untitled62.png %}\n\n   {% asset_img Untitled63.png %}\n\n   {% asset_img Untitled64.png %}\n\n- NSNotificationCenter 的 addObserverForName: 方法接受的参数是块而不是Selector\n\n   {% asset_img Untitled65.png %}\n\n- 确定哪一种方法的最好方式是测试性能\n\n    ## 第四十四条\n\n- dispatch group 能够将任务分组，调用者可以等待这组任务执行完毕同时也可以在提供回调函数之后继续执行\n- 如下函数是dispatch_async的变体\n\n{% asset_img Untitled66.png %}\n\n- 如下函数用于等待 dispatch group 执行完毕，timeout 参数表示阻塞时间，若执行时间短于timeout返回0\n\n{% asset_img Untitled67.png %}\n\n- 如下函数中可以传入在特定线程上执行的Block\n\n{% asset_img Untitled68.png %}\n\n- 令数组每个对象都执行某个任务，并且等待每个任务都执行完毕可以使用如下GCD特性\n\n{% asset_img Untitled69.png %}\n\n- 若当前线程不阻塞可以使用notify函数取代wait\n\n{% asset_img Untitled70.png %}\n\n- 区分任务的优先级放置于不同的线程执行，同时将所有任务归于一个dispatch group，并且在执行完毕后获得通知（并发队列）\n\n{% asset_img Untitled71.png %}\n\n- 将任务提交到串行队列中并用dispatch group 跟踪执行情况\n\n{% asset_img Untitled72.png %}\n\n{% asset_img Untitled73.png %}\n\n## 第四十五条\n\n- 常用的一种共享单例的方法\n\n   {% asset_img Untitled74.png %}\n\n- 使用GCD实现共享单例的方法\n\n   {% asset_img Untitled75.png %}\n\n- 使用 dispatch_once 能够简化代码并且彻底保证线程安全开发者无需关心加锁或同步，所有问题都由GCD在底层进行处理，static 作用域能够保证编译器在每次执行该方法时复用该变量而不是重复创建\n\n## 第四十六条\n\n- dispatch_get_current_queue 函数尽量不要使用\n\n## 第四十七条\n\n- 框架指一系列代码被封装为动态库，并且在其中放入描述接口的头文件，iOS平台的系统框架仍然采用了动态库\n- iOS应用程序不允许在其中包含动态库于是就出现了静态库\n- 关于静态库与动态库的了解可以参考 [细说iOS静态库和动态库](https://juejin.cn/post/6844904031937101838)\n\n- Cocoa 本身并不是框架而是集成了一批创建应用程序时需要用到的框架\n- Objective-C编程的一个重要特点是经常需要用到底层的C语言级API\n- CoreAnimation 使用Objective-C进行编写，而 CoreGraphics 框架采用C语言进行编写，两者均为 UI 框架之下的一等框架\n\n## 第四十八条\n\n- 遍历方式\n    - for循环\n\n   {% asset_img Untitled76.png %}\n\n    字典与 set 均无顺序，无法根据下标访问数值。于是需要获取字典内所有键或 set 内所有对象，从而产生空间上的额外开销。然而执行反向遍历时 for 循环会更为方便。\n\n    - NSEnumerator\n\n    ```objectivec\n    // Dictionary\n    NSDictionary *dict = /* ... */;\n    NSEnumerator *enumerator = [dict keyEnumerator];\n    id key;\n    while ((key = [enumerator nextObject]) != nil) {\n    \tid value = dict[key];\n    \t// do something here\n    }\n\n    // Set\n    NSSet *set = /* ... */;\n    NSEnumerator *enumerator = [set objectEnumerator];\n    id object;\n    while ((object = [enumerator nextObject]) != nil) {\n    \t// do something here\n    }\n\n    // Array\n    NSArray *array = /* ... */;\n    NSEnumerator *enumerator = [array reverseObjectEnumerator];\n    id object;\n    while ((object = [enumerator nextObject]) != nil) {\n    \t// do something here\n    }\n    ```\n\n    对于所有的collection都可以采用这套语法，在读法上更容易被理解\n\n    - for in 快速遍历\n\n    ```objectivec\n    // Dictionary\n    NSDictionary *dict = /* ... */;\n    for (id key in dict) {\n    \tid value = dict[key];\n    \t// do something here\n    }\n\n    // Set\n    NSSet *set = /* ... */;\n    for (id object in set) {\n    \t// do something here\n    }\n\n    // Array\n    NSArray *array = /* ... */;\n    for (id object in array) {\n    \t// do something here\n    }\n    for (id object in [array reverseObjectEnumerator]) {\n    \t// do something here\n    }\n    ```\n\n    某个支持快速遍历的类的对象遵从 NSFastEnumeration 协议可以实现对象的迭代，而NSEnumerator 也实现了该协议，该遍历方法无法获取遍历操作针对的下标。\n\n    - 基于Block的遍历\n\n    ```objectivec\n    // Dictionary\n    NSDictionary *dict = /* ... */;\n    [array enumerateKeysAndObjectsUsingBlock:\n    \t^(id key, id object, BOOL *stop) {\n    \t\t// do something here\n    \t\t\tif (shouldStopHere) {\n    \t\t\t\t*stop = YES;\n    \t\t}\n    }];\n\n    // Set\n    NSSet *set = /* ... */;\n    [array enumerateObjectsUsingBlock:\n    \t^(id object, BOOL *stop) {\n    \t\t// do something here\n    \t\t\tif (shouldStopHere) {\n    \t\t\t\t*stop = YES;\n    \t\t}\n    }];\n\n    // Array\n    NSArray *array = /* ... */;\n    [array enumerateObjectsUsingBlock:\n    \t^(id object, NSUInteger idx, BOOL *stop) {\n    \t\t// do something here\n    \t\t\tif (shouldStopHere) {\n    \t\t\t\t*stop = YES;\n    \t\t}\n    }];\n    ```\n\n    使得遍历能够从Block中获取信息，并且可以在遍历数组获取数组的下标。\n\n    NSEnumerationOptions 类型为enum，如果开启了NSEnumerationConcurrent 底层会使用GCD处理出发执行事宜，采用其他方法很难实现。\n\n## 第四十九条\n\n- 使用桥接技术可以实现定义在Foundation框架内的Objective-C类与CoreFoundation 框架中的 C 数据结构的相互转换\n\n    ```objectivec\n    NSArray *anNSArray = @[@1, @2, @3, @4, @5];\n    CFArrayRef *aCGArray = (__bridge CFArrayRef)anNSArray;\n    NSLog(@\"size of array = %li\", CFArrayGetCount(aCFArray)); \n\n    gradientLayer.colors = @[(__bridge id)[UIColor ne_colorWithHexString:@\"000000\" alpha:0.95].CGColor,\n                                                (__bridge id)[UIColor ne_colorWithHexString:@\"000000\" alpha:0.95].CGColor,\n                                                (__bridge id)[UIColor ne_colorWithHexString:@\"000000\" alpha:0.72].CGColor,\n                                                (__bridge id)[UIColor ne_colorWithHexString:@\"000000\" alpha:0.45].CGColor,\n                                                (__bridge id)[UIColor ne_colorWithHexString:@\"000000\" alpha:0.28].CGColor,\n                                                ]; \n    ```\n\n- __bridge 含义为ARC具备该对象的所有权，__bridge_retained表示ARC交出该对象的所有权， 通过__bridge告诉ARC如何处理转换涉及的Objective-C对象\n- Foundation 框架中的 Objective-C 类具备的某些功能是 CoreFoundation 框架中的 C语言数据结构不具备的\n\n## 第五十条\n\n- NSCache 在系统资源耗尽时能够自动删减缓存，采用LRU策略\n- NSCache并不会直接拷贝键，而是保留键\n- NSCache是线程安全的，多个线程可以同时访问NSCache\n- NSCache可以设置针对对象个数以及总成本的上限\n\n缓存的一般用法\n\n   {% asset_img Untitled77.png %}\n\n   {% asset_img Untitled78.png %}\n\n加入 NSPurgeable 的缓存用法\n\n   {% asset_img Untitled79.png %}\n\n   {% asset_img Untitled80.png %}\n\n- 重复计算会带来性能开销的数据值得被放入缓存，从而提高应用程序的响应速度\n- NSPurgeableData 与 NSCache 一起使用能够实现自动清除数据的功能\n\n## 第五十一条\n\n- load 方法并不像普通的方法那样，她不遵从继承规则，如果某个类本身不实现load方法那么无论其各级超类是否实现此方法系统都不会调用\n- load 与 initialize 方法务必精简实现，因为会产生阻塞从而使得应用程序无响应\n- initialize 方法在程序首次用该类前调用一次，并且使用runtime进行调用，只应该用来设置内部数据而不应该调用其他方法\n- 如果某个类本身不实现 initialize 方法然而超类完成了就会调用超类的实现方法，如下图中初始化子类后由于该类未覆写该方法于是需要执行父类的实现代码，于是得到了通常的子类实现方法\n\n{% asset_img Untitled81.png %}\n\n{% asset_img Untitled82.png %}\n\n{% asset_img Untitled83.png %}\n\n## 第五十二条\n\n- NSTimer 对象会保留目标直到计时器失效，需要调用invalidate方法令其失效\n\n   {% asset_img Untitled84.png %}\n\n   {% asset_img Untitled85.png %}\n\n- 反复执行的计时器容易引入retain cycle，可以使用 Block 的方式打破，需要注意的是必须创建分类来加入相关实现代码","slug":"EffectiveObjcTips","published":1,"updated":"2021-07-26T08:44:20.385Z","_id":"ckrauk7nd0000bl6bcqfjg5cf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>准备开始写 Objective-C 之前花了一些时间重新阅读这本经典的《Effective Objective-C》，在阅读的过程中对重点内容进行了一些摘录，在方便自己复习的同时将相关内容在博客分享出来供参考。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"第一节\"><a href=\"#第一节\" class=\"headerlink\" title=\"第一节\"></a>第一节</h2><ul>\n<li>Objective-C 采用了动态绑定的消息结构，在运行时检查对象的类型，运行期环境决定了接受消息后需要执行的代码。</li>\n<li>Objective-C 对象所占内存分配在堆空间中，分配在堆空间中的内存必须直接管理。</li>\n<li>定义中不含*的变量分配在栈空间上，分配在栈的用于保存变量的内存会在栈帧弹出时自动清理。</li>\n<li>如果需要存储int、float、double、char等非对象类型推荐使用结构体。</li>\n</ul>\n<h2 id=\"第二节\"><a href=\"#第二节\" class=\"headerlink\" title=\"第二节\"></a>第二节</h2><ul>\n<li>在 .h 文件中使用@class 标识需要引入的类并且在 .m 文件中引入相关头文件，该种方式被称为向前声明，简单的说，将引入头文件的时机尽量向后可以减短编译的时间，并且能够解决互相引用问题。尽量不要引入头文件，降低类之间的耦合。</li>\n<li>有时无法使用向前声明，比如要声明某个类遵循一项协议。此时应尽量把“该类遵循某协议〞的这条声明移至“class-continuation 分类” 中。如果不行就把协议单独放在一个头文件中然后将其引人。</li>\n</ul>\n<h2 id=\"第三节\"><a href=\"#第三节\" class=\"headerlink\" title=\"第三节\"></a>第三节</h2><ul>\n<li>尽量使用字面量语法创建字符串、数值、数组、字典</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSNumber</span> *intNumber = @<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">NSNumber</span> *floatNumber = @<span class=\"number\">1.1</span>f;</span><br><span class=\"line\"><span class=\"built_in\">NSNumber</span> *doubleNumber = @<span class=\"number\">1.123456</span>;</span><br><span class=\"line\"><span class=\"built_in\">NSNumber</span> *boolNumber = @YES;</span><br><span class=\"line\"><span class=\"built_in\">NSNumber</span> *charNumber = @<span class=\"string\">'a'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> numberInt = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">float</span> numberFloat = <span class=\"number\">1.23</span>f;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *animals = @[<span class=\"string\">@\"cat\"</span>, <span class=\"string\">@\"dog\"</span>, <span class=\"string\">@\"mouse\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *dog = <span class=\"string\">@\"shiba\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSDictionary</span> *personData = @&#123;<span class=\"string\">@\"firstName\"</span> : <span class=\"string\">@\"Stephen\"</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t <span class=\"string\">@\"lastName\"</span> : <span class=\"string\">@\"Fang\"</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t <span class=\"string\">@\"gender\"</span> : <span class=\"string\">@\"male\"</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>NSArray 的 arrayWithObjects 方法依次处理各个参数直到发现nil，而如果使用字面量的方法在创建时就会抛出异常终止程序执行，需要确保创建的数组与字典中不含有nil</li>\n<li>尽量使用取下标的方式来访问数组或字典中的元素</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSString</span> *dog = animals[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *lastName = personData[<span class=\"string\">@\"lastName\"</span>];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第四节\"><a href=\"#第四节\" class=\"headerlink\" title=\"第四节\"></a>第四节</h2><ul>\n<li>#define预处理指令声明全局变量尽量少用，编译器只会执行查找和替换操作，不会产生重复定义的警告信息</li>\n<li>尽量使用 static const 声明的方式来完成变量的声明，static表示该变量在定义此变量的编译单元中可见，而static const不会创建符号，只是将变量替换为常量</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"built_in\">NSTimeInterval</span> kAnimationDuration = <span class=\"number\">0.3</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>编译器看到extern关键字得知全局符号表中包含该符号无需查看该定义就允许只用该常量，该类常量只可以定义一次，命名最好使用与之相关的类名作为前缀</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In the header file</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> EOCStringConstant;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// In the implementation file </span></span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> EOCStringConstant = <span class=\"string\">@\"DEMO\"</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第五节\"><a href=\"#第五节\" class=\"headerlink\" title=\"第五节\"></a>第五节</h2><ul>\n<li>保证枚举由底层数据类型实现，不采用编译器所选类型</li>\n<li>凡是需要以按位或操作来组合的枚举都应使用NS_OPTIONS定义，若枚举不需要相互组合应使用NS_ENUM来定义</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_ENUM</span>(<span class=\"built_in\">NSUInteger</span>, STFFeedPageType) &#123;</span><br><span class=\"line\">    STFFeedPageTypeNone = <span class=\"number\">0</span>,             <span class=\"comment\">// 未知</span></span><br><span class=\"line\">    STFFeedPageTypeFollow = <span class=\"number\">1</span>,           <span class=\"comment\">// 关注页</span></span><br><span class=\"line\">    STFFeedPageTypeRecommend = <span class=\"number\">2</span>,        <span class=\"comment\">// 推荐页</span></span><br><span class=\"line\">    STFFeedPageTypeFeatured = <span class=\"number\">3</span>,         <span class=\"comment\">// 精选页</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_OPTIONS</span>(<span class=\"built_in\">NSUInteger</span>, AgoraAudioSessionOperationRestriction) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** No restriction, the SDK has full control of the audio session operations. */</span></span><br><span class=\"line\">    AgoraAudioSessionOperationRestrictionNone              = <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\">/** The SDK does not change the audio session category. */</span></span><br><span class=\"line\">    AgoraAudioSessionOperationRestrictionSetCategory       = <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"comment\">/** The SDK does not change any setting of the audio session (category, mode, categoryOptions). */</span></span><br><span class=\"line\">    AgoraAudioSessionOperationRestrictionConfigureSession  = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"comment\">/** The SDK keeps the audio session active when leaving a channel. */</span></span><br><span class=\"line\">    AgoraAudioSessionOperationRestrictionDeactivateSession = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"comment\">/** The SDK does not configure the audio session anymore. */</span></span><br><span class=\"line\">    AgoraAudioSessionOperationRestrictionAll               = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">7</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>处理枚举类型的switch语句不要实现default分支</li>\n</ul>\n<h2 id=\"第六节\"><a href=\"#第六节\" class=\"headerlink\" title=\"第六节\"></a>第六节</h2><ul>\n<li>在iOS中一般不使用atomic，因为同步锁会带来较大的开销，且无法保证线程安全</li>\n<li>尽量使用@property语法定义对象封装的数据</li>\n<li>在设置属性对应的实例变量时需要遵从属性声明的语义</li>\n<li>针对CGFloat、NSInteger此类纯量类型采用assign声明即可</li>\n<li>copy类型用于保护NSString*类型的封装性，在ARC下直接访问一个声明为copy的属性并不会直接拷贝而是保留新值释放旧值</li>\n</ul>\n<h2 id=\"第七节\"><a href=\"#第七节\" class=\"headerlink\" title=\"第七节\"></a>第七节</h2><ul>\n<li>在对象内部尽量直接访问实例变量<ul>\n<li>速度更快且生成的代码会直接访问对象实例变量的那块内存</li>\n<li>不会调用“设置方法”</li>\n<li>不会触发KVO，但需要确定是否会产生问题</li>\n<li>通过给getter、setter设置断点可以进行监控和确定访问时机</li>\n</ul>\n</li>\n<li>在写入实例变量时可以通过属性写入，读取实例变量时直接访问，可以作为一种折中方案</li>\n<li>在初始化方法及dealloc方法中，应该直接通过实例变量读取数据，即_</li>\n<li>懒加载方式中必须使用getter的方式访问属性，如果在没有用getter的情况下直接访问实例变量会导致得到是尚未设置好的变量</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (STFComponent*)component &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!_component) &#123;</span><br><span class=\"line\">\t\t\t\t\t_component = [SFComponent new];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> _component;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第八节\"><a href=\"#第八节\" class=\"headerlink\" title=\"第八节\"></a>第八节</h2><ul>\n<li>== 操作符对比的是两个指针本身并非所指对象</li>\n<li>NSString类实现了一个等同判断方法即isEqualToString，执行该方法的速度快于执行isEqual</li>\n<li>检测对象的等同性需要提供 isEqual 与 hash 方法，NSObject对于两个方法默认实现是仅当指针值完全相等才返回相等，需要针对具体的需求制定检测方案</li>\n<li>编写hash方法时需要使用计算速度快且哈希碰撞低的算法</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- （<span class=\"built_in\">BOOL</span>）isEqual:(<span class=\"keyword\">id</span>)object &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> == object) <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>; <span class=\"comment\">// 指向同一个对象必然相等</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>] != [object <span class=\"keyword\">class</span>]) <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>; <span class=\"comment\">//不属于同一个类不相等</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 检测每一个属性是否相等</span></span><br><span class=\"line\">\t\tSTFPerson *someone = (STFPerson*) object;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (![_firstName isEqualToString:someone.firstName])</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (![_lastName isEqualToString:someone.lastName])</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (![_age != someone.age])</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> - (<span class=\"built_in\">NSUInteger</span>)hash &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">NSUInteger</span> firstNameHash = [_firstName hash]；</span><br><span class=\"line\">\t\t<span class=\"built_in\">NSUInteger</span> lastNameHash = [_lastName hash]；</span><br><span class=\"line\">\t\t<span class=\"built_in\">NSUInteger</span> ageHash = [_ageHash hash]；</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> firstNameHash ^ lastNameHash ^ ageHash；</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>NSArray有等同性判定方法”isEqualToArray:”，而NSDictionary有等同性判定方法”isEqualToDictionary:”， NSArray检测方式为首先核对两个数组包含对象的个数是否相等，若相等在每个对应位置调用”isEqual:”方法</li>\n<li>在编写判定方法时应一并覆写”isEqual:”方法，如果接收该消息的对象与受测参数来自一个类就调用自己编写的判定方法，负责交由超类判定</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-  (<span class=\"built_in\">BOOL</span>)isEqual:(<span class=\"keyword\">id</span>)object &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>] == [object <span class=\"keyword\">class</span>]) </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> isEqualToPerson:(STFPerson*)object];</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> [<span class=\"keyword\">super</span> isEqual: object];</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第九节\"><a href=\"#第九节\" class=\"headerlink\" title=\"第九节\"></a>第九节</h2><ul>\n<li>UIButton类使用者无需关系创建出来的按钮属于哪个子类也无需考虑按钮绘制方式等细节</li>\n<li>类族的使用需要遵循以下原则<ul>\n<li>子类应该继承自类族的抽象基类</li>\n<li>子类应该定义自己的数据存储方式</li>\n<li>子类应该覆写超类文档中需要覆写的方法</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第十节\"><a href=\"#第十节\" class=\"headerlink\" title=\"第十节\"></a>第十节</h2><ul>\n<li>在其他做法不可行的条件下可以选用关联对象，因为这种做法同样会引入难以查找的bug（不建议使用）</li>\n</ul>\n<h2 id=\"第十一节\"><a href=\"#第十一节\" class=\"headerlink\" title=\"第十一节\"></a>第十一节</h2><ul>\n<li>在编译期就能决定运行时所需要调用的函数为静态绑定，而所需要调用的函数直到运行期才能确定为动态绑定</li>\n<li>runtime决定了对象收到消息后调用哪个方法，甚至在程序运行时可以改变。发送给对象的所有消息都由动态信息派发系统处理</li>\n<li>objc_msgSend函数根据receive和selector的类型调用适当的方法，通过查找每个类中的“表格”查找需要执行的方法并跳转至相应的实现</li>\n<li>尾调用优化在函数的最后一项是调用另一个函数时生效，编译器生成跳转至另一个函数所需的指令码</li>\n</ul>\n<h2 id=\"第十二节\"><a href=\"#第十二节\" class=\"headerlink\" title=\"第十二节\"></a>第十二节</h2><ul>\n<li><p>消息转发分为两个阶段</p>\n<ul>\n<li><p>第一阶段：动态方法解析</p>\n</li>\n<li><p>第二阶段：消息转发机制</p>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled.png\" class=\"\">\n</li>\n</ul>\n</li>\n<li><p>receiver在每一步都有机会处理消息且步骤越往后处理消息的代价越大</p>\n</li>\n<li><p>如果对象没有办法响应某个selector则进入消息转发流程,runtime的动态方法解析可以在需要某个方法时将其加入类中，对象可以将无法解析的selector转交给其他对象处理。这一步结束后若仍然无法处理selector则启动消息转发机制</p>\n</li>\n</ul>\n<h2 id=\"第十三节\"><a href=\"#第十三节\" class=\"headerlink\" title=\"第十三节\"></a>第十三节</h2><ul>\n<li>在runtime中可以向类中新增或替换selector对应的方法实现，但一般只用于调试</li>\n<li>method swizzling，即使用另一份实现替换原有的方法实现，可以用于向原有的实现中添加新功能</li>\n</ul>\n<h2 id=\"第十四节\"><a href=\"#第十四节\" class=\"headerlink\" title=\"第十四节\"></a>第十四节</h2><ul>\n<li>每个Objective-C对象实例都有指向Class对象的指针，每个对象结构体的首个成员是Class类的变量，该变量定义了对象所属的类，通常称为”is a”指针</li>\n<li>isMemberOfClass 判断对象是否为某个特定类的实例，isKindOfClass 判断对象是否是某类或派生类的实例</li>\n<li>动态类型特性可以用于从 collection 中获取对象（类型信息查询方法）</li>\n<li>假设名为SomeClass的子类继承自NSObject可以得到以下继承体系</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled1.png\" class=\"\">\n\n<h2 id=\"第十五节\"><a href=\"#第十五节\" class=\"headerlink\" title=\"第十五节\"></a>第十五节</h2><ul>\n<li>类名、分类名都应该加上相应的前缀，如果使用三方库编写自己的代码并分发尤其需要注意重复符号问题</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled2.png\" class=\"\">\n\n<h2 id=\"第十六节\"><a href=\"#第十六节\" class=\"headerlink\" title=\"第十六节\"></a>第十六节</h2><ul>\n<li>在类中实现一个designated initializer，尽量在文档中指明初始化需要调用该方法</li>\n<li>若designated initializer不同于超类则需覆写超类对应方法</li>\n<li>如果超类的初始化方法不适用于子类应覆写超类方法并抛出异常</li>\n</ul>\n<h2 id=\"第十七节\"><a href=\"#第十七节\" class=\"headerlink\" title=\"第十七节\"></a>第十七节</h2><ul>\n<li>实现description方法能够返回一个有意义的字符串来描述实例，需要打印出类的名字和指针地址因为有时候会用到</li>\n<li>使用NSDictionary来编写description方法使代码更容易维护</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled3.png\" class=\"\">\n\n<ul>\n<li>在调试时打印更为详尽的对象描述信息应实现debugDescription方法</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled4.png\" class=\"\">\n\n<h2 id=\"第十八节\"><a href=\"#第十八节\" class=\"headerlink\" title=\"第十八节\"></a>第十八节</h2><ul>\n<li>尽量创建不可变对象，把对外公开的属性设置为只读且在必要时对外公布属性</li>\n<li>某属性仅用于对象内部修改应将其从readonly改为readwrite属性</li>\n<li>可变的collection不应作为属性公开，而应提供相关方法修改可变的collection</li>\n</ul>\n<h2 id=\"第十九节\"><a href=\"#第十九节\" class=\"headerlink\" title=\"第十九节\"></a>第十九节</h2><p>如果从其他框架中继承子类务必遵循命名惯例，如从UIView中继承自定义子类则类名末尾词为View，若创建自定义委托协议末尾应跟上Delegate一词。</p>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled5.png\" class=\"\">\n\n<h2 id=\"第二十节\"><a href=\"#第二十节\" class=\"headerlink\" title=\"第二十节\"></a>第二十节</h2><ul>\n<li>适当给私有方法加上前缀可以很容易将其与公共方法进行区分</li>\n<li>不应使用一个下划线做私有方法的前缀，如 _resetViewController 方法已经被苹果实现</li>\n</ul>\n<h2 id=\"第二十一节\"><a href=\"#第二十一节\" class=\"headerlink\" title=\"第二十一节\"></a>第二十一节</h2><ul>\n<li>Objective-C对于异常采取的态度为：只有在极为罕见的情况下才抛出异常，并在异常抛出后无需考虑恢复问题，应用程序此时应该退出。异常应该运用于极其严重的问题</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled6.png\" class=\"\">\n\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)doSomething:(<span class=\"built_in\">NSError</span>**) error</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)doSomething:(<span class=\"built_in\">NSError</span>**) error &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something that may cause an error</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( <span class=\"comment\">/* there was an error */</span> ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">\t\t\t\t\t*error = [<span class=\"built_in\">NSErrorerrorwithDomain</span>:domain code:code userInfo:userInfo];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSError</span> *error = <span class=\"literal\">nil</span>;</span><br><span class=\"line\"><span class=\"built_in\">BOOL</span> ret = [object doSomething: &amp;error];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// handle error </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled7.png\" class=\"\">\n\n<p>传递给方法的是个指针，指针本身指向另一个指向NSError对象的指针，或认为其为一个直接指向NSError对象的指针。在 ARC 中，指针所指向的对象会在方法执行完毕后自动释放。</p>\n<h2 id=\"第二十二节\"><a href=\"#第二十二节\" class=\"headerlink\" title=\"第二十二节\"></a>第二十二节</h2><ul>\n<li>使自己的类支持拷贝操作需要实现NSCopying协议，该协议只有一个方法且不必担心zone参数。覆写copy方法真正需要实现的是copyWithZone方法。</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">id</span>)copyWithZone:(<span class=\"built_in\">NSZone</span>*)zone</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>)copyWithZone:(<span class=\"built_in\">NSZone</span>*)zone &#123;</span><br><span class=\"line\">\t\tSTFPerson *<span class=\"keyword\">copy</span> = [[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>] allocWithZone:zone]initWithFirstName:_firstName andLastName:_lastName];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">copy</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>在可变对象上调用copy会返回一个不可变类的实例，可能会把NSMutableArray对象当作NSArray返回，为了安全起见使用copy和mutableCopy这两个方法复制对象</p>\n</li>\n<li><p>深拷贝与浅拷贝</p>\n<ul>\n<li><p>深拷贝：拷贝对象自身时一并拷贝其底层数据，需要新增一个专门执行深拷贝的方法</p>\n</li>\n<li><p>浅拷贝：只拷贝容器对象本身不拷贝其中数据；Foundation框架所有collection类执行拷贝的默认情况；实现copyWithZone方法</p>\n</li>\n<li><p>图解：</p>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled8.png\" class=\"\">\n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二十三节\"><a href=\"#第二十三节\" class=\"headerlink\" title=\"第二十三节\"></a>第二十三节</h2>   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled9.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled10.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled11.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled12.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled13.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled14.png\" class=\"\">\n\n<p>存放委托对象的属性需要为weak（在对象销毁时自动清空）或unsafe_unretained（不需要自动清空）。</p>\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled15.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled16.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled17.png\" class=\"\">\n\n<ul>\n<li>某个对象从另一个对象获取数据可以使用委托模式，亦成为数据源模式，数据的流动如上图所示</li>\n<li>如果有必要可以实现有段位的结构体将委托对象是否能响应相关协议的信息缓存至其中</li>\n</ul>\n<h2 id=\"第二十四条\"><a href=\"#第二十四条\" class=\"headerlink\" title=\"第二十四条\"></a>第二十四条</h2><ul>\n<li><p>通过分类机制将代码划分为易于管理的小块</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled18.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled19.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled20.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled21.png\" class=\"\">\n</li>\n<li><p>可以创建名为Private的分类并将私有方法放在里面，这个分类的方法只在类和框架内部使用无需对外公布</p>\n</li>\n</ul>\n<h2 id=\"第二十五条\"><a href=\"#第二十五条\" class=\"headerlink\" title=\"第二十五条\"></a>第二十五条</h2><ul>\n<li><p>向第三方类中添加分类时给分类名与方法名加上前缀</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled22.png\" class=\"\">\n\n</li>\n</ul>\n<h2 id=\"第二十六条\"><a href=\"#第二十六条\" class=\"headerlink\" title=\"第二十六条\"></a>第二十六条</h2><ul>\n<li><p>在实现分类时所有属性都应该定义在主接口内，类所封装的所有数据都应该定义在主接口内</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled23.png\" class=\"\">\n\n</li>\n</ul>\n<h2 id=\"第二十七条\"><a href=\"#第二十七条\" class=\"headerlink\" title=\"第二十七条\"></a>第二十七条</h2><ul>\n<li><p>class-continuation 分类中可以定义方法和实例变量，如下方式中_anotherInstanceVariable 是隐藏的状态</p>\n  <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">STFPerson</span>() </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">NSString</span> *_anInstanceVariable;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Methods declaration</span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">STFPerson</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> _anotherInstanceVariable;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Methods implementation </span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled24.png\" class=\"\">\n</li>\n<li><p>WebKit、CoreAnimation 底层大部分代码用C++编写，对外展示的为Objective-C接口</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled25.png\" class=\"\">\n</li>\n<li><p>上图方式可以随意调用setFirstName与setLastName方法与点语法设置属性，同时外界无法修改对象，完成了类型的拓展</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled26.png\" class=\"\">\n\n<ul>\n<li>不需要在公共接口中声明类遵从了私有协议，而应该改到 class-continuation 分类内进行声明</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二十八条\"><a href=\"#第二十八条\" class=\"headerlink\" title=\"第二十八条\"></a>第二十八条</h2><ul>\n<li><p>协议可以在某种程度上提供匿名类型，具体的对象类型淡化成为遵从某个协议的id类型，协议离规定对象应该实现的方法。下图中与数据库连接相关的类名称就无法泄漏</p>\n  <img src=\"/2021/07/12/EffectiveObjcTips/Untitled27.png\" class=\"\">\n</li>\n<li><p>使用匿名对象实现类型名称的隐藏，需要注意的是对象需要能够响应定义在协议中的方法</p>\n</li>\n<li><p>下图中其中sectionInfo为匿名对象，把section数组中返回的内部状态对象视为遵从NSFetchedResultsSectionInfo的匿名对象，隐藏了相关实现细节。</p>\n  <img src=\"/2021/07/12/EffectiveObjcTips/Untitled28.png\" class=\"\">\n\n</li>\n</ul>\n<h2 id=\"第二十九条\"><a href=\"#第二十九条\" class=\"headerlink\" title=\"第二十九条\"></a>第二十九条</h2><ul>\n<li><p>对象创建完成后引用计数至少为1，如果需要保留该对象需要调用retain方法，如果不再需要该对象则调用release、autorelease方法，当引用计数归零时对象被回收</p>\n  <img src=\"/2021/07/12/EffectiveObjcTips/Untitled29.png\" class=\"\">\n</li>\n<li><p>为了避免使用无效对象一般在完成调用release之后清空指针，保证不会出现指向无效对象的指针</p>\n  <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSNumber</span> *number = [[<span class=\"built_in\">NSNumber</span> alloc]initWithInt: <span class=\"number\">1234</span>];</span><br><span class=\"line\">[array addObject: number];</span><br><span class=\"line\">[number release];</span><br><span class=\"line\">number = <span class=\"literal\">nil</span>;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"第三十条\"><a href=\"#第三十条\" class=\"headerlink\" title=\"第三十条\"></a>第三十条</h2><ul>\n<li>ARC会自动执行retain、release、autorelease等操作，不能直接对这些方法（还包括dealloc）进行调用</li>\n<li>ARC在调用这些方法并不通过Objective-C消息派发机制，而是直接调用底层C语言版本，能够带来更好的性能</li>\n<li>若方法名以以下的几个四个词语开头则表示返回的对象归调用者所有，反之返回的对象会自动释放<ul>\n<li>copy</li>\n<li>mutableCopy</li>\n<li>new</li>\n<li>alloc</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三十一条\"><a href=\"#第三十一条\" class=\"headerlink\" title=\"第三十一条\"></a>第三十一条</h2>   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled30.png\" class=\"\">\n\n<ul>\n<li>如果对象持有文件描述符等系统资源，应该专门写一个方法释放此类资源，用完使用close方法</li>\n<li>执行异步任务的方法和只能在正常状态下执行的方法不应在dealloc中调用</li>\n</ul>\n<h2 id=\"第三十二条\"><a href=\"#第三十二条\" class=\"headerlink\" title=\"第三十二条\"></a>第三十二条</h2><ul>\n<li><p>ARC不生成安全处理异常所需的清理代码，开启编译器标志后可以生成这种代码但是会导致应用程序变大，且会降低运行效率</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled31.png\" class=\"\">\n\n</li>\n</ul>\n<h2 id=\"第三十三条\"><a href=\"#第三十三条\" class=\"headerlink\" title=\"第三十三条\"></a>第三十三条</h2><ul>\n<li><p>当指向EOCClassA的实例引用移除后unsafe_unretained属性仍然指向已经回收的实例，而weak属性指向nil</p>\n  <img src=\"/2021/07/12/EffectiveObjcTips/Untitled32.png\" class=\"\">\n\n</li>\n</ul>\n<h2 id=\"第三十四条\"><a href=\"#第三十四条\" class=\"headerlink\" title=\"第三十四条\"></a>第三十四条</h2><p>系统会自动创建一些线程，如主线程或GCD机制中的线程都有自动释放池，这些线程都有autoreleasepool，每次执行event loop就会将其清空</p>\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled33.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled34.png\" class=\"\">\n\n<h2 id=\"第三十五条\"><a href=\"#第三十五条\" class=\"headerlink\" title=\"第三十五条\"></a>第三十五条</h2><ul>\n<li>系统在回收对象时可以将其转化为僵尸对象，通过环境变量NSZombieEnabled可以开启该功能，或在Xcode中开启</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled35.png\" class=\"\">\n\n<ul>\n<li>系统修改对象的isa指针指向特殊的僵尸类可以时该对象成为僵尸对鲜花，僵尸类能够响应所有的selector，在打印一条包含消息内容及接受者的消息后终止应用程序</li>\n</ul>\n<h2 id=\"第三十六条\"><a href=\"#第三十六条\" class=\"headerlink\" title=\"第三十六条\"></a>第三十六条</h2><p>在 ARC 下调用查询对象当前引用计数的方法会触发崩溃</p>\n<pre><code><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSUInteger</span>)retainCount</span><br></pre></td></tr></table></figure></code></pre><p>事实上该方法不应该调用，方法返回的retainCount是某个给定时间点上的数值，并未考虑系统会稍后清空自动释放池，无法反应对象生命期的全貌。</p>\n<h2 id=\"第三十七条\"><a href=\"#第三十七条\" class=\"headerlink\" title=\"第三十七条\"></a>第三十七条</h2><ul>\n<li><p>Block与定义它的函数共享同一个范围内的信息，块自有其相关类型，可以将块赋值给变量并使用它</p>\n  <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> (^someBlock) () = ^ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Block implementation</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> other = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> (^addBlock) (<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) = ^ (<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> other + a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum = addBlock(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>需要在Block内修改的变量需要加上 _block 修饰符，如果将块定义在Objective-C类的实例方法中，除了可以访问类的所有的实例变量外还可以使用self变量且无需添加_block。</li>\n<li>定义Block的时候分配的内存区域在栈上，即块只在定义的范围内有效，可以创建不会捕捉任何状态的全局块</li>\n</ul>\n</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled36.png\" class=\"\">\n\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled37.png\" class=\"\">\n\n<h2 id=\"第三十八条\"><a href=\"#第三十八条\" class=\"headerlink\" title=\"第三十八条\"></a>第三十八条</h2><img src=\"/2021/07/12/EffectiveObjcTips/Untitled38.png\" class=\"\">\n\n<ul>\n<li><p>以下展示了SDWebImage中Block的写法</p>\n  <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">void</span>(^SDWebImageDownloaderProgressBlock)(<span class=\"built_in\">NSUInteger</span> receivedSize, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> expectedSize);</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">void</span>(^SDWebImageDownloaderCompletedBlock)(<span class=\"built_in\">UIImage</span> *image, <span class=\"built_in\">NSData</span> *data, <span class=\"built_in\">NSError</span> *error, <span class=\"built_in\">BOOL</span> finished);</span><br><span class=\"line\"></span><br><span class=\"line\">****- (<span class=\"keyword\">void</span>)setImageWithURL:(<span class=\"built_in\">NSURL</span> *)url placeholderImage:(<span class=\"built_in\">UIImage</span> *)placeholder options:(SDWebImageOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageCompletedBlock)completedBlock;</span><br><span class=\"line\">- (<span class=\"keyword\">id</span>&lt;SDWebImageOperation&gt;)downloadImageWithURL:(<span class=\"built_in\">NSURL</span> *)url</span><br><span class=\"line\">                                        options:(SDWebImageDownloaderOptions)options</span><br><span class=\"line\">                                       progress:(SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class=\"line\">                                      completed:(SDWebImageDownloaderCompletedBlock)completedBlock;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>&lt;SDWebImageOperation&gt;)downloadImageWithURL:(<span class=\"built_in\">NSURL</span> *)url</span><br><span class=\"line\">                                timeOutInterval:(<span class=\"built_in\">NSTimeInterval</span>)timeOutInterval</span><br><span class=\"line\">                                        options:(SDWebImageDownloaderOptions)options</span><br><span class=\"line\">                                       progress:(SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class=\"line\">                                      completed:(SDWebImageDownloaderCompletedBlock)completedBlock;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"第三十九条\"><a href=\"#第三十九条\" class=\"headerlink\" title=\"第三十九条\"></a>第三十九条</h2><ul>\n<li><p>简洁程度上Delegate与Block的对比</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled39.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled40.png\" class=\"\">\n</li>\n<li><p>处理多个请求时Delegate与Block的对比</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled41.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled42.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled43.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled44.png\" class=\"\">\n</li>\n<li><p>在处理请求时采用两个独立的处理Block（1/2）</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled45.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled46.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled47.png\" class=\"\">\n</li>\n<li><p>在处理请求时采用同一个处理Block，令Block更为灵活但更为冗长</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled48.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled49.png\" class=\"\">\n\n</li>\n</ul>\n<h2 id=\"第四十条\"><a href=\"#第四十条\" class=\"headerlink\" title=\"第四十条\"></a>第四十条</h2><p>大部分网络通信库写法</p>\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled50.png\" class=\"\">\n\n<p>为了使得在下载完成后通过以下方法执行调用者指定的Block，需要将completion handler保存至实例变量，一旦运行完completion handler之后没有必要对其进行保留，从而避免出现retain cycle</p>\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled51.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled52.png\" class=\"\">\n\n<h2 id=\"第四十一条\"><a href=\"#第四十一条\" class=\"headerlink\" title=\"第四十一条\"></a>第四十一条</h2><ul>\n<li><p>串行队列，将读取操作与写入操作安排到同个队列中保证数据同步，可以将设置方法由同步派发改为异步执派发</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled53.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled54.png\" class=\"\">\n\n<ul>\n<li><p>并发队列，读取与写入操作可以随时执行</p>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled55.png\" class=\"\">\n\n<p>创建栅栏使得barrier块单独执行不与其他Block并行，对并发队列有意义，因为串行Block按顺序逐个执行</p>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled56.png\" class=\"\">\n\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled57.png\" class=\"\">\n\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled58.png\" class=\"\">\n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四十二条\"><a href=\"#第四十二条\" class=\"headerlink\" title=\"第四十二条\"></a>第四十二条</h2><ul>\n<li><p>performSelector接受的参数类型为id，限定了传入参数必须是对象，不能是整数或者浮点数，并且最多只能接受两个参数</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled59.png\" class=\"\">\n</li>\n<li><p>延后执行某项任务，优先使用GCD的方式</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled60.png\" class=\"\">\n</li>\n<li><p>把任务放到主线程上执行，把任务封装至Block中用GCD相关方法更为合适</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled61.png\" class=\"\">\n</li>\n<li><p>performSelector在内存管理方面存在缺失，无法确定将执行的Selector具体是什么</p>\n</li>\n</ul>\n<h2 id=\"第四十三条\"><a href=\"#第四十三条\" class=\"headerlink\" title=\"第四十三条\"></a>第四十三条</h2><ul>\n<li><p>GCD是纯C的API，操作队列是Objective-C的对象</p>\n</li>\n<li><p>Block是轻量级的书籍结构而Operation是重量级的Objective-C对象</p>\n</li>\n<li><p>在执行后台任务时GCD并不一定是最佳方式</p>\n</li>\n<li><p>使用NSOperation与NSOperationQueue有以下好处，能够实现纯GCD具备的绝大部分功能</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled62.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled63.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled64.png\" class=\"\">\n</li>\n<li><p>NSNotificationCenter 的 addObserverForName: 方法接受的参数是块而不是Selector</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled65.png\" class=\"\">\n</li>\n<li><p>确定哪一种方法的最好方式是测试性能</p>\n<h2 id=\"第四十四条\"><a href=\"#第四十四条\" class=\"headerlink\" title=\"第四十四条\"></a>第四十四条</h2></li>\n<li><p>dispatch group 能够将任务分组，调用者可以等待这组任务执行完毕同时也可以在提供回调函数之后继续执行</p>\n</li>\n<li><p>如下函数是dispatch_async的变体</p>\n</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled66.png\" class=\"\">\n\n<ul>\n<li>如下函数用于等待 dispatch group 执行完毕，timeout 参数表示阻塞时间，若执行时间短于timeout返回0</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled67.png\" class=\"\">\n\n<ul>\n<li>如下函数中可以传入在特定线程上执行的Block</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled68.png\" class=\"\">\n\n<ul>\n<li>令数组每个对象都执行某个任务，并且等待每个任务都执行完毕可以使用如下GCD特性</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled69.png\" class=\"\">\n\n<ul>\n<li>若当前线程不阻塞可以使用notify函数取代wait</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled70.png\" class=\"\">\n\n<ul>\n<li>区分任务的优先级放置于不同的线程执行，同时将所有任务归于一个dispatch group，并且在执行完毕后获得通知（并发队列）</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled71.png\" class=\"\">\n\n<ul>\n<li>将任务提交到串行队列中并用dispatch group 跟踪执行情况</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled72.png\" class=\"\">\n\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled73.png\" class=\"\">\n\n<h2 id=\"第四十五条\"><a href=\"#第四十五条\" class=\"headerlink\" title=\"第四十五条\"></a>第四十五条</h2><ul>\n<li><p>常用的一种共享单例的方法</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled74.png\" class=\"\">\n</li>\n<li><p>使用GCD实现共享单例的方法</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled75.png\" class=\"\">\n</li>\n<li><p>使用 dispatch_once 能够简化代码并且彻底保证线程安全开发者无需关心加锁或同步，所有问题都由GCD在底层进行处理，static 作用域能够保证编译器在每次执行该方法时复用该变量而不是重复创建</p>\n</li>\n</ul>\n<h2 id=\"第四十六条\"><a href=\"#第四十六条\" class=\"headerlink\" title=\"第四十六条\"></a>第四十六条</h2><ul>\n<li>dispatch_get_current_queue 函数尽量不要使用</li>\n</ul>\n<h2 id=\"第四十七条\"><a href=\"#第四十七条\" class=\"headerlink\" title=\"第四十七条\"></a>第四十七条</h2><ul>\n<li><p>框架指一系列代码被封装为动态库，并且在其中放入描述接口的头文件，iOS平台的系统框架仍然采用了动态库</p>\n</li>\n<li><p>iOS应用程序不允许在其中包含动态库于是就出现了静态库</p>\n</li>\n<li><p>关于静态库与动态库的了解可以参考 <a href=\"https://juejin.cn/post/6844904031937101838\" target=\"_blank\" rel=\"noopener\">细说iOS静态库和动态库</a></p>\n</li>\n<li><p>Cocoa 本身并不是框架而是集成了一批创建应用程序时需要用到的框架</p>\n</li>\n<li><p>Objective-C编程的一个重要特点是经常需要用到底层的C语言级API</p>\n</li>\n<li><p>CoreAnimation 使用Objective-C进行编写，而 CoreGraphics 框架采用C语言进行编写，两者均为 UI 框架之下的一等框架</p>\n</li>\n</ul>\n<h2 id=\"第四十八条\"><a href=\"#第四十八条\" class=\"headerlink\" title=\"第四十八条\"></a>第四十八条</h2><ul>\n<li><p>遍历方式</p>\n<ul>\n<li><p>for循环</p>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled76.png\" class=\"\">\n\n<p>字典与 set 均无顺序，无法根据下标访问数值。于是需要获取字典内所有键或 set 内所有对象，从而产生空间上的额外开销。然而执行反向遍历时 for 循环会更为方便。</p>\n</li>\n<li><p>NSEnumerator</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Dictionary</span></span><br><span class=\"line\"><span class=\"built_in\">NSDictionary</span> *dict = <span class=\"comment\">/* ... */</span>;</span><br><span class=\"line\"><span class=\"built_in\">NSEnumerator</span> *enumerator = [dict keyEnumerator];</span><br><span class=\"line\"><span class=\"keyword\">id</span> key;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((key = [enumerator nextObject]) != <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> value = dict[key];</span><br><span class=\"line\">\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Set</span></span><br><span class=\"line\"><span class=\"built_in\">NSSet</span> *set = <span class=\"comment\">/* ... */</span>;</span><br><span class=\"line\"><span class=\"built_in\">NSEnumerator</span> *enumerator = [set objectEnumerator];</span><br><span class=\"line\"><span class=\"keyword\">id</span> object;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((object = [enumerator nextObject]) != <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array</span></span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *array = <span class=\"comment\">/* ... */</span>;</span><br><span class=\"line\"><span class=\"built_in\">NSEnumerator</span> *enumerator = [array reverseObjectEnumerator];</span><br><span class=\"line\"><span class=\"keyword\">id</span> object;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((object = [enumerator nextObject]) != <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于所有的collection都可以采用这套语法，在读法上更容易被理解</p>\n</li>\n<li><p>for in 快速遍历</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Dictionary</span></span><br><span class=\"line\"><span class=\"built_in\">NSDictionary</span> *dict = <span class=\"comment\">/* ... */</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">id</span> key <span class=\"keyword\">in</span> dict) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> value = dict[key];</span><br><span class=\"line\">\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Set</span></span><br><span class=\"line\"><span class=\"built_in\">NSSet</span> *set = <span class=\"comment\">/* ... */</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">id</span> object <span class=\"keyword\">in</span> set) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array</span></span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *array = <span class=\"comment\">/* ... */</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">id</span> object <span class=\"keyword\">in</span> array) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">id</span> object <span class=\"keyword\">in</span> [array reverseObjectEnumerator]) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>某个支持快速遍历的类的对象遵从 NSFastEnumeration 协议可以实现对象的迭代，而NSEnumerator 也实现了该协议，该遍历方法无法获取遍历操作针对的下标。</p>\n</li>\n<li><p>基于Block的遍历</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Dictionary</span></span><br><span class=\"line\"><span class=\"built_in\">NSDictionary</span> *dict = <span class=\"comment\">/* ... */</span>;</span><br><span class=\"line\">[array enumerateKeysAndObjectsUsingBlock:</span><br><span class=\"line\">\t^(<span class=\"keyword\">id</span> key, <span class=\"keyword\">id</span> object, <span class=\"built_in\">BOOL</span> *stop) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (shouldStopHere) &#123;</span><br><span class=\"line\">\t\t\t\t*stop = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Set</span></span><br><span class=\"line\"><span class=\"built_in\">NSSet</span> *set = <span class=\"comment\">/* ... */</span>;</span><br><span class=\"line\">[array enumerateObjectsUsingBlock:</span><br><span class=\"line\">\t^(<span class=\"keyword\">id</span> object, <span class=\"built_in\">BOOL</span> *stop) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (shouldStopHere) &#123;</span><br><span class=\"line\">\t\t\t\t*stop = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array</span></span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *array = <span class=\"comment\">/* ... */</span>;</span><br><span class=\"line\">[array enumerateObjectsUsingBlock:</span><br><span class=\"line\">\t^(<span class=\"keyword\">id</span> object, <span class=\"built_in\">NSUInteger</span> idx, <span class=\"built_in\">BOOL</span> *stop) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (shouldStopHere) &#123;</span><br><span class=\"line\">\t\t\t\t*stop = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<p>使得遍历能够从Block中获取信息，并且可以在遍历数组获取数组的下标。</p>\n<p>NSEnumerationOptions 类型为enum，如果开启了NSEnumerationConcurrent 底层会使用GCD处理出发执行事宜，采用其他方法很难实现。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四十九条\"><a href=\"#第四十九条\" class=\"headerlink\" title=\"第四十九条\"></a>第四十九条</h2><ul>\n<li><p>使用桥接技术可以实现定义在Foundation框架内的Objective-C类与CoreFoundation 框架中的 C 数据结构的相互转换</p>\n  <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *anNSArray = @[@<span class=\"number\">1</span>, @<span class=\"number\">2</span>, @<span class=\"number\">3</span>, @<span class=\"number\">4</span>, @<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">CFArrayRef</span> *aCGArray = (__bridge <span class=\"built_in\">CFArrayRef</span>)anNSArray;</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"size of array = %li\"</span>, <span class=\"built_in\">CFArrayGetCount</span>(aCFArray)); </span><br><span class=\"line\"></span><br><span class=\"line\">gradientLayer.colors = @[(__bridge <span class=\"keyword\">id</span>)[<span class=\"built_in\">UIColor</span> ne_colorWithHexString:<span class=\"string\">@\"000000\"</span> alpha:<span class=\"number\">0.95</span>].CGColor,</span><br><span class=\"line\">                                            (__bridge <span class=\"keyword\">id</span>)[<span class=\"built_in\">UIColor</span> ne_colorWithHexString:<span class=\"string\">@\"000000\"</span> alpha:<span class=\"number\">0.95</span>].CGColor,</span><br><span class=\"line\">                                            (__bridge <span class=\"keyword\">id</span>)[<span class=\"built_in\">UIColor</span> ne_colorWithHexString:<span class=\"string\">@\"000000\"</span> alpha:<span class=\"number\">0.72</span>].CGColor,</span><br><span class=\"line\">                                            (__bridge <span class=\"keyword\">id</span>)[<span class=\"built_in\">UIColor</span> ne_colorWithHexString:<span class=\"string\">@\"000000\"</span> alpha:<span class=\"number\">0.45</span>].CGColor,</span><br><span class=\"line\">                                            (__bridge <span class=\"keyword\">id</span>)[<span class=\"built_in\">UIColor</span> ne_colorWithHexString:<span class=\"string\">@\"000000\"</span> alpha:<span class=\"number\">0.28</span>].CGColor,</span><br><span class=\"line\">                                            ];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>bridge 含义为ARC具备该对象的所有权，</strong>bridge_retained表示ARC交出该对象的所有权， 通过__bridge告诉ARC如何处理转换涉及的Objective-C对象</p>\n</li>\n<li><p>Foundation 框架中的 Objective-C 类具备的某些功能是 CoreFoundation 框架中的 C语言数据结构不具备的</p>\n</li>\n</ul>\n<h2 id=\"第五十条\"><a href=\"#第五十条\" class=\"headerlink\" title=\"第五十条\"></a>第五十条</h2><ul>\n<li>NSCache 在系统资源耗尽时能够自动删减缓存，采用LRU策略</li>\n<li>NSCache并不会直接拷贝键，而是保留键</li>\n<li>NSCache是线程安全的，多个线程可以同时访问NSCache</li>\n<li>NSCache可以设置针对对象个数以及总成本的上限</li>\n</ul>\n<p>缓存的一般用法</p>\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled77.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled78.png\" class=\"\">\n\n<p>加入 NSPurgeable 的缓存用法</p>\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled79.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled80.png\" class=\"\">\n\n<ul>\n<li>重复计算会带来性能开销的数据值得被放入缓存，从而提高应用程序的响应速度</li>\n<li>NSPurgeableData 与 NSCache 一起使用能够实现自动清除数据的功能</li>\n</ul>\n<h2 id=\"第五十一条\"><a href=\"#第五十一条\" class=\"headerlink\" title=\"第五十一条\"></a>第五十一条</h2><ul>\n<li>load 方法并不像普通的方法那样，她不遵从继承规则，如果某个类本身不实现load方法那么无论其各级超类是否实现此方法系统都不会调用</li>\n<li>load 与 initialize 方法务必精简实现，因为会产生阻塞从而使得应用程序无响应</li>\n<li>initialize 方法在程序首次用该类前调用一次，并且使用runtime进行调用，只应该用来设置内部数据而不应该调用其他方法</li>\n<li>如果某个类本身不实现 initialize 方法然而超类完成了就会调用超类的实现方法，如下图中初始化子类后由于该类未覆写该方法于是需要执行父类的实现代码，于是得到了通常的子类实现方法</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled81.png\" class=\"\">\n\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled82.png\" class=\"\">\n\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled83.png\" class=\"\">\n\n<h2 id=\"第五十二条\"><a href=\"#第五十二条\" class=\"headerlink\" title=\"第五十二条\"></a>第五十二条</h2><ul>\n<li><p>NSTimer 对象会保留目标直到计时器失效，需要调用invalidate方法令其失效</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled84.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled85.png\" class=\"\">\n</li>\n<li><p>反复执行的计时器容易引入retain cycle，可以使用 Block 的方式打破，需要注意的是必须创建分类来加入相关实现代码</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>准备开始写 Objective-C 之前花了一些时间重新阅读这本经典的《Effective Objective-C》，在阅读的过程中对重点内容进行了一些摘录，在方便自己复习的同时将相关内容在博客分享出来供参考。</p>","more":"<h2 id=\"第一节\"><a href=\"#第一节\" class=\"headerlink\" title=\"第一节\"></a>第一节</h2><ul>\n<li>Objective-C 采用了动态绑定的消息结构，在运行时检查对象的类型，运行期环境决定了接受消息后需要执行的代码。</li>\n<li>Objective-C 对象所占内存分配在堆空间中，分配在堆空间中的内存必须直接管理。</li>\n<li>定义中不含*的变量分配在栈空间上，分配在栈的用于保存变量的内存会在栈帧弹出时自动清理。</li>\n<li>如果需要存储int、float、double、char等非对象类型推荐使用结构体。</li>\n</ul>\n<h2 id=\"第二节\"><a href=\"#第二节\" class=\"headerlink\" title=\"第二节\"></a>第二节</h2><ul>\n<li>在 .h 文件中使用@class 标识需要引入的类并且在 .m 文件中引入相关头文件，该种方式被称为向前声明，简单的说，将引入头文件的时机尽量向后可以减短编译的时间，并且能够解决互相引用问题。尽量不要引入头文件，降低类之间的耦合。</li>\n<li>有时无法使用向前声明，比如要声明某个类遵循一项协议。此时应尽量把“该类遵循某协议〞的这条声明移至“class-continuation 分类” 中。如果不行就把协议单独放在一个头文件中然后将其引人。</li>\n</ul>\n<h2 id=\"第三节\"><a href=\"#第三节\" class=\"headerlink\" title=\"第三节\"></a>第三节</h2><ul>\n<li>尽量使用字面量语法创建字符串、数值、数组、字典</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSNumber</span> *intNumber = @<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">NSNumber</span> *floatNumber = @<span class=\"number\">1.1</span>f;</span><br><span class=\"line\"><span class=\"built_in\">NSNumber</span> *doubleNumber = @<span class=\"number\">1.123456</span>;</span><br><span class=\"line\"><span class=\"built_in\">NSNumber</span> *boolNumber = @YES;</span><br><span class=\"line\"><span class=\"built_in\">NSNumber</span> *charNumber = @<span class=\"string\">'a'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> numberInt = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">float</span> numberFloat = <span class=\"number\">1.23</span>f;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *animals = @[<span class=\"string\">@\"cat\"</span>, <span class=\"string\">@\"dog\"</span>, <span class=\"string\">@\"mouse\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *dog = <span class=\"string\">@\"shiba\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSDictionary</span> *personData = @&#123;<span class=\"string\">@\"firstName\"</span> : <span class=\"string\">@\"Stephen\"</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t <span class=\"string\">@\"lastName\"</span> : <span class=\"string\">@\"Fang\"</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t <span class=\"string\">@\"gender\"</span> : <span class=\"string\">@\"male\"</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>NSArray 的 arrayWithObjects 方法依次处理各个参数直到发现nil，而如果使用字面量的方法在创建时就会抛出异常终止程序执行，需要确保创建的数组与字典中不含有nil</li>\n<li>尽量使用取下标的方式来访问数组或字典中的元素</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSString</span> *dog = animals[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *lastName = personData[<span class=\"string\">@\"lastName\"</span>];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第四节\"><a href=\"#第四节\" class=\"headerlink\" title=\"第四节\"></a>第四节</h2><ul>\n<li>#define预处理指令声明全局变量尽量少用，编译器只会执行查找和替换操作，不会产生重复定义的警告信息</li>\n<li>尽量使用 static const 声明的方式来完成变量的声明，static表示该变量在定义此变量的编译单元中可见，而static const不会创建符号，只是将变量替换为常量</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"built_in\">NSTimeInterval</span> kAnimationDuration = <span class=\"number\">0.3</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>编译器看到extern关键字得知全局符号表中包含该符号无需查看该定义就允许只用该常量，该类常量只可以定义一次，命名最好使用与之相关的类名作为前缀</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In the header file</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> EOCStringConstant;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// In the implementation file </span></span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> EOCStringConstant = <span class=\"string\">@\"DEMO\"</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第五节\"><a href=\"#第五节\" class=\"headerlink\" title=\"第五节\"></a>第五节</h2><ul>\n<li>保证枚举由底层数据类型实现，不采用编译器所选类型</li>\n<li>凡是需要以按位或操作来组合的枚举都应使用NS_OPTIONS定义，若枚举不需要相互组合应使用NS_ENUM来定义</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_ENUM</span>(<span class=\"built_in\">NSUInteger</span>, STFFeedPageType) &#123;</span><br><span class=\"line\">    STFFeedPageTypeNone = <span class=\"number\">0</span>,             <span class=\"comment\">// 未知</span></span><br><span class=\"line\">    STFFeedPageTypeFollow = <span class=\"number\">1</span>,           <span class=\"comment\">// 关注页</span></span><br><span class=\"line\">    STFFeedPageTypeRecommend = <span class=\"number\">2</span>,        <span class=\"comment\">// 推荐页</span></span><br><span class=\"line\">    STFFeedPageTypeFeatured = <span class=\"number\">3</span>,         <span class=\"comment\">// 精选页</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_OPTIONS</span>(<span class=\"built_in\">NSUInteger</span>, AgoraAudioSessionOperationRestriction) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** No restriction, the SDK has full control of the audio session operations. */</span></span><br><span class=\"line\">    AgoraAudioSessionOperationRestrictionNone              = <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\">/** The SDK does not change the audio session category. */</span></span><br><span class=\"line\">    AgoraAudioSessionOperationRestrictionSetCategory       = <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"comment\">/** The SDK does not change any setting of the audio session (category, mode, categoryOptions). */</span></span><br><span class=\"line\">    AgoraAudioSessionOperationRestrictionConfigureSession  = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"comment\">/** The SDK keeps the audio session active when leaving a channel. */</span></span><br><span class=\"line\">    AgoraAudioSessionOperationRestrictionDeactivateSession = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"comment\">/** The SDK does not configure the audio session anymore. */</span></span><br><span class=\"line\">    AgoraAudioSessionOperationRestrictionAll               = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">7</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>处理枚举类型的switch语句不要实现default分支</li>\n</ul>\n<h2 id=\"第六节\"><a href=\"#第六节\" class=\"headerlink\" title=\"第六节\"></a>第六节</h2><ul>\n<li>在iOS中一般不使用atomic，因为同步锁会带来较大的开销，且无法保证线程安全</li>\n<li>尽量使用@property语法定义对象封装的数据</li>\n<li>在设置属性对应的实例变量时需要遵从属性声明的语义</li>\n<li>针对CGFloat、NSInteger此类纯量类型采用assign声明即可</li>\n<li>copy类型用于保护NSString*类型的封装性，在ARC下直接访问一个声明为copy的属性并不会直接拷贝而是保留新值释放旧值</li>\n</ul>\n<h2 id=\"第七节\"><a href=\"#第七节\" class=\"headerlink\" title=\"第七节\"></a>第七节</h2><ul>\n<li>在对象内部尽量直接访问实例变量<ul>\n<li>速度更快且生成的代码会直接访问对象实例变量的那块内存</li>\n<li>不会调用“设置方法”</li>\n<li>不会触发KVO，但需要确定是否会产生问题</li>\n<li>通过给getter、setter设置断点可以进行监控和确定访问时机</li>\n</ul>\n</li>\n<li>在写入实例变量时可以通过属性写入，读取实例变量时直接访问，可以作为一种折中方案</li>\n<li>在初始化方法及dealloc方法中，应该直接通过实例变量读取数据，即_</li>\n<li>懒加载方式中必须使用getter的方式访问属性，如果在没有用getter的情况下直接访问实例变量会导致得到是尚未设置好的变量</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (STFComponent*)component &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!_component) &#123;</span><br><span class=\"line\">\t\t\t\t\t_component = [SFComponent new];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> _component;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第八节\"><a href=\"#第八节\" class=\"headerlink\" title=\"第八节\"></a>第八节</h2><ul>\n<li>== 操作符对比的是两个指针本身并非所指对象</li>\n<li>NSString类实现了一个等同判断方法即isEqualToString，执行该方法的速度快于执行isEqual</li>\n<li>检测对象的等同性需要提供 isEqual 与 hash 方法，NSObject对于两个方法默认实现是仅当指针值完全相等才返回相等，需要针对具体的需求制定检测方案</li>\n<li>编写hash方法时需要使用计算速度快且哈希碰撞低的算法</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- （<span class=\"built_in\">BOOL</span>）isEqual:(<span class=\"keyword\">id</span>)object &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> == object) <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>; <span class=\"comment\">// 指向同一个对象必然相等</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>] != [object <span class=\"keyword\">class</span>]) <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>; <span class=\"comment\">//不属于同一个类不相等</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 检测每一个属性是否相等</span></span><br><span class=\"line\">\t\tSTFPerson *someone = (STFPerson*) object;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (![_firstName isEqualToString:someone.firstName])</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (![_lastName isEqualToString:someone.lastName])</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (![_age != someone.age])</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> - (<span class=\"built_in\">NSUInteger</span>)hash &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">NSUInteger</span> firstNameHash = [_firstName hash]；</span><br><span class=\"line\">\t\t<span class=\"built_in\">NSUInteger</span> lastNameHash = [_lastName hash]；</span><br><span class=\"line\">\t\t<span class=\"built_in\">NSUInteger</span> ageHash = [_ageHash hash]；</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> firstNameHash ^ lastNameHash ^ ageHash；</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>NSArray有等同性判定方法”isEqualToArray:”，而NSDictionary有等同性判定方法”isEqualToDictionary:”， NSArray检测方式为首先核对两个数组包含对象的个数是否相等，若相等在每个对应位置调用”isEqual:”方法</li>\n<li>在编写判定方法时应一并覆写”isEqual:”方法，如果接收该消息的对象与受测参数来自一个类就调用自己编写的判定方法，负责交由超类判定</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-  (<span class=\"built_in\">BOOL</span>)isEqual:(<span class=\"keyword\">id</span>)object &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>] == [object <span class=\"keyword\">class</span>]) </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> isEqualToPerson:(STFPerson*)object];</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> [<span class=\"keyword\">super</span> isEqual: object];</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第九节\"><a href=\"#第九节\" class=\"headerlink\" title=\"第九节\"></a>第九节</h2><ul>\n<li>UIButton类使用者无需关系创建出来的按钮属于哪个子类也无需考虑按钮绘制方式等细节</li>\n<li>类族的使用需要遵循以下原则<ul>\n<li>子类应该继承自类族的抽象基类</li>\n<li>子类应该定义自己的数据存储方式</li>\n<li>子类应该覆写超类文档中需要覆写的方法</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第十节\"><a href=\"#第十节\" class=\"headerlink\" title=\"第十节\"></a>第十节</h2><ul>\n<li>在其他做法不可行的条件下可以选用关联对象，因为这种做法同样会引入难以查找的bug（不建议使用）</li>\n</ul>\n<h2 id=\"第十一节\"><a href=\"#第十一节\" class=\"headerlink\" title=\"第十一节\"></a>第十一节</h2><ul>\n<li>在编译期就能决定运行时所需要调用的函数为静态绑定，而所需要调用的函数直到运行期才能确定为动态绑定</li>\n<li>runtime决定了对象收到消息后调用哪个方法，甚至在程序运行时可以改变。发送给对象的所有消息都由动态信息派发系统处理</li>\n<li>objc_msgSend函数根据receive和selector的类型调用适当的方法，通过查找每个类中的“表格”查找需要执行的方法并跳转至相应的实现</li>\n<li>尾调用优化在函数的最后一项是调用另一个函数时生效，编译器生成跳转至另一个函数所需的指令码</li>\n</ul>\n<h2 id=\"第十二节\"><a href=\"#第十二节\" class=\"headerlink\" title=\"第十二节\"></a>第十二节</h2><ul>\n<li><p>消息转发分为两个阶段</p>\n<ul>\n<li><p>第一阶段：动态方法解析</p>\n</li>\n<li><p>第二阶段：消息转发机制</p>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled.png\" class=\"\">\n</li>\n</ul>\n</li>\n<li><p>receiver在每一步都有机会处理消息且步骤越往后处理消息的代价越大</p>\n</li>\n<li><p>如果对象没有办法响应某个selector则进入消息转发流程,runtime的动态方法解析可以在需要某个方法时将其加入类中，对象可以将无法解析的selector转交给其他对象处理。这一步结束后若仍然无法处理selector则启动消息转发机制</p>\n</li>\n</ul>\n<h2 id=\"第十三节\"><a href=\"#第十三节\" class=\"headerlink\" title=\"第十三节\"></a>第十三节</h2><ul>\n<li>在runtime中可以向类中新增或替换selector对应的方法实现，但一般只用于调试</li>\n<li>method swizzling，即使用另一份实现替换原有的方法实现，可以用于向原有的实现中添加新功能</li>\n</ul>\n<h2 id=\"第十四节\"><a href=\"#第十四节\" class=\"headerlink\" title=\"第十四节\"></a>第十四节</h2><ul>\n<li>每个Objective-C对象实例都有指向Class对象的指针，每个对象结构体的首个成员是Class类的变量，该变量定义了对象所属的类，通常称为”is a”指针</li>\n<li>isMemberOfClass 判断对象是否为某个特定类的实例，isKindOfClass 判断对象是否是某类或派生类的实例</li>\n<li>动态类型特性可以用于从 collection 中获取对象（类型信息查询方法）</li>\n<li>假设名为SomeClass的子类继承自NSObject可以得到以下继承体系</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled1.png\" class=\"\">\n\n<h2 id=\"第十五节\"><a href=\"#第十五节\" class=\"headerlink\" title=\"第十五节\"></a>第十五节</h2><ul>\n<li>类名、分类名都应该加上相应的前缀，如果使用三方库编写自己的代码并分发尤其需要注意重复符号问题</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled2.png\" class=\"\">\n\n<h2 id=\"第十六节\"><a href=\"#第十六节\" class=\"headerlink\" title=\"第十六节\"></a>第十六节</h2><ul>\n<li>在类中实现一个designated initializer，尽量在文档中指明初始化需要调用该方法</li>\n<li>若designated initializer不同于超类则需覆写超类对应方法</li>\n<li>如果超类的初始化方法不适用于子类应覆写超类方法并抛出异常</li>\n</ul>\n<h2 id=\"第十七节\"><a href=\"#第十七节\" class=\"headerlink\" title=\"第十七节\"></a>第十七节</h2><ul>\n<li>实现description方法能够返回一个有意义的字符串来描述实例，需要打印出类的名字和指针地址因为有时候会用到</li>\n<li>使用NSDictionary来编写description方法使代码更容易维护</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled3.png\" class=\"\">\n\n<ul>\n<li>在调试时打印更为详尽的对象描述信息应实现debugDescription方法</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled4.png\" class=\"\">\n\n<h2 id=\"第十八节\"><a href=\"#第十八节\" class=\"headerlink\" title=\"第十八节\"></a>第十八节</h2><ul>\n<li>尽量创建不可变对象，把对外公开的属性设置为只读且在必要时对外公布属性</li>\n<li>某属性仅用于对象内部修改应将其从readonly改为readwrite属性</li>\n<li>可变的collection不应作为属性公开，而应提供相关方法修改可变的collection</li>\n</ul>\n<h2 id=\"第十九节\"><a href=\"#第十九节\" class=\"headerlink\" title=\"第十九节\"></a>第十九节</h2><p>如果从其他框架中继承子类务必遵循命名惯例，如从UIView中继承自定义子类则类名末尾词为View，若创建自定义委托协议末尾应跟上Delegate一词。</p>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled5.png\" class=\"\">\n\n<h2 id=\"第二十节\"><a href=\"#第二十节\" class=\"headerlink\" title=\"第二十节\"></a>第二十节</h2><ul>\n<li>适当给私有方法加上前缀可以很容易将其与公共方法进行区分</li>\n<li>不应使用一个下划线做私有方法的前缀，如 _resetViewController 方法已经被苹果实现</li>\n</ul>\n<h2 id=\"第二十一节\"><a href=\"#第二十一节\" class=\"headerlink\" title=\"第二十一节\"></a>第二十一节</h2><ul>\n<li>Objective-C对于异常采取的态度为：只有在极为罕见的情况下才抛出异常，并在异常抛出后无需考虑恢复问题，应用程序此时应该退出。异常应该运用于极其严重的问题</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled6.png\" class=\"\">\n\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)doSomething:(<span class=\"built_in\">NSError</span>**) error</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)doSomething:(<span class=\"built_in\">NSError</span>**) error &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something that may cause an error</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( <span class=\"comment\">/* there was an error */</span> ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">\t\t\t\t\t*error = [<span class=\"built_in\">NSErrorerrorwithDomain</span>:domain code:code userInfo:userInfo];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSError</span> *error = <span class=\"literal\">nil</span>;</span><br><span class=\"line\"><span class=\"built_in\">BOOL</span> ret = [object doSomething: &amp;error];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// handle error </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled7.png\" class=\"\">\n\n<p>传递给方法的是个指针，指针本身指向另一个指向NSError对象的指针，或认为其为一个直接指向NSError对象的指针。在 ARC 中，指针所指向的对象会在方法执行完毕后自动释放。</p>\n<h2 id=\"第二十二节\"><a href=\"#第二十二节\" class=\"headerlink\" title=\"第二十二节\"></a>第二十二节</h2><ul>\n<li>使自己的类支持拷贝操作需要实现NSCopying协议，该协议只有一个方法且不必担心zone参数。覆写copy方法真正需要实现的是copyWithZone方法。</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">id</span>)copyWithZone:(<span class=\"built_in\">NSZone</span>*)zone</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>)copyWithZone:(<span class=\"built_in\">NSZone</span>*)zone &#123;</span><br><span class=\"line\">\t\tSTFPerson *<span class=\"keyword\">copy</span> = [[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>] allocWithZone:zone]initWithFirstName:_firstName andLastName:_lastName];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">copy</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>在可变对象上调用copy会返回一个不可变类的实例，可能会把NSMutableArray对象当作NSArray返回，为了安全起见使用copy和mutableCopy这两个方法复制对象</p>\n</li>\n<li><p>深拷贝与浅拷贝</p>\n<ul>\n<li><p>深拷贝：拷贝对象自身时一并拷贝其底层数据，需要新增一个专门执行深拷贝的方法</p>\n</li>\n<li><p>浅拷贝：只拷贝容器对象本身不拷贝其中数据；Foundation框架所有collection类执行拷贝的默认情况；实现copyWithZone方法</p>\n</li>\n<li><p>图解：</p>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled8.png\" class=\"\">\n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二十三节\"><a href=\"#第二十三节\" class=\"headerlink\" title=\"第二十三节\"></a>第二十三节</h2>   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled9.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled10.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled11.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled12.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled13.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled14.png\" class=\"\">\n\n<p>存放委托对象的属性需要为weak（在对象销毁时自动清空）或unsafe_unretained（不需要自动清空）。</p>\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled15.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled16.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled17.png\" class=\"\">\n\n<ul>\n<li>某个对象从另一个对象获取数据可以使用委托模式，亦成为数据源模式，数据的流动如上图所示</li>\n<li>如果有必要可以实现有段位的结构体将委托对象是否能响应相关协议的信息缓存至其中</li>\n</ul>\n<h2 id=\"第二十四条\"><a href=\"#第二十四条\" class=\"headerlink\" title=\"第二十四条\"></a>第二十四条</h2><ul>\n<li><p>通过分类机制将代码划分为易于管理的小块</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled18.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled19.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled20.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled21.png\" class=\"\">\n</li>\n<li><p>可以创建名为Private的分类并将私有方法放在里面，这个分类的方法只在类和框架内部使用无需对外公布</p>\n</li>\n</ul>\n<h2 id=\"第二十五条\"><a href=\"#第二十五条\" class=\"headerlink\" title=\"第二十五条\"></a>第二十五条</h2><ul>\n<li><p>向第三方类中添加分类时给分类名与方法名加上前缀</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled22.png\" class=\"\">\n\n</li>\n</ul>\n<h2 id=\"第二十六条\"><a href=\"#第二十六条\" class=\"headerlink\" title=\"第二十六条\"></a>第二十六条</h2><ul>\n<li><p>在实现分类时所有属性都应该定义在主接口内，类所封装的所有数据都应该定义在主接口内</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled23.png\" class=\"\">\n\n</li>\n</ul>\n<h2 id=\"第二十七条\"><a href=\"#第二十七条\" class=\"headerlink\" title=\"第二十七条\"></a>第二十七条</h2><ul>\n<li><p>class-continuation 分类中可以定义方法和实例变量，如下方式中_anotherInstanceVariable 是隐藏的状态</p>\n  <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">STFPerson</span>() </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">NSString</span> *_anInstanceVariable;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Methods declaration</span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">STFPerson</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> _anotherInstanceVariable;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Methods implementation </span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled24.png\" class=\"\">\n</li>\n<li><p>WebKit、CoreAnimation 底层大部分代码用C++编写，对外展示的为Objective-C接口</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled25.png\" class=\"\">\n</li>\n<li><p>上图方式可以随意调用setFirstName与setLastName方法与点语法设置属性，同时外界无法修改对象，完成了类型的拓展</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled26.png\" class=\"\">\n\n<ul>\n<li>不需要在公共接口中声明类遵从了私有协议，而应该改到 class-continuation 分类内进行声明</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二十八条\"><a href=\"#第二十八条\" class=\"headerlink\" title=\"第二十八条\"></a>第二十八条</h2><ul>\n<li><p>协议可以在某种程度上提供匿名类型，具体的对象类型淡化成为遵从某个协议的id类型，协议离规定对象应该实现的方法。下图中与数据库连接相关的类名称就无法泄漏</p>\n  <img src=\"/2021/07/12/EffectiveObjcTips/Untitled27.png\" class=\"\">\n</li>\n<li><p>使用匿名对象实现类型名称的隐藏，需要注意的是对象需要能够响应定义在协议中的方法</p>\n</li>\n<li><p>下图中其中sectionInfo为匿名对象，把section数组中返回的内部状态对象视为遵从NSFetchedResultsSectionInfo的匿名对象，隐藏了相关实现细节。</p>\n  <img src=\"/2021/07/12/EffectiveObjcTips/Untitled28.png\" class=\"\">\n\n</li>\n</ul>\n<h2 id=\"第二十九条\"><a href=\"#第二十九条\" class=\"headerlink\" title=\"第二十九条\"></a>第二十九条</h2><ul>\n<li><p>对象创建完成后引用计数至少为1，如果需要保留该对象需要调用retain方法，如果不再需要该对象则调用release、autorelease方法，当引用计数归零时对象被回收</p>\n  <img src=\"/2021/07/12/EffectiveObjcTips/Untitled29.png\" class=\"\">\n</li>\n<li><p>为了避免使用无效对象一般在完成调用release之后清空指针，保证不会出现指向无效对象的指针</p>\n  <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSNumber</span> *number = [[<span class=\"built_in\">NSNumber</span> alloc]initWithInt: <span class=\"number\">1234</span>];</span><br><span class=\"line\">[array addObject: number];</span><br><span class=\"line\">[number release];</span><br><span class=\"line\">number = <span class=\"literal\">nil</span>;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"第三十条\"><a href=\"#第三十条\" class=\"headerlink\" title=\"第三十条\"></a>第三十条</h2><ul>\n<li>ARC会自动执行retain、release、autorelease等操作，不能直接对这些方法（还包括dealloc）进行调用</li>\n<li>ARC在调用这些方法并不通过Objective-C消息派发机制，而是直接调用底层C语言版本，能够带来更好的性能</li>\n<li>若方法名以以下的几个四个词语开头则表示返回的对象归调用者所有，反之返回的对象会自动释放<ul>\n<li>copy</li>\n<li>mutableCopy</li>\n<li>new</li>\n<li>alloc</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三十一条\"><a href=\"#第三十一条\" class=\"headerlink\" title=\"第三十一条\"></a>第三十一条</h2>   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled30.png\" class=\"\">\n\n<ul>\n<li>如果对象持有文件描述符等系统资源，应该专门写一个方法释放此类资源，用完使用close方法</li>\n<li>执行异步任务的方法和只能在正常状态下执行的方法不应在dealloc中调用</li>\n</ul>\n<h2 id=\"第三十二条\"><a href=\"#第三十二条\" class=\"headerlink\" title=\"第三十二条\"></a>第三十二条</h2><ul>\n<li><p>ARC不生成安全处理异常所需的清理代码，开启编译器标志后可以生成这种代码但是会导致应用程序变大，且会降低运行效率</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled31.png\" class=\"\">\n\n</li>\n</ul>\n<h2 id=\"第三十三条\"><a href=\"#第三十三条\" class=\"headerlink\" title=\"第三十三条\"></a>第三十三条</h2><ul>\n<li><p>当指向EOCClassA的实例引用移除后unsafe_unretained属性仍然指向已经回收的实例，而weak属性指向nil</p>\n  <img src=\"/2021/07/12/EffectiveObjcTips/Untitled32.png\" class=\"\">\n\n</li>\n</ul>\n<h2 id=\"第三十四条\"><a href=\"#第三十四条\" class=\"headerlink\" title=\"第三十四条\"></a>第三十四条</h2><p>系统会自动创建一些线程，如主线程或GCD机制中的线程都有自动释放池，这些线程都有autoreleasepool，每次执行event loop就会将其清空</p>\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled33.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled34.png\" class=\"\">\n\n<h2 id=\"第三十五条\"><a href=\"#第三十五条\" class=\"headerlink\" title=\"第三十五条\"></a>第三十五条</h2><ul>\n<li>系统在回收对象时可以将其转化为僵尸对象，通过环境变量NSZombieEnabled可以开启该功能，或在Xcode中开启</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled35.png\" class=\"\">\n\n<ul>\n<li>系统修改对象的isa指针指向特殊的僵尸类可以时该对象成为僵尸对鲜花，僵尸类能够响应所有的selector，在打印一条包含消息内容及接受者的消息后终止应用程序</li>\n</ul>\n<h2 id=\"第三十六条\"><a href=\"#第三十六条\" class=\"headerlink\" title=\"第三十六条\"></a>第三十六条</h2><p>在 ARC 下调用查询对象当前引用计数的方法会触发崩溃</p>\n<pre><code><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSUInteger</span>)retainCount</span><br></pre></td></tr></table></figure></code></pre><p>事实上该方法不应该调用，方法返回的retainCount是某个给定时间点上的数值，并未考虑系统会稍后清空自动释放池，无法反应对象生命期的全貌。</p>\n<h2 id=\"第三十七条\"><a href=\"#第三十七条\" class=\"headerlink\" title=\"第三十七条\"></a>第三十七条</h2><ul>\n<li><p>Block与定义它的函数共享同一个范围内的信息，块自有其相关类型，可以将块赋值给变量并使用它</p>\n  <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> (^someBlock) () = ^ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Block implementation</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> other = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> (^addBlock) (<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) = ^ (<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> other + a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum = addBlock(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>需要在Block内修改的变量需要加上 _block 修饰符，如果将块定义在Objective-C类的实例方法中，除了可以访问类的所有的实例变量外还可以使用self变量且无需添加_block。</li>\n<li>定义Block的时候分配的内存区域在栈上，即块只在定义的范围内有效，可以创建不会捕捉任何状态的全局块</li>\n</ul>\n</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled36.png\" class=\"\">\n\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled37.png\" class=\"\">\n\n<h2 id=\"第三十八条\"><a href=\"#第三十八条\" class=\"headerlink\" title=\"第三十八条\"></a>第三十八条</h2><img src=\"/2021/07/12/EffectiveObjcTips/Untitled38.png\" class=\"\">\n\n<ul>\n<li><p>以下展示了SDWebImage中Block的写法</p>\n  <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">void</span>(^SDWebImageDownloaderProgressBlock)(<span class=\"built_in\">NSUInteger</span> receivedSize, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> expectedSize);</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">void</span>(^SDWebImageDownloaderCompletedBlock)(<span class=\"built_in\">UIImage</span> *image, <span class=\"built_in\">NSData</span> *data, <span class=\"built_in\">NSError</span> *error, <span class=\"built_in\">BOOL</span> finished);</span><br><span class=\"line\"></span><br><span class=\"line\">****- (<span class=\"keyword\">void</span>)setImageWithURL:(<span class=\"built_in\">NSURL</span> *)url placeholderImage:(<span class=\"built_in\">UIImage</span> *)placeholder options:(SDWebImageOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageCompletedBlock)completedBlock;</span><br><span class=\"line\">- (<span class=\"keyword\">id</span>&lt;SDWebImageOperation&gt;)downloadImageWithURL:(<span class=\"built_in\">NSURL</span> *)url</span><br><span class=\"line\">                                        options:(SDWebImageDownloaderOptions)options</span><br><span class=\"line\">                                       progress:(SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class=\"line\">                                      completed:(SDWebImageDownloaderCompletedBlock)completedBlock;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>&lt;SDWebImageOperation&gt;)downloadImageWithURL:(<span class=\"built_in\">NSURL</span> *)url</span><br><span class=\"line\">                                timeOutInterval:(<span class=\"built_in\">NSTimeInterval</span>)timeOutInterval</span><br><span class=\"line\">                                        options:(SDWebImageDownloaderOptions)options</span><br><span class=\"line\">                                       progress:(SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class=\"line\">                                      completed:(SDWebImageDownloaderCompletedBlock)completedBlock;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"第三十九条\"><a href=\"#第三十九条\" class=\"headerlink\" title=\"第三十九条\"></a>第三十九条</h2><ul>\n<li><p>简洁程度上Delegate与Block的对比</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled39.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled40.png\" class=\"\">\n</li>\n<li><p>处理多个请求时Delegate与Block的对比</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled41.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled42.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled43.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled44.png\" class=\"\">\n</li>\n<li><p>在处理请求时采用两个独立的处理Block（1/2）</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled45.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled46.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled47.png\" class=\"\">\n</li>\n<li><p>在处理请求时采用同一个处理Block，令Block更为灵活但更为冗长</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled48.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled49.png\" class=\"\">\n\n</li>\n</ul>\n<h2 id=\"第四十条\"><a href=\"#第四十条\" class=\"headerlink\" title=\"第四十条\"></a>第四十条</h2><p>大部分网络通信库写法</p>\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled50.png\" class=\"\">\n\n<p>为了使得在下载完成后通过以下方法执行调用者指定的Block，需要将completion handler保存至实例变量，一旦运行完completion handler之后没有必要对其进行保留，从而避免出现retain cycle</p>\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled51.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled52.png\" class=\"\">\n\n<h2 id=\"第四十一条\"><a href=\"#第四十一条\" class=\"headerlink\" title=\"第四十一条\"></a>第四十一条</h2><ul>\n<li><p>串行队列，将读取操作与写入操作安排到同个队列中保证数据同步，可以将设置方法由同步派发改为异步执派发</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled53.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled54.png\" class=\"\">\n\n<ul>\n<li><p>并发队列，读取与写入操作可以随时执行</p>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled55.png\" class=\"\">\n\n<p>创建栅栏使得barrier块单独执行不与其他Block并行，对并发队列有意义，因为串行Block按顺序逐个执行</p>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled56.png\" class=\"\">\n\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled57.png\" class=\"\">\n\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled58.png\" class=\"\">\n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四十二条\"><a href=\"#第四十二条\" class=\"headerlink\" title=\"第四十二条\"></a>第四十二条</h2><ul>\n<li><p>performSelector接受的参数类型为id，限定了传入参数必须是对象，不能是整数或者浮点数，并且最多只能接受两个参数</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled59.png\" class=\"\">\n</li>\n<li><p>延后执行某项任务，优先使用GCD的方式</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled60.png\" class=\"\">\n</li>\n<li><p>把任务放到主线程上执行，把任务封装至Block中用GCD相关方法更为合适</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled61.png\" class=\"\">\n</li>\n<li><p>performSelector在内存管理方面存在缺失，无法确定将执行的Selector具体是什么</p>\n</li>\n</ul>\n<h2 id=\"第四十三条\"><a href=\"#第四十三条\" class=\"headerlink\" title=\"第四十三条\"></a>第四十三条</h2><ul>\n<li><p>GCD是纯C的API，操作队列是Objective-C的对象</p>\n</li>\n<li><p>Block是轻量级的书籍结构而Operation是重量级的Objective-C对象</p>\n</li>\n<li><p>在执行后台任务时GCD并不一定是最佳方式</p>\n</li>\n<li><p>使用NSOperation与NSOperationQueue有以下好处，能够实现纯GCD具备的绝大部分功能</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled62.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled63.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled64.png\" class=\"\">\n</li>\n<li><p>NSNotificationCenter 的 addObserverForName: 方法接受的参数是块而不是Selector</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled65.png\" class=\"\">\n</li>\n<li><p>确定哪一种方法的最好方式是测试性能</p>\n<h2 id=\"第四十四条\"><a href=\"#第四十四条\" class=\"headerlink\" title=\"第四十四条\"></a>第四十四条</h2></li>\n<li><p>dispatch group 能够将任务分组，调用者可以等待这组任务执行完毕同时也可以在提供回调函数之后继续执行</p>\n</li>\n<li><p>如下函数是dispatch_async的变体</p>\n</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled66.png\" class=\"\">\n\n<ul>\n<li>如下函数用于等待 dispatch group 执行完毕，timeout 参数表示阻塞时间，若执行时间短于timeout返回0</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled67.png\" class=\"\">\n\n<ul>\n<li>如下函数中可以传入在特定线程上执行的Block</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled68.png\" class=\"\">\n\n<ul>\n<li>令数组每个对象都执行某个任务，并且等待每个任务都执行完毕可以使用如下GCD特性</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled69.png\" class=\"\">\n\n<ul>\n<li>若当前线程不阻塞可以使用notify函数取代wait</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled70.png\" class=\"\">\n\n<ul>\n<li>区分任务的优先级放置于不同的线程执行，同时将所有任务归于一个dispatch group，并且在执行完毕后获得通知（并发队列）</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled71.png\" class=\"\">\n\n<ul>\n<li>将任务提交到串行队列中并用dispatch group 跟踪执行情况</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled72.png\" class=\"\">\n\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled73.png\" class=\"\">\n\n<h2 id=\"第四十五条\"><a href=\"#第四十五条\" class=\"headerlink\" title=\"第四十五条\"></a>第四十五条</h2><ul>\n<li><p>常用的一种共享单例的方法</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled74.png\" class=\"\">\n</li>\n<li><p>使用GCD实现共享单例的方法</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled75.png\" class=\"\">\n</li>\n<li><p>使用 dispatch_once 能够简化代码并且彻底保证线程安全开发者无需关心加锁或同步，所有问题都由GCD在底层进行处理，static 作用域能够保证编译器在每次执行该方法时复用该变量而不是重复创建</p>\n</li>\n</ul>\n<h2 id=\"第四十六条\"><a href=\"#第四十六条\" class=\"headerlink\" title=\"第四十六条\"></a>第四十六条</h2><ul>\n<li>dispatch_get_current_queue 函数尽量不要使用</li>\n</ul>\n<h2 id=\"第四十七条\"><a href=\"#第四十七条\" class=\"headerlink\" title=\"第四十七条\"></a>第四十七条</h2><ul>\n<li><p>框架指一系列代码被封装为动态库，并且在其中放入描述接口的头文件，iOS平台的系统框架仍然采用了动态库</p>\n</li>\n<li><p>iOS应用程序不允许在其中包含动态库于是就出现了静态库</p>\n</li>\n<li><p>关于静态库与动态库的了解可以参考 <a href=\"https://juejin.cn/post/6844904031937101838\" target=\"_blank\" rel=\"noopener\">细说iOS静态库和动态库</a></p>\n</li>\n<li><p>Cocoa 本身并不是框架而是集成了一批创建应用程序时需要用到的框架</p>\n</li>\n<li><p>Objective-C编程的一个重要特点是经常需要用到底层的C语言级API</p>\n</li>\n<li><p>CoreAnimation 使用Objective-C进行编写，而 CoreGraphics 框架采用C语言进行编写，两者均为 UI 框架之下的一等框架</p>\n</li>\n</ul>\n<h2 id=\"第四十八条\"><a href=\"#第四十八条\" class=\"headerlink\" title=\"第四十八条\"></a>第四十八条</h2><ul>\n<li><p>遍历方式</p>\n<ul>\n<li><p>for循环</p>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled76.png\" class=\"\">\n\n<p>字典与 set 均无顺序，无法根据下标访问数值。于是需要获取字典内所有键或 set 内所有对象，从而产生空间上的额外开销。然而执行反向遍历时 for 循环会更为方便。</p>\n</li>\n<li><p>NSEnumerator</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Dictionary</span></span><br><span class=\"line\"><span class=\"built_in\">NSDictionary</span> *dict = <span class=\"comment\">/* ... */</span>;</span><br><span class=\"line\"><span class=\"built_in\">NSEnumerator</span> *enumerator = [dict keyEnumerator];</span><br><span class=\"line\"><span class=\"keyword\">id</span> key;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((key = [enumerator nextObject]) != <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> value = dict[key];</span><br><span class=\"line\">\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Set</span></span><br><span class=\"line\"><span class=\"built_in\">NSSet</span> *set = <span class=\"comment\">/* ... */</span>;</span><br><span class=\"line\"><span class=\"built_in\">NSEnumerator</span> *enumerator = [set objectEnumerator];</span><br><span class=\"line\"><span class=\"keyword\">id</span> object;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((object = [enumerator nextObject]) != <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array</span></span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *array = <span class=\"comment\">/* ... */</span>;</span><br><span class=\"line\"><span class=\"built_in\">NSEnumerator</span> *enumerator = [array reverseObjectEnumerator];</span><br><span class=\"line\"><span class=\"keyword\">id</span> object;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((object = [enumerator nextObject]) != <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于所有的collection都可以采用这套语法，在读法上更容易被理解</p>\n</li>\n<li><p>for in 快速遍历</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Dictionary</span></span><br><span class=\"line\"><span class=\"built_in\">NSDictionary</span> *dict = <span class=\"comment\">/* ... */</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">id</span> key <span class=\"keyword\">in</span> dict) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> value = dict[key];</span><br><span class=\"line\">\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Set</span></span><br><span class=\"line\"><span class=\"built_in\">NSSet</span> *set = <span class=\"comment\">/* ... */</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">id</span> object <span class=\"keyword\">in</span> set) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array</span></span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *array = <span class=\"comment\">/* ... */</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">id</span> object <span class=\"keyword\">in</span> array) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">id</span> object <span class=\"keyword\">in</span> [array reverseObjectEnumerator]) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>某个支持快速遍历的类的对象遵从 NSFastEnumeration 协议可以实现对象的迭代，而NSEnumerator 也实现了该协议，该遍历方法无法获取遍历操作针对的下标。</p>\n</li>\n<li><p>基于Block的遍历</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Dictionary</span></span><br><span class=\"line\"><span class=\"built_in\">NSDictionary</span> *dict = <span class=\"comment\">/* ... */</span>;</span><br><span class=\"line\">[array enumerateKeysAndObjectsUsingBlock:</span><br><span class=\"line\">\t^(<span class=\"keyword\">id</span> key, <span class=\"keyword\">id</span> object, <span class=\"built_in\">BOOL</span> *stop) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (shouldStopHere) &#123;</span><br><span class=\"line\">\t\t\t\t*stop = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Set</span></span><br><span class=\"line\"><span class=\"built_in\">NSSet</span> *set = <span class=\"comment\">/* ... */</span>;</span><br><span class=\"line\">[array enumerateObjectsUsingBlock:</span><br><span class=\"line\">\t^(<span class=\"keyword\">id</span> object, <span class=\"built_in\">BOOL</span> *stop) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (shouldStopHere) &#123;</span><br><span class=\"line\">\t\t\t\t*stop = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array</span></span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *array = <span class=\"comment\">/* ... */</span>;</span><br><span class=\"line\">[array enumerateObjectsUsingBlock:</span><br><span class=\"line\">\t^(<span class=\"keyword\">id</span> object, <span class=\"built_in\">NSUInteger</span> idx, <span class=\"built_in\">BOOL</span> *stop) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (shouldStopHere) &#123;</span><br><span class=\"line\">\t\t\t\t*stop = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<p>使得遍历能够从Block中获取信息，并且可以在遍历数组获取数组的下标。</p>\n<p>NSEnumerationOptions 类型为enum，如果开启了NSEnumerationConcurrent 底层会使用GCD处理出发执行事宜，采用其他方法很难实现。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四十九条\"><a href=\"#第四十九条\" class=\"headerlink\" title=\"第四十九条\"></a>第四十九条</h2><ul>\n<li><p>使用桥接技术可以实现定义在Foundation框架内的Objective-C类与CoreFoundation 框架中的 C 数据结构的相互转换</p>\n  <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *anNSArray = @[@<span class=\"number\">1</span>, @<span class=\"number\">2</span>, @<span class=\"number\">3</span>, @<span class=\"number\">4</span>, @<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">CFArrayRef</span> *aCGArray = (__bridge <span class=\"built_in\">CFArrayRef</span>)anNSArray;</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"size of array = %li\"</span>, <span class=\"built_in\">CFArrayGetCount</span>(aCFArray)); </span><br><span class=\"line\"></span><br><span class=\"line\">gradientLayer.colors = @[(__bridge <span class=\"keyword\">id</span>)[<span class=\"built_in\">UIColor</span> ne_colorWithHexString:<span class=\"string\">@\"000000\"</span> alpha:<span class=\"number\">0.95</span>].CGColor,</span><br><span class=\"line\">                                            (__bridge <span class=\"keyword\">id</span>)[<span class=\"built_in\">UIColor</span> ne_colorWithHexString:<span class=\"string\">@\"000000\"</span> alpha:<span class=\"number\">0.95</span>].CGColor,</span><br><span class=\"line\">                                            (__bridge <span class=\"keyword\">id</span>)[<span class=\"built_in\">UIColor</span> ne_colorWithHexString:<span class=\"string\">@\"000000\"</span> alpha:<span class=\"number\">0.72</span>].CGColor,</span><br><span class=\"line\">                                            (__bridge <span class=\"keyword\">id</span>)[<span class=\"built_in\">UIColor</span> ne_colorWithHexString:<span class=\"string\">@\"000000\"</span> alpha:<span class=\"number\">0.45</span>].CGColor,</span><br><span class=\"line\">                                            (__bridge <span class=\"keyword\">id</span>)[<span class=\"built_in\">UIColor</span> ne_colorWithHexString:<span class=\"string\">@\"000000\"</span> alpha:<span class=\"number\">0.28</span>].CGColor,</span><br><span class=\"line\">                                            ];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>bridge 含义为ARC具备该对象的所有权，</strong>bridge_retained表示ARC交出该对象的所有权， 通过__bridge告诉ARC如何处理转换涉及的Objective-C对象</p>\n</li>\n<li><p>Foundation 框架中的 Objective-C 类具备的某些功能是 CoreFoundation 框架中的 C语言数据结构不具备的</p>\n</li>\n</ul>\n<h2 id=\"第五十条\"><a href=\"#第五十条\" class=\"headerlink\" title=\"第五十条\"></a>第五十条</h2><ul>\n<li>NSCache 在系统资源耗尽时能够自动删减缓存，采用LRU策略</li>\n<li>NSCache并不会直接拷贝键，而是保留键</li>\n<li>NSCache是线程安全的，多个线程可以同时访问NSCache</li>\n<li>NSCache可以设置针对对象个数以及总成本的上限</li>\n</ul>\n<p>缓存的一般用法</p>\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled77.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled78.png\" class=\"\">\n\n<p>加入 NSPurgeable 的缓存用法</p>\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled79.png\" class=\"\">\n\n   <img src=\"/2021/07/12/EffectiveObjcTips/Untitled80.png\" class=\"\">\n\n<ul>\n<li>重复计算会带来性能开销的数据值得被放入缓存，从而提高应用程序的响应速度</li>\n<li>NSPurgeableData 与 NSCache 一起使用能够实现自动清除数据的功能</li>\n</ul>\n<h2 id=\"第五十一条\"><a href=\"#第五十一条\" class=\"headerlink\" title=\"第五十一条\"></a>第五十一条</h2><ul>\n<li>load 方法并不像普通的方法那样，她不遵从继承规则，如果某个类本身不实现load方法那么无论其各级超类是否实现此方法系统都不会调用</li>\n<li>load 与 initialize 方法务必精简实现，因为会产生阻塞从而使得应用程序无响应</li>\n<li>initialize 方法在程序首次用该类前调用一次，并且使用runtime进行调用，只应该用来设置内部数据而不应该调用其他方法</li>\n<li>如果某个类本身不实现 initialize 方法然而超类完成了就会调用超类的实现方法，如下图中初始化子类后由于该类未覆写该方法于是需要执行父类的实现代码，于是得到了通常的子类实现方法</li>\n</ul>\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled81.png\" class=\"\">\n\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled82.png\" class=\"\">\n\n<img src=\"/2021/07/12/EffectiveObjcTips/Untitled83.png\" class=\"\">\n\n<h2 id=\"第五十二条\"><a href=\"#第五十二条\" class=\"headerlink\" title=\"第五十二条\"></a>第五十二条</h2><ul>\n<li><p>NSTimer 对象会保留目标直到计时器失效，需要调用invalidate方法令其失效</p>\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled84.png\" class=\"\">\n\n <img src=\"/2021/07/12/EffectiveObjcTips/Untitled85.png\" class=\"\">\n</li>\n<li><p>反复执行的计时器容易引入retain cycle，可以使用 Block 的方式打破，需要注意的是必须创建分类来加入相关实现代码</p>\n</li>\n</ul>"},{"title":"SwiftUI开发初探","date":"2021-07-15T07:20:20.000Z","copyright":true,"_content":"\n最近使用 SwiftUI 完成了一部分项目的编写，我将完成项目时使用 SwiftUI 进行开发的体验做简单的总结。本文也同时发表于网易KM平台。\n\n<!--more-->\n\n# 最近项目\n\n- 基于知识图谱的推荐系统的设计与实现（客户端部分采用 SwiftUI 实现）\n\n{% asset_img Recommender.png %}\n\n{% asset_img Structure.png %}\n\n- 知识图谱入门简介（UI 部分采用 SwiftUI 实现，WWDC Swift Student Challenge获奖项目）\n\n[iamStephenFang/KnowledgeGraph](https://github.com/iamStephenFang/KnowledgeGraph)\n\n{% asset_img KG.png %}\n\n- FinMatters（一款采用 SwiftUI 编写的理财 App）\n\n{% asset_img Fin.png %}\n\n# 哪些优点\n\n## 指令式编程 VS 声明式编程\n\n指令式编程逐条指示计算机**怎么做，**注重于**描述过程**\n\n- 运算语句：let a = 1 + 2\n- 循环语句: for while\n- 条件语句: if switch\n\n## 声明式编程教会计算机**做什么，**注重于**描述结果**\n\n- Map： let squares = nums.map {$0* $0}\n- Reduce： let total = nums.reduce(10.0,+)\n- Filter： let evens = nums.filter { $0% 2 == 0 }\n\n## 声明式UI\n\n1.View并不负责渲染，并非传统意义的视图层级，而是对视图组织关系的声明\n\n2.决定 UI 状态的状态 State 存储在对象之中\n\n3.View = func(State)通过控制和改变 State来得到确定的 View\n\n4.State 改变时调用上述函数获取新的 State 的 View，重新渲染更改部分\n\n## 开发体验\n\n- UIKit 组件混编成本不高\n- 复杂视图减少代码量\n- Model-View-ViewModel\n- 动画、效果、手势实现简单\n\n{% asset_img Code1.png %}\n\n## 其他特性\n\n- 在 iPad 上的 Swift Playground编写 SwiftUI 相关代码\n\n{% asset_img PG.png %}\n\n- 在 Xcode 中可以实现实时的、可响应的预览\n\n{% asset_img Demo.png %}\n\n- 跨端开发压力小，实现iOS、iPadOS、watchOS、macOS同步开发\n\n{% asset_img CP.png %}\n\n# 哪些缺点\n\n## 兼容性\n\n- 发布于 WWDC19\n- Xcode 11.0+\n- iOS 13.0+\n- 网易云音乐iOS 11.0+\n\n## 组件开发\n\n表面上 SwiftUI 集成了很多可用的组件，但在实现自定义组件时还是需要自行编写元组件相关的代码，并且目前三方组件库可选择的项目较少。\n\n{% asset_img Code2.png %}\n\n{% asset_img Code3.png %}\n\n{% asset_img Fin2.png %}\n\n原生组件可供更改的样式极其有限，有时候一些问题的解决方案代码并不优雅，比如导航栏只能手动隐藏、全屏状态下无法展示Modal、List 的分割线无法移除等等。\n\n{% asset_img Code4.png %}\n\n```swift\nvar body: some View {\n        NavigationView{\n            ZStack {\n                Color(\"Background\").ignoresSafeArea()\n                VStack{\n                    TopNavView(navDesc: “总览\")\n                        .padding(.horizontal)\n                        .padding(.top, 0)\n                    \n                    VStack{}\n\t      / *** 省略内容 ***/\n                .navigationTitle(\"\")\n                .navigationBarHidden(true)\n            }\n        }\n    }\n```\n\n## 组件缺失\n\n- WKWebView 混编\n\n{% asset_img Code4.png %}\n\n- SwiftUIX [https://github.com/SwiftUIX/SwiftUIX](https://github.com/SwiftUIX/SwiftUIX)\n- SwiftUI-Introspect [https://github.com/SwiftUIX/SwiftUIX](https://github.com/SwiftUIX/SwiftUIX)\n\n## 开发体验问题\n\n- 寻找问题答案成本较高，Stack Overflow可能都未收录\n- API 在 SwiftUI 大版本更新时存在差别\n- View Hierarchy 检查器无法使用\n- Live Preview 渲染经常出错且消耗大量性能\n- 错误信息有时存在误导\n\n# 最后总结\n\n- 目前适合个人开发者开发个人项目\n- 两年内随着老款iOS设备的淘汰能够看到更多的 SwiftUI 应用\n- SwiftUI 与 Combine 的结合\n- 苹果平台应用有跨端需求可以减少开发成本\n- 开发体验上好于 Flutter、React Native\n\n# 参考链接\n\n1. https://designcode.io/swiftui2-course\n2. https://www.raywenderlich.com/19611194-multiplatform-app-tutorial-swiftui-and-xcode-12\n3. https://www.fivestars.blog/articles/custom-view-styles/\n4. https://objccn.io/products/functional-swift/\n5. https://objccn.io/products/swift-ui\n6. https://www.fivestars.blog/articles/swiftui-hud/","source":"_posts/SwiftUIExploration.md","raw":"---\ntitle: SwiftUI开发初探\ndate: 2021-07-15 15:20:20\ncategories: \n- tech\ntags: \n- iOS\n- SwiftUI\n- Swift\ncopyright: true\n---\n\n最近使用 SwiftUI 完成了一部分项目的编写，我将完成项目时使用 SwiftUI 进行开发的体验做简单的总结。本文也同时发表于网易KM平台。\n\n<!--more-->\n\n# 最近项目\n\n- 基于知识图谱的推荐系统的设计与实现（客户端部分采用 SwiftUI 实现）\n\n{% asset_img Recommender.png %}\n\n{% asset_img Structure.png %}\n\n- 知识图谱入门简介（UI 部分采用 SwiftUI 实现，WWDC Swift Student Challenge获奖项目）\n\n[iamStephenFang/KnowledgeGraph](https://github.com/iamStephenFang/KnowledgeGraph)\n\n{% asset_img KG.png %}\n\n- FinMatters（一款采用 SwiftUI 编写的理财 App）\n\n{% asset_img Fin.png %}\n\n# 哪些优点\n\n## 指令式编程 VS 声明式编程\n\n指令式编程逐条指示计算机**怎么做，**注重于**描述过程**\n\n- 运算语句：let a = 1 + 2\n- 循环语句: for while\n- 条件语句: if switch\n\n## 声明式编程教会计算机**做什么，**注重于**描述结果**\n\n- Map： let squares = nums.map {$0* $0}\n- Reduce： let total = nums.reduce(10.0,+)\n- Filter： let evens = nums.filter { $0% 2 == 0 }\n\n## 声明式UI\n\n1.View并不负责渲染，并非传统意义的视图层级，而是对视图组织关系的声明\n\n2.决定 UI 状态的状态 State 存储在对象之中\n\n3.View = func(State)通过控制和改变 State来得到确定的 View\n\n4.State 改变时调用上述函数获取新的 State 的 View，重新渲染更改部分\n\n## 开发体验\n\n- UIKit 组件混编成本不高\n- 复杂视图减少代码量\n- Model-View-ViewModel\n- 动画、效果、手势实现简单\n\n{% asset_img Code1.png %}\n\n## 其他特性\n\n- 在 iPad 上的 Swift Playground编写 SwiftUI 相关代码\n\n{% asset_img PG.png %}\n\n- 在 Xcode 中可以实现实时的、可响应的预览\n\n{% asset_img Demo.png %}\n\n- 跨端开发压力小，实现iOS、iPadOS、watchOS、macOS同步开发\n\n{% asset_img CP.png %}\n\n# 哪些缺点\n\n## 兼容性\n\n- 发布于 WWDC19\n- Xcode 11.0+\n- iOS 13.0+\n- 网易云音乐iOS 11.0+\n\n## 组件开发\n\n表面上 SwiftUI 集成了很多可用的组件，但在实现自定义组件时还是需要自行编写元组件相关的代码，并且目前三方组件库可选择的项目较少。\n\n{% asset_img Code2.png %}\n\n{% asset_img Code3.png %}\n\n{% asset_img Fin2.png %}\n\n原生组件可供更改的样式极其有限，有时候一些问题的解决方案代码并不优雅，比如导航栏只能手动隐藏、全屏状态下无法展示Modal、List 的分割线无法移除等等。\n\n{% asset_img Code4.png %}\n\n```swift\nvar body: some View {\n        NavigationView{\n            ZStack {\n                Color(\"Background\").ignoresSafeArea()\n                VStack{\n                    TopNavView(navDesc: “总览\")\n                        .padding(.horizontal)\n                        .padding(.top, 0)\n                    \n                    VStack{}\n\t      / *** 省略内容 ***/\n                .navigationTitle(\"\")\n                .navigationBarHidden(true)\n            }\n        }\n    }\n```\n\n## 组件缺失\n\n- WKWebView 混编\n\n{% asset_img Code4.png %}\n\n- SwiftUIX [https://github.com/SwiftUIX/SwiftUIX](https://github.com/SwiftUIX/SwiftUIX)\n- SwiftUI-Introspect [https://github.com/SwiftUIX/SwiftUIX](https://github.com/SwiftUIX/SwiftUIX)\n\n## 开发体验问题\n\n- 寻找问题答案成本较高，Stack Overflow可能都未收录\n- API 在 SwiftUI 大版本更新时存在差别\n- View Hierarchy 检查器无法使用\n- Live Preview 渲染经常出错且消耗大量性能\n- 错误信息有时存在误导\n\n# 最后总结\n\n- 目前适合个人开发者开发个人项目\n- 两年内随着老款iOS设备的淘汰能够看到更多的 SwiftUI 应用\n- SwiftUI 与 Combine 的结合\n- 苹果平台应用有跨端需求可以减少开发成本\n- 开发体验上好于 Flutter、React Native\n\n# 参考链接\n\n1. https://designcode.io/swiftui2-course\n2. https://www.raywenderlich.com/19611194-multiplatform-app-tutorial-swiftui-and-xcode-12\n3. https://www.fivestars.blog/articles/custom-view-styles/\n4. https://objccn.io/products/functional-swift/\n5. https://objccn.io/products/swift-ui\n6. https://www.fivestars.blog/articles/swiftui-hud/","slug":"SwiftUIExploration","published":1,"updated":"2021-07-26T08:15:57.651Z","_id":"ckrauk7ng0001bl6b5w50bjhb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近使用 SwiftUI 完成了一部分项目的编写，我将完成项目时使用 SwiftUI 进行开发的体验做简单的总结。本文也同时发表于网易KM平台。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"最近项目\"><a href=\"#最近项目\" class=\"headerlink\" title=\"最近项目\"></a>最近项目</h1><ul>\n<li>基于知识图谱的推荐系统的设计与实现（客户端部分采用 SwiftUI 实现）</li>\n</ul>\n<img src=\"/2021/07/15/SwiftUIExploration/Recommender.png\" class=\"\">\n\n<img src=\"/2021/07/15/SwiftUIExploration/Structure.png\" class=\"\">\n\n<ul>\n<li>知识图谱入门简介（UI 部分采用 SwiftUI 实现，WWDC Swift Student Challenge获奖项目）</li>\n</ul>\n<p><a href=\"https://github.com/iamStephenFang/KnowledgeGraph\" target=\"_blank\" rel=\"noopener\">iamStephenFang/KnowledgeGraph</a></p>\n<img src=\"/2021/07/15/SwiftUIExploration/KG.png\" class=\"\">\n\n<ul>\n<li>FinMatters（一款采用 SwiftUI 编写的理财 App）</li>\n</ul>\n<img src=\"/2021/07/15/SwiftUIExploration/Fin.png\" class=\"\">\n\n<h1 id=\"哪些优点\"><a href=\"#哪些优点\" class=\"headerlink\" title=\"哪些优点\"></a>哪些优点</h1><h2 id=\"指令式编程-VS-声明式编程\"><a href=\"#指令式编程-VS-声明式编程\" class=\"headerlink\" title=\"指令式编程 VS 声明式编程\"></a>指令式编程 VS 声明式编程</h2><p>指令式编程逐条指示计算机<strong>怎么做，</strong>注重于<strong>描述过程</strong></p>\n<ul>\n<li>运算语句：let a = 1 + 2</li>\n<li>循环语句: for while</li>\n<li>条件语句: if switch</li>\n</ul>\n<h2 id=\"声明式编程教会计算机做什么，注重于描述结果\"><a href=\"#声明式编程教会计算机做什么，注重于描述结果\" class=\"headerlink\" title=\"声明式编程教会计算机做什么，注重于描述结果\"></a>声明式编程教会计算机<strong>做什么，</strong>注重于<strong>描述结果</strong></h2><ul>\n<li>Map： let squares = nums.map {$0* $0}</li>\n<li>Reduce： let total = nums.reduce(10.0,+)</li>\n<li>Filter： let evens = nums.filter { $0% 2 == 0 }</li>\n</ul>\n<h2 id=\"声明式UI\"><a href=\"#声明式UI\" class=\"headerlink\" title=\"声明式UI\"></a>声明式UI</h2><p>1.View并不负责渲染，并非传统意义的视图层级，而是对视图组织关系的声明</p>\n<p>2.决定 UI 状态的状态 State 存储在对象之中</p>\n<p>3.View = func(State)通过控制和改变 State来得到确定的 View</p>\n<p>4.State 改变时调用上述函数获取新的 State 的 View，重新渲染更改部分</p>\n<h2 id=\"开发体验\"><a href=\"#开发体验\" class=\"headerlink\" title=\"开发体验\"></a>开发体验</h2><ul>\n<li>UIKit 组件混编成本不高</li>\n<li>复杂视图减少代码量</li>\n<li>Model-View-ViewModel</li>\n<li>动画、效果、手势实现简单</li>\n</ul>\n<img src=\"/2021/07/15/SwiftUIExploration/Code1.png\" class=\"\">\n\n<h2 id=\"其他特性\"><a href=\"#其他特性\" class=\"headerlink\" title=\"其他特性\"></a>其他特性</h2><ul>\n<li>在 iPad 上的 Swift Playground编写 SwiftUI 相关代码</li>\n</ul>\n<img src=\"/2021/07/15/SwiftUIExploration/PG.png\" class=\"\">\n\n<ul>\n<li>在 Xcode 中可以实现实时的、可响应的预览</li>\n</ul>\n<img src=\"/2021/07/15/SwiftUIExploration/Demo.png\" class=\"\">\n\n<ul>\n<li>跨端开发压力小，实现iOS、iPadOS、watchOS、macOS同步开发</li>\n</ul>\n<img src=\"/2021/07/15/SwiftUIExploration/CP.png\" class=\"\">\n\n<h1 id=\"哪些缺点\"><a href=\"#哪些缺点\" class=\"headerlink\" title=\"哪些缺点\"></a>哪些缺点</h1><h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><ul>\n<li>发布于 WWDC19</li>\n<li>Xcode 11.0+</li>\n<li>iOS 13.0+</li>\n<li>网易云音乐iOS 11.0+</li>\n</ul>\n<h2 id=\"组件开发\"><a href=\"#组件开发\" class=\"headerlink\" title=\"组件开发\"></a>组件开发</h2><p>表面上 SwiftUI 集成了很多可用的组件，但在实现自定义组件时还是需要自行编写元组件相关的代码，并且目前三方组件库可选择的项目较少。</p>\n<img src=\"/2021/07/15/SwiftUIExploration/Code2.png\" class=\"\">\n\n<img src=\"/2021/07/15/SwiftUIExploration/Code3.png\" class=\"\">\n\n<img src=\"/2021/07/15/SwiftUIExploration/Fin2.png\" class=\"\">\n\n<p>原生组件可供更改的样式极其有限，有时候一些问题的解决方案代码并不优雅，比如导航栏只能手动隐藏、全屏状态下无法展示Modal、List 的分割线无法移除等等。</p>\n<img src=\"/2021/07/15/SwiftUIExploration/Code4.png\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body: some <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">NavigationView</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">ZStack</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">Color</span>(<span class=\"string\">\"Background\"</span>).ignoresSafeArea()</span><br><span class=\"line\">                <span class=\"type\">VStack</span>&#123;</span><br><span class=\"line\">                    <span class=\"type\">TopNavView</span>(navDesc: “总览<span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">                        .padding(.horizontal)</span></span><br><span class=\"line\"><span class=\"string\">                        .padding(.top, 0)</span></span><br><span class=\"line\"><span class=\"string\">                    </span></span><br><span class=\"line\"><span class=\"string\">                    VStack&#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t      / *** 省略内容 ***/</span></span><br><span class=\"line\"><span class=\"string\">                .navigationTitle(\"</span><span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">                .navigationBarHidden(true)</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组件缺失\"><a href=\"#组件缺失\" class=\"headerlink\" title=\"组件缺失\"></a>组件缺失</h2><ul>\n<li>WKWebView 混编</li>\n</ul>\n<img src=\"/2021/07/15/SwiftUIExploration/Code4.png\" class=\"\">\n\n<ul>\n<li>SwiftUIX <a href=\"https://github.com/SwiftUIX/SwiftUIX\" target=\"_blank\" rel=\"noopener\">https://github.com/SwiftUIX/SwiftUIX</a></li>\n<li>SwiftUI-Introspect <a href=\"https://github.com/SwiftUIX/SwiftUIX\" target=\"_blank\" rel=\"noopener\">https://github.com/SwiftUIX/SwiftUIX</a></li>\n</ul>\n<h2 id=\"开发体验问题\"><a href=\"#开发体验问题\" class=\"headerlink\" title=\"开发体验问题\"></a>开发体验问题</h2><ul>\n<li>寻找问题答案成本较高，Stack Overflow可能都未收录</li>\n<li>API 在 SwiftUI 大版本更新时存在差别</li>\n<li>View Hierarchy 检查器无法使用</li>\n<li>Live Preview 渲染经常出错且消耗大量性能</li>\n<li>错误信息有时存在误导</li>\n</ul>\n<h1 id=\"最后总结\"><a href=\"#最后总结\" class=\"headerlink\" title=\"最后总结\"></a>最后总结</h1><ul>\n<li>目前适合个人开发者开发个人项目</li>\n<li>两年内随着老款iOS设备的淘汰能够看到更多的 SwiftUI 应用</li>\n<li>SwiftUI 与 Combine 的结合</li>\n<li>苹果平台应用有跨端需求可以减少开发成本</li>\n<li>开发体验上好于 Flutter、React Native</li>\n</ul>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ol>\n<li><a href=\"https://designcode.io/swiftui2-course\" target=\"_blank\" rel=\"noopener\">https://designcode.io/swiftui2-course</a></li>\n<li><a href=\"https://www.raywenderlich.com/19611194-multiplatform-app-tutorial-swiftui-and-xcode-12\" target=\"_blank\" rel=\"noopener\">https://www.raywenderlich.com/19611194-multiplatform-app-tutorial-swiftui-and-xcode-12</a></li>\n<li><a href=\"https://www.fivestars.blog/articles/custom-view-styles/\" target=\"_blank\" rel=\"noopener\">https://www.fivestars.blog/articles/custom-view-styles/</a></li>\n<li><a href=\"https://objccn.io/products/functional-swift/\" target=\"_blank\" rel=\"noopener\">https://objccn.io/products/functional-swift/</a></li>\n<li><a href=\"https://objccn.io/products/swift-ui\" target=\"_blank\" rel=\"noopener\">https://objccn.io/products/swift-ui</a></li>\n<li><a href=\"https://www.fivestars.blog/articles/swiftui-hud/\" target=\"_blank\" rel=\"noopener\">https://www.fivestars.blog/articles/swiftui-hud/</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>最近使用 SwiftUI 完成了一部分项目的编写，我将完成项目时使用 SwiftUI 进行开发的体验做简单的总结。本文也同时发表于网易KM平台。</p>","more":"<h1 id=\"最近项目\"><a href=\"#最近项目\" class=\"headerlink\" title=\"最近项目\"></a>最近项目</h1><ul>\n<li>基于知识图谱的推荐系统的设计与实现（客户端部分采用 SwiftUI 实现）</li>\n</ul>\n<img src=\"/2021/07/15/SwiftUIExploration/Recommender.png\" class=\"\">\n\n<img src=\"/2021/07/15/SwiftUIExploration/Structure.png\" class=\"\">\n\n<ul>\n<li>知识图谱入门简介（UI 部分采用 SwiftUI 实现，WWDC Swift Student Challenge获奖项目）</li>\n</ul>\n<p><a href=\"https://github.com/iamStephenFang/KnowledgeGraph\" target=\"_blank\" rel=\"noopener\">iamStephenFang/KnowledgeGraph</a></p>\n<img src=\"/2021/07/15/SwiftUIExploration/KG.png\" class=\"\">\n\n<ul>\n<li>FinMatters（一款采用 SwiftUI 编写的理财 App）</li>\n</ul>\n<img src=\"/2021/07/15/SwiftUIExploration/Fin.png\" class=\"\">\n\n<h1 id=\"哪些优点\"><a href=\"#哪些优点\" class=\"headerlink\" title=\"哪些优点\"></a>哪些优点</h1><h2 id=\"指令式编程-VS-声明式编程\"><a href=\"#指令式编程-VS-声明式编程\" class=\"headerlink\" title=\"指令式编程 VS 声明式编程\"></a>指令式编程 VS 声明式编程</h2><p>指令式编程逐条指示计算机<strong>怎么做，</strong>注重于<strong>描述过程</strong></p>\n<ul>\n<li>运算语句：let a = 1 + 2</li>\n<li>循环语句: for while</li>\n<li>条件语句: if switch</li>\n</ul>\n<h2 id=\"声明式编程教会计算机做什么，注重于描述结果\"><a href=\"#声明式编程教会计算机做什么，注重于描述结果\" class=\"headerlink\" title=\"声明式编程教会计算机做什么，注重于描述结果\"></a>声明式编程教会计算机<strong>做什么，</strong>注重于<strong>描述结果</strong></h2><ul>\n<li>Map： let squares = nums.map {$0* $0}</li>\n<li>Reduce： let total = nums.reduce(10.0,+)</li>\n<li>Filter： let evens = nums.filter { $0% 2 == 0 }</li>\n</ul>\n<h2 id=\"声明式UI\"><a href=\"#声明式UI\" class=\"headerlink\" title=\"声明式UI\"></a>声明式UI</h2><p>1.View并不负责渲染，并非传统意义的视图层级，而是对视图组织关系的声明</p>\n<p>2.决定 UI 状态的状态 State 存储在对象之中</p>\n<p>3.View = func(State)通过控制和改变 State来得到确定的 View</p>\n<p>4.State 改变时调用上述函数获取新的 State 的 View，重新渲染更改部分</p>\n<h2 id=\"开发体验\"><a href=\"#开发体验\" class=\"headerlink\" title=\"开发体验\"></a>开发体验</h2><ul>\n<li>UIKit 组件混编成本不高</li>\n<li>复杂视图减少代码量</li>\n<li>Model-View-ViewModel</li>\n<li>动画、效果、手势实现简单</li>\n</ul>\n<img src=\"/2021/07/15/SwiftUIExploration/Code1.png\" class=\"\">\n\n<h2 id=\"其他特性\"><a href=\"#其他特性\" class=\"headerlink\" title=\"其他特性\"></a>其他特性</h2><ul>\n<li>在 iPad 上的 Swift Playground编写 SwiftUI 相关代码</li>\n</ul>\n<img src=\"/2021/07/15/SwiftUIExploration/PG.png\" class=\"\">\n\n<ul>\n<li>在 Xcode 中可以实现实时的、可响应的预览</li>\n</ul>\n<img src=\"/2021/07/15/SwiftUIExploration/Demo.png\" class=\"\">\n\n<ul>\n<li>跨端开发压力小，实现iOS、iPadOS、watchOS、macOS同步开发</li>\n</ul>\n<img src=\"/2021/07/15/SwiftUIExploration/CP.png\" class=\"\">\n\n<h1 id=\"哪些缺点\"><a href=\"#哪些缺点\" class=\"headerlink\" title=\"哪些缺点\"></a>哪些缺点</h1><h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><ul>\n<li>发布于 WWDC19</li>\n<li>Xcode 11.0+</li>\n<li>iOS 13.0+</li>\n<li>网易云音乐iOS 11.0+</li>\n</ul>\n<h2 id=\"组件开发\"><a href=\"#组件开发\" class=\"headerlink\" title=\"组件开发\"></a>组件开发</h2><p>表面上 SwiftUI 集成了很多可用的组件，但在实现自定义组件时还是需要自行编写元组件相关的代码，并且目前三方组件库可选择的项目较少。</p>\n<img src=\"/2021/07/15/SwiftUIExploration/Code2.png\" class=\"\">\n\n<img src=\"/2021/07/15/SwiftUIExploration/Code3.png\" class=\"\">\n\n<img src=\"/2021/07/15/SwiftUIExploration/Fin2.png\" class=\"\">\n\n<p>原生组件可供更改的样式极其有限，有时候一些问题的解决方案代码并不优雅，比如导航栏只能手动隐藏、全屏状态下无法展示Modal、List 的分割线无法移除等等。</p>\n<img src=\"/2021/07/15/SwiftUIExploration/Code4.png\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body: some <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">NavigationView</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">ZStack</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">Color</span>(<span class=\"string\">\"Background\"</span>).ignoresSafeArea()</span><br><span class=\"line\">                <span class=\"type\">VStack</span>&#123;</span><br><span class=\"line\">                    <span class=\"type\">TopNavView</span>(navDesc: “总览<span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">                        .padding(.horizontal)</span></span><br><span class=\"line\"><span class=\"string\">                        .padding(.top, 0)</span></span><br><span class=\"line\"><span class=\"string\">                    </span></span><br><span class=\"line\"><span class=\"string\">                    VStack&#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t      / *** 省略内容 ***/</span></span><br><span class=\"line\"><span class=\"string\">                .navigationTitle(\"</span><span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">                .navigationBarHidden(true)</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组件缺失\"><a href=\"#组件缺失\" class=\"headerlink\" title=\"组件缺失\"></a>组件缺失</h2><ul>\n<li>WKWebView 混编</li>\n</ul>\n<img src=\"/2021/07/15/SwiftUIExploration/Code4.png\" class=\"\">\n\n<ul>\n<li>SwiftUIX <a href=\"https://github.com/SwiftUIX/SwiftUIX\" target=\"_blank\" rel=\"noopener\">https://github.com/SwiftUIX/SwiftUIX</a></li>\n<li>SwiftUI-Introspect <a href=\"https://github.com/SwiftUIX/SwiftUIX\" target=\"_blank\" rel=\"noopener\">https://github.com/SwiftUIX/SwiftUIX</a></li>\n</ul>\n<h2 id=\"开发体验问题\"><a href=\"#开发体验问题\" class=\"headerlink\" title=\"开发体验问题\"></a>开发体验问题</h2><ul>\n<li>寻找问题答案成本较高，Stack Overflow可能都未收录</li>\n<li>API 在 SwiftUI 大版本更新时存在差别</li>\n<li>View Hierarchy 检查器无法使用</li>\n<li>Live Preview 渲染经常出错且消耗大量性能</li>\n<li>错误信息有时存在误导</li>\n</ul>\n<h1 id=\"最后总结\"><a href=\"#最后总结\" class=\"headerlink\" title=\"最后总结\"></a>最后总结</h1><ul>\n<li>目前适合个人开发者开发个人项目</li>\n<li>两年内随着老款iOS设备的淘汰能够看到更多的 SwiftUI 应用</li>\n<li>SwiftUI 与 Combine 的结合</li>\n<li>苹果平台应用有跨端需求可以减少开发成本</li>\n<li>开发体验上好于 Flutter、React Native</li>\n</ul>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ol>\n<li><a href=\"https://designcode.io/swiftui2-course\" target=\"_blank\" rel=\"noopener\">https://designcode.io/swiftui2-course</a></li>\n<li><a href=\"https://www.raywenderlich.com/19611194-multiplatform-app-tutorial-swiftui-and-xcode-12\" target=\"_blank\" rel=\"noopener\">https://www.raywenderlich.com/19611194-multiplatform-app-tutorial-swiftui-and-xcode-12</a></li>\n<li><a href=\"https://www.fivestars.blog/articles/custom-view-styles/\" target=\"_blank\" rel=\"noopener\">https://www.fivestars.blog/articles/custom-view-styles/</a></li>\n<li><a href=\"https://objccn.io/products/functional-swift/\" target=\"_blank\" rel=\"noopener\">https://objccn.io/products/functional-swift/</a></li>\n<li><a href=\"https://objccn.io/products/swift-ui\" target=\"_blank\" rel=\"noopener\">https://objccn.io/products/swift-ui</a></li>\n<li><a href=\"https://www.fivestars.blog/articles/swiftui-hud/\" target=\"_blank\" rel=\"noopener\">https://www.fivestars.blog/articles/swiftui-hud/</a></li>\n</ol>"}],"PostAsset":[{"_id":"source/_posts/Action_Experiment/14.png","slug":"14.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV_Grayscale/cvcolor.png","slug":"cvcolor.png","post":"ckcive9nm001jcv6b9oleclbr","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/uni.png","slug":"uni.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/DMI.png","slug":"DMI.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV_Grayscale/calcHist.jpg","slug":"calcHist.jpg","post":"ckcive9nm001jcv6b9oleclbr","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV_Grayscale/equa.jpg","slug":"equa.jpg","post":"ckcive9nm001jcv6b9oleclbr","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV_Grayscale/result.png","slug":"result.png","post":"ckcive9nm001jcv6b9oleclbr","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV_Grayscale/直方图.png","slug":"直方图.png","post":"ckcive9nm001jcv6b9oleclbr","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/1.png","slug":"1.png","post":"ckcive9nn001lcv6beakrhlst","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/10.png","slug":"10.png","post":"ckcive9nn001lcv6beakrhlst","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/11.png","slug":"11.png","post":"ckcive9nn001lcv6beakrhlst","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/12.png","slug":"12.png","post":"ckcive9nn001lcv6beakrhlst","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/13.png","slug":"13.png","post":"ckcive9nn001lcv6beakrhlst","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/14.png","slug":"14.png","post":"ckcive9nn001lcv6beakrhlst","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/15.png","slug":"15.png","post":"ckcive9nn001lcv6beakrhlst","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/16.png","slug":"16.png","post":"ckcive9nn001lcv6beakrhlst","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/17.png","slug":"17.png","post":"ckcive9nn001lcv6beakrhlst","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/18.png","slug":"18.png","post":"ckcive9nn001lcv6beakrhlst","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/19.png","slug":"19.png","post":"ckcive9nn001lcv6beakrhlst","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/2.png","slug":"2.png","post":"ckcive9nn001lcv6beakrhlst","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/20.png","slug":"20.png","post":"ckcive9nn001lcv6beakrhlst","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/3.png","slug":"3.png","post":"ckcive9nn001lcv6beakrhlst","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/4.png","slug":"4.png","post":"ckcive9nn001lcv6beakrhlst","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/5.png","slug":"5.png","post":"ckcive9nn001lcv6beakrhlst","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/6.png","slug":"6.png","post":"ckcive9nn001lcv6beakrhlst","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/7.png","slug":"7.png","post":"ckcive9nn001lcv6beakrhlst","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/8.png","slug":"8.png","post":"ckcive9nn001lcv6beakrhlst","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/9.png","slug":"9.png","post":"ckcive9nn001lcv6beakrhlst","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/1.png","slug":"1.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/10.png","slug":"10.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/11.png","slug":"11.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/12.png","slug":"12.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/13.png","slug":"13.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/15.png","slug":"15.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/16.png","slug":"16.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/17.png","slug":"17.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/18.png","slug":"18.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/19.png","slug":"19.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/2.png","slug":"2.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/20.png","slug":"20.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/21.png","slug":"21.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/22.png","slug":"22.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/3.png","slug":"3.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/4.png","slug":"4.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/5.png","slug":"5.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/6.png","slug":"6.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/7.png","slug":"7.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/8.png","slug":"8.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/9.png","slug":"9.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/button.png","slug":"button.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/na.png","slug":"na.png","post":"ckcive9n00007cv6b644bavw1","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled.png","slug":"Untitled.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled1.png","slug":"Untitled1.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled2.png","slug":"Untitled2.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled3.png","slug":"Untitled3.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled9.png","slug":"Untitled9.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled4.png","slug":"Untitled4.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled85.png","slug":"Untitled85.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled5.png","slug":"Untitled5.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled6.png","slug":"Untitled6.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled7.png","slug":"Untitled7.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled8.png","slug":"Untitled8.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled10.png","slug":"Untitled10.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled11.png","slug":"Untitled11.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled12.png","slug":"Untitled12.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled13.png","slug":"Untitled13.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled14.png","slug":"Untitled14.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled15.png","slug":"Untitled15.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled16.png","slug":"Untitled16.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled17.png","slug":"Untitled17.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled18.png","slug":"Untitled18.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled19.png","slug":"Untitled19.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled20.png","slug":"Untitled20.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled21.png","slug":"Untitled21.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled84.png","slug":"Untitled84.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled83.png","slug":"Untitled83.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled22.png","slug":"Untitled22.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled23.png","slug":"Untitled23.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled24.png","slug":"Untitled24.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled25.png","slug":"Untitled25.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled26.png","slug":"Untitled26.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled27.png","slug":"Untitled27.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled28.png","slug":"Untitled28.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled29.png","slug":"Untitled29.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled30.png","slug":"Untitled30.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled31.png","slug":"Untitled31.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled32.png","slug":"Untitled32.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled33.png","slug":"Untitled33.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled34.png","slug":"Untitled34.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled35.png","slug":"Untitled35.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled36.png","slug":"Untitled36.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled37.png","slug":"Untitled37.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled38.png","slug":"Untitled38.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled39.png","slug":"Untitled39.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled40.png","slug":"Untitled40.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled41.png","slug":"Untitled41.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled42.png","slug":"Untitled42.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled43.png","slug":"Untitled43.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled44.png","slug":"Untitled44.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled45.png","slug":"Untitled45.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled46.png","slug":"Untitled46.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled47.png","slug":"Untitled47.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled48.png","slug":"Untitled48.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled49.png","slug":"Untitled49.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled50.png","slug":"Untitled50.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled51.png","slug":"Untitled51.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled52.png","slug":"Untitled52.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled53.png","slug":"Untitled53.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled54.png","slug":"Untitled54.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled55.png","slug":"Untitled55.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled56.png","slug":"Untitled56.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled57.png","slug":"Untitled57.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled58.png","slug":"Untitled58.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled59.png","slug":"Untitled59.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled60.png","slug":"Untitled60.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled61.png","slug":"Untitled61.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled62.png","slug":"Untitled62.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled63.png","slug":"Untitled63.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled64.png","slug":"Untitled64.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled65.png","slug":"Untitled65.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled66.png","slug":"Untitled66.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled67.png","slug":"Untitled67.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled68.png","slug":"Untitled68.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled69.png","slug":"Untitled69.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled70.png","slug":"Untitled70.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled71.png","slug":"Untitled71.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled72.png","slug":"Untitled72.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled73.png","slug":"Untitled73.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled74.png","slug":"Untitled74.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled75.png","slug":"Untitled75.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled76.png","slug":"Untitled76.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled77.png","slug":"Untitled77.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled78.png","slug":"Untitled78.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled79.png","slug":"Untitled79.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled80.png","slug":"Untitled80.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled81.png","slug":"Untitled81.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/EffectiveObjcTips/Untitled82.png","slug":"Untitled82.png","post":"ckrauk7nd0000bl6bcqfjg5cf","modified":0,"renderable":0},{"_id":"source/_posts/SwiftUIExploration/Recommender.png","slug":"Recommender.png","post":"ckrauk7ng0001bl6b5w50bjhb","modified":0,"renderable":0},{"_id":"source/_posts/SwiftUIExploration/Structure.png","slug":"Structure.png","post":"ckrauk7ng0001bl6b5w50bjhb","modified":0,"renderable":0},{"_id":"source/_posts/SwiftUIExploration/KG.png","slug":"KG.png","post":"ckrauk7ng0001bl6b5w50bjhb","modified":0,"renderable":0},{"_id":"source/_posts/SwiftUIExploration/Fin.png","slug":"Fin.png","post":"ckrauk7ng0001bl6b5w50bjhb","modified":0,"renderable":0},{"_id":"source/_posts/SwiftUIExploration/Code1.png","slug":"Code1.png","post":"ckrauk7ng0001bl6b5w50bjhb","modified":0,"renderable":0},{"_id":"source/_posts/SwiftUIExploration/PG.png","slug":"PG.png","post":"ckrauk7ng0001bl6b5w50bjhb","modified":0,"renderable":0},{"_id":"source/_posts/SwiftUIExploration/Demo.png","slug":"Demo.png","post":"ckrauk7ng0001bl6b5w50bjhb","modified":0,"renderable":0},{"_id":"source/_posts/SwiftUIExploration/CP.png","slug":"CP.png","post":"ckrauk7ng0001bl6b5w50bjhb","modified":0,"renderable":0},{"_id":"source/_posts/SwiftUIExploration/Code2.png","slug":"Code2.png","post":"ckrauk7ng0001bl6b5w50bjhb","modified":0,"renderable":0},{"_id":"source/_posts/SwiftUIExploration/Code3.png","slug":"Code3.png","post":"ckrauk7ng0001bl6b5w50bjhb","modified":0,"renderable":0},{"_id":"source/_posts/SwiftUIExploration/Fin2.png","slug":"Fin2.png","post":"ckrauk7ng0001bl6b5w50bjhb","modified":0,"renderable":0},{"_id":"source/_posts/SwiftUIExploration/Fin3.png","slug":"Fin3.png","post":"ckrauk7ng0001bl6b5w50bjhb","modified":0,"renderable":0},{"_id":"source/_posts/SwiftUIExploration/Code4.png","slug":"Code4.png","post":"ckrauk7ng0001bl6b5w50bjhb","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckcive9mu0001cv6b9cwu0p6m","category_id":"ckcive9my0004cv6b4cyyg1em","_id":"ckcive9n7000fcv6b49bk7nt9"},{"post_id":"ckcive9mx0003cv6b2sg1he46","category_id":"ckcive9my0004cv6b4cyyg1em","_id":"ckcive9nb000kcv6b6bj935fs"},{"post_id":"ckcive9n9000hcv6bb1b5dduv","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9nd000qcv6b9l8f0l4c"},{"post_id":"ckcive9n00007cv6b644bavw1","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9ne000ucv6b4hn5a28f"},{"post_id":"ckcive9na000jcv6b461hgx8v","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9ne000xcv6b5dcmg5x8"},{"post_id":"ckcive9nb000ocv6b7f6836up","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9nf0011cv6b6kdt2zad"},{"post_id":"ckcive9n10008cv6b9o6jbs9m","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9ng0014cv6bdkw90iey"},{"post_id":"ckcive9nc000pcv6bbbxrasin","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9nh0017cv6bcnl0e0gr"},{"post_id":"ckcive9nd000tcv6b4ipjevs0","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9ni001acv6bd8dz1jpy"},{"post_id":"ckcive9n20009cv6bfh8rg6bi","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9nj001ccv6beooe54t6"},{"post_id":"ckcive9ne000wcv6b4c8lcui7","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9nj001fcv6b41wrbocm"},{"post_id":"ckcive9nf0010cv6b00hb4svo","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9nk001hcv6b578w3r66"},{"post_id":"ckcive9n4000ccv6bhrugcwst","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9nn001kcv6bavxbfzy0"},{"post_id":"ckcive9ng0013cv6bdmqo7ujo","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9nn001mcv6b6nsr7id9"},{"post_id":"ckcive9nh0016cv6badwugwrf","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9no001ocv6b9y8xbbv3"},{"post_id":"ckcive9n6000dcv6bdbr3ahyi","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9np001scv6b07ho73lr"},{"post_id":"ckcive9ni0019cv6b8awed86h","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9np001ucv6bd0zw3b0b"},{"post_id":"ckcive9ni001bcv6b6e7hgxeb","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9nq001xcv6bgabe91ev"},{"post_id":"ckcive9nj001ecv6b1qbu9yxw","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9nq001zcv6b7ej7av9d"},{"post_id":"ckcive9nk001gcv6bgw9egca8","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9nq0022cv6be6zzecot"},{"post_id":"ckcive9nm001jcv6b9oleclbr","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9nq0024cv6b4m9t24lk"},{"post_id":"ckcive9nn001lcv6beakrhlst","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9nr0027cv6b0l58er10"},{"post_id":"ckcive9nn001ncv6b1q8m6it5","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9nr0029cv6bah1d88un"},{"post_id":"ckcive9no001rcv6bfrdvcldr","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckcive9nr002ccv6bfae503gb"},{"post_id":"ckd4pfkpw0000hw6bctyz8p4y","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckd4pfkqc0002hw6b9jmsfhq0"},{"post_id":"ckrauk7nd0000bl6bcqfjg5cf","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckrauk7no0005bl6b4rrl587d"},{"post_id":"ckrauk7ng0001bl6b5w50bjhb","category_id":"ckcive9n7000ecv6b7dbo0vfz","_id":"ckrauk7nq0007bl6bbool59eg"}],"PostTag":[{"post_id":"ckcive9mu0001cv6b9cwu0p6m","tag_id":"ckcive9mz0005cv6bdqucc2ed","_id":"ckcive9n9000icv6bd0s1hh3u"},{"post_id":"ckcive9mu0001cv6b9cwu0p6m","tag_id":"ckcive9n3000bcv6bec5s3xtt","_id":"ckcive9nb000lcv6bbcgaexdw"},{"post_id":"ckcive9mx0003cv6b2sg1he46","tag_id":"ckcive9n7000gcv6bhhvcc3qp","_id":"ckcive9ne000vcv6b4iroadmk"},{"post_id":"ckcive9mx0003cv6b2sg1he46","tag_id":"ckcive9nb000ncv6b18vcbl4u","_id":"ckcive9nf000zcv6bb2uba7fo"},{"post_id":"ckcive9nn001lcv6beakrhlst","tag_id":"ckcive9nd000scv6b3u6efabr","_id":"ckcive9no001qcv6bd0h07lwm"},{"post_id":"ckcive9nn001lcv6beakrhlst","tag_id":"ckcive9nh0018cv6b1vbbal1b","_id":"ckcive9np001tcv6b3rfphi9b"},{"post_id":"ckcive9nn001lcv6beakrhlst","tag_id":"ckcive9nj001dcv6b7mmy1rzl","_id":"ckcive9nq001wcv6bfx4u7k4c"},{"post_id":"ckcive9nn001lcv6beakrhlst","tag_id":"ckcive9nk001icv6b0g2g9b5s","_id":"ckcive9nq001ycv6bf67i0hxu"},{"post_id":"ckcive9n00007cv6b644bavw1","tag_id":"ckcive9nd000scv6b3u6efabr","_id":"ckcive9nq0021cv6b9q090eau"},{"post_id":"ckcive9n00007cv6b644bavw1","tag_id":"ckcive9nf0012cv6b204n8xmb","_id":"ckcive9nq0023cv6b9waj1oyf"},{"post_id":"ckcive9n00007cv6b644bavw1","tag_id":"ckcive9nh0018cv6b1vbbal1b","_id":"ckcive9nq0026cv6bau5ta2rs"},{"post_id":"ckcive9n00007cv6b644bavw1","tag_id":"ckcive9nj001dcv6b7mmy1rzl","_id":"ckcive9nr0028cv6b5j2ydjx1"},{"post_id":"ckcive9n00007cv6b644bavw1","tag_id":"ckcive9nk001icv6b0g2g9b5s","_id":"ckcive9nr002bcv6b507z5koq"},{"post_id":"ckcive9n10008cv6b9o6jbs9m","tag_id":"ckcive9n7000gcv6bhhvcc3qp","_id":"ckcive9nr002dcv6b4c056s3z"},{"post_id":"ckcive9n10008cv6b9o6jbs9m","tag_id":"ckcive9np001vcv6b6f4f7kgc","_id":"ckcive9nr002ecv6bai5a14qs"},{"post_id":"ckcive9n10008cv6b9o6jbs9m","tag_id":"ckcive9nq0020cv6bblpv66rk","_id":"ckcive9nr002gcv6b7kud8ymd"},{"post_id":"ckcive9n20009cv6bfh8rg6bi","tag_id":"ckcive9n7000gcv6bhhvcc3qp","_id":"ckcive9ns002icv6b71ykg1bx"},{"post_id":"ckcive9n20009cv6bfh8rg6bi","tag_id":"ckcive9nr002acv6bdog181b0","_id":"ckcive9ns002jcv6bf7ku020r"},{"post_id":"ckcive9n20009cv6bfh8rg6bi","tag_id":"ckcive9nr002fcv6bg5n2chi9","_id":"ckcive9ns002lcv6bgzo325zp"},{"post_id":"ckcive9n4000ccv6bhrugcwst","tag_id":"ckcive9n7000gcv6bhhvcc3qp","_id":"ckcive9nt002ocv6bgwpfdvc3"},{"post_id":"ckcive9n4000ccv6bhrugcwst","tag_id":"ckcive9ns002kcv6bd4et2fgw","_id":"ckcive9nt002pcv6bh3kv29om"},{"post_id":"ckcive9n4000ccv6bhrugcwst","tag_id":"ckcive9nr002fcv6bg5n2chi9","_id":"ckcive9nt002rcv6b43a5ccrc"},{"post_id":"ckcive9n6000dcv6bdbr3ahyi","tag_id":"ckcive9ns002ncv6bbb522m8z","_id":"ckcive9nt002tcv6b8dk85gmu"},{"post_id":"ckcive9n6000dcv6bdbr3ahyi","tag_id":"ckcive9nt002qcv6b184wepwk","_id":"ckcive9nt002ucv6bajm03ef5"},{"post_id":"ckcive9n9000hcv6bb1b5dduv","tag_id":"ckcive9n7000gcv6bhhvcc3qp","_id":"ckcive9nu002wcv6b1n4l720i"},{"post_id":"ckcive9n9000hcv6bb1b5dduv","tag_id":"ckcive9n3000bcv6bec5s3xtt","_id":"ckcive9nu002xcv6b63te0qrb"},{"post_id":"ckcive9n9000hcv6bb1b5dduv","tag_id":"ckcive9nt002scv6b3o0m4vdt","_id":"ckcive9nu002zcv6b94yg0y7w"},{"post_id":"ckcive9na000jcv6b461hgx8v","tag_id":"ckcive9n7000gcv6bhhvcc3qp","_id":"ckcive9nu0030cv6b8p8o6m0i"},{"post_id":"ckcive9na000jcv6b461hgx8v","tag_id":"ckcive9n3000bcv6bec5s3xtt","_id":"ckcive9nv0032cv6bc49f8319"},{"post_id":"ckcive9na000jcv6b461hgx8v","tag_id":"ckcive9nt002scv6b3o0m4vdt","_id":"ckcive9nv0033cv6b9voh77hw"},{"post_id":"ckcive9nb000ocv6b7f6836up","tag_id":"ckcive9nu002ycv6bhedb5oql","_id":"ckcive9nv0036cv6bhqyv4yhp"},{"post_id":"ckcive9nb000ocv6b7f6836up","tag_id":"ckcive9nh0018cv6b1vbbal1b","_id":"ckcive9nv0037cv6b4ann2u8t"},{"post_id":"ckcive9nb000ocv6b7f6836up","tag_id":"ckcive9nj001dcv6b7mmy1rzl","_id":"ckcive9nw0039cv6b8gciddh0"},{"post_id":"ckcive9nc000pcv6bbbxrasin","tag_id":"ckcive9nv0035cv6b4dbj5nbm","_id":"ckcive9nw003bcv6b82k5as5v"},{"post_id":"ckcive9nc000pcv6bbbxrasin","tag_id":"ckcive9nv0038cv6b31hhfpq8","_id":"ckcive9nw003ccv6b7cf4575b"},{"post_id":"ckcive9nd000tcv6b4ipjevs0","tag_id":"ckcive9n7000gcv6bhhvcc3qp","_id":"ckcive9nx003ecv6bgt903ekz"},{"post_id":"ckcive9nd000tcv6b4ipjevs0","tag_id":"ckcive9n3000bcv6bec5s3xtt","_id":"ckcive9nx003fcv6bcmx48ghk"},{"post_id":"ckcive9nd000tcv6b4ipjevs0","tag_id":"ckcive9nt002scv6b3o0m4vdt","_id":"ckcive9nx003hcv6bboz1gx0e"},{"post_id":"ckcive9ne000wcv6b4c8lcui7","tag_id":"ckcive9n7000gcv6bhhvcc3qp","_id":"ckcive9nx003icv6b5beh2tn5"},{"post_id":"ckcive9ne000wcv6b4c8lcui7","tag_id":"ckcive9n3000bcv6bec5s3xtt","_id":"ckcive9ny003kcv6bcdms7htb"},{"post_id":"ckcive9ne000wcv6b4c8lcui7","tag_id":"ckcive9nt002scv6b3o0m4vdt","_id":"ckcive9ny003lcv6ba8dn1cx3"},{"post_id":"ckcive9nf0010cv6b00hb4svo","tag_id":"ckcive9n7000gcv6bhhvcc3qp","_id":"ckcive9ny003ncv6b2pauhu9b"},{"post_id":"ckcive9nf0010cv6b00hb4svo","tag_id":"ckcive9n3000bcv6bec5s3xtt","_id":"ckcive9ny003ocv6ba2myg1i5"},{"post_id":"ckcive9nf0010cv6b00hb4svo","tag_id":"ckcive9nt002scv6b3o0m4vdt","_id":"ckcive9nz003qcv6bfsa00yro"},{"post_id":"ckcive9ng0013cv6bdmqo7ujo","tag_id":"ckcive9n7000gcv6bhhvcc3qp","_id":"ckcive9nz003rcv6bdkzt6evn"},{"post_id":"ckcive9ng0013cv6bdmqo7ujo","tag_id":"ckcive9n3000bcv6bec5s3xtt","_id":"ckcive9nz003tcv6bg6hh4d5h"},{"post_id":"ckcive9ng0013cv6bdmqo7ujo","tag_id":"ckcive9nt002scv6b3o0m4vdt","_id":"ckcive9nz003ucv6b4eicbjk7"},{"post_id":"ckcive9nh0016cv6badwugwrf","tag_id":"ckcive9nr002acv6bdog181b0","_id":"ckcive9nz003wcv6b5wlo1rii"},{"post_id":"ckcive9nh0016cv6badwugwrf","tag_id":"ckcive9n3000bcv6bec5s3xtt","_id":"ckcive9nz003xcv6bcln7anwl"},{"post_id":"ckcive9ni0019cv6b8awed86h","tag_id":"ckcive9n7000gcv6bhhvcc3qp","_id":"ckcive9o0003zcv6bf859ajq3"},{"post_id":"ckcive9ni0019cv6b8awed86h","tag_id":"ckcive9n3000bcv6bec5s3xtt","_id":"ckcive9o00040cv6b41t2b98j"},{"post_id":"ckcive9ni0019cv6b8awed86h","tag_id":"ckcive9nt002scv6b3o0m4vdt","_id":"ckcive9o10042cv6ba69thjxk"},{"post_id":"ckcive9ni001bcv6b6e7hgxeb","tag_id":"ckcive9n7000gcv6bhhvcc3qp","_id":"ckcive9o10043cv6bd13rhrtn"},{"post_id":"ckcive9ni001bcv6b6e7hgxeb","tag_id":"ckcive9n3000bcv6bec5s3xtt","_id":"ckcive9o10045cv6bhszk3knw"},{"post_id":"ckcive9ni001bcv6b6e7hgxeb","tag_id":"ckcive9nt002scv6b3o0m4vdt","_id":"ckcive9o10046cv6bgegs5xz9"},{"post_id":"ckcive9ni001bcv6b6e7hgxeb","tag_id":"ckcive9nz003vcv6b4joz1rba","_id":"ckcive9o10048cv6b6xb51ie1"},{"post_id":"ckcive9nj001ecv6b1qbu9yxw","tag_id":"ckcive9nr002acv6bdog181b0","_id":"ckcive9o20049cv6b1nqu0l7p"},{"post_id":"ckcive9nj001ecv6b1qbu9yxw","tag_id":"ckcive9n3000bcv6bec5s3xtt","_id":"ckcive9o2004bcv6b5m584iu8"},{"post_id":"ckcive9nj001ecv6b1qbu9yxw","tag_id":"ckcive9mz0005cv6bdqucc2ed","_id":"ckcive9o2004ccv6bhyuqdjo1"},{"post_id":"ckcive9nk001gcv6bgw9egca8","tag_id":"ckcive9nv0035cv6b4dbj5nbm","_id":"ckcive9o2004ecv6begnjb26l"},{"post_id":"ckcive9nk001gcv6bgw9egca8","tag_id":"ckcive9nv0038cv6b31hhfpq8","_id":"ckcive9o2004fcv6bdcq8ckxn"},{"post_id":"ckcive9nm001jcv6b9oleclbr","tag_id":"ckcive9nr002acv6bdog181b0","_id":"ckcive9o2004hcv6bhsac3mam"},{"post_id":"ckcive9nm001jcv6b9oleclbr","tag_id":"ckcive9n3000bcv6bec5s3xtt","_id":"ckcive9o3004icv6bbcjgfii2"},{"post_id":"ckcive9nm001jcv6b9oleclbr","tag_id":"ckcive9o2004acv6b8yh7bsn1","_id":"ckcive9o3004jcv6b15bh4w09"},{"post_id":"ckcive9nn001ncv6b1q8m6it5","tag_id":"ckcive9nd000scv6b3u6efabr","_id":"ckcive9o3004lcv6b4cdtao9k"},{"post_id":"ckcive9nn001ncv6b1q8m6it5","tag_id":"ckcive9o2004dcv6bbwf831xd","_id":"ckcive9o3004mcv6bchif89th"},{"post_id":"ckcive9nn001ncv6b1q8m6it5","tag_id":"ckcive9nh0018cv6b1vbbal1b","_id":"ckcive9o3004ocv6bhhvt487f"},{"post_id":"ckcive9nn001ncv6b1q8m6it5","tag_id":"ckcive9nj001dcv6b7mmy1rzl","_id":"ckcive9o3004pcv6bgtukeivq"},{"post_id":"ckcive9no001rcv6bfrdvcldr","tag_id":"ckcive9o2004gcv6b05v53d18","_id":"ckcive9o3004qcv6b533z1phw"},{"post_id":"ckcive9no001rcv6bfrdvcldr","tag_id":"ckcive9o3004kcv6b91l429j5","_id":"ckcive9o3004rcv6bcs5o5iad"},{"post_id":"ckcive9no001rcv6bfrdvcldr","tag_id":"ckcive9o3004ncv6b2dh62xmg","_id":"ckcive9o3004scv6b92az2d14"},{"post_id":"ckd4pfkpw0000hw6bctyz8p4y","tag_id":"ckcive9n7000gcv6bhhvcc3qp","_id":"ckd4pfkqd0003hw6baeuu2nr8"},{"post_id":"ckd4pfkpw0000hw6bctyz8p4y","tag_id":"ckd4pfkq20001hw6b4sp5bp2i","_id":"ckd4pfkqd0004hw6b629v3ilj"},{"post_id":"ckd4pfkpw0000hw6bctyz8p4y","tag_id":"ckcive9nr002fcv6bg5n2chi9","_id":"ckd4pfkqd0005hw6bc1crh51w"},{"post_id":"ckrauk7nd0000bl6bcqfjg5cf","tag_id":"ckcive9n7000gcv6bhhvcc3qp","_id":"ckrauk7nh0002bl6b6hmmdv1e"},{"post_id":"ckrauk7nd0000bl6bcqfjg5cf","tag_id":"ckcive9nt002scv6b3o0m4vdt","_id":"ckrauk7nn0004bl6bcgel5bi4"},{"post_id":"ckrauk7nd0000bl6bcqfjg5cf","tag_id":"ckcive9n3000bcv6bec5s3xtt","_id":"ckrauk7np0006bl6bglau86oo"},{"post_id":"ckrauk7ng0001bl6b5w50bjhb","tag_id":"ckcive9n7000gcv6bhhvcc3qp","_id":"ckrauk7nw0008bl6bat0y0qma"},{"post_id":"ckrauk7ng0001bl6b5w50bjhb","tag_id":"ckrauk7nl0003bl6b58411qdf","_id":"ckrauk7ny0009bl6bhau4h6n5"},{"post_id":"ckrauk7ng0001bl6b5w50bjhb","tag_id":"ckcive9nr002fcv6bg5n2chi9","_id":"ckrauk7nz000abl6bb8n4d574"}],"Tag":[{"name":"Apple","_id":"ckcive9mz0005cv6bdqucc2ed"},{"name":"Xcode","_id":"ckcive9n3000bcv6bec5s3xtt"},{"name":"iOS","_id":"ckcive9n7000gcv6bhhvcc3qp"},{"name":"UI","_id":"ckcive9nb000ncv6b18vcbl4u"},{"name":"struts","_id":"ckcive9nd000scv6b3u6efabr"},{"name":"Action","_id":"ckcive9nf0012cv6b204n8xmb"},{"name":"JavaEE","_id":"ckcive9nh0018cv6b1vbbal1b"},{"name":"总结","_id":"ckcive9nj001dcv6b7mmy1rzl"},{"name":"实验","_id":"ckcive9nk001icv6b0g2g9b5s"},{"name":"数字生活","_id":"ckcive9np001vcv6b6f4f7kgc"},{"name":"杂文","_id":"ckcive9nq0020cv6bblpv66rk"},{"name":"OpenCV","_id":"ckcive9nr002acv6bdog181b0"},{"name":"Swift","_id":"ckcive9nr002fcv6bg5n2chi9"},{"name":"AudioPlayer","_id":"ckcive9ns002kcv6bd4et2fgw"},{"name":"Vue.js","_id":"ckcive9ns002ncv6bbb522m8z"},{"name":"前端框架","_id":"ckcive9nt002qcv6b184wepwk"},{"name":"Objective-C","_id":"ckcive9nt002scv6b3o0m4vdt"},{"name":"Hibernate","_id":"ckcive9nu002ycv6bhedb5oql"},{"name":"设计模式","_id":"ckcive9nv0035cv6b4dbj5nbm"},{"name":"Java","_id":"ckcive9nv0038cv6b31hhfpq8"},{"name":"ARC","_id":"ckcive9nz003vcv6b4joz1rba"},{"name":"Grayscale","_id":"ckcive9o2004acv6b8yh7bsn1"},{"name":"workflow","_id":"ckcive9o2004dcv6bbwf831xd"},{"name":"数据挖掘","_id":"ckcive9o2004gcv6b05v53d18"},{"name":"关联算法","_id":"ckcive9o3004kcv6b91l429j5"},{"name":"WEKA","_id":"ckcive9o3004ncv6b2dh62xmg"},{"name":"Music","_id":"ckd4pfkq20001hw6b4sp5bp2i"},{"name":"SwiftUI","_id":"ckrauk7nl0003bl6b58411qdf"}]}}