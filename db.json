{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechat_account.jpg","path":"images/wechat_account.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"47dfeb51cd0e088888ebe6083e539480639e3c87","modified":1582790068608},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1580551872000},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1580551872000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1580551872000},{"_id":"themes/next/.DS_Store","hash":"30aab2476612f755c1a9cb9e86a593b262d7c4b5","modified":1582790507243},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1580551872000},{"_id":"themes/next/README.md","hash":"dc026053a4d9fb97a58dbc3e9060e480f6852b23","modified":1580551872000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1580551872000},{"_id":"themes/next/_config.yml","hash":"9f7d149cb43ab4125114ad72b3d87713ac211d78","modified":1582791608738},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1580551872000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1580551872000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1580551872000},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1580551872000},{"_id":"themes/next/package.json","hash":"213bd6ff96a027f5db6d1ce966a2cc75499a3e10","modified":1580551872000},{"_id":"source/_posts/Apple Watch.md","hash":"11edc2a26916115ad11effd30190fb62edc3166b","modified":1582790013875},{"_id":"source/_posts/Design+Code 的 Vue.js 课程学习摘录.md","hash":"4036e57e834799626f9c69c79c6b718cf8037da0","modified":1581358274294},{"_id":"source/about/hello-world.md","hash":"e437a32173b6047751fde4ccaf03d4d8c1f8e709","modified":1581357857422},{"_id":"source/about/index.md","hash":"1df2b65876dc577a437872687355772cce5c4483","modified":1581358108596},{"_id":"source/about/联系方式.md","hash":"44a8564cf00d632c14d634f033852b1396834fde","modified":1581357847275},{"_id":"source/_posts/.DS_Store","hash":"304a4fd2275be45b14ee1efbe338153f2620d031","modified":1582777601969},{"_id":"source/archives/index.md","hash":"4b7f6e7dc06174b899f41ab452c0568d47832db1","modified":1582789602179},{"_id":"source/categories/index.md","hash":"d5f94a92758034367e09223d60829649dfe6c84e","modified":1582789567128},{"_id":"source/tags/index.md","hash":"2feaddcff1d9a41fe4813e8a8721525aaa65660d","modified":1582789622249},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1580551872000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ef63f34bd3b6bd4d7304d48ce5e0e3e2bead385","modified":1580551872000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"715dcf9b0429a4a4c7107d6d1d00a34e4cf9aa99","modified":1580551872000},{"_id":"themes/next/.github/config.yml","hash":"e4f4b9afe59bc508c4f7634895b33d7d460a7cb1","modified":1580551872000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1580551872000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1580551872000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1580551872000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1580551872000},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1580551872000},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1580551872000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1580551872000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1580551872000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1580551872000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1580551872000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1580551872000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"40a8089076005e0d26ef7c0db58a2b5b464cda6c","modified":1580551872000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1580551872000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1580551872000},{"_id":"themes/next/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1580551872000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"682937d48bf5d243842a76190921322e26c75247","modified":1580551872000},{"_id":"themes/next/languages/de.yml","hash":"3530753456db8a7a7cb72b47505bf6197ac9a9f2","modified":1580551872000},{"_id":"themes/next/languages/default.yml","hash":"2c415150d5ba44a05ec7ca5fa671d6129c7fe7db","modified":1580551872000},{"_id":"themes/next/languages/en.yml","hash":"2c415150d5ba44a05ec7ca5fa671d6129c7fe7db","modified":1580551872000},{"_id":"themes/next/languages/es.yml","hash":"9596836628169400beed4124eeb5867821075b00","modified":1580551872000},{"_id":"themes/next/languages/fa.yml","hash":"c77d0ab86695651f4fb09e0e9af484114fe80292","modified":1580551872000},{"_id":"themes/next/languages/fr.yml","hash":"30702ddcb121ee1ada258b8b900d826fec697e5e","modified":1580551872000},{"_id":"themes/next/languages/hu.yml","hash":"a317ba3ab2d9de40fe8b5447d0e63b9d8ab97c8b","modified":1580551872000},{"_id":"themes/next/languages/id.yml","hash":"85441f625f1f93a329b7eab01f919e81a6f36172","modified":1580551872000},{"_id":"themes/next/docs/.DS_Store","hash":"f91dd81228438250b77da8248e90b2cbd83200f8","modified":1581084534023},{"_id":"themes/next/languages/it.yml","hash":"8e4d494cd7f4e33d2c416da3a48f9bd8968243ea","modified":1580551872000},{"_id":"themes/next/languages/ja.yml","hash":"2a767bc258a5072f8d97ffdfce53b4e2332570f4","modified":1580551872000},{"_id":"themes/next/languages/ko.yml","hash":"04ba65574f1fa63ffb95fcfb7a4515ee4b01532f","modified":1580551872000},{"_id":"themes/next/languages/nl.yml","hash":"dea4d7d516071c9ec9e57935a84aaab15c3d2e97","modified":1580551872000},{"_id":"themes/next/languages/pt-BR.yml","hash":"66e3cc8efc2a26184fcbe4db8981b84099348276","modified":1580551872000},{"_id":"themes/next/languages/pt.yml","hash":"f184ffed48395675a7025cb1ccfdade546f3e987","modified":1580551872000},{"_id":"themes/next/languages/ru.yml","hash":"79f7f3b6e96184cf21ce2c9a2adb01b0f0228cf8","modified":1580551872000},{"_id":"themes/next/languages/uk.yml","hash":"a6af58b5351e0d0dde1fec22a3e80fc76bd8eecf","modified":1580551872000},{"_id":"themes/next/languages/tr.yml","hash":"5c5b60faa00401e822c92abcdcf9c5d410a8b753","modified":1580551872000},{"_id":"themes/next/languages/vi.yml","hash":"2b698896b08d79333a3414185fc2b445b3657361","modified":1580551872000},{"_id":"themes/next/languages/zh-CN.yml","hash":"6665546c8579eef40bf6d55ca83377a3d9f540b8","modified":1582791084575},{"_id":"themes/next/languages/zh-HK.yml","hash":"6e333aaca52dccee8e5f2d1dc28b0a6cda7b0c9a","modified":1580551872000},{"_id":"themes/next/languages/zh-TW.yml","hash":"d4517fa82652ccc75915469985efd7da1895963a","modified":1580551872000},{"_id":"themes/next/layout/_layout.swig","hash":"29ee038b0d5ffdb45327598733ea968588367769","modified":1580551872000},{"_id":"themes/next/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1580551872000},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1580551872000},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1580551872000},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1580551872000},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1580551872000},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1580551872000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1580551872000},{"_id":"themes/next/scripts/.DS_Store","hash":"693346292252f768199231e69e72c088b719408f","modified":1581086759414},{"_id":"themes/next/source/.DS_Store","hash":"6a579c99e7cdc3f8e09dc04c90f4160f7dff74b6","modified":1582549993121},{"_id":"themes/next/layout/.DS_Store","hash":"fe6a1b1850b72539d36fc0dfa8130015bafcde21","modified":1582790500618},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"8ae029084b9ac482adf0fae2a0979dd388476513","modified":1580551872000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"7a9526f749205c882d672a4f51e6a3033c80ca6e","modified":1580551872000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"789a3cceb8f37a4b63b1fb2452a03332a3c365ed","modified":1580551872000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"89667adbb85c25716dba607cd7a38191acf60736","modified":1580551872000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1580551872000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1580551872000},{"_id":"themes/next/docs/ru/README.md","hash":"41b1bef32fb991410ebf559b4c45022549f95215","modified":1580551872000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1580551872000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1580551872000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1580551872000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1580551872000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"17d7203e85a8ce9760c42a853dee0f26a8f7ee4e","modified":1580551872000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"0b0b9ec6ec4a89e701a3b91f8d7d95752d3e241b","modified":1580551872000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1580551872000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"7f37327bbcae7ed7d04d187fd5e9bc6bbf14926a","modified":1580551872000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"f0ffb74de522749c9f2fda46970a61bdafbfbc24","modified":1580551872000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"b6a3611d40863c12804c5846994786119ce3b79f","modified":1580551872000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1580551872000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"0c4914a5fd08f15beec71940218c814ad9a89f3f","modified":1580551872000},{"_id":"themes/next/layout/_macro/post.swig","hash":"cf6469cbf81884e13f4c6bbdb4f21e4294b80705","modified":1581087072424},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1580551872000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"459f4472b160f06bb52539df926d003c8c405206","modified":1582791169754},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1580551872000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1580551872000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1580551872000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1580551872000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"a3462c37ab6d7642b1e95860ea5c4cfbac78efab","modified":1580551872000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1580551872000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1580551872000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1580551872000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1580551872000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1580551872000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1580551872000},{"_id":"themes/next/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1580551872000},{"_id":"themes/next/scripts/events/.DS_Store","hash":"7b038f0dd00ba68949ed021d10a028c4cd912aab","modified":1581086342646},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1580551872000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1580551872000},{"_id":"themes/next/scripts/filters/locals.js","hash":"5bbfdc1c373542159660b7a68ed0b57ca18ad10b","modified":1580551872000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1580551872000},{"_id":"themes/next/scripts/filters/post.js","hash":"f2f566f2577c554377fd704442399acdd14a8118","modified":1580551872000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cb211b6b50913454b1737782e9e2af96cfa40448","modified":1580551872000},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1580551872000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1580551872000},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1580551872000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1580551872000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1580551872000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1580551872000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1580551872000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1580551872000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1580551872000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1580551872000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1580551872000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1580551872000},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1580551872000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1580551872000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1580551872000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1580551872000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1580551872000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1580551872000},{"_id":"themes/next/source/images/apple-touch-icon.png","hash":"87a5cb9ef565d1566ccf04e4596955f07f22fc2d","modified":1581081842417},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1580551872000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1580551872000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1580551872000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1580551872000},{"_id":"themes/next/source/images/favicon-16x16.png","hash":"45cb5124a39b8882339664bb451896da23b9e45c","modified":1581081756838},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1580551872000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1580551872000},{"_id":"themes/next/source/images/favicon-32x32.png","hash":"c0a61653ba05b4bb269a6f3ee89e9895f2aeb9b8","modified":1581081705660},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1580551872000},{"_id":"themes/next/source/js/.DS_Store","hash":"8faa1a9bdb5310d67ce94ae474adae79c92927f5","modified":1581086493125},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1580551872000},{"_id":"themes/next/source/js/local-search.js","hash":"f2e568298c71d2417a1a1c7e56025ce5842b1220","modified":1580551872000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1580551872000},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1580551872000},{"_id":"themes/next/source/js/utils.js","hash":"a1e70ac9d32697907d5d78f2533d627f4df8ebcb","modified":1580551872000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1580551872000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1580551872000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1580551872000},{"_id":"themes/next/source/images/wechat_account.jpg","hash":"371020e1948f149afa6e350e8e66b11609033b81","modified":1581082600000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"0172055d118d1d7f4c8379c8495c1ee1aa50c7d9","modified":1580551872000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1580551872000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1580551872000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"1638483d2d2dad1da4c841a6fb9f6ee96b850187","modified":1580551872000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"bbf0c8e42491fac70f4f8165224f1d7d92a040d7","modified":1580551872000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"e6076865dba066c5f0008e22217efb850d5af69c","modified":1580551872000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1580551872000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"54ba9508a901c295a02c8e34e9cece7c7dcad518","modified":1580551872000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1580551872000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1580551872000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1580551872000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1580551872000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"716b78cd90addc4216413719554721cb362b0c18","modified":1580551872000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1580551872000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"14c33bd544903e74388739599fffe3ecb66ed4b0","modified":1580551872000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1580551872000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1580551872000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"1b7faa20a458b46369779b57bcc695bbc5d1c13a","modified":1580551872000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"a2bb0bec243685e670b60a3d54142950adc03af0","modified":1580551872000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1580551872000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1580551872000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1580551872000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1580551872000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1580551872000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1580551872000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1580551872000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1580551872000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1580551872000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1580551872000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1580551872000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1580551872000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"d3dc3e051e6816cdd576d00cc70b18b8a4c6a495","modified":1580551872000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1580551872000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4d6f9e09ca4056ff6a5d4923e202126a75242183","modified":1580551872000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"ed236103bccbcf608f7d5d5b33b9f995d2f1a7de","modified":1580551872000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1580551872000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1580551872000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1580551872000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1580551872000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1580551872000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1580551872000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1580551872000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1580551872000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"0ea0bac09b0747bc16fde852164c0eaab2efe02c","modified":1580551872000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1580551872000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1580551872000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1580551872000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"801e1d2f59f7d2db4096c4788b8469b4165f4965","modified":1580551872000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b205d72a56b1827681f0a260c266e0c02065fd08","modified":1580551872000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1580551872000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1580551872000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1580551872000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1580551872000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1580551872000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"19cbd24880d0fbbd4d5698cd54da598f03b942da","modified":1580551872000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1580551872000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1580551872000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1580551872000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6a72b5928cdab9526a288177991e4b2aedd028cf","modified":1580551872000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1580551872000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1580551872000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1580551872000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1580551872000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1580551872000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1580551872000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1580551872000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d4e817e2b238ace5d7ac568ce0c5380196a6d039","modified":1580551872000},{"_id":"themes/next/source/images/favicon.png","hash":"e9194790400e5c55019076a58646a7bbcc3b908d","modified":1581081285644},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ae2a2502b77203e83f75a040c43e86a7ecb4873c","modified":1580551872000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1580551872000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1580551872000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"f068b46f8c305c7436c2767492a6bed42dcd764c","modified":1580551872000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1580551872000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1580551872000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1580551872000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1580551872000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"bc87cea0b534f2d75db60f300b069456f6516d1b","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4f7879a50d4608c46cc2061c725a2564597a45bd","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"8e1cc5e3b20d804a7265f945b877388bffee39eb","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4fb385d8533877678440c8faa08b68fa793cb1a2","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a54662bd4cbbe316048a811d3b5c83fb6df63739","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"5adf2fdea25630893283e1ad5ba1721b698d6e95","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"71a3d7f2242706f7a6b79933a67ef3664cca3a24","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"b797c693378d94160121a2b8d9df0622a76cdbda","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"84a3b8fe07fc790082ee988dd8f6c2536fde72de","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1580551872000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1580551872000},{"_id":"themes/next/source/images/logo.svg","hash":"916ac3850fbad6339fe94e7d19aaee001a5ac309","modified":1581081162171},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1580551872000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1580551872000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1580551872000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"af182c0d1e52f94280f6108936914f04ed541eee","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"60ed14e9ddcb138837ca22efb8886f9bff2a3dd2","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"c7939407797acbd1ae0d8bae8e13b2bf045f870e","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"a48ed1dc9978b1b621f0e12664738c0d855d8013","modified":1580551872000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f5821481440a0624c8aec5fc85f093de1527095f","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"c27b3056d5e22d3c66d8a152a23634314d5c4a60","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"521534f483440434e808f92377bc3fc73667c89a","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"6d8680894e24a516e2b5263af86b485767c3be63","modified":1580551872000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"b492a45422773ab2af06ee345d527ba4c6bbc608","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"b4923515ca8e44aa62e839ce948f759cfd1f896f","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"d2f0f2171722533bba308f944a2ec727b083582c","modified":1580551872000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1580551872000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1580551872000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1580551872000},{"_id":"source/about/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1581357428806},{"_id":"source/_posts/hello-world.md","hash":"e437a32173b6047751fde4ccaf03d4d8c1f8e709","modified":1581357857422},{"_id":"source/_posts/联系方式.md","hash":"44a8564cf00d632c14d634f033852b1396834fde","modified":1581357847275},{"_id":"source/_posts/配置OpenCV/在Mac上配置OpenCV与Xcode开发环境.md","hash":"1ec9df845c25426edc7ab98fe4f5938adf8d95bb","modified":1582706203642},{"_id":"source/_posts/配置OpenCV/Project.png","hash":"3380d8c5aafa8333fd92a0f35353c67d2888de59","modified":1582700763694},{"_id":"source/_posts/配置OpenCV/dir.png","hash":"68adbe30d9138ac21549356934866712ae8d6e77","modified":1582702252219},{"_id":"source/_posts/配置OpenCV/signature.png","hash":"9636884a131af89198e98f2e62822ff6163a1f66","modified":1582703111997},{"_id":"source/_posts/配置OpenCV/documention.png","hash":"e201a80d02b33f656d4eaee3d5e9da613977dc96","modified":1582701640812},{"_id":"source/_posts/配置OpenCV/Library.png","hash":"6f138c35396034992c24bedcdefa9598d5d3f9f9","modified":1582701774032},{"_id":"source/_posts/配置OpenCV/linker.png","hash":"72271cbf36e2e7babd0be5dcbac53e04e0848352","modified":1582702036670},{"_id":"source/_posts/配置OpenCV/Headers.png","hash":"f55588a795de40104149d6e8472e1d4f52a8a142","modified":1582701718002},{"_id":"source/_posts/配置OpenCV/Xcode.png","hash":"f095051c59b4a5d86b348181bd93972522521349","modified":1582698717101},{"_id":"source/_posts/在Mac上配置OpenCV与Xcode开发环境.md","hash":"753a91cb6e193aea5da3d3b0db173e607f0f0d31","modified":1582706672121},{"_id":"source/_posts/在Mac上配置OpenCV与Xcode开发环境/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1582706328018},{"_id":"source/_posts/在Mac上配置OpenCV与Xcode开发环境/Project.png","hash":"3380d8c5aafa8333fd92a0f35353c67d2888de59","modified":1582700763694},{"_id":"source/_posts/在Mac上配置OpenCV与Xcode开发环境/dir.png","hash":"68adbe30d9138ac21549356934866712ae8d6e77","modified":1582702252219},{"_id":"source/_posts/在Mac上配置OpenCV与Xcode开发环境/signature.png","hash":"9636884a131af89198e98f2e62822ff6163a1f66","modified":1582703111997},{"_id":"source/_posts/在Mac上配置OpenCV与Xcode开发环境/documention.png","hash":"e201a80d02b33f656d4eaee3d5e9da613977dc96","modified":1582701640812},{"_id":"source/_posts/在Mac上配置OpenCV与Xcode开发环境/Library.png","hash":"6f138c35396034992c24bedcdefa9598d5d3f9f9","modified":1582701774032},{"_id":"source/_posts/在Mac上配置OpenCV与Xcode开发环境/linker.png","hash":"72271cbf36e2e7babd0be5dcbac53e04e0848352","modified":1582702036670},{"_id":"source/_posts/在Mac上配置OpenCV与Xcode开发环境/Headers.png","hash":"f55588a795de40104149d6e8472e1d4f52a8a142","modified":1582701718002},{"_id":"source/_posts/在Mac上配置OpenCV与Xcode开发环境/Xcode.png","hash":"f095051c59b4a5d86b348181bd93972522521349","modified":1582698717101},{"_id":"source/_posts/Struts实验 2/12.png","hash":"2a193f4c3277530433d8ca629b0d02f345fc3a7c","modified":1582710461158},{"_id":"source/_posts/Struts实验 2/15.png","hash":"0a5b7f516385ea6c0b6d6e49b71de320295bd3ad","modified":1582710633513},{"_id":"source/_posts/Struts实验 2/16.png","hash":"dc2a732037fad1cdcd376d93748f38f2cf0dd895","modified":1582710653676},{"_id":"source/_posts/Struts实验 2/17.png","hash":"b749ee2c18c364178a900697bfe11750512116af","modified":1582710726504},{"_id":"source/_posts/Struts实验 2/3.png","hash":"8ed394fa26e72c72a5e5fe9a49159d6517cc7ffc","modified":1582710136966},{"_id":"source/_posts/Struts实验 2/8.png","hash":"70115598e49ef24895f4f37fef860de3b509d232","modified":1582710416203},{"_id":"source/_posts/Struts实验 2/Struts 实验.md","hash":"e1ab4a6069e6e92eda73aed151a9f89b2538ec08","modified":1582710900374},{"_id":"source/_posts/Struts实验 2/1.png","hash":"d7eb2bc35abc97cd95329bc49bb401e9f61239b0","modified":1582710080170},{"_id":"source/_posts/Struts实验 2/11.png","hash":"b98c505b83772f2cd7fa077fa8364590ae540069","modified":1582710449161},{"_id":"source/_posts/Struts实验 2/13.png","hash":"ae7f800dbe302632b4e780ebd946e33907d06ee2","modified":1582710472775},{"_id":"source/_posts/Struts实验 2/14.png","hash":"98a27d750c7f4a92dd3d35c22d717813183367d3","modified":1582710503515},{"_id":"source/_posts/Struts实验 2/2.png","hash":"1704b133a68c645c8bec5f663fef7329c2cf98f2","modified":1582710129067},{"_id":"source/_posts/Struts实验 2/18.png","hash":"4f97101c6640207342eebe013bc237930cc1c9f6","modified":1582710711821},{"_id":"source/_posts/Struts实验 2/20.png","hash":"ed64abab800afadbcf93e265bcce5b3f0bcb5eb4","modified":1582710765518},{"_id":"source/_posts/Struts实验 2/19.png","hash":"09517d00a79e34c8b80592a4be975e856e0cd886","modified":1582710757958},{"_id":"source/_posts/Struts实验 2/4.png","hash":"63b7c1b0aaf05bbd219156b694b10b12985f4af1","modified":1582710146287},{"_id":"source/_posts/Struts实验 2/5.png","hash":"f0dc42bd0706e658ea3168dd2be50014118d2017","modified":1582710160412},{"_id":"source/_posts/Struts实验 2/6.png","hash":"dc3d7595e3e18d9056a390d4b868649f195b6d92","modified":1582710168429},{"_id":"source/_posts/Struts实验 2/7.png","hash":"ba150ac99e12159c1bf64edc3e37a5f2be8fe7df","modified":1582710110853},{"_id":"source/_posts/Struts实验 2/9.png","hash":"836684a889d211df549c8fb6f90a689d20d59f34","modified":1582710424749},{"_id":"source/_posts/Struts实验 2/10.png","hash":"c4d4808354668716e312dc618fc88ef9f27aa4e5","modified":1582710437096},{"_id":"source/_posts/Struts Experiment/16.png","hash":"dc2a732037fad1cdcd376d93748f38f2cf0dd895","modified":1582710653676},{"_id":"source/_posts/Struts Experiment/8.png","hash":"70115598e49ef24895f4f37fef860de3b509d232","modified":1582710416203},{"_id":"source/_posts/Struts Experiment/Struts 实验.md","hash":"e1ab4a6069e6e92eda73aed151a9f89b2538ec08","modified":1582710900374},{"_id":"source/_posts/Struts Experiment/1.png","hash":"d7eb2bc35abc97cd95329bc49bb401e9f61239b0","modified":1582710080170},{"_id":"source/_posts/Struts Experiment/11.png","hash":"b98c505b83772f2cd7fa077fa8364590ae540069","modified":1582710449161},{"_id":"source/_posts/Struts Experiment/15.png","hash":"0a5b7f516385ea6c0b6d6e49b71de320295bd3ad","modified":1582710633513},{"_id":"source/_posts/Struts Experiment/12.png","hash":"2a193f4c3277530433d8ca629b0d02f345fc3a7c","modified":1582710461158},{"_id":"source/_posts/Struts Experiment/13.png","hash":"ae7f800dbe302632b4e780ebd946e33907d06ee2","modified":1582710472775},{"_id":"source/_posts/Struts Experiment/17.png","hash":"b749ee2c18c364178a900697bfe11750512116af","modified":1582710726504},{"_id":"source/_posts/Struts Experiment/19.png","hash":"09517d00a79e34c8b80592a4be975e856e0cd886","modified":1582710757958},{"_id":"source/_posts/Struts Experiment/18.png","hash":"4f97101c6640207342eebe013bc237930cc1c9f6","modified":1582710711821},{"_id":"source/_posts/Struts Experiment/3.png","hash":"8ed394fa26e72c72a5e5fe9a49159d6517cc7ffc","modified":1582710136966},{"_id":"source/_posts/Struts Experiment/5.png","hash":"f0dc42bd0706e658ea3168dd2be50014118d2017","modified":1582710160412},{"_id":"source/_posts/Struts Experiment/2.png","hash":"1704b133a68c645c8bec5f663fef7329c2cf98f2","modified":1582710129067},{"_id":"source/_posts/Struts Experiment/4.png","hash":"63b7c1b0aaf05bbd219156b694b10b12985f4af1","modified":1582710146287},{"_id":"source/_posts/Struts Experiment/6.png","hash":"dc3d7595e3e18d9056a390d4b868649f195b6d92","modified":1582710168429},{"_id":"source/_posts/Struts Experiment/7.png","hash":"ba150ac99e12159c1bf64edc3e37a5f2be8fe7df","modified":1582710110853},{"_id":"source/_posts/Struts Experiment/14.png","hash":"98a27d750c7f4a92dd3d35c22d717813183367d3","modified":1582710503515},{"_id":"source/_posts/Struts Experiment/20.png","hash":"ed64abab800afadbcf93e265bcce5b3f0bcb5eb4","modified":1582710765518},{"_id":"source/_posts/Struts Experiment/9.png","hash":"836684a889d211df549c8fb6f90a689d20d59f34","modified":1582710424749},{"_id":"source/_posts/Struts Experiment/10.png","hash":"c4d4808354668716e312dc618fc88ef9f27aa4e5","modified":1582710437096},{"_id":"source/_posts/Struts_Experiment/12.png","hash":"2a193f4c3277530433d8ca629b0d02f345fc3a7c","modified":1582710461158},{"_id":"source/_posts/Struts_Experiment/8.png","hash":"70115598e49ef24895f4f37fef860de3b509d232","modified":1582710416203},{"_id":"source/_posts/Struts_Experiment/1.png","hash":"d7eb2bc35abc97cd95329bc49bb401e9f61239b0","modified":1582710080170},{"_id":"source/_posts/Struts_Experiment/13.png","hash":"ae7f800dbe302632b4e780ebd946e33907d06ee2","modified":1582710472775},{"_id":"source/_posts/Struts_Experiment/15.png","hash":"0a5b7f516385ea6c0b6d6e49b71de320295bd3ad","modified":1582710633513},{"_id":"source/_posts/Struts_Experiment/16.png","hash":"dc2a732037fad1cdcd376d93748f38f2cf0dd895","modified":1582710653676},{"_id":"source/_posts/Struts_Experiment/17.png","hash":"b749ee2c18c364178a900697bfe11750512116af","modified":1582710726504},{"_id":"source/_posts/Struts_Experiment/2.png","hash":"1704b133a68c645c8bec5f663fef7329c2cf98f2","modified":1582710129067},{"_id":"source/_posts/Struts_Experiment/19.png","hash":"09517d00a79e34c8b80592a4be975e856e0cd886","modified":1582710757958},{"_id":"source/_posts/Struts_Experiment/20.png","hash":"ed64abab800afadbcf93e265bcce5b3f0bcb5eb4","modified":1582710765518},{"_id":"source/_posts/Struts_Experiment/3.png","hash":"8ed394fa26e72c72a5e5fe9a49159d6517cc7ffc","modified":1582710136966},{"_id":"source/_posts/Struts_Experiment/4.png","hash":"63b7c1b0aaf05bbd219156b694b10b12985f4af1","modified":1582710146287},{"_id":"source/_posts/Struts_Experiment/7.png","hash":"ba150ac99e12159c1bf64edc3e37a5f2be8fe7df","modified":1582710110853},{"_id":"source/_posts/Struts_Experiment/5.png","hash":"f0dc42bd0706e658ea3168dd2be50014118d2017","modified":1582710160412},{"_id":"source/_posts/Struts_Experiment/6.png","hash":"dc3d7595e3e18d9056a390d4b868649f195b6d92","modified":1582710168429},{"_id":"source/_posts/Struts_Experiment/14.png","hash":"98a27d750c7f4a92dd3d35c22d717813183367d3","modified":1582710503515},{"_id":"source/_posts/Struts_Experiment/11.png","hash":"b98c505b83772f2cd7fa077fa8364590ae540069","modified":1582710449161},{"_id":"source/_posts/Struts_Experiment/18.png","hash":"4f97101c6640207342eebe013bc237930cc1c9f6","modified":1582710711821},{"_id":"source/_posts/Struts_Experiment/9.png","hash":"836684a889d211df549c8fb6f90a689d20d59f34","modified":1582710424749},{"_id":"source/_posts/Struts_Experiment/10.png","hash":"c4d4808354668716e312dc618fc88ef9f27aa4e5","modified":1582710437096},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1582706328018},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/Project.png","hash":"3380d8c5aafa8333fd92a0f35353c67d2888de59","modified":1582700763694},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/signature.png","hash":"9636884a131af89198e98f2e62822ff6163a1f66","modified":1582703111997},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/dir.png","hash":"68adbe30d9138ac21549356934866712ae8d6e77","modified":1582702252219},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/documention.png","hash":"e201a80d02b33f656d4eaee3d5e9da613977dc96","modified":1582701640812},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/Library.png","hash":"6f138c35396034992c24bedcdefa9598d5d3f9f9","modified":1582701774032},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/Headers.png","hash":"f55588a795de40104149d6e8472e1d4f52a8a142","modified":1582701718002},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/linker.png","hash":"72271cbf36e2e7babd0be5dcbac53e04e0848352","modified":1582702036670},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/Xcode.png","hash":"f095051c59b4a5d86b348181bd93972522521349","modified":1582698717101},{"_id":"source/_posts/Design+Code_Vue.js_Learning.md","hash":"3ba00c32d714c4bb892703c737fc03b98fc08cd4","modified":1582792103642},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode.md","hash":"3eeb060342d9ee49f69292e87084ac4b5c681d15","modified":1582792202816},{"_id":"source/_posts/Struts_Experiment.md","hash":"dcc84068ba53ba19cff48f5591cddbd4473fe3d0","modified":1582803651795},{"_id":"source/_posts/Action_Experiment.md","hash":"79303981ca9e5fcd02ffac637da7b78caef4102c","modified":1582803633846},{"_id":"source/_posts/Action_Experiment/11.png","hash":"c95df8125305e1272fb6dcdd6d6bf0d50cee27c9","modified":1582776467085},{"_id":"source/_posts/Action_Experiment/13.png","hash":"be2c4a1da212ef4cb12f5060ad0b740db01e9fca","modified":1582776505035},{"_id":"source/_posts/Action_Experiment/15.png","hash":"433c4d94176a95fef94df0e7769888773a3c8c39","modified":1582776527969},{"_id":"source/_posts/Action_Experiment/19.png","hash":"51af66a58e2dceea315edf3fd4ace084a2a6db30","modified":1582777257022},{"_id":"source/_posts/Action_Experiment/21.png","hash":"ac47e797cd70becd1879609d82124e4fc70e8886","modified":1582777266471},{"_id":"source/_posts/Action_Experiment/22.png","hash":"296819fd0c0d841c210fd8b670eb37810b639898","modified":1582777273383},{"_id":"source/_posts/Action_Experiment/5.png","hash":"726a5054cfa2b47d4d598e17f0885ef8661a6acd","modified":1582776357274},{"_id":"source/_posts/Action_Experiment/6.png","hash":"7c103ab14dec169bbb25027bd60346e5db3c2061","modified":1582776368231},{"_id":"source/_posts/Action_Experiment/9.png","hash":"036e2042b95a03ff077db2cbf4300c5dd908e121","modified":1582776428288},{"_id":"source/_posts/Action_Experiment/na.png","hash":"aef201fa033a0318301a1997b8af0952ec15a5a8","modified":1582777104148},{"_id":"source/_posts/Action_Experiment/10.png","hash":"361007ca5b06a9bd7e043d9f9a8dcc38ba76de42","modified":1582776454989},{"_id":"source/_posts/Action_Experiment/12.png","hash":"392a11879adf7b088dcc740642679cf32806f3a5","modified":1582776494261},{"_id":"source/_posts/Action_Experiment/16.png","hash":"cf63a5f128126e7f11f2e9fb47f3734322ee9df6","modified":1582777211863},{"_id":"source/_posts/Action_Experiment/17.png","hash":"8cece424a0b670955abd695f49b4fa9b30a92318","modified":1582777229343},{"_id":"source/_posts/Action_Experiment/18.png","hash":"efabf500ead9e7e3e2ff4fa09e5f5565c9bb12fc","modified":1582777245545},{"_id":"source/_posts/Action_Experiment/2.png","hash":"398a42e48ce1cd2f2b5d93c5eff48842ed6a5155","modified":1582771415865},{"_id":"source/_posts/Action_Experiment/20.png","hash":"ed66f254efff53298eebe8ee3b0c075ea7a14a10","modified":1582777261291},{"_id":"source/_posts/Action_Experiment/3.png","hash":"7e47504846ffed31d7622ed437f8f3700d5e7f5e","modified":1582771538107},{"_id":"source/_posts/Action_Experiment/4.png","hash":"168a80763fd2d388f417d3601e55787717497ee0","modified":1582771585819},{"_id":"source/_posts/Action_Experiment/7.png","hash":"1aeb0ffb4e873da6a79fe27a9c70617cc0c9e094","modified":1582776377452},{"_id":"source/_posts/Action_Experiment/8.png","hash":"c7d8e8cf73a769390a567822e8a453669901d5e3","modified":1582776390395},{"_id":"source/_posts/Action_Experiment/1.png","hash":"6d3fa203d8998ae1ab5ea253392ec776257b43b4","modified":1582770885871},{"_id":"source/_posts/Action_Experiment/14.png","hash":"c0fca01de3a897b124b1926441c4e9805a19def3","modified":1582776519083},{"_id":"source/_posts/Action_Experiment/uni.png","hash":"b2c0c57f17e1e8a5d392951857af5afbc69517d1","modified":1582771236872},{"_id":"source/_posts/Action_Experiment/DMI.png","hash":"a918906603948105b53c64572ab32bd701dccdf7","modified":1582771203923},{"_id":"source/_posts/Action_Experiment/button.png","hash":"34d252f467c88ffa17d85c0bf16c865884f96487","modified":1582771221329},{"_id":"source/_posts/Struts_Workflow.md","hash":"a20f14e3814eaf313c2accd997e9c5ed2218b541","modified":1582805921160},{"_id":"source/_posts/无标题.md","hash":"e70b654e306adbc0149dd52da9cd33c03b4904de","modified":1582805436251},{"_id":"source/_posts/Action_Experiment/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1582793250106},{"_id":"source/_posts/Hibernate_Basic.md","hash":"e70b654e306adbc0149dd52da9cd33c03b4904de","modified":1582805578752},{"_id":"source/_posts/OpenCV_Grayscale.md","hash":"ac296fa98cca23f2632195a5e34867ee5821ff36","modified":1584375471281},{"_id":"source/_posts/media/15843608120528/15843740110140.jpg","hash":"f25f5e23c8e7f1a962807aa4977c18f65f852e5c","modified":1584374011025},{"_id":"source/_posts/media/15843608120528/15843729583350.jpg","hash":"51f70cd867b8baf1d644a3020156fc7d3d1d2d4d","modified":1584372958349},{"_id":"source/_posts/media/15843608120528/直方图.png","hash":"86844d000c519cb8e2e77058512f8d25805c8f29","modified":1584371962935},{"_id":"source/_posts/media/15843608120528/cvcolor.png","hash":"39c4fc9704c802244f70b67b82a00c368606b342","modified":1584373777101},{"_id":"source/_posts/media/15843608120528/201706061715方宣淼实验一-1-.png","hash":"90ddaf05a55219c1953d9eeda76bf13d182ceceb","modified":1584319079875},{"_id":"source/_posts/OpenCV_Grayscale/15843740110140.jpg","hash":"f25f5e23c8e7f1a962807aa4977c18f65f852e5c","modified":1584374011025},{"_id":"source/_posts/OpenCV_Grayscale/15843729583350.jpg","hash":"51f70cd867b8baf1d644a3020156fc7d3d1d2d4d","modified":1584372958349},{"_id":"source/_posts/OpenCV_Grayscale/直方图.png","hash":"86844d000c519cb8e2e77058512f8d25805c8f29","modified":1584371962935},{"_id":"source/_posts/OpenCV_Grayscale/cvcolor.png","hash":"39c4fc9704c802244f70b67b82a00c368606b342","modified":1584373777101},{"_id":"source/_posts/OpenCV_Grayscale/201706061715方宣淼实验一-1-.png","hash":"90ddaf05a55219c1953d9eeda76bf13d182ceceb","modified":1584319079875},{"_id":"source/_posts/OpenCV_Grayscale/calcHist.jpg","hash":"f25f5e23c8e7f1a962807aa4977c18f65f852e5c","modified":1584374011025},{"_id":"source/_posts/OpenCV_Grayscale/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1584375206020},{"_id":"source/_posts/OpenCV_Grayscale/equa.jpg","hash":"51f70cd867b8baf1d644a3020156fc7d3d1d2d4d","modified":1584372958349},{"_id":"source/_posts/OpenCV_Grayscale/result.png","hash":"90ddaf05a55219c1953d9eeda76bf13d182ceceb","modified":1584319079875}],"Category":[{"name":"tech","_id":"ck74gdjik00010d6b5e29chtf"},{"name":"design","_id":"ck74gdjiy00090d6bfuxwe57g"}],"Data":[],"Page":[{"title":"关于本站","date":"2020-02-07T13:52:18.000Z","type":"about","_content":"[StephenFang](https://github.com/iamStephenFang) 使用 [Hexo](https://hexo.io/zh-cn/docs/)  搭建的 [GitHub Pages](https://pages.github.com/)，主要分享技术与设计方面的内容。\n\n如果您对我的博文感兴趣，可以通过以下几种社交网络与我保持联系。\n\n- GitHub: [iamStephenFang](https://github.com/iamstephenfang) \n- Instagram: [iamStephenFang](https://instagram.com/iamstephenfang) \n- E-Mail: [StephenFang](mailto:fangxuanmiao@gmail.com) \n- Weibo: [iamStephenFang](https://weibo.com/iamstephenfang) \n- Twitter: [Fangxuanmiao](https://twitter.com/fangxuanmiao) ","source":"about/index.md","raw":"---\ntitle: 关于本站\ndate: 2020-02-07 21:52:18\ntype: about\n---\n[StephenFang](https://github.com/iamStephenFang) 使用 [Hexo](https://hexo.io/zh-cn/docs/)  搭建的 [GitHub Pages](https://pages.github.com/)，主要分享技术与设计方面的内容。\n\n如果您对我的博文感兴趣，可以通过以下几种社交网络与我保持联系。\n\n- GitHub: [iamStephenFang](https://github.com/iamstephenfang) \n- Instagram: [iamStephenFang](https://instagram.com/iamstephenfang) \n- E-Mail: [StephenFang](mailto:fangxuanmiao@gmail.com) \n- Weibo: [iamStephenFang](https://weibo.com/iamstephenfang) \n- Twitter: [Fangxuanmiao](https://twitter.com/fangxuanmiao) ","updated":"2020-02-10T18:08:28.596Z","path":"about/index.html","_id":"ck6grd6vb0003up6bb5my62j0","comments":1,"layout":"page","content":"<p><a href=\"https://github.com/iamStephenFang\" target=\"_blank\" rel=\"noopener\">StephenFang</a> 使用 <a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo</a>  搭建的 <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Pages</a>，主要分享技术与设计方面的内容。</p>\n<p>如果您对我的博文感兴趣，可以通过以下几种社交网络与我保持联系。</p>\n<ul>\n<li>GitHub: <a href=\"https://github.com/iamstephenfang\" target=\"_blank\" rel=\"noopener\">iamStephenFang</a> </li>\n<li>Instagram: <a href=\"https://instagram.com/iamstephenfang\" target=\"_blank\" rel=\"noopener\">iamStephenFang</a> </li>\n<li>E-Mail: <a href=\"mailto:fangxuanmiao@gmail.com\">StephenFang</a> </li>\n<li>Weibo: <a href=\"https://weibo.com/iamstephenfang\" target=\"_blank\" rel=\"noopener\">iamStephenFang</a> </li>\n<li>Twitter: <a href=\"https://twitter.com/fangxuanmiao\" target=\"_blank\" rel=\"noopener\">Fangxuanmiao</a> </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/iamStephenFang\" target=\"_blank\" rel=\"noopener\">StephenFang</a> 使用 <a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo</a>  搭建的 <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Pages</a>，主要分享技术与设计方面的内容。</p>\n<p>如果您对我的博文感兴趣，可以通过以下几种社交网络与我保持联系。</p>\n<ul>\n<li>GitHub: <a href=\"https://github.com/iamstephenfang\" target=\"_blank\" rel=\"noopener\">iamStephenFang</a> </li>\n<li>Instagram: <a href=\"https://instagram.com/iamstephenfang\" target=\"_blank\" rel=\"noopener\">iamStephenFang</a> </li>\n<li>E-Mail: <a href=\"mailto:fangxuanmiao@gmail.com\">StephenFang</a> </li>\n<li>Weibo: <a href=\"https://weibo.com/iamstephenfang\" target=\"_blank\" rel=\"noopener\">iamStephenFang</a> </li>\n<li>Twitter: <a href=\"https://twitter.com/fangxuanmiao\" target=\"_blank\" rel=\"noopener\">Fangxuanmiao</a> </li>\n</ul>\n"},{"title":"归档","date":"2020-02-07T13:55:29.000Z","type":"archive","_content":"","source":"archives/index.md","raw":"---\ntitle: 归档\ndate: 2020-02-07 21:55:29\ntype: \"archive\"\n---\n","updated":"2020-02-27T07:46:42.179Z","path":"archives/index.html","_id":"ck6grd6vd0006up6bgyei567u","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"文章分类","date":"2020-02-07T13:56:26.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2020-02-07 21:56:26\ntype: \"categories\"\n---\n","updated":"2020-02-27T07:46:07.128Z","path":"categories/index.html","_id":"ck6grd6ve0008up6bbon77gkp","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2020-02-07T13:26:23.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-02-07 21:26:23\ntype: \"tags\"\n---\n","updated":"2020-02-27T07:47:02.249Z","path":"tags/index.html","_id":"ck6grd6vw000bup6b6pz0dx6f","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Apple Watch程序设计","date":"2020-02-07T08:45:28.000Z","_content":"\n## 基本原则\n\n设计Apple Watch应用程序与设计iOS程序存在很大不同，我们需要了解其是iPhone的功能拓展，它的尺寸带来了新的手势操作和UI/UX 设计。\n\n### **私人联系**\n\nApple Watch可能是第一个与用户建立紧密联系的设备，因此您在设计过程中需要利用这种独特的结合。\n\n### **整体化设计**\n\nForce Touch和Digital Crown是使用户与屏幕上的内容无缝交互的关键组件。在设计应用程序时，目标应该是增强用户的认识，即它们之间的硬件和软件是无法区分的。\n\n### **轻量化交互**\n\nApple Watch中的快速交互对于体验至关重要。动画和声音之间的同步对于用户至关重要。重要的是要考虑到显示的信息应该快速浏览并易于消除。\n\n## Apple Watch体验的权衡点\n\n苹果官方提供了[视频](https://developer.apple.com/videos/play/wwdc2017/808/)讲解了一些技巧。\n\n评估您的应用的最佳方法是考虑实现以下4点\n\n![Apple官方参考](https://images.ctfassets.net/ooa29xqb8tix/6MDnChHFUkSoASwSWm6Woq/cd8c7dfdb89088677467edf5bd21a5a6/Qualities_20of_20Apple_20Watch_20Experiences.jpg)\n\n### **清晰**\n\n用户第一眼就能了解界面所显示的信息。\n\n### **简洁**\n\n直截了当。请记住，您的用户收到应用程序通知并举起手腕之间的时间只有几秒钟。\n\n### **及时**\n\n在尽可能短的时间内向用户显示最相关的信息。这样，您正在使您的应用与用户更加相关。\n\n### **客制化**\n\n如果您的应用程序完成了前三个要素，那么您的用户将感到个人联系。理想情况下，尝试加深与用户的这种关系。","source":"_posts/Apple Watch.md","raw":"---\ntitle: Apple Watch程序设计\ndate: 2020-02-07 16:45:28\ncategories: \n- design\ntags: \n- Apple\n- Xcode\n---\n\n## 基本原则\n\n设计Apple Watch应用程序与设计iOS程序存在很大不同，我们需要了解其是iPhone的功能拓展，它的尺寸带来了新的手势操作和UI/UX 设计。\n\n### **私人联系**\n\nApple Watch可能是第一个与用户建立紧密联系的设备，因此您在设计过程中需要利用这种独特的结合。\n\n### **整体化设计**\n\nForce Touch和Digital Crown是使用户与屏幕上的内容无缝交互的关键组件。在设计应用程序时，目标应该是增强用户的认识，即它们之间的硬件和软件是无法区分的。\n\n### **轻量化交互**\n\nApple Watch中的快速交互对于体验至关重要。动画和声音之间的同步对于用户至关重要。重要的是要考虑到显示的信息应该快速浏览并易于消除。\n\n## Apple Watch体验的权衡点\n\n苹果官方提供了[视频](https://developer.apple.com/videos/play/wwdc2017/808/)讲解了一些技巧。\n\n评估您的应用的最佳方法是考虑实现以下4点\n\n![Apple官方参考](https://images.ctfassets.net/ooa29xqb8tix/6MDnChHFUkSoASwSWm6Woq/cd8c7dfdb89088677467edf5bd21a5a6/Qualities_20of_20Apple_20Watch_20Experiences.jpg)\n\n### **清晰**\n\n用户第一眼就能了解界面所显示的信息。\n\n### **简洁**\n\n直截了当。请记住，您的用户收到应用程序通知并举起手腕之间的时间只有几秒钟。\n\n### **及时**\n\n在尽可能短的时间内向用户显示最相关的信息。这样，您正在使您的应用与用户更加相关。\n\n### **客制化**\n\n如果您的应用程序完成了前三个要素，那么您的用户将感到个人联系。理想情况下，尝试加深与用户的这种关系。","slug":"Apple Watch","published":1,"updated":"2020-02-27T07:53:33.875Z","_id":"ck6grd6v50000up6b6ks90kmf","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"基本原则\"><a href=\"#基本原则\" class=\"headerlink\" title=\"基本原则\"></a>基本原则</h2><p>设计Apple Watch应用程序与设计iOS程序存在很大不同，我们需要了解其是iPhone的功能拓展，它的尺寸带来了新的手势操作和UI/UX 设计。</p>\n<h3 id=\"私人联系\"><a href=\"#私人联系\" class=\"headerlink\" title=\"私人联系\"></a><strong>私人联系</strong></h3><p>Apple Watch可能是第一个与用户建立紧密联系的设备，因此您在设计过程中需要利用这种独特的结合。</p>\n<h3 id=\"整体化设计\"><a href=\"#整体化设计\" class=\"headerlink\" title=\"整体化设计\"></a><strong>整体化设计</strong></h3><p>Force Touch和Digital Crown是使用户与屏幕上的内容无缝交互的关键组件。在设计应用程序时，目标应该是增强用户的认识，即它们之间的硬件和软件是无法区分的。</p>\n<h3 id=\"轻量化交互\"><a href=\"#轻量化交互\" class=\"headerlink\" title=\"轻量化交互\"></a><strong>轻量化交互</strong></h3><p>Apple Watch中的快速交互对于体验至关重要。动画和声音之间的同步对于用户至关重要。重要的是要考虑到显示的信息应该快速浏览并易于消除。</p>\n<h2 id=\"Apple-Watch体验的权衡点\"><a href=\"#Apple-Watch体验的权衡点\" class=\"headerlink\" title=\"Apple Watch体验的权衡点\"></a>Apple Watch体验的权衡点</h2><p>苹果官方提供了<a href=\"https://developer.apple.com/videos/play/wwdc2017/808/\" target=\"_blank\" rel=\"noopener\">视频</a>讲解了一些技巧。</p>\n<p>评估您的应用的最佳方法是考虑实现以下4点</p>\n<p><img src=\"https://images.ctfassets.net/ooa29xqb8tix/6MDnChHFUkSoASwSWm6Woq/cd8c7dfdb89088677467edf5bd21a5a6/Qualities_20of_20Apple_20Watch_20Experiences.jpg\" alt=\"Apple官方参考\"></p>\n<h3 id=\"清晰\"><a href=\"#清晰\" class=\"headerlink\" title=\"清晰\"></a><strong>清晰</strong></h3><p>用户第一眼就能了解界面所显示的信息。</p>\n<h3 id=\"简洁\"><a href=\"#简洁\" class=\"headerlink\" title=\"简洁\"></a><strong>简洁</strong></h3><p>直截了当。请记住，您的用户收到应用程序通知并举起手腕之间的时间只有几秒钟。</p>\n<h3 id=\"及时\"><a href=\"#及时\" class=\"headerlink\" title=\"及时\"></a><strong>及时</strong></h3><p>在尽可能短的时间内向用户显示最相关的信息。这样，您正在使您的应用与用户更加相关。</p>\n<h3 id=\"客制化\"><a href=\"#客制化\" class=\"headerlink\" title=\"客制化\"></a><strong>客制化</strong></h3><p>如果您的应用程序完成了前三个要素，那么您的用户将感到个人联系。理想情况下，尝试加深与用户的这种关系。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本原则\"><a href=\"#基本原则\" class=\"headerlink\" title=\"基本原则\"></a>基本原则</h2><p>设计Apple Watch应用程序与设计iOS程序存在很大不同，我们需要了解其是iPhone的功能拓展，它的尺寸带来了新的手势操作和UI/UX 设计。</p>\n<h3 id=\"私人联系\"><a href=\"#私人联系\" class=\"headerlink\" title=\"私人联系\"></a><strong>私人联系</strong></h3><p>Apple Watch可能是第一个与用户建立紧密联系的设备，因此您在设计过程中需要利用这种独特的结合。</p>\n<h3 id=\"整体化设计\"><a href=\"#整体化设计\" class=\"headerlink\" title=\"整体化设计\"></a><strong>整体化设计</strong></h3><p>Force Touch和Digital Crown是使用户与屏幕上的内容无缝交互的关键组件。在设计应用程序时，目标应该是增强用户的认识，即它们之间的硬件和软件是无法区分的。</p>\n<h3 id=\"轻量化交互\"><a href=\"#轻量化交互\" class=\"headerlink\" title=\"轻量化交互\"></a><strong>轻量化交互</strong></h3><p>Apple Watch中的快速交互对于体验至关重要。动画和声音之间的同步对于用户至关重要。重要的是要考虑到显示的信息应该快速浏览并易于消除。</p>\n<h2 id=\"Apple-Watch体验的权衡点\"><a href=\"#Apple-Watch体验的权衡点\" class=\"headerlink\" title=\"Apple Watch体验的权衡点\"></a>Apple Watch体验的权衡点</h2><p>苹果官方提供了<a href=\"https://developer.apple.com/videos/play/wwdc2017/808/\" target=\"_blank\" rel=\"noopener\">视频</a>讲解了一些技巧。</p>\n<p>评估您的应用的最佳方法是考虑实现以下4点</p>\n<p><img src=\"https://images.ctfassets.net/ooa29xqb8tix/6MDnChHFUkSoASwSWm6Woq/cd8c7dfdb89088677467edf5bd21a5a6/Qualities_20of_20Apple_20Watch_20Experiences.jpg\" alt=\"Apple官方参考\"></p>\n<h3 id=\"清晰\"><a href=\"#清晰\" class=\"headerlink\" title=\"清晰\"></a><strong>清晰</strong></h3><p>用户第一眼就能了解界面所显示的信息。</p>\n<h3 id=\"简洁\"><a href=\"#简洁\" class=\"headerlink\" title=\"简洁\"></a><strong>简洁</strong></h3><p>直截了当。请记住，您的用户收到应用程序通知并举起手腕之间的时间只有几秒钟。</p>\n<h3 id=\"及时\"><a href=\"#及时\" class=\"headerlink\" title=\"及时\"></a><strong>及时</strong></h3><p>在尽可能短的时间内向用户显示最相关的信息。这样，您正在使您的应用与用户更加相关。</p>\n<h3 id=\"客制化\"><a href=\"#客制化\" class=\"headerlink\" title=\"客制化\"></a><strong>客制化</strong></h3><p>如果您的应用程序完成了前三个要素，那么您的用户将感到个人联系。理想情况下，尝试加深与用户的这种关系。</p>\n"},{"title":"Hello World","_content":"欢迎访问我的博客，这是我的第一篇博文。\n我会不断更新我的个人博客，如果想要了解网站的更新可以订阅网站的RSS。\n欢迎关注我的 [GitHub](https://github.com/iamstephenfang).\n\n\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags: about\n---\n欢迎访问我的博客，这是我的第一篇博文。\n我会不断更新我的个人博客，如果想要了解网站的更新可以订阅网站的RSS。\n欢迎关注我的 [GitHub](https://github.com/iamstephenfang).\n\n\n\n","slug":"hello-world","published":1,"date":"2020-02-07T08:15:57.491Z","updated":"2020-02-27T07:55:02.630Z","_id":"ck6grolyv00000i6b4dywb26w","comments":1,"layout":"post","photos":[],"link":"","content":"<p>欢迎访问我的博客，这是我的第一篇博文。<br>我会不断更新我的个人博客，如果想要了解网站的更新可以订阅网站的RSS。<br>欢迎关注我的 <a href=\"https://github.com/iamstephenfang\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>欢迎访问我的博客，这是我的第一篇博文。<br>我会不断更新我的个人博客，如果想要了解网站的更新可以订阅网站的RSS。<br>欢迎关注我的 <a href=\"https://github.com/iamstephenfang\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n"},{"title":"Struts 2 基础应用实验","date":"2020-02-23T10:10:20.000Z","_content":"\n## 知识梳理\n\n1、Struts2 是从 WebWork 框架上发展起来的 MVC 框架； \n\n2、FilterDispatcher 是 Struts2 中的核心控制器，客户端对服务器端的请求将被 FilterDispatcher 过滤；若请求需要调用某个 Action，则框架将根据配置文件`struts.xml`，找到需要调用的 Action 类； \n\n3、Action 类是一个符合一定命名规范的 JavaSE 类，作为业务控制器使用； Action \n中的 execute()方法用于调用 Model 层的业务逻辑类，并根据返回结果决定页面导航； \n\n4、若 Action 类中需要使用表单提交的请求参数，那么必须在 Action 类中声明与 \n表单域的名字对应的变量，并为变量提供 getters/setters 方法； \n\n5、Action 类需要在 `struts.xml` 中进行配置才能使用； \n\n6、编译运行基于 Struts2 框架的 Web 工程，需要导入 struts2 的 8 个核心 jar 包： \n\n| 文件名 | 说明 |\n| --- | --- |\n| struts2-core-2.3.15.1.jar | Struts 2 框架的核心类库 |\n| xwork-core-2.3.15.1.jar | XWork 类库，Struts 2 的构建基础 |\n| Ognl-3.0.6.jar | Struts 2 使用的一种表达式语言类库 |\n| freemarker-2.3.19.jar | Struts 2 的标签模板使用类库 |\n| javassist-3.11.0.GA.jar | 代码生成工具包 |\n| commons-lang3-3.1.jar | Apache 语言包，是 java.lang 包的扩展 |\n| commons-io-2.0.1.jar | Apache IO 包 |\n| commons-fileupload-1.3.jar | Struts 2 文件上传依赖包 |\n\n7、使用 Struts2 标签的形式来表达页面逻辑，可以尽量避免在视图中使用 Java 代码，让逻辑与显示分离，提高视图的可维护性； \n\n8、Struts2 标签库的主要 tld 文件为 `struts-tags.tld`， 在 `struts2-core-2.3.15.1.jar` 包中， 另一个与 Ajax 相关的标签库 tld 文件为 `struts-dojo-tags.tld`，在 `struts2-dojo -plugin-2.3.15.1.jar` 包中； \n\n9、Struts2 标签的使用步骤和使用 JSTL 相同，只需在 JSP 页面中使用 taglib 指令 引入标签库中 tld 文件的 uri， 并指定前缀即可，例如： `<%@ taglib prefix=\"s\" uri=\"/struts-tags\"%>`； \n\n10、根据 Struts2 标签的主要作用，可以将其分为：用于生成页面元素的 UI 标签、 用于实现流程控制的控制类标签、用于控制数据的数据标签和用于支持Ajax的标签。\n\n11、通过将不同语言版本的字符保存在属性文件中，Struts2 的国际化机制能够在不需要修改程序主体的前提下，实现不同语言版本的应用； \n\n12、在 Web 应用中选择需要进行国际化的内容，不在页面中直接输出该信息，而是通过 Struts2 标签输出一个键值，该键值在不同语言环境下对应不同的字符串；如：`<s:textfield name=\"loginUser.account\" lable=\"请输入用户名\"/>`代码中的“请输入用户名”是需要国际化的内容,将其以键值代替为`<s:textfield name=\"loginUser.account\" key=\"login.account.lable\"/>` \n\n13、需要进行国际化的内容以键值对（key=value） 的形式写入 Struts2 的国际化资源文件中，如`login.account.lable=请输入用户名”；`该资源文件名可以自定义，但是后缀必须是 properties；资源文件应放在 Web 应用的类加载路径下； 每一个语言版本需要创建一个资源文件； \n\n14、通过 Struts2 的配置文件 `struts.properties` 来配置资源文件的基础名，若资源文 件的基础名为 message，则 `message_zh_CN.properties` 是对应的中文资源文件， `message_en_US.properties` 是对应的美国英语资源文件； \n\n15、浏览器将根据其默认的语言版本，自动调用相应语言的资源文件，从而在页面中展示不同的语言效果。\n\n## 实验总结\n1、实验中各个文件的作用：\n\n(1)jsp页面：负责展示视图\n\n(2)Action类：负责处理业务逻辑\n\n(3)Service类：用于实现登录逻辑\n\n(4)JavaBean：用于定义用户信息\n\n(5)Filter：起中央控制器作用的过滤器\n\n(6)struts.xml：核心配置文件\n\n2、Struts2 应用中从请求到响应的完整流程\n\n客户端首先向Action发送一个请求Request,Container通过`web.xml`映射请求，并获得Controller的名字；Container调用控制StrutsPrepareAndExecuteFilter；Controller通过ActionMapper获得Action的信息，调用ActionProxy；ActionProxy读取`struts.xml`文件获取action和interceptor stack的信息，把request请求传递给ActionInvocation；ActionInvocation依次调用action和interceptor；根据action的配置信息，产生result，Result信息返回给ActionInvocation，产生一个HttpServletResponse响应，产生的响应行为发送给客户端。\n\n3、MVC框架体现：\n\nModel：JavaBean、Action类\n\nView：JSP页面\n\nController：FilterDispatcher\n\n4、表单参数与 Action 属性的赋值关系\n\n表单元素的action属性值对应了action的name属性值，Action只是一个逻辑控制器，他不直接对请求者生成任何响应，而是通过result子元素将指定的返回值呈现给客户端，如返回字符串为success则跳转至loginSuccess.jsp页面.\n\n5、Action 的 execute() 方法的作用和特点\n\n作用：处理业务逻辑\n\n特点：无参数；不需要实现或者继承任何接口或者父类；execute方法一定要返回String类型的对象,每一个字符串都可以对应一个跳转的页面。\n\n6、struts.xml 里各元素及其属性的作用\n\n(1)package：管理Action、拦截器等核心组件。包含作为包名的name属性、用于继承的extends属性、用于设置命名空间的namespace属性、设置为抽象包的abstract属性。\n\n(2)action元素：定义与Action操作有关的一系列配置信息。包含作为Action名的name属性、具体处理请求类的class属性、指定调用Action中放发明的method属性、指定使用Action类型转换器converter属性。\n\n(3)result元素：将Action类返回的字符串转发给对应的是图，实现逻辑视图和物理视图资源的映射。包含制定配置逻辑视图名的name属性、指定结果类型的type属性。\n\n(4)constant元素：改变Struts2的一些默认行为。包含指定框架功能的name属性、与name配合使用的value属性。\n\n(5)interceptors元素：定义拦截器集合的元素\n\n(6)interceptor元素：用于配置拦截器。包含指定拦截器逻辑名称的name属性和指定具体处理拦截类的class属性。\n\n(7)interceptors-ref元素：在某个action中引用拦截器。\n\n(8)interceptors-stack元素：定义拦截器栈\n\n7、Struts2 中标签及其属性的作用和用法：\n\n(1)form标签：生成表单元素。包含提交Action名字的action属性、命名空间namespace属性、定义GET/POST的method属性等\n\n(2)textfield标签：用来输入一小段文字。包含定义可输入最大长度值的maxlength属性、定义字段尺寸size属性、用于标示元素的id属性等\n\n(3)password标签：默认不显示输入内容的textfield。包含确定是否显示内容的showPassword属性、字段最大长度maxlength属性、定义字段尺寸size属性等\n\n(4)if/elseif/else标签：通过逻辑值控制流程。包含决定标签内容是否显示的test属性、标示元素id的id属性。\n\n(5)iterator标签：用于遍历集合元素。包含产生IteratorStatus对象实例的status属性、标示元素id的id属性等\n\n8、配置文件 `struts.properties` 的作用\n\n定义了Struts 2框架的大量属性，开发者可以通过改变这些属性来满足应用的需求。其中`struts.configuration`属性指定加载Struts 2配置文件的配置文件管理器。struts.locale属性指定Web应用的默认`Locale。struts.i18n.encoding`指定Web应用的默认编码集。\n\n## 实验步骤\n### 基础实验\n\n1、登录 http://struts.apache.org/download.cgi 站点，下载 Struts2 的最新版（Full Distribution）； \n\n2、新建 Web 工程 struts-prj1； \n\n3、将 Struts2 中的 8 个核心包增加到 Web 应用中，即复制到“%workspace% \nstruts-prj1\\WebContent\\WEB-INF\\lib”路径下； \n\n4、在 struts-prj1 中新建 login.jsp 页面，作为用户登录的视图（代码片段如下）， 注意表单（form）中 action 属性的值，注意用户名与密码输入框中 name 属性的值； \n\n5、在 struts-prj1 中新建 loginSuccess.jsp 和 loginFail.jsp 页面，分别作为登录成功 或登录失败的视图，在页面中显示“登录成功”或“登录失败”；\n\n![](1.png)\n \n6、在 struts-prj1 中新建 cn.edu.zjut.bean 包，并在其中创建 UserBean.java，用于记录登录用户信息，注意该 JavaBean 中属性名的写法； \n\n![](2.png)\n \n7、在 struts-prj1 中新建 cn.edu.zjut.service 包，并在其中创建 UserService.java， 用于实现登录逻辑，为简化登录逻辑，将登录成功的条件设置为：用户名和密码相同\n\n![](3.png)\n \n8、在 struts-prj1 中新建 cn.edu.zjut.action 包，并在其中创建 UserAction.java，调 用登录逻辑，并根据登录结果不同而返回不同的内容，注意该 Action 中的属性名及相应的 getters 和 setters 方法、execute()方法及返回值；  \n\n![](4.png)\n\n9、在工程 struts-prj1 的 src 目录中创建 struts.xml 文件，用于配置 Action 并设置 页面导航，注意 action 标签中 name 属性和 class 属性的值， 以及 result 子标签的属性； \n\n![](5.png)\n \n10、编辑 Web 应用的 web.xml 文件，增加 Struts2 核心 Filter 的配置； \n\n![](6.png)\n \n11、将 struts-prj1 部署在 Tomcat 服务器上； \n\n12、通过浏览器访问 login.jsp 页面，并记录运行结果；\n\n![](7.png)\n\n### 提高实验\n\n1、为能使用与 Ajax 相关的标签，将 Struts2 中的 `struts2-dojo-plugin-2.3.15.1.jar` 包增加到工程 struts-prj1 中，即复制到`%workspace%struts-prj1\\WebContent\\ WEB-INF\\lib`路径下，刷新工程； \n\n![](8.png)\n\n2、在工程 struts-prj1 中增加用户注册功能，新建 register.jsp 页面作为用户注册的 视图，页面使用 Struts2 的 UI 标签来生成表单元素，包括用户名、密码、确认密码、真实姓名、性别、生日、联系地址、联系电话和电子邮箱 \n\n![](9.png)\n\n3、在 struts-prj1 中新建 `regFail.jsp` 页面，作为注册失败的视图，在页面中显示“注册失败”； \n\n4、在 struts-prj1 中新建 `regSuccess.jsp` 页面，作为注册成功的视图，使用 Struts2 的数据标签和控制标签来生成注册成功的信息，并将登录用户信息保存在会话范围内 \n\n5、修改 `UserBean.java`，增加属性用于记录注册用户信息 \n\n![](10.png)\n \n6、修改 `UserService.java`，增加用户注册逻辑，为简化注册逻辑，将注册成功的条件设置为：用户名、密码和确认密码相同，而且不为空字串； \n\n![](11.png)\n \n7、修改 `UserAction.java` 中的 execute()方法，参照基础实验部分写入代码，用于调用注册逻辑，并根据注册成功与否而返回不同的内容； \n\n![](12.png)\n \n8、修改 `struts.xml` 文件，对用户注册进行配置并设置页面导航； \n\n![](13.png)\n \n9、将 struts-prj1 重新布署在 Tomcat 服务器上，通过浏览器访问 `register.jsp` 页面， 并记录运行结果； \n\n![](14.png)\n\n### 拓展实验\n\n1、在工程 struts-prj1 的 src 目录下新建一个 `cn.edu.zjut.local` 包，把所有的资源文件放置其中，如：`message_zh_CN.properties`、`message_en_US.properties` 等； \n\n![](15.png)\n  \n2、将工程 struts-prj1 中用户登录模块的三个 JSP 页面进行国际化处理，选择需要进行国际化的内容，以键值对的形式写入资源文件中 \n\n3、使用 JDK 中的 native2ASCII 工具，将 `message_zh_CN.properties` 重新编码，将中文字符都转化为 unicode 码，从而避免乱码问题； \n\n4、在工程 struts-prj1 的 src 目录中创建 `struts.properties` 文件，通过它加载资源文件,或者在JSP页面中临时加载资源文件  \n\n![](16.png)\n\n5、修改 `login.jsp`、`loginSuccess.jsp` 和 `loginFail.jsp` 页面，通过 Struts2 标签实现国际化； \n\n6、将 struts-prj1 重新布署在 Tomcat 服务器上； \n\n7、设置浏览器的首语言选项（如下图所示），通过浏览器访问 `login.jsp` 页面， 观察并记录运行结果；\n\n![](17.png)\n \n8、尝试修改用户注册模块，实现国际化，并记录运行结果。 \n\n![](18.png)\n\n![](19.png)\n\n> 注册中文页面\n\n![](20.png)\n\n> 注册英文页面\n","source":"_posts/Struts_Experiment.md","raw":"---\ntitle: Struts 2 基础应用实验\ndate: 2020-02-23 18:10:20\ncategories: \n- tech\ntags: \n- struts\n- JavaEE\n- 总结\n- 实验\n---\n\n## 知识梳理\n\n1、Struts2 是从 WebWork 框架上发展起来的 MVC 框架； \n\n2、FilterDispatcher 是 Struts2 中的核心控制器，客户端对服务器端的请求将被 FilterDispatcher 过滤；若请求需要调用某个 Action，则框架将根据配置文件`struts.xml`，找到需要调用的 Action 类； \n\n3、Action 类是一个符合一定命名规范的 JavaSE 类，作为业务控制器使用； Action \n中的 execute()方法用于调用 Model 层的业务逻辑类，并根据返回结果决定页面导航； \n\n4、若 Action 类中需要使用表单提交的请求参数，那么必须在 Action 类中声明与 \n表单域的名字对应的变量，并为变量提供 getters/setters 方法； \n\n5、Action 类需要在 `struts.xml` 中进行配置才能使用； \n\n6、编译运行基于 Struts2 框架的 Web 工程，需要导入 struts2 的 8 个核心 jar 包： \n\n| 文件名 | 说明 |\n| --- | --- |\n| struts2-core-2.3.15.1.jar | Struts 2 框架的核心类库 |\n| xwork-core-2.3.15.1.jar | XWork 类库，Struts 2 的构建基础 |\n| Ognl-3.0.6.jar | Struts 2 使用的一种表达式语言类库 |\n| freemarker-2.3.19.jar | Struts 2 的标签模板使用类库 |\n| javassist-3.11.0.GA.jar | 代码生成工具包 |\n| commons-lang3-3.1.jar | Apache 语言包，是 java.lang 包的扩展 |\n| commons-io-2.0.1.jar | Apache IO 包 |\n| commons-fileupload-1.3.jar | Struts 2 文件上传依赖包 |\n\n7、使用 Struts2 标签的形式来表达页面逻辑，可以尽量避免在视图中使用 Java 代码，让逻辑与显示分离，提高视图的可维护性； \n\n8、Struts2 标签库的主要 tld 文件为 `struts-tags.tld`， 在 `struts2-core-2.3.15.1.jar` 包中， 另一个与 Ajax 相关的标签库 tld 文件为 `struts-dojo-tags.tld`，在 `struts2-dojo -plugin-2.3.15.1.jar` 包中； \n\n9、Struts2 标签的使用步骤和使用 JSTL 相同，只需在 JSP 页面中使用 taglib 指令 引入标签库中 tld 文件的 uri， 并指定前缀即可，例如： `<%@ taglib prefix=\"s\" uri=\"/struts-tags\"%>`； \n\n10、根据 Struts2 标签的主要作用，可以将其分为：用于生成页面元素的 UI 标签、 用于实现流程控制的控制类标签、用于控制数据的数据标签和用于支持Ajax的标签。\n\n11、通过将不同语言版本的字符保存在属性文件中，Struts2 的国际化机制能够在不需要修改程序主体的前提下，实现不同语言版本的应用； \n\n12、在 Web 应用中选择需要进行国际化的内容，不在页面中直接输出该信息，而是通过 Struts2 标签输出一个键值，该键值在不同语言环境下对应不同的字符串；如：`<s:textfield name=\"loginUser.account\" lable=\"请输入用户名\"/>`代码中的“请输入用户名”是需要国际化的内容,将其以键值代替为`<s:textfield name=\"loginUser.account\" key=\"login.account.lable\"/>` \n\n13、需要进行国际化的内容以键值对（key=value） 的形式写入 Struts2 的国际化资源文件中，如`login.account.lable=请输入用户名”；`该资源文件名可以自定义，但是后缀必须是 properties；资源文件应放在 Web 应用的类加载路径下； 每一个语言版本需要创建一个资源文件； \n\n14、通过 Struts2 的配置文件 `struts.properties` 来配置资源文件的基础名，若资源文 件的基础名为 message，则 `message_zh_CN.properties` 是对应的中文资源文件， `message_en_US.properties` 是对应的美国英语资源文件； \n\n15、浏览器将根据其默认的语言版本，自动调用相应语言的资源文件，从而在页面中展示不同的语言效果。\n\n## 实验总结\n1、实验中各个文件的作用：\n\n(1)jsp页面：负责展示视图\n\n(2)Action类：负责处理业务逻辑\n\n(3)Service类：用于实现登录逻辑\n\n(4)JavaBean：用于定义用户信息\n\n(5)Filter：起中央控制器作用的过滤器\n\n(6)struts.xml：核心配置文件\n\n2、Struts2 应用中从请求到响应的完整流程\n\n客户端首先向Action发送一个请求Request,Container通过`web.xml`映射请求，并获得Controller的名字；Container调用控制StrutsPrepareAndExecuteFilter；Controller通过ActionMapper获得Action的信息，调用ActionProxy；ActionProxy读取`struts.xml`文件获取action和interceptor stack的信息，把request请求传递给ActionInvocation；ActionInvocation依次调用action和interceptor；根据action的配置信息，产生result，Result信息返回给ActionInvocation，产生一个HttpServletResponse响应，产生的响应行为发送给客户端。\n\n3、MVC框架体现：\n\nModel：JavaBean、Action类\n\nView：JSP页面\n\nController：FilterDispatcher\n\n4、表单参数与 Action 属性的赋值关系\n\n表单元素的action属性值对应了action的name属性值，Action只是一个逻辑控制器，他不直接对请求者生成任何响应，而是通过result子元素将指定的返回值呈现给客户端，如返回字符串为success则跳转至loginSuccess.jsp页面.\n\n5、Action 的 execute() 方法的作用和特点\n\n作用：处理业务逻辑\n\n特点：无参数；不需要实现或者继承任何接口或者父类；execute方法一定要返回String类型的对象,每一个字符串都可以对应一个跳转的页面。\n\n6、struts.xml 里各元素及其属性的作用\n\n(1)package：管理Action、拦截器等核心组件。包含作为包名的name属性、用于继承的extends属性、用于设置命名空间的namespace属性、设置为抽象包的abstract属性。\n\n(2)action元素：定义与Action操作有关的一系列配置信息。包含作为Action名的name属性、具体处理请求类的class属性、指定调用Action中放发明的method属性、指定使用Action类型转换器converter属性。\n\n(3)result元素：将Action类返回的字符串转发给对应的是图，实现逻辑视图和物理视图资源的映射。包含制定配置逻辑视图名的name属性、指定结果类型的type属性。\n\n(4)constant元素：改变Struts2的一些默认行为。包含指定框架功能的name属性、与name配合使用的value属性。\n\n(5)interceptors元素：定义拦截器集合的元素\n\n(6)interceptor元素：用于配置拦截器。包含指定拦截器逻辑名称的name属性和指定具体处理拦截类的class属性。\n\n(7)interceptors-ref元素：在某个action中引用拦截器。\n\n(8)interceptors-stack元素：定义拦截器栈\n\n7、Struts2 中标签及其属性的作用和用法：\n\n(1)form标签：生成表单元素。包含提交Action名字的action属性、命名空间namespace属性、定义GET/POST的method属性等\n\n(2)textfield标签：用来输入一小段文字。包含定义可输入最大长度值的maxlength属性、定义字段尺寸size属性、用于标示元素的id属性等\n\n(3)password标签：默认不显示输入内容的textfield。包含确定是否显示内容的showPassword属性、字段最大长度maxlength属性、定义字段尺寸size属性等\n\n(4)if/elseif/else标签：通过逻辑值控制流程。包含决定标签内容是否显示的test属性、标示元素id的id属性。\n\n(5)iterator标签：用于遍历集合元素。包含产生IteratorStatus对象实例的status属性、标示元素id的id属性等\n\n8、配置文件 `struts.properties` 的作用\n\n定义了Struts 2框架的大量属性，开发者可以通过改变这些属性来满足应用的需求。其中`struts.configuration`属性指定加载Struts 2配置文件的配置文件管理器。struts.locale属性指定Web应用的默认`Locale。struts.i18n.encoding`指定Web应用的默认编码集。\n\n## 实验步骤\n### 基础实验\n\n1、登录 http://struts.apache.org/download.cgi 站点，下载 Struts2 的最新版（Full Distribution）； \n\n2、新建 Web 工程 struts-prj1； \n\n3、将 Struts2 中的 8 个核心包增加到 Web 应用中，即复制到“%workspace% \nstruts-prj1\\WebContent\\WEB-INF\\lib”路径下； \n\n4、在 struts-prj1 中新建 login.jsp 页面，作为用户登录的视图（代码片段如下）， 注意表单（form）中 action 属性的值，注意用户名与密码输入框中 name 属性的值； \n\n5、在 struts-prj1 中新建 loginSuccess.jsp 和 loginFail.jsp 页面，分别作为登录成功 或登录失败的视图，在页面中显示“登录成功”或“登录失败”；\n\n![](1.png)\n \n6、在 struts-prj1 中新建 cn.edu.zjut.bean 包，并在其中创建 UserBean.java，用于记录登录用户信息，注意该 JavaBean 中属性名的写法； \n\n![](2.png)\n \n7、在 struts-prj1 中新建 cn.edu.zjut.service 包，并在其中创建 UserService.java， 用于实现登录逻辑，为简化登录逻辑，将登录成功的条件设置为：用户名和密码相同\n\n![](3.png)\n \n8、在 struts-prj1 中新建 cn.edu.zjut.action 包，并在其中创建 UserAction.java，调 用登录逻辑，并根据登录结果不同而返回不同的内容，注意该 Action 中的属性名及相应的 getters 和 setters 方法、execute()方法及返回值；  \n\n![](4.png)\n\n9、在工程 struts-prj1 的 src 目录中创建 struts.xml 文件，用于配置 Action 并设置 页面导航，注意 action 标签中 name 属性和 class 属性的值， 以及 result 子标签的属性； \n\n![](5.png)\n \n10、编辑 Web 应用的 web.xml 文件，增加 Struts2 核心 Filter 的配置； \n\n![](6.png)\n \n11、将 struts-prj1 部署在 Tomcat 服务器上； \n\n12、通过浏览器访问 login.jsp 页面，并记录运行结果；\n\n![](7.png)\n\n### 提高实验\n\n1、为能使用与 Ajax 相关的标签，将 Struts2 中的 `struts2-dojo-plugin-2.3.15.1.jar` 包增加到工程 struts-prj1 中，即复制到`%workspace%struts-prj1\\WebContent\\ WEB-INF\\lib`路径下，刷新工程； \n\n![](8.png)\n\n2、在工程 struts-prj1 中增加用户注册功能，新建 register.jsp 页面作为用户注册的 视图，页面使用 Struts2 的 UI 标签来生成表单元素，包括用户名、密码、确认密码、真实姓名、性别、生日、联系地址、联系电话和电子邮箱 \n\n![](9.png)\n\n3、在 struts-prj1 中新建 `regFail.jsp` 页面，作为注册失败的视图，在页面中显示“注册失败”； \n\n4、在 struts-prj1 中新建 `regSuccess.jsp` 页面，作为注册成功的视图，使用 Struts2 的数据标签和控制标签来生成注册成功的信息，并将登录用户信息保存在会话范围内 \n\n5、修改 `UserBean.java`，增加属性用于记录注册用户信息 \n\n![](10.png)\n \n6、修改 `UserService.java`，增加用户注册逻辑，为简化注册逻辑，将注册成功的条件设置为：用户名、密码和确认密码相同，而且不为空字串； \n\n![](11.png)\n \n7、修改 `UserAction.java` 中的 execute()方法，参照基础实验部分写入代码，用于调用注册逻辑，并根据注册成功与否而返回不同的内容； \n\n![](12.png)\n \n8、修改 `struts.xml` 文件，对用户注册进行配置并设置页面导航； \n\n![](13.png)\n \n9、将 struts-prj1 重新布署在 Tomcat 服务器上，通过浏览器访问 `register.jsp` 页面， 并记录运行结果； \n\n![](14.png)\n\n### 拓展实验\n\n1、在工程 struts-prj1 的 src 目录下新建一个 `cn.edu.zjut.local` 包，把所有的资源文件放置其中，如：`message_zh_CN.properties`、`message_en_US.properties` 等； \n\n![](15.png)\n  \n2、将工程 struts-prj1 中用户登录模块的三个 JSP 页面进行国际化处理，选择需要进行国际化的内容，以键值对的形式写入资源文件中 \n\n3、使用 JDK 中的 native2ASCII 工具，将 `message_zh_CN.properties` 重新编码，将中文字符都转化为 unicode 码，从而避免乱码问题； \n\n4、在工程 struts-prj1 的 src 目录中创建 `struts.properties` 文件，通过它加载资源文件,或者在JSP页面中临时加载资源文件  \n\n![](16.png)\n\n5、修改 `login.jsp`、`loginSuccess.jsp` 和 `loginFail.jsp` 页面，通过 Struts2 标签实现国际化； \n\n6、将 struts-prj1 重新布署在 Tomcat 服务器上； \n\n7、设置浏览器的首语言选项（如下图所示），通过浏览器访问 `login.jsp` 页面， 观察并记录运行结果；\n\n![](17.png)\n \n8、尝试修改用户注册模块，实现国际化，并记录运行结果。 \n\n![](18.png)\n\n![](19.png)\n\n> 注册中文页面\n\n![](20.png)\n\n> 注册英文页面\n","slug":"Struts_Experiment","published":1,"updated":"2020-02-27T11:40:51.795Z","_id":"ck7359lit00037c6b68jqbo4u","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"知识梳理\"><a href=\"#知识梳理\" class=\"headerlink\" title=\"知识梳理\"></a>知识梳理</h2><p>1、Struts2 是从 WebWork 框架上发展起来的 MVC 框架； </p>\n<p>2、FilterDispatcher 是 Struts2 中的核心控制器，客户端对服务器端的请求将被 FilterDispatcher 过滤；若请求需要调用某个 Action，则框架将根据配置文件<code>struts.xml</code>，找到需要调用的 Action 类； </p>\n<p>3、Action 类是一个符合一定命名规范的 JavaSE 类，作为业务控制器使用； Action<br>中的 execute()方法用于调用 Model 层的业务逻辑类，并根据返回结果决定页面导航； </p>\n<p>4、若 Action 类中需要使用表单提交的请求参数，那么必须在 Action 类中声明与<br>表单域的名字对应的变量，并为变量提供 getters/setters 方法； </p>\n<p>5、Action 类需要在 <code>struts.xml</code> 中进行配置才能使用； </p>\n<p>6、编译运行基于 Struts2 框架的 Web 工程，需要导入 struts2 的 8 个核心 jar 包： </p>\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>struts2-core-2.3.15.1.jar</td>\n<td>Struts 2 框架的核心类库</td>\n</tr>\n<tr>\n<td>xwork-core-2.3.15.1.jar</td>\n<td>XWork 类库，Struts 2 的构建基础</td>\n</tr>\n<tr>\n<td>Ognl-3.0.6.jar</td>\n<td>Struts 2 使用的一种表达式语言类库</td>\n</tr>\n<tr>\n<td>freemarker-2.3.19.jar</td>\n<td>Struts 2 的标签模板使用类库</td>\n</tr>\n<tr>\n<td>javassist-3.11.0.GA.jar</td>\n<td>代码生成工具包</td>\n</tr>\n<tr>\n<td>commons-lang3-3.1.jar</td>\n<td>Apache 语言包，是 java.lang 包的扩展</td>\n</tr>\n<tr>\n<td>commons-io-2.0.1.jar</td>\n<td>Apache IO 包</td>\n</tr>\n<tr>\n<td>commons-fileupload-1.3.jar</td>\n<td>Struts 2 文件上传依赖包</td>\n</tr>\n</tbody></table>\n<p>7、使用 Struts2 标签的形式来表达页面逻辑，可以尽量避免在视图中使用 Java 代码，让逻辑与显示分离，提高视图的可维护性； </p>\n<p>8、Struts2 标签库的主要 tld 文件为 <code>struts-tags.tld</code>， 在 <code>struts2-core-2.3.15.1.jar</code> 包中， 另一个与 Ajax 相关的标签库 tld 文件为 <code>struts-dojo-tags.tld</code>，在 <code>struts2-dojo -plugin-2.3.15.1.jar</code> 包中； </p>\n<p>9、Struts2 标签的使用步骤和使用 JSTL 相同，只需在 JSP 页面中使用 taglib 指令 引入标签库中 tld 文件的 uri， 并指定前缀即可，例如： <code>&lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot;%&gt;</code>； </p>\n<p>10、根据 Struts2 标签的主要作用，可以将其分为：用于生成页面元素的 UI 标签、 用于实现流程控制的控制类标签、用于控制数据的数据标签和用于支持Ajax的标签。</p>\n<p>11、通过将不同语言版本的字符保存在属性文件中，Struts2 的国际化机制能够在不需要修改程序主体的前提下，实现不同语言版本的应用； </p>\n<p>12、在 Web 应用中选择需要进行国际化的内容，不在页面中直接输出该信息，而是通过 Struts2 标签输出一个键值，该键值在不同语言环境下对应不同的字符串；如：<code>&lt;s:textfield name=&quot;loginUser.account&quot; lable=&quot;请输入用户名&quot;/&gt;</code>代码中的“请输入用户名”是需要国际化的内容,将其以键值代替为<code>&lt;s:textfield name=&quot;loginUser.account&quot; key=&quot;login.account.lable&quot;/&gt;</code> </p>\n<p>13、需要进行国际化的内容以键值对（key=value） 的形式写入 Struts2 的国际化资源文件中，如<code>login.account.lable=请输入用户名”；</code>该资源文件名可以自定义，但是后缀必须是 properties；资源文件应放在 Web 应用的类加载路径下； 每一个语言版本需要创建一个资源文件； </p>\n<p>14、通过 Struts2 的配置文件 <code>struts.properties</code> 来配置资源文件的基础名，若资源文 件的基础名为 message，则 <code>message_zh_CN.properties</code> 是对应的中文资源文件， <code>message_en_US.properties</code> 是对应的美国英语资源文件； </p>\n<p>15、浏览器将根据其默认的语言版本，自动调用相应语言的资源文件，从而在页面中展示不同的语言效果。</p>\n<h2 id=\"实验总结\"><a href=\"#实验总结\" class=\"headerlink\" title=\"实验总结\"></a>实验总结</h2><p>1、实验中各个文件的作用：</p>\n<p>(1)jsp页面：负责展示视图</p>\n<p>(2)Action类：负责处理业务逻辑</p>\n<p>(3)Service类：用于实现登录逻辑</p>\n<p>(4)JavaBean：用于定义用户信息</p>\n<p>(5)Filter：起中央控制器作用的过滤器</p>\n<p>(6)struts.xml：核心配置文件</p>\n<p>2、Struts2 应用中从请求到响应的完整流程</p>\n<p>客户端首先向Action发送一个请求Request,Container通过<code>web.xml</code>映射请求，并获得Controller的名字；Container调用控制StrutsPrepareAndExecuteFilter；Controller通过ActionMapper获得Action的信息，调用ActionProxy；ActionProxy读取<code>struts.xml</code>文件获取action和interceptor stack的信息，把request请求传递给ActionInvocation；ActionInvocation依次调用action和interceptor；根据action的配置信息，产生result，Result信息返回给ActionInvocation，产生一个HttpServletResponse响应，产生的响应行为发送给客户端。</p>\n<p>3、MVC框架体现：</p>\n<p>Model：JavaBean、Action类</p>\n<p>View：JSP页面</p>\n<p>Controller：FilterDispatcher</p>\n<p>4、表单参数与 Action 属性的赋值关系</p>\n<p>表单元素的action属性值对应了action的name属性值，Action只是一个逻辑控制器，他不直接对请求者生成任何响应，而是通过result子元素将指定的返回值呈现给客户端，如返回字符串为success则跳转至loginSuccess.jsp页面.</p>\n<p>5、Action 的 execute() 方法的作用和特点</p>\n<p>作用：处理业务逻辑</p>\n<p>特点：无参数；不需要实现或者继承任何接口或者父类；execute方法一定要返回String类型的对象,每一个字符串都可以对应一个跳转的页面。</p>\n<p>6、struts.xml 里各元素及其属性的作用</p>\n<p>(1)package：管理Action、拦截器等核心组件。包含作为包名的name属性、用于继承的extends属性、用于设置命名空间的namespace属性、设置为抽象包的abstract属性。</p>\n<p>(2)action元素：定义与Action操作有关的一系列配置信息。包含作为Action名的name属性、具体处理请求类的class属性、指定调用Action中放发明的method属性、指定使用Action类型转换器converter属性。</p>\n<p>(3)result元素：将Action类返回的字符串转发给对应的是图，实现逻辑视图和物理视图资源的映射。包含制定配置逻辑视图名的name属性、指定结果类型的type属性。</p>\n<p>(4)constant元素：改变Struts2的一些默认行为。包含指定框架功能的name属性、与name配合使用的value属性。</p>\n<p>(5)interceptors元素：定义拦截器集合的元素</p>\n<p>(6)interceptor元素：用于配置拦截器。包含指定拦截器逻辑名称的name属性和指定具体处理拦截类的class属性。</p>\n<p>(7)interceptors-ref元素：在某个action中引用拦截器。</p>\n<p>(8)interceptors-stack元素：定义拦截器栈</p>\n<p>7、Struts2 中标签及其属性的作用和用法：</p>\n<p>(1)form标签：生成表单元素。包含提交Action名字的action属性、命名空间namespace属性、定义GET/POST的method属性等</p>\n<p>(2)textfield标签：用来输入一小段文字。包含定义可输入最大长度值的maxlength属性、定义字段尺寸size属性、用于标示元素的id属性等</p>\n<p>(3)password标签：默认不显示输入内容的textfield。包含确定是否显示内容的showPassword属性、字段最大长度maxlength属性、定义字段尺寸size属性等</p>\n<p>(4)if/elseif/else标签：通过逻辑值控制流程。包含决定标签内容是否显示的test属性、标示元素id的id属性。</p>\n<p>(5)iterator标签：用于遍历集合元素。包含产生IteratorStatus对象实例的status属性、标示元素id的id属性等</p>\n<p>8、配置文件 <code>struts.properties</code> 的作用</p>\n<p>定义了Struts 2框架的大量属性，开发者可以通过改变这些属性来满足应用的需求。其中<code>struts.configuration</code>属性指定加载Struts 2配置文件的配置文件管理器。struts.locale属性指定Web应用的默认<code>Locale。struts.i18n.encoding</code>指定Web应用的默认编码集。</p>\n<h2 id=\"实验步骤\"><a href=\"#实验步骤\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h2><h3 id=\"基础实验\"><a href=\"#基础实验\" class=\"headerlink\" title=\"基础实验\"></a>基础实验</h3><p>1、登录 <a href=\"http://struts.apache.org/download.cgi\" target=\"_blank\" rel=\"noopener\">http://struts.apache.org/download.cgi</a> 站点，下载 Struts2 的最新版（Full Distribution）； </p>\n<p>2、新建 Web 工程 struts-prj1； </p>\n<p>3、将 Struts2 中的 8 个核心包增加到 Web 应用中，即复制到“%workspace%<br>struts-prj1\\WebContent\\WEB-INF\\lib”路径下； </p>\n<p>4、在 struts-prj1 中新建 login.jsp 页面，作为用户登录的视图（代码片段如下）， 注意表单（form）中 action 属性的值，注意用户名与密码输入框中 name 属性的值； </p>\n<p>5、在 struts-prj1 中新建 loginSuccess.jsp 和 loginFail.jsp 页面，分别作为登录成功 或登录失败的视图，在页面中显示“登录成功”或“登录失败”；</p>\n<p><img src=\"1.png\" alt=\"\"></p>\n<p>6、在 struts-prj1 中新建 cn.edu.zjut.bean 包，并在其中创建 UserBean.java，用于记录登录用户信息，注意该 JavaBean 中属性名的写法； </p>\n<p><img src=\"2.png\" alt=\"\"></p>\n<p>7、在 struts-prj1 中新建 cn.edu.zjut.service 包，并在其中创建 UserService.java， 用于实现登录逻辑，为简化登录逻辑，将登录成功的条件设置为：用户名和密码相同</p>\n<p><img src=\"3.png\" alt=\"\"></p>\n<p>8、在 struts-prj1 中新建 cn.edu.zjut.action 包，并在其中创建 UserAction.java，调 用登录逻辑，并根据登录结果不同而返回不同的内容，注意该 Action 中的属性名及相应的 getters 和 setters 方法、execute()方法及返回值；  </p>\n<p><img src=\"4.png\" alt=\"\"></p>\n<p>9、在工程 struts-prj1 的 src 目录中创建 struts.xml 文件，用于配置 Action 并设置 页面导航，注意 action 标签中 name 属性和 class 属性的值， 以及 result 子标签的属性； </p>\n<p><img src=\"5.png\" alt=\"\"></p>\n<p>10、编辑 Web 应用的 web.xml 文件，增加 Struts2 核心 Filter 的配置； </p>\n<p><img src=\"6.png\" alt=\"\"></p>\n<p>11、将 struts-prj1 部署在 Tomcat 服务器上； </p>\n<p>12、通过浏览器访问 login.jsp 页面，并记录运行结果；</p>\n<p><img src=\"7.png\" alt=\"\"></p>\n<h3 id=\"提高实验\"><a href=\"#提高实验\" class=\"headerlink\" title=\"提高实验\"></a>提高实验</h3><p>1、为能使用与 Ajax 相关的标签，将 Struts2 中的 <code>struts2-dojo-plugin-2.3.15.1.jar</code> 包增加到工程 struts-prj1 中，即复制到<code>%workspace%struts-prj1\\WebContent\\ WEB-INF\\lib</code>路径下，刷新工程； </p>\n<p><img src=\"8.png\" alt=\"\"></p>\n<p>2、在工程 struts-prj1 中增加用户注册功能，新建 register.jsp 页面作为用户注册的 视图，页面使用 Struts2 的 UI 标签来生成表单元素，包括用户名、密码、确认密码、真实姓名、性别、生日、联系地址、联系电话和电子邮箱 </p>\n<p><img src=\"9.png\" alt=\"\"></p>\n<p>3、在 struts-prj1 中新建 <code>regFail.jsp</code> 页面，作为注册失败的视图，在页面中显示“注册失败”； </p>\n<p>4、在 struts-prj1 中新建 <code>regSuccess.jsp</code> 页面，作为注册成功的视图，使用 Struts2 的数据标签和控制标签来生成注册成功的信息，并将登录用户信息保存在会话范围内 </p>\n<p>5、修改 <code>UserBean.java</code>，增加属性用于记录注册用户信息 </p>\n<p><img src=\"10.png\" alt=\"\"></p>\n<p>6、修改 <code>UserService.java</code>，增加用户注册逻辑，为简化注册逻辑，将注册成功的条件设置为：用户名、密码和确认密码相同，而且不为空字串； </p>\n<p><img src=\"11.png\" alt=\"\"></p>\n<p>7、修改 <code>UserAction.java</code> 中的 execute()方法，参照基础实验部分写入代码，用于调用注册逻辑，并根据注册成功与否而返回不同的内容； </p>\n<p><img src=\"12.png\" alt=\"\"></p>\n<p>8、修改 <code>struts.xml</code> 文件，对用户注册进行配置并设置页面导航； </p>\n<p><img src=\"13.png\" alt=\"\"></p>\n<p>9、将 struts-prj1 重新布署在 Tomcat 服务器上，通过浏览器访问 <code>register.jsp</code> 页面， 并记录运行结果； </p>\n<p><img src=\"14.png\" alt=\"\"></p>\n<h3 id=\"拓展实验\"><a href=\"#拓展实验\" class=\"headerlink\" title=\"拓展实验\"></a>拓展实验</h3><p>1、在工程 struts-prj1 的 src 目录下新建一个 <code>cn.edu.zjut.local</code> 包，把所有的资源文件放置其中，如：<code>message_zh_CN.properties</code>、<code>message_en_US.properties</code> 等； </p>\n<p><img src=\"15.png\" alt=\"\"></p>\n<p>2、将工程 struts-prj1 中用户登录模块的三个 JSP 页面进行国际化处理，选择需要进行国际化的内容，以键值对的形式写入资源文件中 </p>\n<p>3、使用 JDK 中的 native2ASCII 工具，将 <code>message_zh_CN.properties</code> 重新编码，将中文字符都转化为 unicode 码，从而避免乱码问题； </p>\n<p>4、在工程 struts-prj1 的 src 目录中创建 <code>struts.properties</code> 文件，通过它加载资源文件,或者在JSP页面中临时加载资源文件  </p>\n<p><img src=\"16.png\" alt=\"\"></p>\n<p>5、修改 <code>login.jsp</code>、<code>loginSuccess.jsp</code> 和 <code>loginFail.jsp</code> 页面，通过 Struts2 标签实现国际化； </p>\n<p>6、将 struts-prj1 重新布署在 Tomcat 服务器上； </p>\n<p>7、设置浏览器的首语言选项（如下图所示），通过浏览器访问 <code>login.jsp</code> 页面， 观察并记录运行结果；</p>\n<p><img src=\"17.png\" alt=\"\"></p>\n<p>8、尝试修改用户注册模块，实现国际化，并记录运行结果。 </p>\n<p><img src=\"18.png\" alt=\"\"></p>\n<p><img src=\"19.png\" alt=\"\"></p>\n<blockquote>\n<p>注册中文页面</p>\n</blockquote>\n<p><img src=\"20.png\" alt=\"\"></p>\n<blockquote>\n<p>注册英文页面</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"知识梳理\"><a href=\"#知识梳理\" class=\"headerlink\" title=\"知识梳理\"></a>知识梳理</h2><p>1、Struts2 是从 WebWork 框架上发展起来的 MVC 框架； </p>\n<p>2、FilterDispatcher 是 Struts2 中的核心控制器，客户端对服务器端的请求将被 FilterDispatcher 过滤；若请求需要调用某个 Action，则框架将根据配置文件<code>struts.xml</code>，找到需要调用的 Action 类； </p>\n<p>3、Action 类是一个符合一定命名规范的 JavaSE 类，作为业务控制器使用； Action<br>中的 execute()方法用于调用 Model 层的业务逻辑类，并根据返回结果决定页面导航； </p>\n<p>4、若 Action 类中需要使用表单提交的请求参数，那么必须在 Action 类中声明与<br>表单域的名字对应的变量，并为变量提供 getters/setters 方法； </p>\n<p>5、Action 类需要在 <code>struts.xml</code> 中进行配置才能使用； </p>\n<p>6、编译运行基于 Struts2 框架的 Web 工程，需要导入 struts2 的 8 个核心 jar 包： </p>\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>struts2-core-2.3.15.1.jar</td>\n<td>Struts 2 框架的核心类库</td>\n</tr>\n<tr>\n<td>xwork-core-2.3.15.1.jar</td>\n<td>XWork 类库，Struts 2 的构建基础</td>\n</tr>\n<tr>\n<td>Ognl-3.0.6.jar</td>\n<td>Struts 2 使用的一种表达式语言类库</td>\n</tr>\n<tr>\n<td>freemarker-2.3.19.jar</td>\n<td>Struts 2 的标签模板使用类库</td>\n</tr>\n<tr>\n<td>javassist-3.11.0.GA.jar</td>\n<td>代码生成工具包</td>\n</tr>\n<tr>\n<td>commons-lang3-3.1.jar</td>\n<td>Apache 语言包，是 java.lang 包的扩展</td>\n</tr>\n<tr>\n<td>commons-io-2.0.1.jar</td>\n<td>Apache IO 包</td>\n</tr>\n<tr>\n<td>commons-fileupload-1.3.jar</td>\n<td>Struts 2 文件上传依赖包</td>\n</tr>\n</tbody></table>\n<p>7、使用 Struts2 标签的形式来表达页面逻辑，可以尽量避免在视图中使用 Java 代码，让逻辑与显示分离，提高视图的可维护性； </p>\n<p>8、Struts2 标签库的主要 tld 文件为 <code>struts-tags.tld</code>， 在 <code>struts2-core-2.3.15.1.jar</code> 包中， 另一个与 Ajax 相关的标签库 tld 文件为 <code>struts-dojo-tags.tld</code>，在 <code>struts2-dojo -plugin-2.3.15.1.jar</code> 包中； </p>\n<p>9、Struts2 标签的使用步骤和使用 JSTL 相同，只需在 JSP 页面中使用 taglib 指令 引入标签库中 tld 文件的 uri， 并指定前缀即可，例如： <code>&lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot;%&gt;</code>； </p>\n<p>10、根据 Struts2 标签的主要作用，可以将其分为：用于生成页面元素的 UI 标签、 用于实现流程控制的控制类标签、用于控制数据的数据标签和用于支持Ajax的标签。</p>\n<p>11、通过将不同语言版本的字符保存在属性文件中，Struts2 的国际化机制能够在不需要修改程序主体的前提下，实现不同语言版本的应用； </p>\n<p>12、在 Web 应用中选择需要进行国际化的内容，不在页面中直接输出该信息，而是通过 Struts2 标签输出一个键值，该键值在不同语言环境下对应不同的字符串；如：<code>&lt;s:textfield name=&quot;loginUser.account&quot; lable=&quot;请输入用户名&quot;/&gt;</code>代码中的“请输入用户名”是需要国际化的内容,将其以键值代替为<code>&lt;s:textfield name=&quot;loginUser.account&quot; key=&quot;login.account.lable&quot;/&gt;</code> </p>\n<p>13、需要进行国际化的内容以键值对（key=value） 的形式写入 Struts2 的国际化资源文件中，如<code>login.account.lable=请输入用户名”；</code>该资源文件名可以自定义，但是后缀必须是 properties；资源文件应放在 Web 应用的类加载路径下； 每一个语言版本需要创建一个资源文件； </p>\n<p>14、通过 Struts2 的配置文件 <code>struts.properties</code> 来配置资源文件的基础名，若资源文 件的基础名为 message，则 <code>message_zh_CN.properties</code> 是对应的中文资源文件， <code>message_en_US.properties</code> 是对应的美国英语资源文件； </p>\n<p>15、浏览器将根据其默认的语言版本，自动调用相应语言的资源文件，从而在页面中展示不同的语言效果。</p>\n<h2 id=\"实验总结\"><a href=\"#实验总结\" class=\"headerlink\" title=\"实验总结\"></a>实验总结</h2><p>1、实验中各个文件的作用：</p>\n<p>(1)jsp页面：负责展示视图</p>\n<p>(2)Action类：负责处理业务逻辑</p>\n<p>(3)Service类：用于实现登录逻辑</p>\n<p>(4)JavaBean：用于定义用户信息</p>\n<p>(5)Filter：起中央控制器作用的过滤器</p>\n<p>(6)struts.xml：核心配置文件</p>\n<p>2、Struts2 应用中从请求到响应的完整流程</p>\n<p>客户端首先向Action发送一个请求Request,Container通过<code>web.xml</code>映射请求，并获得Controller的名字；Container调用控制StrutsPrepareAndExecuteFilter；Controller通过ActionMapper获得Action的信息，调用ActionProxy；ActionProxy读取<code>struts.xml</code>文件获取action和interceptor stack的信息，把request请求传递给ActionInvocation；ActionInvocation依次调用action和interceptor；根据action的配置信息，产生result，Result信息返回给ActionInvocation，产生一个HttpServletResponse响应，产生的响应行为发送给客户端。</p>\n<p>3、MVC框架体现：</p>\n<p>Model：JavaBean、Action类</p>\n<p>View：JSP页面</p>\n<p>Controller：FilterDispatcher</p>\n<p>4、表单参数与 Action 属性的赋值关系</p>\n<p>表单元素的action属性值对应了action的name属性值，Action只是一个逻辑控制器，他不直接对请求者生成任何响应，而是通过result子元素将指定的返回值呈现给客户端，如返回字符串为success则跳转至loginSuccess.jsp页面.</p>\n<p>5、Action 的 execute() 方法的作用和特点</p>\n<p>作用：处理业务逻辑</p>\n<p>特点：无参数；不需要实现或者继承任何接口或者父类；execute方法一定要返回String类型的对象,每一个字符串都可以对应一个跳转的页面。</p>\n<p>6、struts.xml 里各元素及其属性的作用</p>\n<p>(1)package：管理Action、拦截器等核心组件。包含作为包名的name属性、用于继承的extends属性、用于设置命名空间的namespace属性、设置为抽象包的abstract属性。</p>\n<p>(2)action元素：定义与Action操作有关的一系列配置信息。包含作为Action名的name属性、具体处理请求类的class属性、指定调用Action中放发明的method属性、指定使用Action类型转换器converter属性。</p>\n<p>(3)result元素：将Action类返回的字符串转发给对应的是图，实现逻辑视图和物理视图资源的映射。包含制定配置逻辑视图名的name属性、指定结果类型的type属性。</p>\n<p>(4)constant元素：改变Struts2的一些默认行为。包含指定框架功能的name属性、与name配合使用的value属性。</p>\n<p>(5)interceptors元素：定义拦截器集合的元素</p>\n<p>(6)interceptor元素：用于配置拦截器。包含指定拦截器逻辑名称的name属性和指定具体处理拦截类的class属性。</p>\n<p>(7)interceptors-ref元素：在某个action中引用拦截器。</p>\n<p>(8)interceptors-stack元素：定义拦截器栈</p>\n<p>7、Struts2 中标签及其属性的作用和用法：</p>\n<p>(1)form标签：生成表单元素。包含提交Action名字的action属性、命名空间namespace属性、定义GET/POST的method属性等</p>\n<p>(2)textfield标签：用来输入一小段文字。包含定义可输入最大长度值的maxlength属性、定义字段尺寸size属性、用于标示元素的id属性等</p>\n<p>(3)password标签：默认不显示输入内容的textfield。包含确定是否显示内容的showPassword属性、字段最大长度maxlength属性、定义字段尺寸size属性等</p>\n<p>(4)if/elseif/else标签：通过逻辑值控制流程。包含决定标签内容是否显示的test属性、标示元素id的id属性。</p>\n<p>(5)iterator标签：用于遍历集合元素。包含产生IteratorStatus对象实例的status属性、标示元素id的id属性等</p>\n<p>8、配置文件 <code>struts.properties</code> 的作用</p>\n<p>定义了Struts 2框架的大量属性，开发者可以通过改变这些属性来满足应用的需求。其中<code>struts.configuration</code>属性指定加载Struts 2配置文件的配置文件管理器。struts.locale属性指定Web应用的默认<code>Locale。struts.i18n.encoding</code>指定Web应用的默认编码集。</p>\n<h2 id=\"实验步骤\"><a href=\"#实验步骤\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h2><h3 id=\"基础实验\"><a href=\"#基础实验\" class=\"headerlink\" title=\"基础实验\"></a>基础实验</h3><p>1、登录 <a href=\"http://struts.apache.org/download.cgi\" target=\"_blank\" rel=\"noopener\">http://struts.apache.org/download.cgi</a> 站点，下载 Struts2 的最新版（Full Distribution）； </p>\n<p>2、新建 Web 工程 struts-prj1； </p>\n<p>3、将 Struts2 中的 8 个核心包增加到 Web 应用中，即复制到“%workspace%<br>struts-prj1\\WebContent\\WEB-INF\\lib”路径下； </p>\n<p>4、在 struts-prj1 中新建 login.jsp 页面，作为用户登录的视图（代码片段如下）， 注意表单（form）中 action 属性的值，注意用户名与密码输入框中 name 属性的值； </p>\n<p>5、在 struts-prj1 中新建 loginSuccess.jsp 和 loginFail.jsp 页面，分别作为登录成功 或登录失败的视图，在页面中显示“登录成功”或“登录失败”；</p>\n<p><img src=\"1.png\" alt=\"\"></p>\n<p>6、在 struts-prj1 中新建 cn.edu.zjut.bean 包，并在其中创建 UserBean.java，用于记录登录用户信息，注意该 JavaBean 中属性名的写法； </p>\n<p><img src=\"2.png\" alt=\"\"></p>\n<p>7、在 struts-prj1 中新建 cn.edu.zjut.service 包，并在其中创建 UserService.java， 用于实现登录逻辑，为简化登录逻辑，将登录成功的条件设置为：用户名和密码相同</p>\n<p><img src=\"3.png\" alt=\"\"></p>\n<p>8、在 struts-prj1 中新建 cn.edu.zjut.action 包，并在其中创建 UserAction.java，调 用登录逻辑，并根据登录结果不同而返回不同的内容，注意该 Action 中的属性名及相应的 getters 和 setters 方法、execute()方法及返回值；  </p>\n<p><img src=\"4.png\" alt=\"\"></p>\n<p>9、在工程 struts-prj1 的 src 目录中创建 struts.xml 文件，用于配置 Action 并设置 页面导航，注意 action 标签中 name 属性和 class 属性的值， 以及 result 子标签的属性； </p>\n<p><img src=\"5.png\" alt=\"\"></p>\n<p>10、编辑 Web 应用的 web.xml 文件，增加 Struts2 核心 Filter 的配置； </p>\n<p><img src=\"6.png\" alt=\"\"></p>\n<p>11、将 struts-prj1 部署在 Tomcat 服务器上； </p>\n<p>12、通过浏览器访问 login.jsp 页面，并记录运行结果；</p>\n<p><img src=\"7.png\" alt=\"\"></p>\n<h3 id=\"提高实验\"><a href=\"#提高实验\" class=\"headerlink\" title=\"提高实验\"></a>提高实验</h3><p>1、为能使用与 Ajax 相关的标签，将 Struts2 中的 <code>struts2-dojo-plugin-2.3.15.1.jar</code> 包增加到工程 struts-prj1 中，即复制到<code>%workspace%struts-prj1\\WebContent\\ WEB-INF\\lib</code>路径下，刷新工程； </p>\n<p><img src=\"8.png\" alt=\"\"></p>\n<p>2、在工程 struts-prj1 中增加用户注册功能，新建 register.jsp 页面作为用户注册的 视图，页面使用 Struts2 的 UI 标签来生成表单元素，包括用户名、密码、确认密码、真实姓名、性别、生日、联系地址、联系电话和电子邮箱 </p>\n<p><img src=\"9.png\" alt=\"\"></p>\n<p>3、在 struts-prj1 中新建 <code>regFail.jsp</code> 页面，作为注册失败的视图，在页面中显示“注册失败”； </p>\n<p>4、在 struts-prj1 中新建 <code>regSuccess.jsp</code> 页面，作为注册成功的视图，使用 Struts2 的数据标签和控制标签来生成注册成功的信息，并将登录用户信息保存在会话范围内 </p>\n<p>5、修改 <code>UserBean.java</code>，增加属性用于记录注册用户信息 </p>\n<p><img src=\"10.png\" alt=\"\"></p>\n<p>6、修改 <code>UserService.java</code>，增加用户注册逻辑，为简化注册逻辑，将注册成功的条件设置为：用户名、密码和确认密码相同，而且不为空字串； </p>\n<p><img src=\"11.png\" alt=\"\"></p>\n<p>7、修改 <code>UserAction.java</code> 中的 execute()方法，参照基础实验部分写入代码，用于调用注册逻辑，并根据注册成功与否而返回不同的内容； </p>\n<p><img src=\"12.png\" alt=\"\"></p>\n<p>8、修改 <code>struts.xml</code> 文件，对用户注册进行配置并设置页面导航； </p>\n<p><img src=\"13.png\" alt=\"\"></p>\n<p>9、将 struts-prj1 重新布署在 Tomcat 服务器上，通过浏览器访问 <code>register.jsp</code> 页面， 并记录运行结果； </p>\n<p><img src=\"14.png\" alt=\"\"></p>\n<h3 id=\"拓展实验\"><a href=\"#拓展实验\" class=\"headerlink\" title=\"拓展实验\"></a>拓展实验</h3><p>1、在工程 struts-prj1 的 src 目录下新建一个 <code>cn.edu.zjut.local</code> 包，把所有的资源文件放置其中，如：<code>message_zh_CN.properties</code>、<code>message_en_US.properties</code> 等； </p>\n<p><img src=\"15.png\" alt=\"\"></p>\n<p>2、将工程 struts-prj1 中用户登录模块的三个 JSP 页面进行国际化处理，选择需要进行国际化的内容，以键值对的形式写入资源文件中 </p>\n<p>3、使用 JDK 中的 native2ASCII 工具，将 <code>message_zh_CN.properties</code> 重新编码，将中文字符都转化为 unicode 码，从而避免乱码问题； </p>\n<p>4、在工程 struts-prj1 的 src 目录中创建 <code>struts.properties</code> 文件，通过它加载资源文件,或者在JSP页面中临时加载资源文件  </p>\n<p><img src=\"16.png\" alt=\"\"></p>\n<p>5、修改 <code>login.jsp</code>、<code>loginSuccess.jsp</code> 和 <code>loginFail.jsp</code> 页面，通过 Struts2 标签实现国际化； </p>\n<p>6、将 struts-prj1 重新布署在 Tomcat 服务器上； </p>\n<p>7、设置浏览器的首语言选项（如下图所示），通过浏览器访问 <code>login.jsp</code> 页面， 观察并记录运行结果；</p>\n<p><img src=\"17.png\" alt=\"\"></p>\n<p>8、尝试修改用户注册模块，实现国际化，并记录运行结果。 </p>\n<p><img src=\"18.png\" alt=\"\"></p>\n<p><img src=\"19.png\" alt=\"\"></p>\n<blockquote>\n<p>注册中文页面</p>\n</blockquote>\n<p><img src=\"20.png\" alt=\"\"></p>\n<blockquote>\n<p>注册英文页面</p>\n</blockquote>\n"},{"title":"在Mac上配置OpenCV与Xcode开发环境","date":"2020-02-26T08:20:20.000Z","_content":"\n下学期选了数字图像处理课程，接下来的`OpenCV`学习过程我会从零开始记录，第零课是开发环境的配置。\n\n由于笔者使用的是Mac，相较于`C++`，笔者的`Python`功底不是很扎实，所以使用Xcode与`C++`实践`OpenCV`项目。在网络上搜寻了许多关于`OpenCV`与 Xcode 开发环境的配置资料均不是很完善,于是决定自己写一篇，希望对 Mac 用户有所帮助。\n\n## 准备工作\n\n### 1.安装 Xcode\n\n{% asset_img Xcode.png %}\n\n从 App Store 安装 Xcode。目前 Xcode（11.3）的安装后大小约为19 GB，因此可能需要近半小时的下载与安装时间，具体取决于互联网速度与设备运行速度。\n\n### 2.安装 Homebrew\n\n[Homebrew](https://brew.sh/) 是 Mac 上必备的包管理工具，诸多优点不复赘述。\n如果你还没有安装过 [Homebrew](https://brew.sh/) ，只需打开任意终端并粘贴以下代码并回车即可完成安装。\n\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n### 3.安装 OpenCV\n完成 Homebrew 的安装后， 即可使用`brew`命令完成`OpenCV`的安装部署。\n\n```\nbrew install opencv\n```\n\n### 4.安装 pkg-config\n\n`pkg-config`是在编译应用程序和库时使用的辅助工具，可以帮助我们找到找到正确的OpenCV 链接器符号 (Linker Flags) ，在后续的步骤中会用到。\n你需要使用如下命令完成对`pkg-config`的安装。\n\n```\nbrew install pkg-config\n```\n\n### 5.使用 pkg-config\n\n查看您的`opencv.pc`文件所在位置，一般`opencv.pc`文件所在位置为\n\n```\n/usr/local/Cellar/opencv/<版本号>/lib/pkgconfig/opencv.pc\n```\n\n如我安装的最新版本`OpenCV`的相关`opencv.pc`文件在\n```\n/usr/local/Cellar/opencv/4.2.0_1/lib/pkgconfig/opencv.pc\n```\n\n使用下面的命令查看`OpenCV`的链接器符号 (Linker Flags) ，请务必修改其中的版本信息。\n```\npkg-config --cflags --libs /usr/local/Cellar/opencv/<版本号>/lib/pkgconfig/opencv.pc\n```\n\n你会得到类似于如下的输出结果，我们需要参照输出结果在 Xcode 中进行配置。\n\n```\n-I/usr/local/Cellar/opencv/4.2.0_1/include/opencv4/opencv -I/usr/local/Cellar/opencv/4.2.0_1/include/opencv4 -L/usr/local/Cellar/opencv/4.2.0_1/lib -lopencv_gapi -lopencv_stitching -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_highgui -lopencv_face -lopencv_freetype -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_quality -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_sfm -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core\n```\n\n## 配置 Xcode\n\n### 6.创建 Xcode 项目\n\n在正式运行 OpenCV C++代码之前，首先需要在 Xcode 中创建一个空的`C++`项目。具体创建过程不在这里叙述。\n\n{% asset_img Project.png %}\n\n需要注意的是项目的 *Language* 应选择为 C++。\n\n### 7.设置 Header Search Paths\n\n{% asset_img Headers.png %}\n\n在 Xcode 中设置 *Header Search Paths*，先单击 Xco​​de 项目，然后点击 *Build Settings*，然后搜索“Header Search Paths”。将 *Header Search Paths* 路径设置为刚才得到的输出结果“-I”之后的路径，如我需要对如下路径进行添加。\n\n```\n/usr/local/Cellar/opencv/4.2.0_1/include/opencv4/opencv \n/usr/local/Cellar/opencv/4.2.0_1/include/opencv4\n```\n\n### 8.设置 Library Search Paths\n\n{% asset_img Library.png %}\n\n类似地，在 *Build Settings* 中搜索“Library Search Paths”，将 *Library Search Paths* 路径设置为刚才得到的输出结果“-L”之后的路径，如我需要对如下路径进行添加。\n\n```\n/usr/local/Cellar/opencv/4.2.0_1/lib \n```\n\n### 9.设置 Other Linker Flags\n\n{% asset_img linker.png %}\n\n同样，在 *Build Settings* 中搜索“Other Linker Flags”，将 *Other Linker Flags* 路径设置为刚才得到的输出结果中的其他内容，即 Linker Flags，我需要对如下 Linker Flags 进行添加。（无需手动输入，只需单击输入框粘贴相关内容）\n\n```\n -lopencv_gapi -lopencv_stitching -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_highgui -lopencv_face -lopencv_freetype -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_quality -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_sfm -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core\n```\n\n### 9.测试运行\n配置到这一步 Xcode 相关内容已经结束。可以尝试运行简单的`OpenCV`程序判断是否能够正常运行，以下给出简单的示例程序，功能仅为打开图片与退出。\n\n你需要按照后文中“使用相对路径”方法配置相对路径并添加图片`test.jpeg`到项目文件夹。\n\n```cpp\n#include<opencv2/opencv.hpp>\n#include <iostream>\n\nusing namespace cv;\nusing namespace std;\n\nint main()\n{\n    Mat image= imread(\"test.jpeg\");// 读取图片\n    if(!image.data)             // 检查非法输入\n      {\n          cout <<  \"无法读取照片\" << endl ;\n          return -1;\n      }\n\n    namedWindow(\"Display window\",WINDOW_AUTOSIZE);   // 创建图片显示自动调整大小的窗口\n    imshow(\"img\",image);    // 在窗口显示图片\n    \n    waitKey(0); // 按键等待，需要在窗口任意输入字符退出，0代表永久等待\n    return 0;\n}\n```\n\n若运行过程出现问题请检查上述步骤是否正确，后文中给出了部分问题的解决方案，可能对您有帮助。\n\n## 其他设置\n\n### 使用相对路径\n\n{% asset_img dir.png %}\n\nXcode使用图像或资源的绝对路径。为了设置相对路径需要设置*Working Directory*。依次点击 `菜单栏Product > Scheme > Edit Scheme ` 中转到*Run*中的*check Use Custom Working Directory*选项，然后自定义项目目录。\n\n## 可能出现的错误\n\n### 出现 “Not a Doxygen trailing comment” 错误\n\n{% asset_img documention.png %}\n\n在 *Build Settings* 中搜索 \"Documentation Comments\"，将 *Documentation Comments* 设置为\"No\"即可解决该问题。`Doxygen` 只是一种格式可以选择跳过检查。\n\n### 出现 \"dyld: Library not loaded...\" 错误\n\n{% asset_img signature.png %}\n\n在 *Signing & Capabilities* 中打开*Disable Library Validation*，即可解决该问题。问题的原因是`brew`安装的`OpenCV`存在签名问题，暂且可以先认可没有被签名的 Library。\n\n## 参考\n[Setting up OpenCV and C++ development environment in Xcode for Computer Vision projects](https://medium.com/@jaskaranvirdi/setting-up-opencv-and-c-development-environment-in-xcode-b6027728003)\n\n[Xcode in macox 10.15 beta library code signature problem](https://github.com/opencv/opencv/issues/15645#issuecomment-554495051)\n\n[Not a Doxygen trailing comment](https://stackoverflow.com/questions/39929199/not-a-doxygen-trailing-comment)\n\n[Load and Display an Image](https://docs.opencv.org/2.4/doc/tutorials/introduction/display_image/display_image.html)\n","source":"_posts/Setting_up_OpenCV_environment_in_Xcode.md","raw":"---\ntitle: 在Mac上配置OpenCV与Xcode开发环境\ndate: 2020-02-26 16:20:20\ncategories: \n- tech\ntags: \n- OpenCV\n- Xcode\n- Apple\n---\n\n下学期选了数字图像处理课程，接下来的`OpenCV`学习过程我会从零开始记录，第零课是开发环境的配置。\n\n由于笔者使用的是Mac，相较于`C++`，笔者的`Python`功底不是很扎实，所以使用Xcode与`C++`实践`OpenCV`项目。在网络上搜寻了许多关于`OpenCV`与 Xcode 开发环境的配置资料均不是很完善,于是决定自己写一篇，希望对 Mac 用户有所帮助。\n\n## 准备工作\n\n### 1.安装 Xcode\n\n{% asset_img Xcode.png %}\n\n从 App Store 安装 Xcode。目前 Xcode（11.3）的安装后大小约为19 GB，因此可能需要近半小时的下载与安装时间，具体取决于互联网速度与设备运行速度。\n\n### 2.安装 Homebrew\n\n[Homebrew](https://brew.sh/) 是 Mac 上必备的包管理工具，诸多优点不复赘述。\n如果你还没有安装过 [Homebrew](https://brew.sh/) ，只需打开任意终端并粘贴以下代码并回车即可完成安装。\n\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n### 3.安装 OpenCV\n完成 Homebrew 的安装后， 即可使用`brew`命令完成`OpenCV`的安装部署。\n\n```\nbrew install opencv\n```\n\n### 4.安装 pkg-config\n\n`pkg-config`是在编译应用程序和库时使用的辅助工具，可以帮助我们找到找到正确的OpenCV 链接器符号 (Linker Flags) ，在后续的步骤中会用到。\n你需要使用如下命令完成对`pkg-config`的安装。\n\n```\nbrew install pkg-config\n```\n\n### 5.使用 pkg-config\n\n查看您的`opencv.pc`文件所在位置，一般`opencv.pc`文件所在位置为\n\n```\n/usr/local/Cellar/opencv/<版本号>/lib/pkgconfig/opencv.pc\n```\n\n如我安装的最新版本`OpenCV`的相关`opencv.pc`文件在\n```\n/usr/local/Cellar/opencv/4.2.0_1/lib/pkgconfig/opencv.pc\n```\n\n使用下面的命令查看`OpenCV`的链接器符号 (Linker Flags) ，请务必修改其中的版本信息。\n```\npkg-config --cflags --libs /usr/local/Cellar/opencv/<版本号>/lib/pkgconfig/opencv.pc\n```\n\n你会得到类似于如下的输出结果，我们需要参照输出结果在 Xcode 中进行配置。\n\n```\n-I/usr/local/Cellar/opencv/4.2.0_1/include/opencv4/opencv -I/usr/local/Cellar/opencv/4.2.0_1/include/opencv4 -L/usr/local/Cellar/opencv/4.2.0_1/lib -lopencv_gapi -lopencv_stitching -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_highgui -lopencv_face -lopencv_freetype -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_quality -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_sfm -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core\n```\n\n## 配置 Xcode\n\n### 6.创建 Xcode 项目\n\n在正式运行 OpenCV C++代码之前，首先需要在 Xcode 中创建一个空的`C++`项目。具体创建过程不在这里叙述。\n\n{% asset_img Project.png %}\n\n需要注意的是项目的 *Language* 应选择为 C++。\n\n### 7.设置 Header Search Paths\n\n{% asset_img Headers.png %}\n\n在 Xcode 中设置 *Header Search Paths*，先单击 Xco​​de 项目，然后点击 *Build Settings*，然后搜索“Header Search Paths”。将 *Header Search Paths* 路径设置为刚才得到的输出结果“-I”之后的路径，如我需要对如下路径进行添加。\n\n```\n/usr/local/Cellar/opencv/4.2.0_1/include/opencv4/opencv \n/usr/local/Cellar/opencv/4.2.0_1/include/opencv4\n```\n\n### 8.设置 Library Search Paths\n\n{% asset_img Library.png %}\n\n类似地，在 *Build Settings* 中搜索“Library Search Paths”，将 *Library Search Paths* 路径设置为刚才得到的输出结果“-L”之后的路径，如我需要对如下路径进行添加。\n\n```\n/usr/local/Cellar/opencv/4.2.0_1/lib \n```\n\n### 9.设置 Other Linker Flags\n\n{% asset_img linker.png %}\n\n同样，在 *Build Settings* 中搜索“Other Linker Flags”，将 *Other Linker Flags* 路径设置为刚才得到的输出结果中的其他内容，即 Linker Flags，我需要对如下 Linker Flags 进行添加。（无需手动输入，只需单击输入框粘贴相关内容）\n\n```\n -lopencv_gapi -lopencv_stitching -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_highgui -lopencv_face -lopencv_freetype -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_quality -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_sfm -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core\n```\n\n### 9.测试运行\n配置到这一步 Xcode 相关内容已经结束。可以尝试运行简单的`OpenCV`程序判断是否能够正常运行，以下给出简单的示例程序，功能仅为打开图片与退出。\n\n你需要按照后文中“使用相对路径”方法配置相对路径并添加图片`test.jpeg`到项目文件夹。\n\n```cpp\n#include<opencv2/opencv.hpp>\n#include <iostream>\n\nusing namespace cv;\nusing namespace std;\n\nint main()\n{\n    Mat image= imread(\"test.jpeg\");// 读取图片\n    if(!image.data)             // 检查非法输入\n      {\n          cout <<  \"无法读取照片\" << endl ;\n          return -1;\n      }\n\n    namedWindow(\"Display window\",WINDOW_AUTOSIZE);   // 创建图片显示自动调整大小的窗口\n    imshow(\"img\",image);    // 在窗口显示图片\n    \n    waitKey(0); // 按键等待，需要在窗口任意输入字符退出，0代表永久等待\n    return 0;\n}\n```\n\n若运行过程出现问题请检查上述步骤是否正确，后文中给出了部分问题的解决方案，可能对您有帮助。\n\n## 其他设置\n\n### 使用相对路径\n\n{% asset_img dir.png %}\n\nXcode使用图像或资源的绝对路径。为了设置相对路径需要设置*Working Directory*。依次点击 `菜单栏Product > Scheme > Edit Scheme ` 中转到*Run*中的*check Use Custom Working Directory*选项，然后自定义项目目录。\n\n## 可能出现的错误\n\n### 出现 “Not a Doxygen trailing comment” 错误\n\n{% asset_img documention.png %}\n\n在 *Build Settings* 中搜索 \"Documentation Comments\"，将 *Documentation Comments* 设置为\"No\"即可解决该问题。`Doxygen` 只是一种格式可以选择跳过检查。\n\n### 出现 \"dyld: Library not loaded...\" 错误\n\n{% asset_img signature.png %}\n\n在 *Signing & Capabilities* 中打开*Disable Library Validation*，即可解决该问题。问题的原因是`brew`安装的`OpenCV`存在签名问题，暂且可以先认可没有被签名的 Library。\n\n## 参考\n[Setting up OpenCV and C++ development environment in Xcode for Computer Vision projects](https://medium.com/@jaskaranvirdi/setting-up-opencv-and-c-development-environment-in-xcode-b6027728003)\n\n[Xcode in macox 10.15 beta library code signature problem](https://github.com/opencv/opencv/issues/15645#issuecomment-554495051)\n\n[Not a Doxygen trailing comment](https://stackoverflow.com/questions/39929199/not-a-doxygen-trailing-comment)\n\n[Load and Display an Image](https://docs.opencv.org/2.4/doc/tutorials/introduction/display_image/display_image.html)\n","slug":"Setting_up_OpenCV_environment_in_Xcode","published":1,"updated":"2020-02-27T08:30:02.816Z","_id":"ck735cgs200057c6b1plke8p6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>下学期选了数字图像处理课程，接下来的<code>OpenCV</code>学习过程我会从零开始记录，第零课是开发环境的配置。</p>\n<p>由于笔者使用的是Mac，相较于<code>C++</code>，笔者的<code>Python</code>功底不是很扎实，所以使用Xcode与<code>C++</code>实践<code>OpenCV</code>项目。在网络上搜寻了许多关于<code>OpenCV</code>与 Xcode 开发环境的配置资料均不是很完善,于是决定自己写一篇，希望对 Mac 用户有所帮助。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"1-安装-Xcode\"><a href=\"#1-安装-Xcode\" class=\"headerlink\" title=\"1.安装 Xcode\"></a>1.安装 Xcode</h3><img src=\"/2020/02/26/Setting_up_OpenCV_environment_in_Xcode/Xcode.png\" class=\"\">\n\n<p>从 App Store 安装 Xcode。目前 Xcode（11.3）的安装后大小约为19 GB，因此可能需要近半小时的下载与安装时间，具体取决于互联网速度与设备运行速度。</p>\n<h3 id=\"2-安装-Homebrew\"><a href=\"#2-安装-Homebrew\" class=\"headerlink\" title=\"2.安装 Homebrew\"></a>2.安装 Homebrew</h3><p><a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a> 是 Mac 上必备的包管理工具，诸多优点不复赘述。<br>如果你还没有安装过 <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a> ，只需打开任意终端并粘贴以下代码并回车即可完成安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;bin&#x2F;ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-安装-OpenCV\"><a href=\"#3-安装-OpenCV\" class=\"headerlink\" title=\"3.安装 OpenCV\"></a>3.安装 OpenCV</h3><p>完成 Homebrew 的安装后， 即可使用<code>brew</code>命令完成<code>OpenCV</code>的安装部署。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install opencv</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-安装-pkg-config\"><a href=\"#4-安装-pkg-config\" class=\"headerlink\" title=\"4.安装 pkg-config\"></a>4.安装 pkg-config</h3><p><code>pkg-config</code>是在编译应用程序和库时使用的辅助工具，可以帮助我们找到找到正确的OpenCV 链接器符号 (Linker Flags) ，在后续的步骤中会用到。<br>你需要使用如下命令完成对<code>pkg-config</code>的安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install pkg-config</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-使用-pkg-config\"><a href=\"#5-使用-pkg-config\" class=\"headerlink\" title=\"5.使用 pkg-config\"></a>5.使用 pkg-config</h3><p>查看您的<code>opencv.pc</code>文件所在位置，一般<code>opencv.pc</code>文件所在位置为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;&lt;版本号&gt;&#x2F;lib&#x2F;pkgconfig&#x2F;opencv.pc</span><br></pre></td></tr></table></figure>\n\n<p>如我安装的最新版本<code>OpenCV</code>的相关<code>opencv.pc</code>文件在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;lib&#x2F;pkgconfig&#x2F;opencv.pc</span><br></pre></td></tr></table></figure>\n\n<p>使用下面的命令查看<code>OpenCV</code>的链接器符号 (Linker Flags) ，请务必修改其中的版本信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg-config --cflags --libs &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;&lt;版本号&gt;&#x2F;lib&#x2F;pkgconfig&#x2F;opencv.pc</span><br></pre></td></tr></table></figure>\n\n<p>你会得到类似于如下的输出结果，我们需要参照输出结果在 Xcode 中进行配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-I&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;include&#x2F;opencv4&#x2F;opencv -I&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;include&#x2F;opencv4 -L&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;lib -lopencv_gapi -lopencv_stitching -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_highgui -lopencv_face -lopencv_freetype -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_quality -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_sfm -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-Xcode\"><a href=\"#配置-Xcode\" class=\"headerlink\" title=\"配置 Xcode\"></a>配置 Xcode</h2><h3 id=\"6-创建-Xcode-项目\"><a href=\"#6-创建-Xcode-项目\" class=\"headerlink\" title=\"6.创建 Xcode 项目\"></a>6.创建 Xcode 项目</h3><p>在正式运行 OpenCV C++代码之前，首先需要在 Xcode 中创建一个空的<code>C++</code>项目。具体创建过程不在这里叙述。</p>\n<img src=\"/2020/02/26/Setting_up_OpenCV_environment_in_Xcode/Project.png\" class=\"\">\n\n<p>需要注意的是项目的 <em>Language</em> 应选择为 C++。</p>\n<h3 id=\"7-设置-Header-Search-Paths\"><a href=\"#7-设置-Header-Search-Paths\" class=\"headerlink\" title=\"7.设置 Header Search Paths\"></a>7.设置 Header Search Paths</h3><img src=\"/2020/02/26/Setting_up_OpenCV_environment_in_Xcode/Headers.png\" class=\"\">\n\n<p>在 Xcode 中设置 <em>Header Search Paths<em>，先单击 Xco​​de 项目，然后点击 *Build Settings</em>，然后搜索“Header Search Paths”。将 *Header Search Paths</em> 路径设置为刚才得到的输出结果“-I”之后的路径，如我需要对如下路径进行添加。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;include&#x2F;opencv4&#x2F;opencv </span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;include&#x2F;opencv4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-设置-Library-Search-Paths\"><a href=\"#8-设置-Library-Search-Paths\" class=\"headerlink\" title=\"8.设置 Library Search Paths\"></a>8.设置 Library Search Paths</h3><img src=\"/2020/02/26/Setting_up_OpenCV_environment_in_Xcode/Library.png\" class=\"\">\n\n<p>类似地，在 <em>Build Settings</em> 中搜索“Library Search Paths”，将 <em>Library Search Paths</em> 路径设置为刚才得到的输出结果“-L”之后的路径，如我需要对如下路径进行添加。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;lib</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-设置-Other-Linker-Flags\"><a href=\"#9-设置-Other-Linker-Flags\" class=\"headerlink\" title=\"9.设置 Other Linker Flags\"></a>9.设置 Other Linker Flags</h3><img src=\"/2020/02/26/Setting_up_OpenCV_environment_in_Xcode/linker.png\" class=\"\">\n\n<p>同样，在 <em>Build Settings</em> 中搜索“Other Linker Flags”，将 <em>Other Linker Flags</em> 路径设置为刚才得到的输出结果中的其他内容，即 Linker Flags，我需要对如下 Linker Flags 进行添加。（无需手动输入，只需单击输入框粘贴相关内容）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-lopencv_gapi -lopencv_stitching -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_highgui -lopencv_face -lopencv_freetype -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_quality -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_sfm -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-测试运行\"><a href=\"#9-测试运行\" class=\"headerlink\" title=\"9.测试运行\"></a>9.测试运行</h3><p>配置到这一步 Xcode 相关内容已经结束。可以尝试运行简单的<code>OpenCV</code>程序判断是否能够正常运行，以下给出简单的示例程序，功能仅为打开图片与退出。</p>\n<p>你需要按照后文中“使用相对路径”方法配置相对路径并添加图片<code>test.jpeg</code>到项目文件夹。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Mat image= imread(<span class=\"string\">\"test.jpeg\"</span>);<span class=\"comment\">// 读取图片</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!image.data)             <span class=\"comment\">// 检查非法输入</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"built_in\">cout</span> &lt;&lt;  <span class=\"string\">\"无法读取照片\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    namedWindow(<span class=\"string\">\"Display window\"</span>,WINDOW_AUTOSIZE);   <span class=\"comment\">// 创建图片显示自动调整大小的窗口</span></span><br><span class=\"line\">    imshow(<span class=\"string\">\"img\"</span>,image);    <span class=\"comment\">// 在窗口显示图片</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    waitKey(<span class=\"number\">0</span>); <span class=\"comment\">// 按键等待，需要在窗口任意输入字符退出，0代表永久等待</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>若运行过程出现问题请检查上述步骤是否正确，后文中给出了部分问题的解决方案，可能对您有帮助。</p>\n<h2 id=\"其他设置\"><a href=\"#其他设置\" class=\"headerlink\" title=\"其他设置\"></a>其他设置</h2><h3 id=\"使用相对路径\"><a href=\"#使用相对路径\" class=\"headerlink\" title=\"使用相对路径\"></a>使用相对路径</h3><img src=\"/2020/02/26/Setting_up_OpenCV_environment_in_Xcode/dir.png\" class=\"\">\n\n<p>Xcode使用图像或资源的绝对路径。为了设置相对路径需要设置<em>Working Directory</em>。依次点击 <code>菜单栏Product &gt; Scheme &gt; Edit Scheme</code> 中转到<em>Run</em>中的<em>check Use Custom Working Directory</em>选项，然后自定义项目目录。</p>\n<h2 id=\"可能出现的错误\"><a href=\"#可能出现的错误\" class=\"headerlink\" title=\"可能出现的错误\"></a>可能出现的错误</h2><h3 id=\"出现-“Not-a-Doxygen-trailing-comment”-错误\"><a href=\"#出现-“Not-a-Doxygen-trailing-comment”-错误\" class=\"headerlink\" title=\"出现 “Not a Doxygen trailing comment” 错误\"></a>出现 “Not a Doxygen trailing comment” 错误</h3><img src=\"/2020/02/26/Setting_up_OpenCV_environment_in_Xcode/documention.png\" class=\"\">\n\n<p>在 <em>Build Settings</em> 中搜索 “Documentation Comments”，将 <em>Documentation Comments</em> 设置为”No”即可解决该问题。<code>Doxygen</code> 只是一种格式可以选择跳过检查。</p>\n<h3 id=\"出现-“dyld-Library-not-loaded…”-错误\"><a href=\"#出现-“dyld-Library-not-loaded…”-错误\" class=\"headerlink\" title=\"出现 “dyld: Library not loaded…” 错误\"></a>出现 “dyld: Library not loaded…” 错误</h3><img src=\"/2020/02/26/Setting_up_OpenCV_environment_in_Xcode/signature.png\" class=\"\">\n\n<p>在 <em>Signing &amp; Capabilities</em> 中打开<em>Disable Library Validation</em>，即可解决该问题。问题的原因是<code>brew</code>安装的<code>OpenCV</code>存在签名问题，暂且可以先认可没有被签名的 Library。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://medium.com/@jaskaranvirdi/setting-up-opencv-and-c-development-environment-in-xcode-b6027728003\" target=\"_blank\" rel=\"noopener\">Setting up OpenCV and C++ development environment in Xcode for Computer Vision projects</a></p>\n<p><a href=\"https://github.com/opencv/opencv/issues/15645#issuecomment-554495051\" target=\"_blank\" rel=\"noopener\">Xcode in macox 10.15 beta library code signature problem</a></p>\n<p><a href=\"https://stackoverflow.com/questions/39929199/not-a-doxygen-trailing-comment\" target=\"_blank\" rel=\"noopener\">Not a Doxygen trailing comment</a></p>\n<p><a href=\"https://docs.opencv.org/2.4/doc/tutorials/introduction/display_image/display_image.html\" target=\"_blank\" rel=\"noopener\">Load and Display an Image</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>下学期选了数字图像处理课程，接下来的<code>OpenCV</code>学习过程我会从零开始记录，第零课是开发环境的配置。</p>\n<p>由于笔者使用的是Mac，相较于<code>C++</code>，笔者的<code>Python</code>功底不是很扎实，所以使用Xcode与<code>C++</code>实践<code>OpenCV</code>项目。在网络上搜寻了许多关于<code>OpenCV</code>与 Xcode 开发环境的配置资料均不是很完善,于是决定自己写一篇，希望对 Mac 用户有所帮助。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"1-安装-Xcode\"><a href=\"#1-安装-Xcode\" class=\"headerlink\" title=\"1.安装 Xcode\"></a>1.安装 Xcode</h3><img src=\"/2020/02/26/Setting_up_OpenCV_environment_in_Xcode/Xcode.png\" class=\"\">\n\n<p>从 App Store 安装 Xcode。目前 Xcode（11.3）的安装后大小约为19 GB，因此可能需要近半小时的下载与安装时间，具体取决于互联网速度与设备运行速度。</p>\n<h3 id=\"2-安装-Homebrew\"><a href=\"#2-安装-Homebrew\" class=\"headerlink\" title=\"2.安装 Homebrew\"></a>2.安装 Homebrew</h3><p><a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a> 是 Mac 上必备的包管理工具，诸多优点不复赘述。<br>如果你还没有安装过 <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a> ，只需打开任意终端并粘贴以下代码并回车即可完成安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;bin&#x2F;ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-安装-OpenCV\"><a href=\"#3-安装-OpenCV\" class=\"headerlink\" title=\"3.安装 OpenCV\"></a>3.安装 OpenCV</h3><p>完成 Homebrew 的安装后， 即可使用<code>brew</code>命令完成<code>OpenCV</code>的安装部署。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install opencv</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-安装-pkg-config\"><a href=\"#4-安装-pkg-config\" class=\"headerlink\" title=\"4.安装 pkg-config\"></a>4.安装 pkg-config</h3><p><code>pkg-config</code>是在编译应用程序和库时使用的辅助工具，可以帮助我们找到找到正确的OpenCV 链接器符号 (Linker Flags) ，在后续的步骤中会用到。<br>你需要使用如下命令完成对<code>pkg-config</code>的安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install pkg-config</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-使用-pkg-config\"><a href=\"#5-使用-pkg-config\" class=\"headerlink\" title=\"5.使用 pkg-config\"></a>5.使用 pkg-config</h3><p>查看您的<code>opencv.pc</code>文件所在位置，一般<code>opencv.pc</code>文件所在位置为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;&lt;版本号&gt;&#x2F;lib&#x2F;pkgconfig&#x2F;opencv.pc</span><br></pre></td></tr></table></figure>\n\n<p>如我安装的最新版本<code>OpenCV</code>的相关<code>opencv.pc</code>文件在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;lib&#x2F;pkgconfig&#x2F;opencv.pc</span><br></pre></td></tr></table></figure>\n\n<p>使用下面的命令查看<code>OpenCV</code>的链接器符号 (Linker Flags) ，请务必修改其中的版本信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg-config --cflags --libs &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;&lt;版本号&gt;&#x2F;lib&#x2F;pkgconfig&#x2F;opencv.pc</span><br></pre></td></tr></table></figure>\n\n<p>你会得到类似于如下的输出结果，我们需要参照输出结果在 Xcode 中进行配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-I&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;include&#x2F;opencv4&#x2F;opencv -I&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;include&#x2F;opencv4 -L&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;lib -lopencv_gapi -lopencv_stitching -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_highgui -lopencv_face -lopencv_freetype -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_quality -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_sfm -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-Xcode\"><a href=\"#配置-Xcode\" class=\"headerlink\" title=\"配置 Xcode\"></a>配置 Xcode</h2><h3 id=\"6-创建-Xcode-项目\"><a href=\"#6-创建-Xcode-项目\" class=\"headerlink\" title=\"6.创建 Xcode 项目\"></a>6.创建 Xcode 项目</h3><p>在正式运行 OpenCV C++代码之前，首先需要在 Xcode 中创建一个空的<code>C++</code>项目。具体创建过程不在这里叙述。</p>\n<img src=\"/2020/02/26/Setting_up_OpenCV_environment_in_Xcode/Project.png\" class=\"\">\n\n<p>需要注意的是项目的 <em>Language</em> 应选择为 C++。</p>\n<h3 id=\"7-设置-Header-Search-Paths\"><a href=\"#7-设置-Header-Search-Paths\" class=\"headerlink\" title=\"7.设置 Header Search Paths\"></a>7.设置 Header Search Paths</h3><img src=\"/2020/02/26/Setting_up_OpenCV_environment_in_Xcode/Headers.png\" class=\"\">\n\n<p>在 Xcode 中设置 <em>Header Search Paths<em>，先单击 Xco​​de 项目，然后点击 *Build Settings</em>，然后搜索“Header Search Paths”。将 *Header Search Paths</em> 路径设置为刚才得到的输出结果“-I”之后的路径，如我需要对如下路径进行添加。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;include&#x2F;opencv4&#x2F;opencv </span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;include&#x2F;opencv4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-设置-Library-Search-Paths\"><a href=\"#8-设置-Library-Search-Paths\" class=\"headerlink\" title=\"8.设置 Library Search Paths\"></a>8.设置 Library Search Paths</h3><img src=\"/2020/02/26/Setting_up_OpenCV_environment_in_Xcode/Library.png\" class=\"\">\n\n<p>类似地，在 <em>Build Settings</em> 中搜索“Library Search Paths”，将 <em>Library Search Paths</em> 路径设置为刚才得到的输出结果“-L”之后的路径，如我需要对如下路径进行添加。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;opencv&#x2F;4.2.0_1&#x2F;lib</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-设置-Other-Linker-Flags\"><a href=\"#9-设置-Other-Linker-Flags\" class=\"headerlink\" title=\"9.设置 Other Linker Flags\"></a>9.设置 Other Linker Flags</h3><img src=\"/2020/02/26/Setting_up_OpenCV_environment_in_Xcode/linker.png\" class=\"\">\n\n<p>同样，在 <em>Build Settings</em> 中搜索“Other Linker Flags”，将 <em>Other Linker Flags</em> 路径设置为刚才得到的输出结果中的其他内容，即 Linker Flags，我需要对如下 Linker Flags 进行添加。（无需手动输入，只需单击输入框粘贴相关内容）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-lopencv_gapi -lopencv_stitching -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_highgui -lopencv_face -lopencv_freetype -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_quality -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_sfm -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-测试运行\"><a href=\"#9-测试运行\" class=\"headerlink\" title=\"9.测试运行\"></a>9.测试运行</h3><p>配置到这一步 Xcode 相关内容已经结束。可以尝试运行简单的<code>OpenCV</code>程序判断是否能够正常运行，以下给出简单的示例程序，功能仅为打开图片与退出。</p>\n<p>你需要按照后文中“使用相对路径”方法配置相对路径并添加图片<code>test.jpeg</code>到项目文件夹。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Mat image= imread(<span class=\"string\">\"test.jpeg\"</span>);<span class=\"comment\">// 读取图片</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!image.data)             <span class=\"comment\">// 检查非法输入</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"built_in\">cout</span> &lt;&lt;  <span class=\"string\">\"无法读取照片\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    namedWindow(<span class=\"string\">\"Display window\"</span>,WINDOW_AUTOSIZE);   <span class=\"comment\">// 创建图片显示自动调整大小的窗口</span></span><br><span class=\"line\">    imshow(<span class=\"string\">\"img\"</span>,image);    <span class=\"comment\">// 在窗口显示图片</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    waitKey(<span class=\"number\">0</span>); <span class=\"comment\">// 按键等待，需要在窗口任意输入字符退出，0代表永久等待</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>若运行过程出现问题请检查上述步骤是否正确，后文中给出了部分问题的解决方案，可能对您有帮助。</p>\n<h2 id=\"其他设置\"><a href=\"#其他设置\" class=\"headerlink\" title=\"其他设置\"></a>其他设置</h2><h3 id=\"使用相对路径\"><a href=\"#使用相对路径\" class=\"headerlink\" title=\"使用相对路径\"></a>使用相对路径</h3><img src=\"/2020/02/26/Setting_up_OpenCV_environment_in_Xcode/dir.png\" class=\"\">\n\n<p>Xcode使用图像或资源的绝对路径。为了设置相对路径需要设置<em>Working Directory</em>。依次点击 <code>菜单栏Product &gt; Scheme &gt; Edit Scheme</code> 中转到<em>Run</em>中的<em>check Use Custom Working Directory</em>选项，然后自定义项目目录。</p>\n<h2 id=\"可能出现的错误\"><a href=\"#可能出现的错误\" class=\"headerlink\" title=\"可能出现的错误\"></a>可能出现的错误</h2><h3 id=\"出现-“Not-a-Doxygen-trailing-comment”-错误\"><a href=\"#出现-“Not-a-Doxygen-trailing-comment”-错误\" class=\"headerlink\" title=\"出现 “Not a Doxygen trailing comment” 错误\"></a>出现 “Not a Doxygen trailing comment” 错误</h3><img src=\"/2020/02/26/Setting_up_OpenCV_environment_in_Xcode/documention.png\" class=\"\">\n\n<p>在 <em>Build Settings</em> 中搜索 “Documentation Comments”，将 <em>Documentation Comments</em> 设置为”No”即可解决该问题。<code>Doxygen</code> 只是一种格式可以选择跳过检查。</p>\n<h3 id=\"出现-“dyld-Library-not-loaded…”-错误\"><a href=\"#出现-“dyld-Library-not-loaded…”-错误\" class=\"headerlink\" title=\"出现 “dyld: Library not loaded…” 错误\"></a>出现 “dyld: Library not loaded…” 错误</h3><img src=\"/2020/02/26/Setting_up_OpenCV_environment_in_Xcode/signature.png\" class=\"\">\n\n<p>在 <em>Signing &amp; Capabilities</em> 中打开<em>Disable Library Validation</em>，即可解决该问题。问题的原因是<code>brew</code>安装的<code>OpenCV</code>存在签名问题，暂且可以先认可没有被签名的 Library。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://medium.com/@jaskaranvirdi/setting-up-opencv-and-c-development-environment-in-xcode-b6027728003\" target=\"_blank\" rel=\"noopener\">Setting up OpenCV and C++ development environment in Xcode for Computer Vision projects</a></p>\n<p><a href=\"https://github.com/opencv/opencv/issues/15645#issuecomment-554495051\" target=\"_blank\" rel=\"noopener\">Xcode in macox 10.15 beta library code signature problem</a></p>\n<p><a href=\"https://stackoverflow.com/questions/39929199/not-a-doxygen-trailing-comment\" target=\"_blank\" rel=\"noopener\">Not a Doxygen trailing comment</a></p>\n<p><a href=\"https://docs.opencv.org/2.4/doc/tutorials/introduction/display_image/display_image.html\" target=\"_blank\" rel=\"noopener\">Load and Display an Image</a></p>\n"},{"title":"Design+Code 的 Vue.js 课程学习摘录","date":"2020-02-10T17:20:20.000Z","_content":"\n## 配置组件的data属性\n\n课程初提及的定义**data**的方法经过测试不可行，即如下代码片段。\n\n```js\n<script>\nexport default {\n  name: \"SignIn\",\n  data: {\n    isDarkMode: true\n  },\n  methods: {\n    toggleDarkMode() {\n      this.isDarkMode = !this.isDarkMode;\n    }\n  }\n};\n</script>\n```\n\n**data** 包含可以在触发组件更新的数据。\n**methods** 包含可以触发数据更改的函数。\n\n后文中解释了需要作出的更改：\n\n>为了让效果工作，我们需要的data属性是一个函数。这是 Vue组件的规则，并不是`App.vue`的规则。因此需要将当前数据属性替换为：\n\n```js\ndata() {\n  return {\n      isDarkMode: true\n  }\n},\n```\n\n经查阅官方文档，了解到 data 必须是一个函数。\n\n>当我们定义 <button-counter> 组件时，你可能会发现它的 data 并不是直接提供一个对象，取而代之的是，一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝。如果 Vue 没有这条规则，点击一个按钮就可能会影响到其它所有实例。\n\n解释得非常清楚，学习 `Vue.js` 等前端技术或许可以速成，但文档一定是不可或缺的一块。\n\n## 配置全局样式\n\n可以在CSS `<style> `的开头导入`.css`文件，但对其进行配置可以使其用于整个项目的 Vue 文件。\n`vue.config.js` 是一个可选的配置文件，如果项目的 (和 `package.json` 同级的) 根目录中存在这个文件，那么它会被 `@vue/cli-service` 自动加载。[官方文档](https://cli.vuejs.org/zh/config/#chainwebpack)详细解释了全局 CLI 配置方法。\n教程指导做的是在项目的根目录中创建一个名为`vue.config.js`的文件，并且在此输入以下配置：\n\n```js\n// vue.config.js\nmodule.exports = {\n    css: {\n        loaderOptions: {\n            sass: {\n                data: `\n                    @import \"@/global-styles/colors.scss\";\n                    @import \"@/global-styles/typography.scss\";\n                `\n            }\n        }\n    }\n}\n```\n\n如果使用的是最新版本的 `Vue CLI`，尽管进行了到 **Vue CLI > in Project Tasks > serve** 重新运行任务，还是会提示报错无法运行。\n\n新版本的 `Vue CLI` 提供了 `Dart Sass` 与 `node-sass` 两种类型的 Sass 配置，在`sass-loader`的[implementation](https://github.com/webpack-contrib/sass-loader)中两者有所不同。\n\n原因在于在 `sass-loader ` v7 中，`prependData`选项名是 \"data”，已经不适用。\n默认情况下 `sass` 选项会同时对 `sass` 和 `scss` 语法同时生效，因为 `scss` 语法在内部也是由 sass-loader 处理的，但是在配置 `data` 选项的时候，`scss` 语法会要求语句结尾必须有分号，`sass` 则要求必须没有分号。在这种情况下，我们可以使用 `scss` 选项，对 `scss` 语法进行单独配置。实例代码来自[官方文档](https://cli.vuejs.org/zh/guide/css.html#css-modules)。\n\n```js\n// vue.config.js\nmodule.exports = {\n  css: {\n    loaderOptions: {\n      // 给 sass-loader 传递选项\n      sass: {\n        // @/ 是 src/ 的别名\n        // 假设存在 `src/variables.sass` 这个文件\n        prependData: `@import \"~@/variables.sass\"`\n      },\n      scss: {\n        prependData: `@import \"~@/variables.scss\";`\n      }\n    }\n  }\n}\n```\n\n## 未完待续","source":"_posts/Design+Code_Vue.js_Learning.md","raw":"---\ntitle: Design+Code 的 Vue.js 课程学习摘录\ndate: 2020-02-11 01:20:20\ncategories: \n- tech\ntags: \n- Vue.js\n- 前端框架\n---\n\n## 配置组件的data属性\n\n课程初提及的定义**data**的方法经过测试不可行，即如下代码片段。\n\n```js\n<script>\nexport default {\n  name: \"SignIn\",\n  data: {\n    isDarkMode: true\n  },\n  methods: {\n    toggleDarkMode() {\n      this.isDarkMode = !this.isDarkMode;\n    }\n  }\n};\n</script>\n```\n\n**data** 包含可以在触发组件更新的数据。\n**methods** 包含可以触发数据更改的函数。\n\n后文中解释了需要作出的更改：\n\n>为了让效果工作，我们需要的data属性是一个函数。这是 Vue组件的规则，并不是`App.vue`的规则。因此需要将当前数据属性替换为：\n\n```js\ndata() {\n  return {\n      isDarkMode: true\n  }\n},\n```\n\n经查阅官方文档，了解到 data 必须是一个函数。\n\n>当我们定义 <button-counter> 组件时，你可能会发现它的 data 并不是直接提供一个对象，取而代之的是，一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝。如果 Vue 没有这条规则，点击一个按钮就可能会影响到其它所有实例。\n\n解释得非常清楚，学习 `Vue.js` 等前端技术或许可以速成，但文档一定是不可或缺的一块。\n\n## 配置全局样式\n\n可以在CSS `<style> `的开头导入`.css`文件，但对其进行配置可以使其用于整个项目的 Vue 文件。\n`vue.config.js` 是一个可选的配置文件，如果项目的 (和 `package.json` 同级的) 根目录中存在这个文件，那么它会被 `@vue/cli-service` 自动加载。[官方文档](https://cli.vuejs.org/zh/config/#chainwebpack)详细解释了全局 CLI 配置方法。\n教程指导做的是在项目的根目录中创建一个名为`vue.config.js`的文件，并且在此输入以下配置：\n\n```js\n// vue.config.js\nmodule.exports = {\n    css: {\n        loaderOptions: {\n            sass: {\n                data: `\n                    @import \"@/global-styles/colors.scss\";\n                    @import \"@/global-styles/typography.scss\";\n                `\n            }\n        }\n    }\n}\n```\n\n如果使用的是最新版本的 `Vue CLI`，尽管进行了到 **Vue CLI > in Project Tasks > serve** 重新运行任务，还是会提示报错无法运行。\n\n新版本的 `Vue CLI` 提供了 `Dart Sass` 与 `node-sass` 两种类型的 Sass 配置，在`sass-loader`的[implementation](https://github.com/webpack-contrib/sass-loader)中两者有所不同。\n\n原因在于在 `sass-loader ` v7 中，`prependData`选项名是 \"data”，已经不适用。\n默认情况下 `sass` 选项会同时对 `sass` 和 `scss` 语法同时生效，因为 `scss` 语法在内部也是由 sass-loader 处理的，但是在配置 `data` 选项的时候，`scss` 语法会要求语句结尾必须有分号，`sass` 则要求必须没有分号。在这种情况下，我们可以使用 `scss` 选项，对 `scss` 语法进行单独配置。实例代码来自[官方文档](https://cli.vuejs.org/zh/guide/css.html#css-modules)。\n\n```js\n// vue.config.js\nmodule.exports = {\n  css: {\n    loaderOptions: {\n      // 给 sass-loader 传递选项\n      sass: {\n        // @/ 是 src/ 的别名\n        // 假设存在 `src/variables.sass` 这个文件\n        prependData: `@import \"~@/variables.sass\"`\n      },\n      scss: {\n        prependData: `@import \"~@/variables.scss\";`\n      }\n    }\n  }\n}\n```\n\n## 未完待续","slug":"Design+Code_Vue.js_Learning","published":1,"updated":"2020-02-27T08:28:23.642Z","_id":"ck735dlve00077c6b1cbs68th","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"配置组件的data属性\"><a href=\"#配置组件的data属性\" class=\"headerlink\" title=\"配置组件的data属性\"></a>配置组件的data属性</h2><p>课程初提及的定义<strong>data</strong>的方法经过测试不可行，即如下代码片段。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"SignIn\"</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    isDarkMode: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    toggleDarkMode() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isDarkMode = !<span class=\"keyword\">this</span>.isDarkMode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>data</strong> 包含可以在触发组件更新的数据。<br><strong>methods</strong> 包含可以触发数据更改的函数。</p>\n<p>后文中解释了需要作出的更改：</p>\n<blockquote>\n<p>为了让效果工作，我们需要的data属性是一个函数。这是 Vue组件的规则，并不是<code>App.vue</code>的规则。因此需要将当前数据属性替换为：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      isDarkMode: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>经查阅官方文档，了解到 data 必须是一个函数。</p>\n<blockquote>\n<p>当我们定义 <button-counter> 组件时，你可能会发现它的 data 并不是直接提供一个对象，取而代之的是，一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝。如果 Vue 没有这条规则，点击一个按钮就可能会影响到其它所有实例。</p>\n</blockquote>\n<p>解释得非常清楚，学习 <code>Vue.js</code> 等前端技术或许可以速成，但文档一定是不可或缺的一块。</p>\n<h2 id=\"配置全局样式\"><a href=\"#配置全局样式\" class=\"headerlink\" title=\"配置全局样式\"></a>配置全局样式</h2><p>可以在CSS <code>&lt;style&gt;</code>的开头导入<code>.css</code>文件，但对其进行配置可以使其用于整个项目的 Vue 文件。<br><code>vue.config.js</code> 是一个可选的配置文件，如果项目的 (和 <code>package.json</code> 同级的) 根目录中存在这个文件，那么它会被 <code>@vue/cli-service</code> 自动加载。<a href=\"https://cli.vuejs.org/zh/config/#chainwebpack\" target=\"_blank\" rel=\"noopener\">官方文档</a>详细解释了全局 CLI 配置方法。<br>教程指导做的是在项目的根目录中创建一个名为<code>vue.config.js</code>的文件，并且在此输入以下配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    css: &#123;</span><br><span class=\"line\">        loaderOptions: &#123;</span><br><span class=\"line\">            sass: &#123;</span><br><span class=\"line\">                data: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">                    @import \"@/global-styles/colors.scss\";</span></span><br><span class=\"line\"><span class=\"string\">                    @import \"@/global-styles/typography.scss\";</span></span><br><span class=\"line\"><span class=\"string\">                `</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果使用的是最新版本的 <code>Vue CLI</code>，尽管进行了到 <strong>Vue CLI &gt; in Project Tasks &gt; serve</strong> 重新运行任务，还是会提示报错无法运行。</p>\n<p>新版本的 <code>Vue CLI</code> 提供了 <code>Dart Sass</code> 与 <code>node-sass</code> 两种类型的 Sass 配置，在<code>sass-loader</code>的<a href=\"https://github.com/webpack-contrib/sass-loader\" target=\"_blank\" rel=\"noopener\">implementation</a>中两者有所不同。</p>\n<p>原因在于在 <code>sass-loader</code> v7 中，<code>prependData</code>选项名是 “data”，已经不适用。<br>默认情况下 <code>sass</code> 选项会同时对 <code>sass</code> 和 <code>scss</code> 语法同时生效，因为 <code>scss</code> 语法在内部也是由 sass-loader 处理的，但是在配置 <code>data</code> 选项的时候，<code>scss</code> 语法会要求语句结尾必须有分号，<code>sass</code> 则要求必须没有分号。在这种情况下，我们可以使用 <code>scss</code> 选项，对 <code>scss</code> 语法进行单独配置。实例代码来自<a href=\"https://cli.vuejs.org/zh/guide/css.html#css-modules\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  css: &#123;</span><br><span class=\"line\">    loaderOptions: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 给 sass-loader 传递选项</span></span><br><span class=\"line\">      sass: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// @/ 是 src/ 的别名</span></span><br><span class=\"line\">        <span class=\"comment\">// 假设存在 `src/variables.sass` 这个文件</span></span><br><span class=\"line\">        prependData: <span class=\"string\">`@import \"~@/variables.sass\"`</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      scss: &#123;</span><br><span class=\"line\">        prependData: <span class=\"string\">`@import \"~@/variables.scss\";`</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"配置组件的data属性\"><a href=\"#配置组件的data属性\" class=\"headerlink\" title=\"配置组件的data属性\"></a>配置组件的data属性</h2><p>课程初提及的定义<strong>data</strong>的方法经过测试不可行，即如下代码片段。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"SignIn\"</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    isDarkMode: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    toggleDarkMode() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isDarkMode = !<span class=\"keyword\">this</span>.isDarkMode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>data</strong> 包含可以在触发组件更新的数据。<br><strong>methods</strong> 包含可以触发数据更改的函数。</p>\n<p>后文中解释了需要作出的更改：</p>\n<blockquote>\n<p>为了让效果工作，我们需要的data属性是一个函数。这是 Vue组件的规则，并不是<code>App.vue</code>的规则。因此需要将当前数据属性替换为：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      isDarkMode: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>经查阅官方文档，了解到 data 必须是一个函数。</p>\n<blockquote>\n<p>当我们定义 <button-counter> 组件时，你可能会发现它的 data 并不是直接提供一个对象，取而代之的是，一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝。如果 Vue 没有这条规则，点击一个按钮就可能会影响到其它所有实例。</p>\n</blockquote>\n<p>解释得非常清楚，学习 <code>Vue.js</code> 等前端技术或许可以速成，但文档一定是不可或缺的一块。</p>\n<h2 id=\"配置全局样式\"><a href=\"#配置全局样式\" class=\"headerlink\" title=\"配置全局样式\"></a>配置全局样式</h2><p>可以在CSS <code>&lt;style&gt;</code>的开头导入<code>.css</code>文件，但对其进行配置可以使其用于整个项目的 Vue 文件。<br><code>vue.config.js</code> 是一个可选的配置文件，如果项目的 (和 <code>package.json</code> 同级的) 根目录中存在这个文件，那么它会被 <code>@vue/cli-service</code> 自动加载。<a href=\"https://cli.vuejs.org/zh/config/#chainwebpack\" target=\"_blank\" rel=\"noopener\">官方文档</a>详细解释了全局 CLI 配置方法。<br>教程指导做的是在项目的根目录中创建一个名为<code>vue.config.js</code>的文件，并且在此输入以下配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    css: &#123;</span><br><span class=\"line\">        loaderOptions: &#123;</span><br><span class=\"line\">            sass: &#123;</span><br><span class=\"line\">                data: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">                    @import \"@/global-styles/colors.scss\";</span></span><br><span class=\"line\"><span class=\"string\">                    @import \"@/global-styles/typography.scss\";</span></span><br><span class=\"line\"><span class=\"string\">                `</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果使用的是最新版本的 <code>Vue CLI</code>，尽管进行了到 <strong>Vue CLI &gt; in Project Tasks &gt; serve</strong> 重新运行任务，还是会提示报错无法运行。</p>\n<p>新版本的 <code>Vue CLI</code> 提供了 <code>Dart Sass</code> 与 <code>node-sass</code> 两种类型的 Sass 配置，在<code>sass-loader</code>的<a href=\"https://github.com/webpack-contrib/sass-loader\" target=\"_blank\" rel=\"noopener\">implementation</a>中两者有所不同。</p>\n<p>原因在于在 <code>sass-loader</code> v7 中，<code>prependData</code>选项名是 “data”，已经不适用。<br>默认情况下 <code>sass</code> 选项会同时对 <code>sass</code> 和 <code>scss</code> 语法同时生效，因为 <code>scss</code> 语法在内部也是由 sass-loader 处理的，但是在配置 <code>data</code> 选项的时候，<code>scss</code> 语法会要求语句结尾必须有分号，<code>sass</code> 则要求必须没有分号。在这种情况下，我们可以使用 <code>scss</code> 选项，对 <code>scss</code> 语法进行单独配置。实例代码来自<a href=\"https://cli.vuejs.org/zh/guide/css.html#css-modules\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  css: &#123;</span><br><span class=\"line\">    loaderOptions: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 给 sass-loader 传递选项</span></span><br><span class=\"line\">      sass: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// @/ 是 src/ 的别名</span></span><br><span class=\"line\">        <span class=\"comment\">// 假设存在 `src/variables.sass` 这个文件</span></span><br><span class=\"line\">        prependData: <span class=\"string\">`@import \"~@/variables.sass\"`</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      scss: &#123;</span><br><span class=\"line\">        prependData: <span class=\"string\">`@import \"~@/variables.scss\";`</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2>"},{"title":"控制器组件 Action 实验","date":"2020-02-26T03:10:20.000Z","_content":"\n\n## 知识梳理\n\n1、Action 类中的默认方法名是 execute()方法，可以被自动调用； \n\n2、在 Action 中也允许定义其它方法名，可以同时定义多个方法，分别处理不同的逻辑；\n\n3、当 Action 中使用了自定义方法，则该 Action 就需要特定的配置，一般有四种调用方式： \n\n- 在 struts.xml 文件中通过 method 属性指定方法名； \n- 使用动态方法调用方式（DMI）； \n- 使用提交按钮的 method 属性； \n- 使用通配符配置 Action； \n\n4、Action 类是多实例的，Action 类的属性是线程安全的； \n\n5、在 JSP 页面中，可以通过 Struts2 标签调用 Action 中对应的 getter 方法，从而输出 Action 的属性值； \n\n6、当一个 Action 处理用户请求结束后，返回一个字符串作为逻辑视图名，再通过 `struts.xml` 文件中的配置将逻辑视图名与物理视图资源关联起来；Struts2默认提供了一系列的结果类型（`struts-default.xml` 配置文件的 result-types 标签里列出了所支持的结果类型），结果类型决定了 Action 处理结束后，将调用哪种视图资源来呈现处理结果。\n\n7、为了让用户开发的 Action 类更规范，Struts2 提供了一个 Action 接口，该接口定义了 Struts2 的 Action 处理类应该实现的规范； \n\n8、Struts2 还为 Action 接口提供了一个实现类：ActionSupport，该类提供了若干默认方法，包括：默认的处理用户请求的方法（excute()方法）、数据校验的方法、添加校验错误信息的方法、获取国际化信息的方法等，部分重要方法列表如下：\n\n![](1.png)\n \n9、Struts2 框架提供了校验器和手工编码两种方式对请求参数进行数据校验，当 Action 类继承了 ActionSupport 类，就可以通过定义名为“<ActionClassName>- <ActionAliasName>-validation.xml”的校验规则文件的方法进行校验器校验， 也可以通过重写 ActionSupport 类的 validate()方法或 validateXxx()方法进行手动校验； \n\n10、在 JSP 页面中使用 Struts2 标签生成的表单，能将域级别的错误信息将自动显示到表单元素处； \n\n11、在 JSP 页面中使用 fielderror 标签，可以集中显示所有的域级错误信息；使用 actionerror 标签，可以显示所有的 Action 级别错误信息；使用 actionmessage 标签，可以显示 Action 消息； \n\n12、Struts2 框架中提供了部分内置的类型转换器，可以将请求参数的 String 类型转换成基本数据类型及对应的包装器类型、日期类型、数组类型、集合类型等，当 Action 类继承了 ActionSupport 类，则内置的类型转换器将默认生效，可以直接使用； \n\n13、如需修改默认的类型转换校验信息，则要在 Action 类的包中声明名为“Action 类名.properties”的局部属性文件； \n\n14、Struts2 框架同时支持自定义类型转换器，将请求参数转换成任意一种类型。\n\n15、Struts2 框架中的 Action 类没有与任何 Servlet API 耦合，因此 Action 类可以脱 离 Servlet 容器环境进行单元测试； \n\n16、ActionContext 是 `com.opensymphony.xwork2` 包中的一个类，该类表示一个 Action 运行时的上下文；\n\n17、当 Action 类需要通过请求、会话或上下文存取属性时，可以通过 ActionContext 类完成， 也可以通过实现 Struts 提供的接口：RequestAware、SessionAware 和 ApplicationAware 完成，而不必调用 Servlet API 中的 HttpServletRequest、 HttpSession 和 ServletContext 对象，从而保持 Action 与 Servlet API 的解耦； \n\n18、在 Action 类中直接访问 Servlet API， 可以通过实现 Struts2 提供的接口： ServletContextAware、ServletRequestAware、ServletResponseAware 完成，也可以通过 ServletActionContext 工具类实现，但 Action 将与 Servlet API 直接耦合。\n\n## 实验总结\n**1、总结 Action 自定义方法的四种调用和配置方式**\n\n- 在 `struts.xml` 文件中通过method属性指定方法名：以actionName.action形式访问，但是要配置多个action较为麻烦\n- 使用动态方法调用方式：以 actionName!methodName.action 形式访问，要注意UserAction下的login和register方法不能有相同的result返回值\n- 使用提交按钮的method属性：以actionName!methodName.action形式访问，但是需要在.jsp页面中配置，只能用于表单中\n- 使用通配符配置Action：以actionName.action形式访问，相对更为普遍的方式\n\n**2、Action 的实例化情况，将 Action 与 Servlet 在实例化情况上进行对比**\n\n在Struts2中每提交一次表单数据Action就被实例化一次，而Servlet在被创建时就被实例化，多次访问页面Servlet不会被多次实例化。\n\n**3、分析 JSP 文件中获取 Action 属性的主要过程**\n\nJSP 文件中获取 Action 属性以JavaBean来实现，所封装的属性和表单的属性一一对应，JavaBean将成为数据传递的载体来进行数据的传递。\n\n**4、观察两次 `loginSuccess.jsp` 页面输出上的区别，分析原因并记录下来**\nredirect采用客户端重定向的方式，而默认的dispatcher采用服务器内部跳转的方式，所以当result的type属性被设置为redirect时无法获取到Action中的count属性而dispatcher的方式可以。\n\n**5、解压缩 Struts2 的核心包 struts2-core-2.3.15.1.jar，找到 struts-`default.xml` 配置文件，在其中的 result-types 标签里列出了 Struts2 所支持的结果类型，查找相关资料，总结这些结果类型的作用和特点，并记录下来；**\n \n- chain：服务器内部跳转，调用其他action,完成自定义的拦截器堆栈和结果。只能请求action,如果请求视图资源会报错。\n- dispatcher: 默认值，服务器内部跳转(跳转到web组件)\n- freemarker：使用Freemarker模板引擎呈现一个视图\n- httpheader：通过设置HTTP headers和status的值来发送错误信息给客户端。\n- redirect: 作客户端重定向(重定向到web组件)\n- redirectAction: 作客户端重定向(重定向到其他Action)\n- stream:用作下载文件或者在浏览器上显示PDF等文档\n- velocity:使用Servlet容器的JspFactory,模拟JSP执行环境,显示Velocity模板,将直接传输到Servlet输出。\n- plaintext:响应以plain形式返回给客户端,相当于`response.setContentType(\"text/plain; charset=\"+charSet);`\n\n**6、总结 Action 类中 validate()方法和 validateXxx()方法的作用**\n\n-  validate()方法：将对页面表单验证的内容写到validate()方法中，实现验证和业务处理内容的分离，validate()方法会对Action类中所有业务方法起作用\n-  validateXxx()方法：当多个表单提交到同一个action页面是，validate()方法对所有表单生效，可以使用validateXxx()方法实现对某一个业务的验证，validate()方法和 validateXxx()方法同时存在时都会起作用；validateXxx()方法的调用优于validate()方法\n\n**7、总结使用校验器校验的方法；在 Struts2 的核心包 xwork-core-**\n**2.3.15.1.jar\\com\\opensymphony\\xwork2\\validator\\validators路径下找到 default.xml 文件，总结校验规则文件中主要元素的作用和配置方法**\n\n- required：必填校验器  \n- requiredstring：必填字符串校验器  \n- stringlength:字符串长度校验器 \n- date:日期校验器  \n- expression：表达式校验器  \n- int:整数校验器 \n- fieldexpression：字段表达式校验器\n- url:网址校验器  \n- regex：正则表达式校验器 \n\n```xml\n<validators>\n  <field name=\"被校验的字段\">\n     <field-validator type=\"校验器的类型\">\n        <param name=\"参数名\">参数值</param>\n         <message> 提示信息</message>\n     </field-validator>\n  </field>\n  <!--下一个要验证的字段--> \n</validators>\n```\n\n```xml\n<valiators>\n  <validator type=\"校验器类型名\">\n     <!--fieldName固定的 N必须大写-->\n     <param name=\"fieldName\">需要被校验的字段</param>\n      <!--下面的param元素可以有0个或者多个--> \n     <param name=\"参数名\">参数值</param>\n    <message key=\"I18NKey\">提示信息</message>\n  </validator>\n</validators>\n```\n\n**8、总结在 Action 中使用国际化资源文件的步骤及方法**\n\n首先创建不同语言环境下的.properties文件，在文件中写入不同key字段的国际化资源，使用ActionSupport类的getText方法，该方法可以接受一个name参数，指定国际化资源文件中的key数值，最后使用native2ascii工具进行处理。\n\n**9、总结 Struts2 中常用的内置类型转换器及其使用方法**\n\n- String:将int,double,boolean,String类型的数组或java.util.Date类型转换成字符串。\n- boolean和Boolean:在字符串与boolean之间转换\n- char/Character:在字符串和字符之间转换\n- int/Integer,float/Float,long/Long,double/Double:在字符串与数值类型之间进行转换 \n- date:在字符串和日期类型之间进行转换，默认格式是:YYYY-MM-DD\n- 数组:由于数组本身就有类型，可以将多个同名参数，转换到数组中(在之前总结的兴趣爱好多选择，如果你选择多个，同时他们name属性相同就自动变为数组)\n- 集合:支持将数据保存到List或者Map集合\n\n**10、观察 Action 中访问 Servlet API 的四种方法，总结四种方法的区别，并记录下来**\n\n- 通过ActionContext类访问：\n使用这种方法访问的前提是必须先要获取ActionContext对象，优点是Action和Servlet API完全解耦，缺点是并不能调用原生的Servlet API\n\n- Action直接访问:\n使用这种方法可以调用原生的Servlet API，但是需要实现对应的接口\n\n- \t通过ServletActionContext访问:\n使用ServletActionContext工具类无需实现接口，就可以直接访问Servlet API，但是会加强Action和Servlet API的耦合，不利于Action的再利用。\n\n- 实现ServletContextAware、ServletRequestAware、ServletResponseAware接口访问:\nAction与Servlet API直接耦合，需要调用ServletContext和ServletRequest等set方法。\n\n## 实验步骤\n### 基础实验\n\n1、新建 Web 工程 struts-prj2，并将 Struts2 中的 8 个核心包添加到工程中； \n\n2、在 struts-prj2 中新建 login.jsp 页面，作为用户登录的视图；新建 loginFail.jsp 页面，作为登录失败的视图；新建 loginSuccess.jsp 页面，作为登录成功的视图;\n\n3、在 struts-prj2 中新建 register.jsp 页面，作为用户注册的视图；新建regFail.jsp 页面，作为注册失败的视图；新建 regSuccess.jsp 页面，作为注册成功的视图;\n\n4、在 struts-prj2 中新建 cn.edu.zjut.bean 包，并在其中创建 UserBean.java，用于 记录用户信息 （可重用“实验二 Struts 基础应用 ”中提高实验里的 UserBean.java 代码）； \n\n5、在 struts-prj2 中新建 cn.edu.zjut.service 包，并在其中创UserService.java， 用于实现登录逻辑和注册逻辑;\n\n6、在 struts-prj2 中新建 cn.edu.zjut.action 包，并在其中创建 UserAction.java，定义login()方法和 register()方法\n\n7、在工程struts-prj2 的 src 目录中创建 struts.xml 文件，用于配置 Action 并设置 页面导航，通过 action 标签中 method 属性指定方法名；\n\n8、编辑 Web 应用的 web.xml 文件，增加 Struts2 核心 Filter 的配置； \n\n9、将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 与 register.jsp页面，并记录运行结果； \n\n10、查找相关资料， 尝试使用 Action 自定义方法的其它三种调用和配置方式：动态方法调用方式（DMI）、提交按钮的 method 属性、通配符配置 Action，并记录关键配置和运行结果； \n \n![](DMI.png)\n  \n![](button.png)\n \n![](uni.png)\n\n11、修改 UserAction.java，增加 UserAction 类的构造方法 UserAction()，增加 count属性，用于测试 Action 的实例化情况\n\n![](2.png)\n\n12、修改 `loginSuccess.jsp`，在页面中使用<s:property>标签输出 Action 中的 count 值； \n\n```\n<s:property value=\"count\" />\n```\n\n13、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 并刷新多次，记录运行结果； \n\n![](3.png)\n\n14、修改 struts.xml 文件，将 UserAction 的页面导航设置为 redirect 结果类型；\n\n```\n<result name=\"success\" type=\"redirect\">/loginSuccess.jsp</result>\n```\n\n15、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察登录成功后 loginSuccess.jsp 页面的输出，并记录下来。\n\n![](4.png)\n\n### 提高实验\n1、在 struts-prj2 中修改 UserAction 类，使其继承 ActionSupport 类，并在 UserAction 类中覆盖 ActionSupport 类的 validate()方法， 用于对用户登录的请求参 数 account 和 password 进行校验：若用户名或密码为空，则使用 addFieldError （域 级）添加错误信息。\n\n![](5.png)\n\n2、修改 `struts.xml` 文件，在 Action 的配置中增加 validate()方法校验出错时的页面导航`<result name=\"input\">`\n\n![](6.png)\n\n3、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `login.jsp` 页面，观察并记录运行结果；\n\n![](7.png)\n\n4、修改 `login.jsp` 页面，在表单前增加 fielderror 标签：`<s:fielderror/>`，再通过浏览器访问 login.jsp 页面，观察并记录运行结果\n\n![](8.png)\n\n5、修改 UserAction.java，在调用登录逻辑的 login()方法中，对登录情况进行校验： 若登录成功，使用 addActionMessage()方法添加“登录成功！”的 Action 提示消息，若 登录失败，使用 addActionError()方法添加 Action 级别的错误信息\n\n![](9.png)\n\n6、修改 login.jsp 页面，增加 actionerror 标签（<s:actionerror/>）Action 级别的 错 误信息；修改 `loginSuccess.jsp`，使用 actionmessage 标签`<s:actionmessage/>` 显示 Action 提示消息； \n\n7、修改 `struts.xml` 文件中用户登录的页面导航设置，将登录失败时转向的页面从 loginFail.jsp 修改为 login.jsp； \n\n8、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察并记录运行结果；\n\n![](10.png)\n\n9、在工程 struts-prj2 中创建“UserAction-login-validation.xml”校验规则文件，使 其与 UserAction 类位于同一目录下，配置校验信息，使用校验器对请求参数进行校验 \n\n10、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察并记录运行结果；\n\n![](11.png)\n\n11、将 login.jsp、 loginSuccess.jsp、 loginFail.jsp 三个页面进行国际化处理，把需要进行国际化的内容 以键值对的形式写入资源文件 `message_zh_CN.properties` 和 `message_en_US.properties` 中； \n\n12、在资源文件中添加校验信息的键值对， 并使用 native2ASCII 工具，将 `message_zh_CN.properties` 重新编码，将中文字符都转化为 unicode 码 \n\n13、在工程 struts-prj2 的 src 目录中创建 `struts.properties` 文件，通过它加载资源文件 \n\n14、修改 `UserAction.java`，使用 ActionSupport 类的 getText()方法，获取国际化资 源文件中的信息 \n\n15、修改 `UserAction-login-validation.xml`，获取国际化资源文件中的信息 \n\n16、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `login.jsp` 页面， 观察并记录运行结果；\n\n![](12.png)\n\n17、修改 `UserBean.java`，将用于保存注册用户生日的变量类型改为 Date 类型，使用 Struts2 内置的类型转换器对请求参数进行校验； \n\n18、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `register.jsp` 页 面，当用户输入的生日不合法时，观察并记录运行结果；\n\n![](13.png)\n\n19、在工程 struts-prj2 的 cn.edu.zjut.action 包中创建局部属性文件`UserAction.properties`，修改类型转换的校验信息，并使用 native2ASCII 工具将 `UserAction.properties` 重新编码 \n\n20、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `register.jsp` 页 面，当用户输入的生日不合法时，观察并记录运行结果；\n\n![](na.png)\n\n21、参考实验步骤 9，在工程 struts-prj2 的 cn.edu.zjut.action 包中创建 `UserAction-register-validation.xml` 文件，增加校验信息的配置，使用校验器对用户 注册的请求参数进行校验，要求注册时两次密码输入相同、email 地址格式符合要求等； \n\n22、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `register.jsp` 页 面，观察并记录运行结果；\n\n![](14.png)\n\n23、修改 UserAction 类， 将 validate()的方法名改为 validateLogin()， 并增加 validateRegister()方法，参考实验步骤 1，使用手工编码方式对请求参数进行数据校验； \n\n24、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `register.jsp` 页 面，观察并记录运行结果。\n\n![](15.png)\n\n### 拓展实验\n\n1、在 struts-prj2 中修改 UserAction 类，通过 ActionContext 获取请求、会话和上下文对象相关联的 Map 对象来实现存取属性的功能 \n\n2、修改 `loginSuccess.jsp` 页面，从请求、会话和上下文对象中获取属性值并显示 在页面中 \n\n3、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `login.jsp` 页面，观察并记录运行结果；\n\n![](16.png)\n\n**每提交一次刷新，次数就会增加一次，只有重新部署访问次数才会重置** \n\n4、修改 UserAction 类，通过实现 Struts 提供的接口：RequestAware、SessionAware 和 ApplicationAware，获取请求、会话和上下文对象相关联的 Map 对象来实现存取属性的功能 \n\n5、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `login.jsp` 页面，观察并记录运行结果；\n\n![](17.png)\n\n6、修改 UserAction 类，查找相关资料，尝试通过接口：ServletContextAware、 ServletRequestAware、ServletResponseAware 直接访问 Servlet API，实现以上实验步骤 1-3 的相同功能，重新运行并记录结果；\n\n![](18.png)\n\n![](19.png)\n\n\n7、修改 UserAction 类，查找相关资料，尝试通过 ServletActionContext 工具类直接访 问 Servlet API，实现以上实验步骤 1-3 的相同功能，重新运行并记录结果；\n\n![](20.png)\n\n![](21.png)\n\n8、尝试利用 Servlet API 添加购物车功能，在工程 struts-prj2 的 cn.edu.zjut.bean 包中创建 `Item.java` 用于记录商品信息\n\n9、在工程 struts-prj2 的 cn.edu.zjut.bean 包中创建 `ShopppingCart.java` 用于记录用户的购物车信息，为简化操作，在购物车的构造函数中加入商品信息 \n\n10、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `login.jsp `页面， 观察并记录运行结果。\n\n![](22.png)\n","source":"_posts/Action_Experiment.md","raw":"---\ntitle: 控制器组件 Action 实验\ndate: 2020-02-26 11:10:20\ncategories: \n- tech\ntags: \n- struts\n- Action\n- JavaEE\n- 总结\n- 实验\n---\n\n\n## 知识梳理\n\n1、Action 类中的默认方法名是 execute()方法，可以被自动调用； \n\n2、在 Action 中也允许定义其它方法名，可以同时定义多个方法，分别处理不同的逻辑；\n\n3、当 Action 中使用了自定义方法，则该 Action 就需要特定的配置，一般有四种调用方式： \n\n- 在 struts.xml 文件中通过 method 属性指定方法名； \n- 使用动态方法调用方式（DMI）； \n- 使用提交按钮的 method 属性； \n- 使用通配符配置 Action； \n\n4、Action 类是多实例的，Action 类的属性是线程安全的； \n\n5、在 JSP 页面中，可以通过 Struts2 标签调用 Action 中对应的 getter 方法，从而输出 Action 的属性值； \n\n6、当一个 Action 处理用户请求结束后，返回一个字符串作为逻辑视图名，再通过 `struts.xml` 文件中的配置将逻辑视图名与物理视图资源关联起来；Struts2默认提供了一系列的结果类型（`struts-default.xml` 配置文件的 result-types 标签里列出了所支持的结果类型），结果类型决定了 Action 处理结束后，将调用哪种视图资源来呈现处理结果。\n\n7、为了让用户开发的 Action 类更规范，Struts2 提供了一个 Action 接口，该接口定义了 Struts2 的 Action 处理类应该实现的规范； \n\n8、Struts2 还为 Action 接口提供了一个实现类：ActionSupport，该类提供了若干默认方法，包括：默认的处理用户请求的方法（excute()方法）、数据校验的方法、添加校验错误信息的方法、获取国际化信息的方法等，部分重要方法列表如下：\n\n![](1.png)\n \n9、Struts2 框架提供了校验器和手工编码两种方式对请求参数进行数据校验，当 Action 类继承了 ActionSupport 类，就可以通过定义名为“<ActionClassName>- <ActionAliasName>-validation.xml”的校验规则文件的方法进行校验器校验， 也可以通过重写 ActionSupport 类的 validate()方法或 validateXxx()方法进行手动校验； \n\n10、在 JSP 页面中使用 Struts2 标签生成的表单，能将域级别的错误信息将自动显示到表单元素处； \n\n11、在 JSP 页面中使用 fielderror 标签，可以集中显示所有的域级错误信息；使用 actionerror 标签，可以显示所有的 Action 级别错误信息；使用 actionmessage 标签，可以显示 Action 消息； \n\n12、Struts2 框架中提供了部分内置的类型转换器，可以将请求参数的 String 类型转换成基本数据类型及对应的包装器类型、日期类型、数组类型、集合类型等，当 Action 类继承了 ActionSupport 类，则内置的类型转换器将默认生效，可以直接使用； \n\n13、如需修改默认的类型转换校验信息，则要在 Action 类的包中声明名为“Action 类名.properties”的局部属性文件； \n\n14、Struts2 框架同时支持自定义类型转换器，将请求参数转换成任意一种类型。\n\n15、Struts2 框架中的 Action 类没有与任何 Servlet API 耦合，因此 Action 类可以脱 离 Servlet 容器环境进行单元测试； \n\n16、ActionContext 是 `com.opensymphony.xwork2` 包中的一个类，该类表示一个 Action 运行时的上下文；\n\n17、当 Action 类需要通过请求、会话或上下文存取属性时，可以通过 ActionContext 类完成， 也可以通过实现 Struts 提供的接口：RequestAware、SessionAware 和 ApplicationAware 完成，而不必调用 Servlet API 中的 HttpServletRequest、 HttpSession 和 ServletContext 对象，从而保持 Action 与 Servlet API 的解耦； \n\n18、在 Action 类中直接访问 Servlet API， 可以通过实现 Struts2 提供的接口： ServletContextAware、ServletRequestAware、ServletResponseAware 完成，也可以通过 ServletActionContext 工具类实现，但 Action 将与 Servlet API 直接耦合。\n\n## 实验总结\n**1、总结 Action 自定义方法的四种调用和配置方式**\n\n- 在 `struts.xml` 文件中通过method属性指定方法名：以actionName.action形式访问，但是要配置多个action较为麻烦\n- 使用动态方法调用方式：以 actionName!methodName.action 形式访问，要注意UserAction下的login和register方法不能有相同的result返回值\n- 使用提交按钮的method属性：以actionName!methodName.action形式访问，但是需要在.jsp页面中配置，只能用于表单中\n- 使用通配符配置Action：以actionName.action形式访问，相对更为普遍的方式\n\n**2、Action 的实例化情况，将 Action 与 Servlet 在实例化情况上进行对比**\n\n在Struts2中每提交一次表单数据Action就被实例化一次，而Servlet在被创建时就被实例化，多次访问页面Servlet不会被多次实例化。\n\n**3、分析 JSP 文件中获取 Action 属性的主要过程**\n\nJSP 文件中获取 Action 属性以JavaBean来实现，所封装的属性和表单的属性一一对应，JavaBean将成为数据传递的载体来进行数据的传递。\n\n**4、观察两次 `loginSuccess.jsp` 页面输出上的区别，分析原因并记录下来**\nredirect采用客户端重定向的方式，而默认的dispatcher采用服务器内部跳转的方式，所以当result的type属性被设置为redirect时无法获取到Action中的count属性而dispatcher的方式可以。\n\n**5、解压缩 Struts2 的核心包 struts2-core-2.3.15.1.jar，找到 struts-`default.xml` 配置文件，在其中的 result-types 标签里列出了 Struts2 所支持的结果类型，查找相关资料，总结这些结果类型的作用和特点，并记录下来；**\n \n- chain：服务器内部跳转，调用其他action,完成自定义的拦截器堆栈和结果。只能请求action,如果请求视图资源会报错。\n- dispatcher: 默认值，服务器内部跳转(跳转到web组件)\n- freemarker：使用Freemarker模板引擎呈现一个视图\n- httpheader：通过设置HTTP headers和status的值来发送错误信息给客户端。\n- redirect: 作客户端重定向(重定向到web组件)\n- redirectAction: 作客户端重定向(重定向到其他Action)\n- stream:用作下载文件或者在浏览器上显示PDF等文档\n- velocity:使用Servlet容器的JspFactory,模拟JSP执行环境,显示Velocity模板,将直接传输到Servlet输出。\n- plaintext:响应以plain形式返回给客户端,相当于`response.setContentType(\"text/plain; charset=\"+charSet);`\n\n**6、总结 Action 类中 validate()方法和 validateXxx()方法的作用**\n\n-  validate()方法：将对页面表单验证的内容写到validate()方法中，实现验证和业务处理内容的分离，validate()方法会对Action类中所有业务方法起作用\n-  validateXxx()方法：当多个表单提交到同一个action页面是，validate()方法对所有表单生效，可以使用validateXxx()方法实现对某一个业务的验证，validate()方法和 validateXxx()方法同时存在时都会起作用；validateXxx()方法的调用优于validate()方法\n\n**7、总结使用校验器校验的方法；在 Struts2 的核心包 xwork-core-**\n**2.3.15.1.jar\\com\\opensymphony\\xwork2\\validator\\validators路径下找到 default.xml 文件，总结校验规则文件中主要元素的作用和配置方法**\n\n- required：必填校验器  \n- requiredstring：必填字符串校验器  \n- stringlength:字符串长度校验器 \n- date:日期校验器  \n- expression：表达式校验器  \n- int:整数校验器 \n- fieldexpression：字段表达式校验器\n- url:网址校验器  \n- regex：正则表达式校验器 \n\n```xml\n<validators>\n  <field name=\"被校验的字段\">\n     <field-validator type=\"校验器的类型\">\n        <param name=\"参数名\">参数值</param>\n         <message> 提示信息</message>\n     </field-validator>\n  </field>\n  <!--下一个要验证的字段--> \n</validators>\n```\n\n```xml\n<valiators>\n  <validator type=\"校验器类型名\">\n     <!--fieldName固定的 N必须大写-->\n     <param name=\"fieldName\">需要被校验的字段</param>\n      <!--下面的param元素可以有0个或者多个--> \n     <param name=\"参数名\">参数值</param>\n    <message key=\"I18NKey\">提示信息</message>\n  </validator>\n</validators>\n```\n\n**8、总结在 Action 中使用国际化资源文件的步骤及方法**\n\n首先创建不同语言环境下的.properties文件，在文件中写入不同key字段的国际化资源，使用ActionSupport类的getText方法，该方法可以接受一个name参数，指定国际化资源文件中的key数值，最后使用native2ascii工具进行处理。\n\n**9、总结 Struts2 中常用的内置类型转换器及其使用方法**\n\n- String:将int,double,boolean,String类型的数组或java.util.Date类型转换成字符串。\n- boolean和Boolean:在字符串与boolean之间转换\n- char/Character:在字符串和字符之间转换\n- int/Integer,float/Float,long/Long,double/Double:在字符串与数值类型之间进行转换 \n- date:在字符串和日期类型之间进行转换，默认格式是:YYYY-MM-DD\n- 数组:由于数组本身就有类型，可以将多个同名参数，转换到数组中(在之前总结的兴趣爱好多选择，如果你选择多个，同时他们name属性相同就自动变为数组)\n- 集合:支持将数据保存到List或者Map集合\n\n**10、观察 Action 中访问 Servlet API 的四种方法，总结四种方法的区别，并记录下来**\n\n- 通过ActionContext类访问：\n使用这种方法访问的前提是必须先要获取ActionContext对象，优点是Action和Servlet API完全解耦，缺点是并不能调用原生的Servlet API\n\n- Action直接访问:\n使用这种方法可以调用原生的Servlet API，但是需要实现对应的接口\n\n- \t通过ServletActionContext访问:\n使用ServletActionContext工具类无需实现接口，就可以直接访问Servlet API，但是会加强Action和Servlet API的耦合，不利于Action的再利用。\n\n- 实现ServletContextAware、ServletRequestAware、ServletResponseAware接口访问:\nAction与Servlet API直接耦合，需要调用ServletContext和ServletRequest等set方法。\n\n## 实验步骤\n### 基础实验\n\n1、新建 Web 工程 struts-prj2，并将 Struts2 中的 8 个核心包添加到工程中； \n\n2、在 struts-prj2 中新建 login.jsp 页面，作为用户登录的视图；新建 loginFail.jsp 页面，作为登录失败的视图；新建 loginSuccess.jsp 页面，作为登录成功的视图;\n\n3、在 struts-prj2 中新建 register.jsp 页面，作为用户注册的视图；新建regFail.jsp 页面，作为注册失败的视图；新建 regSuccess.jsp 页面，作为注册成功的视图;\n\n4、在 struts-prj2 中新建 cn.edu.zjut.bean 包，并在其中创建 UserBean.java，用于 记录用户信息 （可重用“实验二 Struts 基础应用 ”中提高实验里的 UserBean.java 代码）； \n\n5、在 struts-prj2 中新建 cn.edu.zjut.service 包，并在其中创UserService.java， 用于实现登录逻辑和注册逻辑;\n\n6、在 struts-prj2 中新建 cn.edu.zjut.action 包，并在其中创建 UserAction.java，定义login()方法和 register()方法\n\n7、在工程struts-prj2 的 src 目录中创建 struts.xml 文件，用于配置 Action 并设置 页面导航，通过 action 标签中 method 属性指定方法名；\n\n8、编辑 Web 应用的 web.xml 文件，增加 Struts2 核心 Filter 的配置； \n\n9、将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 与 register.jsp页面，并记录运行结果； \n\n10、查找相关资料， 尝试使用 Action 自定义方法的其它三种调用和配置方式：动态方法调用方式（DMI）、提交按钮的 method 属性、通配符配置 Action，并记录关键配置和运行结果； \n \n![](DMI.png)\n  \n![](button.png)\n \n![](uni.png)\n\n11、修改 UserAction.java，增加 UserAction 类的构造方法 UserAction()，增加 count属性，用于测试 Action 的实例化情况\n\n![](2.png)\n\n12、修改 `loginSuccess.jsp`，在页面中使用<s:property>标签输出 Action 中的 count 值； \n\n```\n<s:property value=\"count\" />\n```\n\n13、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 并刷新多次，记录运行结果； \n\n![](3.png)\n\n14、修改 struts.xml 文件，将 UserAction 的页面导航设置为 redirect 结果类型；\n\n```\n<result name=\"success\" type=\"redirect\">/loginSuccess.jsp</result>\n```\n\n15、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察登录成功后 loginSuccess.jsp 页面的输出，并记录下来。\n\n![](4.png)\n\n### 提高实验\n1、在 struts-prj2 中修改 UserAction 类，使其继承 ActionSupport 类，并在 UserAction 类中覆盖 ActionSupport 类的 validate()方法， 用于对用户登录的请求参 数 account 和 password 进行校验：若用户名或密码为空，则使用 addFieldError （域 级）添加错误信息。\n\n![](5.png)\n\n2、修改 `struts.xml` 文件，在 Action 的配置中增加 validate()方法校验出错时的页面导航`<result name=\"input\">`\n\n![](6.png)\n\n3、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `login.jsp` 页面，观察并记录运行结果；\n\n![](7.png)\n\n4、修改 `login.jsp` 页面，在表单前增加 fielderror 标签：`<s:fielderror/>`，再通过浏览器访问 login.jsp 页面，观察并记录运行结果\n\n![](8.png)\n\n5、修改 UserAction.java，在调用登录逻辑的 login()方法中，对登录情况进行校验： 若登录成功，使用 addActionMessage()方法添加“登录成功！”的 Action 提示消息，若 登录失败，使用 addActionError()方法添加 Action 级别的错误信息\n\n![](9.png)\n\n6、修改 login.jsp 页面，增加 actionerror 标签（<s:actionerror/>）Action 级别的 错 误信息；修改 `loginSuccess.jsp`，使用 actionmessage 标签`<s:actionmessage/>` 显示 Action 提示消息； \n\n7、修改 `struts.xml` 文件中用户登录的页面导航设置，将登录失败时转向的页面从 loginFail.jsp 修改为 login.jsp； \n\n8、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察并记录运行结果；\n\n![](10.png)\n\n9、在工程 struts-prj2 中创建“UserAction-login-validation.xml”校验规则文件，使 其与 UserAction 类位于同一目录下，配置校验信息，使用校验器对请求参数进行校验 \n\n10、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察并记录运行结果；\n\n![](11.png)\n\n11、将 login.jsp、 loginSuccess.jsp、 loginFail.jsp 三个页面进行国际化处理，把需要进行国际化的内容 以键值对的形式写入资源文件 `message_zh_CN.properties` 和 `message_en_US.properties` 中； \n\n12、在资源文件中添加校验信息的键值对， 并使用 native2ASCII 工具，将 `message_zh_CN.properties` 重新编码，将中文字符都转化为 unicode 码 \n\n13、在工程 struts-prj2 的 src 目录中创建 `struts.properties` 文件，通过它加载资源文件 \n\n14、修改 `UserAction.java`，使用 ActionSupport 类的 getText()方法，获取国际化资 源文件中的信息 \n\n15、修改 `UserAction-login-validation.xml`，获取国际化资源文件中的信息 \n\n16、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `login.jsp` 页面， 观察并记录运行结果；\n\n![](12.png)\n\n17、修改 `UserBean.java`，将用于保存注册用户生日的变量类型改为 Date 类型，使用 Struts2 内置的类型转换器对请求参数进行校验； \n\n18、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `register.jsp` 页 面，当用户输入的生日不合法时，观察并记录运行结果；\n\n![](13.png)\n\n19、在工程 struts-prj2 的 cn.edu.zjut.action 包中创建局部属性文件`UserAction.properties`，修改类型转换的校验信息，并使用 native2ASCII 工具将 `UserAction.properties` 重新编码 \n\n20、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `register.jsp` 页 面，当用户输入的生日不合法时，观察并记录运行结果；\n\n![](na.png)\n\n21、参考实验步骤 9，在工程 struts-prj2 的 cn.edu.zjut.action 包中创建 `UserAction-register-validation.xml` 文件，增加校验信息的配置，使用校验器对用户 注册的请求参数进行校验，要求注册时两次密码输入相同、email 地址格式符合要求等； \n\n22、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `register.jsp` 页 面，观察并记录运行结果；\n\n![](14.png)\n\n23、修改 UserAction 类， 将 validate()的方法名改为 validateLogin()， 并增加 validateRegister()方法，参考实验步骤 1，使用手工编码方式对请求参数进行数据校验； \n\n24、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `register.jsp` 页 面，观察并记录运行结果。\n\n![](15.png)\n\n### 拓展实验\n\n1、在 struts-prj2 中修改 UserAction 类，通过 ActionContext 获取请求、会话和上下文对象相关联的 Map 对象来实现存取属性的功能 \n\n2、修改 `loginSuccess.jsp` 页面，从请求、会话和上下文对象中获取属性值并显示 在页面中 \n\n3、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `login.jsp` 页面，观察并记录运行结果；\n\n![](16.png)\n\n**每提交一次刷新，次数就会增加一次，只有重新部署访问次数才会重置** \n\n4、修改 UserAction 类，通过实现 Struts 提供的接口：RequestAware、SessionAware 和 ApplicationAware，获取请求、会话和上下文对象相关联的 Map 对象来实现存取属性的功能 \n\n5、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `login.jsp` 页面，观察并记录运行结果；\n\n![](17.png)\n\n6、修改 UserAction 类，查找相关资料，尝试通过接口：ServletContextAware、 ServletRequestAware、ServletResponseAware 直接访问 Servlet API，实现以上实验步骤 1-3 的相同功能，重新运行并记录结果；\n\n![](18.png)\n\n![](19.png)\n\n\n7、修改 UserAction 类，查找相关资料，尝试通过 ServletActionContext 工具类直接访 问 Servlet API，实现以上实验步骤 1-3 的相同功能，重新运行并记录结果；\n\n![](20.png)\n\n![](21.png)\n\n8、尝试利用 Servlet API 添加购物车功能，在工程 struts-prj2 的 cn.edu.zjut.bean 包中创建 `Item.java` 用于记录商品信息\n\n9、在工程 struts-prj2 的 cn.edu.zjut.bean 包中创建 `ShopppingCart.java` 用于记录用户的购物车信息，为简化操作，在购物车的构造函数中加入商品信息 \n\n10、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 `login.jsp `页面， 观察并记录运行结果。\n\n![](22.png)\n","slug":"Action_Experiment","published":1,"updated":"2020-02-27T11:40:33.846Z","_id":"ck74gdjif00000d6bcx6s3q1s","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"知识梳理\"><a href=\"#知识梳理\" class=\"headerlink\" title=\"知识梳理\"></a>知识梳理</h2><p>1、Action 类中的默认方法名是 execute()方法，可以被自动调用； </p>\n<p>2、在 Action 中也允许定义其它方法名，可以同时定义多个方法，分别处理不同的逻辑；</p>\n<p>3、当 Action 中使用了自定义方法，则该 Action 就需要特定的配置，一般有四种调用方式： </p>\n<ul>\n<li>在 struts.xml 文件中通过 method 属性指定方法名； </li>\n<li>使用动态方法调用方式（DMI）； </li>\n<li>使用提交按钮的 method 属性； </li>\n<li>使用通配符配置 Action； </li>\n</ul>\n<p>4、Action 类是多实例的，Action 类的属性是线程安全的； </p>\n<p>5、在 JSP 页面中，可以通过 Struts2 标签调用 Action 中对应的 getter 方法，从而输出 Action 的属性值； </p>\n<p>6、当一个 Action 处理用户请求结束后，返回一个字符串作为逻辑视图名，再通过 <code>struts.xml</code> 文件中的配置将逻辑视图名与物理视图资源关联起来；Struts2默认提供了一系列的结果类型（<code>struts-default.xml</code> 配置文件的 result-types 标签里列出了所支持的结果类型），结果类型决定了 Action 处理结束后，将调用哪种视图资源来呈现处理结果。</p>\n<p>7、为了让用户开发的 Action 类更规范，Struts2 提供了一个 Action 接口，该接口定义了 Struts2 的 Action 处理类应该实现的规范； </p>\n<p>8、Struts2 还为 Action 接口提供了一个实现类：ActionSupport，该类提供了若干默认方法，包括：默认的处理用户请求的方法（excute()方法）、数据校验的方法、添加校验错误信息的方法、获取国际化信息的方法等，部分重要方法列表如下：</p>\n<p><img src=\"1.png\" alt=\"\"></p>\n<p>9、Struts2 框架提供了校验器和手工编码两种方式对请求参数进行数据校验，当 Action 类继承了 ActionSupport 类，就可以通过定义名为“<ActionClassName>- <ActionAliasName>-validation.xml”的校验规则文件的方法进行校验器校验， 也可以通过重写 ActionSupport 类的 validate()方法或 validateXxx()方法进行手动校验； </p>\n<p>10、在 JSP 页面中使用 Struts2 标签生成的表单，能将域级别的错误信息将自动显示到表单元素处； </p>\n<p>11、在 JSP 页面中使用 fielderror 标签，可以集中显示所有的域级错误信息；使用 actionerror 标签，可以显示所有的 Action 级别错误信息；使用 actionmessage 标签，可以显示 Action 消息； </p>\n<p>12、Struts2 框架中提供了部分内置的类型转换器，可以将请求参数的 String 类型转换成基本数据类型及对应的包装器类型、日期类型、数组类型、集合类型等，当 Action 类继承了 ActionSupport 类，则内置的类型转换器将默认生效，可以直接使用； </p>\n<p>13、如需修改默认的类型转换校验信息，则要在 Action 类的包中声明名为“Action 类名.properties”的局部属性文件； </p>\n<p>14、Struts2 框架同时支持自定义类型转换器，将请求参数转换成任意一种类型。</p>\n<p>15、Struts2 框架中的 Action 类没有与任何 Servlet API 耦合，因此 Action 类可以脱 离 Servlet 容器环境进行单元测试； </p>\n<p>16、ActionContext 是 <code>com.opensymphony.xwork2</code> 包中的一个类，该类表示一个 Action 运行时的上下文；</p>\n<p>17、当 Action 类需要通过请求、会话或上下文存取属性时，可以通过 ActionContext 类完成， 也可以通过实现 Struts 提供的接口：RequestAware、SessionAware 和 ApplicationAware 完成，而不必调用 Servlet API 中的 HttpServletRequest、 HttpSession 和 ServletContext 对象，从而保持 Action 与 Servlet API 的解耦； </p>\n<p>18、在 Action 类中直接访问 Servlet API， 可以通过实现 Struts2 提供的接口： ServletContextAware、ServletRequestAware、ServletResponseAware 完成，也可以通过 ServletActionContext 工具类实现，但 Action 将与 Servlet API 直接耦合。</p>\n<h2 id=\"实验总结\"><a href=\"#实验总结\" class=\"headerlink\" title=\"实验总结\"></a>实验总结</h2><p><strong>1、总结 Action 自定义方法的四种调用和配置方式</strong></p>\n<ul>\n<li>在 <code>struts.xml</code> 文件中通过method属性指定方法名：以actionName.action形式访问，但是要配置多个action较为麻烦</li>\n<li>使用动态方法调用方式：以 actionName!methodName.action 形式访问，要注意UserAction下的login和register方法不能有相同的result返回值</li>\n<li>使用提交按钮的method属性：以actionName!methodName.action形式访问，但是需要在.jsp页面中配置，只能用于表单中</li>\n<li>使用通配符配置Action：以actionName.action形式访问，相对更为普遍的方式</li>\n</ul>\n<p><strong>2、Action 的实例化情况，将 Action 与 Servlet 在实例化情况上进行对比</strong></p>\n<p>在Struts2中每提交一次表单数据Action就被实例化一次，而Servlet在被创建时就被实例化，多次访问页面Servlet不会被多次实例化。</p>\n<p><strong>3、分析 JSP 文件中获取 Action 属性的主要过程</strong></p>\n<p>JSP 文件中获取 Action 属性以JavaBean来实现，所封装的属性和表单的属性一一对应，JavaBean将成为数据传递的载体来进行数据的传递。</p>\n<p><strong>4、观察两次 <code>loginSuccess.jsp</code> 页面输出上的区别，分析原因并记录下来</strong><br>redirect采用客户端重定向的方式，而默认的dispatcher采用服务器内部跳转的方式，所以当result的type属性被设置为redirect时无法获取到Action中的count属性而dispatcher的方式可以。</p>\n<p><strong>5、解压缩 Struts2 的核心包 struts2-core-2.3.15.1.jar，找到 struts-<code>default.xml</code> 配置文件，在其中的 result-types 标签里列出了 Struts2 所支持的结果类型，查找相关资料，总结这些结果类型的作用和特点，并记录下来；</strong></p>\n<ul>\n<li>chain：服务器内部跳转，调用其他action,完成自定义的拦截器堆栈和结果。只能请求action,如果请求视图资源会报错。</li>\n<li>dispatcher: 默认值，服务器内部跳转(跳转到web组件)</li>\n<li>freemarker：使用Freemarker模板引擎呈现一个视图</li>\n<li>httpheader：通过设置HTTP headers和status的值来发送错误信息给客户端。</li>\n<li>redirect: 作客户端重定向(重定向到web组件)</li>\n<li>redirectAction: 作客户端重定向(重定向到其他Action)</li>\n<li>stream:用作下载文件或者在浏览器上显示PDF等文档</li>\n<li>velocity:使用Servlet容器的JspFactory,模拟JSP执行环境,显示Velocity模板,将直接传输到Servlet输出。</li>\n<li>plaintext:响应以plain形式返回给客户端,相当于<code>response.setContentType(&quot;text/plain; charset=&quot;+charSet);</code></li>\n</ul>\n<p><strong>6、总结 Action 类中 validate()方法和 validateXxx()方法的作用</strong></p>\n<ul>\n<li>validate()方法：将对页面表单验证的内容写到validate()方法中，实现验证和业务处理内容的分离，validate()方法会对Action类中所有业务方法起作用</li>\n<li>validateXxx()方法：当多个表单提交到同一个action页面是，validate()方法对所有表单生效，可以使用validateXxx()方法实现对某一个业务的验证，validate()方法和 validateXxx()方法同时存在时都会起作用；validateXxx()方法的调用优于validate()方法</li>\n</ul>\n<p><strong>7、总结使用校验器校验的方法；在 Struts2 的核心包 xwork-core-</strong><br><strong>2.3.15.1.jar\\com\\opensymphony\\xwork2\\validator\\validators路径下找到 default.xml 文件，总结校验规则文件中主要元素的作用和配置方法</strong></p>\n<ul>\n<li>required：必填校验器  </li>\n<li>requiredstring：必填字符串校验器  </li>\n<li>stringlength:字符串长度校验器 </li>\n<li>date:日期校验器  </li>\n<li>expression：表达式校验器  </li>\n<li>int:整数校验器 </li>\n<li>fieldexpression：字段表达式校验器</li>\n<li>url:网址校验器  </li>\n<li>regex：正则表达式校验器 </li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">validators</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">field</span> <span class=\"attr\">name</span>=<span class=\"string\">\"被校验的字段\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">field-validator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"校验器的类型\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"参数名\"</span>&gt;</span>参数值<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">message</span>&gt;</span> 提示信息<span class=\"tag\">&lt;/<span class=\"name\">message</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">field-validator</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">field</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--下一个要验证的字段--&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">validators</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">valiators</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"校验器类型名\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--fieldName固定的 N必须大写--&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fieldName\"</span>&gt;</span>需要被校验的字段<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--下面的param元素可以有0个或者多个--&gt;</span> </span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"参数名\"</span>&gt;</span>参数值<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">message</span> <span class=\"attr\">key</span>=<span class=\"string\">\"I18NKey\"</span>&gt;</span>提示信息<span class=\"tag\">&lt;/<span class=\"name\">message</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">validator</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">validators</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>8、总结在 Action 中使用国际化资源文件的步骤及方法</strong></p>\n<p>首先创建不同语言环境下的.properties文件，在文件中写入不同key字段的国际化资源，使用ActionSupport类的getText方法，该方法可以接受一个name参数，指定国际化资源文件中的key数值，最后使用native2ascii工具进行处理。</p>\n<p><strong>9、总结 Struts2 中常用的内置类型转换器及其使用方法</strong></p>\n<ul>\n<li>String:将int,double,boolean,String类型的数组或java.util.Date类型转换成字符串。</li>\n<li>boolean和Boolean:在字符串与boolean之间转换</li>\n<li>char/Character:在字符串和字符之间转换</li>\n<li>int/Integer,float/Float,long/Long,double/Double:在字符串与数值类型之间进行转换 </li>\n<li>date:在字符串和日期类型之间进行转换，默认格式是:YYYY-MM-DD</li>\n<li>数组:由于数组本身就有类型，可以将多个同名参数，转换到数组中(在之前总结的兴趣爱好多选择，如果你选择多个，同时他们name属性相同就自动变为数组)</li>\n<li>集合:支持将数据保存到List或者Map集合</li>\n</ul>\n<p><strong>10、观察 Action 中访问 Servlet API 的四种方法，总结四种方法的区别，并记录下来</strong></p>\n<ul>\n<li><p>通过ActionContext类访问：<br>使用这种方法访问的前提是必须先要获取ActionContext对象，优点是Action和Servlet API完全解耦，缺点是并不能调用原生的Servlet API</p>\n</li>\n<li><p>Action直接访问:<br>使用这种方法可以调用原生的Servlet API，但是需要实现对应的接口</p>\n</li>\n<li><p>通过ServletActionContext访问:<br>使用ServletActionContext工具类无需实现接口，就可以直接访问Servlet API，但是会加强Action和Servlet API的耦合，不利于Action的再利用。</p>\n</li>\n<li><p>实现ServletContextAware、ServletRequestAware、ServletResponseAware接口访问:<br>Action与Servlet API直接耦合，需要调用ServletContext和ServletRequest等set方法。</p>\n</li>\n</ul>\n<h2 id=\"实验步骤\"><a href=\"#实验步骤\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h2><h3 id=\"基础实验\"><a href=\"#基础实验\" class=\"headerlink\" title=\"基础实验\"></a>基础实验</h3><p>1、新建 Web 工程 struts-prj2，并将 Struts2 中的 8 个核心包添加到工程中； </p>\n<p>2、在 struts-prj2 中新建 login.jsp 页面，作为用户登录的视图；新建 loginFail.jsp 页面，作为登录失败的视图；新建 loginSuccess.jsp 页面，作为登录成功的视图;</p>\n<p>3、在 struts-prj2 中新建 register.jsp 页面，作为用户注册的视图；新建regFail.jsp 页面，作为注册失败的视图；新建 regSuccess.jsp 页面，作为注册成功的视图;</p>\n<p>4、在 struts-prj2 中新建 cn.edu.zjut.bean 包，并在其中创建 UserBean.java，用于 记录用户信息 （可重用“实验二 Struts 基础应用 ”中提高实验里的 UserBean.java 代码）； </p>\n<p>5、在 struts-prj2 中新建 cn.edu.zjut.service 包，并在其中创UserService.java， 用于实现登录逻辑和注册逻辑;</p>\n<p>6、在 struts-prj2 中新建 cn.edu.zjut.action 包，并在其中创建 UserAction.java，定义login()方法和 register()方法</p>\n<p>7、在工程struts-prj2 的 src 目录中创建 struts.xml 文件，用于配置 Action 并设置 页面导航，通过 action 标签中 method 属性指定方法名；</p>\n<p>8、编辑 Web 应用的 web.xml 文件，增加 Struts2 核心 Filter 的配置； </p>\n<p>9、将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 与 register.jsp页面，并记录运行结果； </p>\n<p>10、查找相关资料， 尝试使用 Action 自定义方法的其它三种调用和配置方式：动态方法调用方式（DMI）、提交按钮的 method 属性、通配符配置 Action，并记录关键配置和运行结果； </p>\n<p><img src=\"DMI.png\" alt=\"\"></p>\n<p><img src=\"button.png\" alt=\"\"></p>\n<p><img src=\"uni.png\" alt=\"\"></p>\n<p>11、修改 UserAction.java，增加 UserAction 类的构造方法 UserAction()，增加 count属性，用于测试 Action 的实例化情况</p>\n<p><img src=\"2.png\" alt=\"\"></p>\n<p>12、修改 <code>loginSuccess.jsp</code>，在页面中使用&lt;s:property&gt;标签输出 Action 中的 count 值； </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;s:property value&#x3D;&quot;count&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>13、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 并刷新多次，记录运行结果； </p>\n<p><img src=\"3.png\" alt=\"\"></p>\n<p>14、修改 struts.xml 文件，将 UserAction 的页面导航设置为 redirect 结果类型；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;redirect&quot;&gt;&#x2F;loginSuccess.jsp&lt;&#x2F;result&gt;</span><br></pre></td></tr></table></figure>\n\n<p>15、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察登录成功后 loginSuccess.jsp 页面的输出，并记录下来。</p>\n<p><img src=\"4.png\" alt=\"\"></p>\n<h3 id=\"提高实验\"><a href=\"#提高实验\" class=\"headerlink\" title=\"提高实验\"></a>提高实验</h3><p>1、在 struts-prj2 中修改 UserAction 类，使其继承 ActionSupport 类，并在 UserAction 类中覆盖 ActionSupport 类的 validate()方法， 用于对用户登录的请求参 数 account 和 password 进行校验：若用户名或密码为空，则使用 addFieldError （域 级）添加错误信息。</p>\n<p><img src=\"5.png\" alt=\"\"></p>\n<p>2、修改 <code>struts.xml</code> 文件，在 Action 的配置中增加 validate()方法校验出错时的页面导航<code>&lt;result name=&quot;input&quot;&gt;</code></p>\n<p><img src=\"6.png\" alt=\"\"></p>\n<p>3、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>login.jsp</code> 页面，观察并记录运行结果；</p>\n<p><img src=\"7.png\" alt=\"\"></p>\n<p>4、修改 <code>login.jsp</code> 页面，在表单前增加 fielderror 标签：<code>&lt;s:fielderror/&gt;</code>，再通过浏览器访问 login.jsp 页面，观察并记录运行结果</p>\n<p><img src=\"8.png\" alt=\"\"></p>\n<p>5、修改 UserAction.java，在调用登录逻辑的 login()方法中，对登录情况进行校验： 若登录成功，使用 addActionMessage()方法添加“登录成功！”的 Action 提示消息，若 登录失败，使用 addActionError()方法添加 Action 级别的错误信息</p>\n<p><img src=\"9.png\" alt=\"\"></p>\n<p>6、修改 login.jsp 页面，增加 actionerror 标签（&lt;s:actionerror/&gt;）Action 级别的 错 误信息；修改 <code>loginSuccess.jsp</code>，使用 actionmessage 标签<code>&lt;s:actionmessage/&gt;</code> 显示 Action 提示消息； </p>\n<p>7、修改 <code>struts.xml</code> 文件中用户登录的页面导航设置，将登录失败时转向的页面从 loginFail.jsp 修改为 login.jsp； </p>\n<p>8、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察并记录运行结果；</p>\n<p><img src=\"10.png\" alt=\"\"></p>\n<p>9、在工程 struts-prj2 中创建“UserAction-login-validation.xml”校验规则文件，使 其与 UserAction 类位于同一目录下，配置校验信息，使用校验器对请求参数进行校验 </p>\n<p>10、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察并记录运行结果；</p>\n<p><img src=\"11.png\" alt=\"\"></p>\n<p>11、将 login.jsp、 loginSuccess.jsp、 loginFail.jsp 三个页面进行国际化处理，把需要进行国际化的内容 以键值对的形式写入资源文件 <code>message_zh_CN.properties</code> 和 <code>message_en_US.properties</code> 中； </p>\n<p>12、在资源文件中添加校验信息的键值对， 并使用 native2ASCII 工具，将 <code>message_zh_CN.properties</code> 重新编码，将中文字符都转化为 unicode 码 </p>\n<p>13、在工程 struts-prj2 的 src 目录中创建 <code>struts.properties</code> 文件，通过它加载资源文件 </p>\n<p>14、修改 <code>UserAction.java</code>，使用 ActionSupport 类的 getText()方法，获取国际化资 源文件中的信息 </p>\n<p>15、修改 <code>UserAction-login-validation.xml</code>，获取国际化资源文件中的信息 </p>\n<p>16、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>login.jsp</code> 页面， 观察并记录运行结果；</p>\n<p><img src=\"12.png\" alt=\"\"></p>\n<p>17、修改 <code>UserBean.java</code>，将用于保存注册用户生日的变量类型改为 Date 类型，使用 Struts2 内置的类型转换器对请求参数进行校验； </p>\n<p>18、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>register.jsp</code> 页 面，当用户输入的生日不合法时，观察并记录运行结果；</p>\n<p><img src=\"13.png\" alt=\"\"></p>\n<p>19、在工程 struts-prj2 的 cn.edu.zjut.action 包中创建局部属性文件<code>UserAction.properties</code>，修改类型转换的校验信息，并使用 native2ASCII 工具将 <code>UserAction.properties</code> 重新编码 </p>\n<p>20、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>register.jsp</code> 页 面，当用户输入的生日不合法时，观察并记录运行结果；</p>\n<p><img src=\"na.png\" alt=\"\"></p>\n<p>21、参考实验步骤 9，在工程 struts-prj2 的 cn.edu.zjut.action 包中创建 <code>UserAction-register-validation.xml</code> 文件，增加校验信息的配置，使用校验器对用户 注册的请求参数进行校验，要求注册时两次密码输入相同、email 地址格式符合要求等； </p>\n<p>22、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>register.jsp</code> 页 面，观察并记录运行结果；</p>\n<p><img src=\"14.png\" alt=\"\"></p>\n<p>23、修改 UserAction 类， 将 validate()的方法名改为 validateLogin()， 并增加 validateRegister()方法，参考实验步骤 1，使用手工编码方式对请求参数进行数据校验； </p>\n<p>24、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>register.jsp</code> 页 面，观察并记录运行结果。</p>\n<p><img src=\"15.png\" alt=\"\"></p>\n<h3 id=\"拓展实验\"><a href=\"#拓展实验\" class=\"headerlink\" title=\"拓展实验\"></a>拓展实验</h3><p>1、在 struts-prj2 中修改 UserAction 类，通过 ActionContext 获取请求、会话和上下文对象相关联的 Map 对象来实现存取属性的功能 </p>\n<p>2、修改 <code>loginSuccess.jsp</code> 页面，从请求、会话和上下文对象中获取属性值并显示 在页面中 </p>\n<p>3、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>login.jsp</code> 页面，观察并记录运行结果；</p>\n<p><img src=\"16.png\" alt=\"\"></p>\n<p><strong>每提交一次刷新，次数就会增加一次，只有重新部署访问次数才会重置</strong> </p>\n<p>4、修改 UserAction 类，通过实现 Struts 提供的接口：RequestAware、SessionAware 和 ApplicationAware，获取请求、会话和上下文对象相关联的 Map 对象来实现存取属性的功能 </p>\n<p>5、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>login.jsp</code> 页面，观察并记录运行结果；</p>\n<p><img src=\"17.png\" alt=\"\"></p>\n<p>6、修改 UserAction 类，查找相关资料，尝试通过接口：ServletContextAware、 ServletRequestAware、ServletResponseAware 直接访问 Servlet API，实现以上实验步骤 1-3 的相同功能，重新运行并记录结果；</p>\n<p><img src=\"18.png\" alt=\"\"></p>\n<p><img src=\"19.png\" alt=\"\"></p>\n<p>7、修改 UserAction 类，查找相关资料，尝试通过 ServletActionContext 工具类直接访 问 Servlet API，实现以上实验步骤 1-3 的相同功能，重新运行并记录结果；</p>\n<p><img src=\"20.png\" alt=\"\"></p>\n<p><img src=\"21.png\" alt=\"\"></p>\n<p>8、尝试利用 Servlet API 添加购物车功能，在工程 struts-prj2 的 cn.edu.zjut.bean 包中创建 <code>Item.java</code> 用于记录商品信息</p>\n<p>9、在工程 struts-prj2 的 cn.edu.zjut.bean 包中创建 <code>ShopppingCart.java</code> 用于记录用户的购物车信息，为简化操作，在购物车的构造函数中加入商品信息 </p>\n<p>10、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>login.jsp</code>页面， 观察并记录运行结果。</p>\n<p><img src=\"22.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"知识梳理\"><a href=\"#知识梳理\" class=\"headerlink\" title=\"知识梳理\"></a>知识梳理</h2><p>1、Action 类中的默认方法名是 execute()方法，可以被自动调用； </p>\n<p>2、在 Action 中也允许定义其它方法名，可以同时定义多个方法，分别处理不同的逻辑；</p>\n<p>3、当 Action 中使用了自定义方法，则该 Action 就需要特定的配置，一般有四种调用方式： </p>\n<ul>\n<li>在 struts.xml 文件中通过 method 属性指定方法名； </li>\n<li>使用动态方法调用方式（DMI）； </li>\n<li>使用提交按钮的 method 属性； </li>\n<li>使用通配符配置 Action； </li>\n</ul>\n<p>4、Action 类是多实例的，Action 类的属性是线程安全的； </p>\n<p>5、在 JSP 页面中，可以通过 Struts2 标签调用 Action 中对应的 getter 方法，从而输出 Action 的属性值； </p>\n<p>6、当一个 Action 处理用户请求结束后，返回一个字符串作为逻辑视图名，再通过 <code>struts.xml</code> 文件中的配置将逻辑视图名与物理视图资源关联起来；Struts2默认提供了一系列的结果类型（<code>struts-default.xml</code> 配置文件的 result-types 标签里列出了所支持的结果类型），结果类型决定了 Action 处理结束后，将调用哪种视图资源来呈现处理结果。</p>\n<p>7、为了让用户开发的 Action 类更规范，Struts2 提供了一个 Action 接口，该接口定义了 Struts2 的 Action 处理类应该实现的规范； </p>\n<p>8、Struts2 还为 Action 接口提供了一个实现类：ActionSupport，该类提供了若干默认方法，包括：默认的处理用户请求的方法（excute()方法）、数据校验的方法、添加校验错误信息的方法、获取国际化信息的方法等，部分重要方法列表如下：</p>\n<p><img src=\"1.png\" alt=\"\"></p>\n<p>9、Struts2 框架提供了校验器和手工编码两种方式对请求参数进行数据校验，当 Action 类继承了 ActionSupport 类，就可以通过定义名为“<ActionClassName>- <ActionAliasName>-validation.xml”的校验规则文件的方法进行校验器校验， 也可以通过重写 ActionSupport 类的 validate()方法或 validateXxx()方法进行手动校验； </p>\n<p>10、在 JSP 页面中使用 Struts2 标签生成的表单，能将域级别的错误信息将自动显示到表单元素处； </p>\n<p>11、在 JSP 页面中使用 fielderror 标签，可以集中显示所有的域级错误信息；使用 actionerror 标签，可以显示所有的 Action 级别错误信息；使用 actionmessage 标签，可以显示 Action 消息； </p>\n<p>12、Struts2 框架中提供了部分内置的类型转换器，可以将请求参数的 String 类型转换成基本数据类型及对应的包装器类型、日期类型、数组类型、集合类型等，当 Action 类继承了 ActionSupport 类，则内置的类型转换器将默认生效，可以直接使用； </p>\n<p>13、如需修改默认的类型转换校验信息，则要在 Action 类的包中声明名为“Action 类名.properties”的局部属性文件； </p>\n<p>14、Struts2 框架同时支持自定义类型转换器，将请求参数转换成任意一种类型。</p>\n<p>15、Struts2 框架中的 Action 类没有与任何 Servlet API 耦合，因此 Action 类可以脱 离 Servlet 容器环境进行单元测试； </p>\n<p>16、ActionContext 是 <code>com.opensymphony.xwork2</code> 包中的一个类，该类表示一个 Action 运行时的上下文；</p>\n<p>17、当 Action 类需要通过请求、会话或上下文存取属性时，可以通过 ActionContext 类完成， 也可以通过实现 Struts 提供的接口：RequestAware、SessionAware 和 ApplicationAware 完成，而不必调用 Servlet API 中的 HttpServletRequest、 HttpSession 和 ServletContext 对象，从而保持 Action 与 Servlet API 的解耦； </p>\n<p>18、在 Action 类中直接访问 Servlet API， 可以通过实现 Struts2 提供的接口： ServletContextAware、ServletRequestAware、ServletResponseAware 完成，也可以通过 ServletActionContext 工具类实现，但 Action 将与 Servlet API 直接耦合。</p>\n<h2 id=\"实验总结\"><a href=\"#实验总结\" class=\"headerlink\" title=\"实验总结\"></a>实验总结</h2><p><strong>1、总结 Action 自定义方法的四种调用和配置方式</strong></p>\n<ul>\n<li>在 <code>struts.xml</code> 文件中通过method属性指定方法名：以actionName.action形式访问，但是要配置多个action较为麻烦</li>\n<li>使用动态方法调用方式：以 actionName!methodName.action 形式访问，要注意UserAction下的login和register方法不能有相同的result返回值</li>\n<li>使用提交按钮的method属性：以actionName!methodName.action形式访问，但是需要在.jsp页面中配置，只能用于表单中</li>\n<li>使用通配符配置Action：以actionName.action形式访问，相对更为普遍的方式</li>\n</ul>\n<p><strong>2、Action 的实例化情况，将 Action 与 Servlet 在实例化情况上进行对比</strong></p>\n<p>在Struts2中每提交一次表单数据Action就被实例化一次，而Servlet在被创建时就被实例化，多次访问页面Servlet不会被多次实例化。</p>\n<p><strong>3、分析 JSP 文件中获取 Action 属性的主要过程</strong></p>\n<p>JSP 文件中获取 Action 属性以JavaBean来实现，所封装的属性和表单的属性一一对应，JavaBean将成为数据传递的载体来进行数据的传递。</p>\n<p><strong>4、观察两次 <code>loginSuccess.jsp</code> 页面输出上的区别，分析原因并记录下来</strong><br>redirect采用客户端重定向的方式，而默认的dispatcher采用服务器内部跳转的方式，所以当result的type属性被设置为redirect时无法获取到Action中的count属性而dispatcher的方式可以。</p>\n<p><strong>5、解压缩 Struts2 的核心包 struts2-core-2.3.15.1.jar，找到 struts-<code>default.xml</code> 配置文件，在其中的 result-types 标签里列出了 Struts2 所支持的结果类型，查找相关资料，总结这些结果类型的作用和特点，并记录下来；</strong></p>\n<ul>\n<li>chain：服务器内部跳转，调用其他action,完成自定义的拦截器堆栈和结果。只能请求action,如果请求视图资源会报错。</li>\n<li>dispatcher: 默认值，服务器内部跳转(跳转到web组件)</li>\n<li>freemarker：使用Freemarker模板引擎呈现一个视图</li>\n<li>httpheader：通过设置HTTP headers和status的值来发送错误信息给客户端。</li>\n<li>redirect: 作客户端重定向(重定向到web组件)</li>\n<li>redirectAction: 作客户端重定向(重定向到其他Action)</li>\n<li>stream:用作下载文件或者在浏览器上显示PDF等文档</li>\n<li>velocity:使用Servlet容器的JspFactory,模拟JSP执行环境,显示Velocity模板,将直接传输到Servlet输出。</li>\n<li>plaintext:响应以plain形式返回给客户端,相当于<code>response.setContentType(&quot;text/plain; charset=&quot;+charSet);</code></li>\n</ul>\n<p><strong>6、总结 Action 类中 validate()方法和 validateXxx()方法的作用</strong></p>\n<ul>\n<li>validate()方法：将对页面表单验证的内容写到validate()方法中，实现验证和业务处理内容的分离，validate()方法会对Action类中所有业务方法起作用</li>\n<li>validateXxx()方法：当多个表单提交到同一个action页面是，validate()方法对所有表单生效，可以使用validateXxx()方法实现对某一个业务的验证，validate()方法和 validateXxx()方法同时存在时都会起作用；validateXxx()方法的调用优于validate()方法</li>\n</ul>\n<p><strong>7、总结使用校验器校验的方法；在 Struts2 的核心包 xwork-core-</strong><br><strong>2.3.15.1.jar\\com\\opensymphony\\xwork2\\validator\\validators路径下找到 default.xml 文件，总结校验规则文件中主要元素的作用和配置方法</strong></p>\n<ul>\n<li>required：必填校验器  </li>\n<li>requiredstring：必填字符串校验器  </li>\n<li>stringlength:字符串长度校验器 </li>\n<li>date:日期校验器  </li>\n<li>expression：表达式校验器  </li>\n<li>int:整数校验器 </li>\n<li>fieldexpression：字段表达式校验器</li>\n<li>url:网址校验器  </li>\n<li>regex：正则表达式校验器 </li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">validators</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">field</span> <span class=\"attr\">name</span>=<span class=\"string\">\"被校验的字段\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">field-validator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"校验器的类型\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"参数名\"</span>&gt;</span>参数值<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">message</span>&gt;</span> 提示信息<span class=\"tag\">&lt;/<span class=\"name\">message</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">field-validator</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">field</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--下一个要验证的字段--&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">validators</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">valiators</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"校验器类型名\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--fieldName固定的 N必须大写--&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fieldName\"</span>&gt;</span>需要被校验的字段<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--下面的param元素可以有0个或者多个--&gt;</span> </span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"参数名\"</span>&gt;</span>参数值<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">message</span> <span class=\"attr\">key</span>=<span class=\"string\">\"I18NKey\"</span>&gt;</span>提示信息<span class=\"tag\">&lt;/<span class=\"name\">message</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">validator</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">validators</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>8、总结在 Action 中使用国际化资源文件的步骤及方法</strong></p>\n<p>首先创建不同语言环境下的.properties文件，在文件中写入不同key字段的国际化资源，使用ActionSupport类的getText方法，该方法可以接受一个name参数，指定国际化资源文件中的key数值，最后使用native2ascii工具进行处理。</p>\n<p><strong>9、总结 Struts2 中常用的内置类型转换器及其使用方法</strong></p>\n<ul>\n<li>String:将int,double,boolean,String类型的数组或java.util.Date类型转换成字符串。</li>\n<li>boolean和Boolean:在字符串与boolean之间转换</li>\n<li>char/Character:在字符串和字符之间转换</li>\n<li>int/Integer,float/Float,long/Long,double/Double:在字符串与数值类型之间进行转换 </li>\n<li>date:在字符串和日期类型之间进行转换，默认格式是:YYYY-MM-DD</li>\n<li>数组:由于数组本身就有类型，可以将多个同名参数，转换到数组中(在之前总结的兴趣爱好多选择，如果你选择多个，同时他们name属性相同就自动变为数组)</li>\n<li>集合:支持将数据保存到List或者Map集合</li>\n</ul>\n<p><strong>10、观察 Action 中访问 Servlet API 的四种方法，总结四种方法的区别，并记录下来</strong></p>\n<ul>\n<li><p>通过ActionContext类访问：<br>使用这种方法访问的前提是必须先要获取ActionContext对象，优点是Action和Servlet API完全解耦，缺点是并不能调用原生的Servlet API</p>\n</li>\n<li><p>Action直接访问:<br>使用这种方法可以调用原生的Servlet API，但是需要实现对应的接口</p>\n</li>\n<li><p>通过ServletActionContext访问:<br>使用ServletActionContext工具类无需实现接口，就可以直接访问Servlet API，但是会加强Action和Servlet API的耦合，不利于Action的再利用。</p>\n</li>\n<li><p>实现ServletContextAware、ServletRequestAware、ServletResponseAware接口访问:<br>Action与Servlet API直接耦合，需要调用ServletContext和ServletRequest等set方法。</p>\n</li>\n</ul>\n<h2 id=\"实验步骤\"><a href=\"#实验步骤\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h2><h3 id=\"基础实验\"><a href=\"#基础实验\" class=\"headerlink\" title=\"基础实验\"></a>基础实验</h3><p>1、新建 Web 工程 struts-prj2，并将 Struts2 中的 8 个核心包添加到工程中； </p>\n<p>2、在 struts-prj2 中新建 login.jsp 页面，作为用户登录的视图；新建 loginFail.jsp 页面，作为登录失败的视图；新建 loginSuccess.jsp 页面，作为登录成功的视图;</p>\n<p>3、在 struts-prj2 中新建 register.jsp 页面，作为用户注册的视图；新建regFail.jsp 页面，作为注册失败的视图；新建 regSuccess.jsp 页面，作为注册成功的视图;</p>\n<p>4、在 struts-prj2 中新建 cn.edu.zjut.bean 包，并在其中创建 UserBean.java，用于 记录用户信息 （可重用“实验二 Struts 基础应用 ”中提高实验里的 UserBean.java 代码）； </p>\n<p>5、在 struts-prj2 中新建 cn.edu.zjut.service 包，并在其中创UserService.java， 用于实现登录逻辑和注册逻辑;</p>\n<p>6、在 struts-prj2 中新建 cn.edu.zjut.action 包，并在其中创建 UserAction.java，定义login()方法和 register()方法</p>\n<p>7、在工程struts-prj2 的 src 目录中创建 struts.xml 文件，用于配置 Action 并设置 页面导航，通过 action 标签中 method 属性指定方法名；</p>\n<p>8、编辑 Web 应用的 web.xml 文件，增加 Struts2 核心 Filter 的配置； </p>\n<p>9、将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 与 register.jsp页面，并记录运行结果； </p>\n<p>10、查找相关资料， 尝试使用 Action 自定义方法的其它三种调用和配置方式：动态方法调用方式（DMI）、提交按钮的 method 属性、通配符配置 Action，并记录关键配置和运行结果； </p>\n<p><img src=\"DMI.png\" alt=\"\"></p>\n<p><img src=\"button.png\" alt=\"\"></p>\n<p><img src=\"uni.png\" alt=\"\"></p>\n<p>11、修改 UserAction.java，增加 UserAction 类的构造方法 UserAction()，增加 count属性，用于测试 Action 的实例化情况</p>\n<p><img src=\"2.png\" alt=\"\"></p>\n<p>12、修改 <code>loginSuccess.jsp</code>，在页面中使用&lt;s:property&gt;标签输出 Action 中的 count 值； </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;s:property value&#x3D;&quot;count&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>13、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 并刷新多次，记录运行结果； </p>\n<p><img src=\"3.png\" alt=\"\"></p>\n<p>14、修改 struts.xml 文件，将 UserAction 的页面导航设置为 redirect 结果类型；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;result name&#x3D;&quot;success&quot; type&#x3D;&quot;redirect&quot;&gt;&#x2F;loginSuccess.jsp&lt;&#x2F;result&gt;</span><br></pre></td></tr></table></figure>\n\n<p>15、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察登录成功后 loginSuccess.jsp 页面的输出，并记录下来。</p>\n<p><img src=\"4.png\" alt=\"\"></p>\n<h3 id=\"提高实验\"><a href=\"#提高实验\" class=\"headerlink\" title=\"提高实验\"></a>提高实验</h3><p>1、在 struts-prj2 中修改 UserAction 类，使其继承 ActionSupport 类，并在 UserAction 类中覆盖 ActionSupport 类的 validate()方法， 用于对用户登录的请求参 数 account 和 password 进行校验：若用户名或密码为空，则使用 addFieldError （域 级）添加错误信息。</p>\n<p><img src=\"5.png\" alt=\"\"></p>\n<p>2、修改 <code>struts.xml</code> 文件，在 Action 的配置中增加 validate()方法校验出错时的页面导航<code>&lt;result name=&quot;input&quot;&gt;</code></p>\n<p><img src=\"6.png\" alt=\"\"></p>\n<p>3、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>login.jsp</code> 页面，观察并记录运行结果；</p>\n<p><img src=\"7.png\" alt=\"\"></p>\n<p>4、修改 <code>login.jsp</code> 页面，在表单前增加 fielderror 标签：<code>&lt;s:fielderror/&gt;</code>，再通过浏览器访问 login.jsp 页面，观察并记录运行结果</p>\n<p><img src=\"8.png\" alt=\"\"></p>\n<p>5、修改 UserAction.java，在调用登录逻辑的 login()方法中，对登录情况进行校验： 若登录成功，使用 addActionMessage()方法添加“登录成功！”的 Action 提示消息，若 登录失败，使用 addActionError()方法添加 Action 级别的错误信息</p>\n<p><img src=\"9.png\" alt=\"\"></p>\n<p>6、修改 login.jsp 页面，增加 actionerror 标签（&lt;s:actionerror/&gt;）Action 级别的 错 误信息；修改 <code>loginSuccess.jsp</code>，使用 actionmessage 标签<code>&lt;s:actionmessage/&gt;</code> 显示 Action 提示消息； </p>\n<p>7、修改 <code>struts.xml</code> 文件中用户登录的页面导航设置，将登录失败时转向的页面从 loginFail.jsp 修改为 login.jsp； </p>\n<p>8、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察并记录运行结果；</p>\n<p><img src=\"10.png\" alt=\"\"></p>\n<p>9、在工程 struts-prj2 中创建“UserAction-login-validation.xml”校验规则文件，使 其与 UserAction 类位于同一目录下，配置校验信息，使用校验器对请求参数进行校验 </p>\n<p>10、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 login.jsp 页面， 观察并记录运行结果；</p>\n<p><img src=\"11.png\" alt=\"\"></p>\n<p>11、将 login.jsp、 loginSuccess.jsp、 loginFail.jsp 三个页面进行国际化处理，把需要进行国际化的内容 以键值对的形式写入资源文件 <code>message_zh_CN.properties</code> 和 <code>message_en_US.properties</code> 中； </p>\n<p>12、在资源文件中添加校验信息的键值对， 并使用 native2ASCII 工具，将 <code>message_zh_CN.properties</code> 重新编码，将中文字符都转化为 unicode 码 </p>\n<p>13、在工程 struts-prj2 的 src 目录中创建 <code>struts.properties</code> 文件，通过它加载资源文件 </p>\n<p>14、修改 <code>UserAction.java</code>，使用 ActionSupport 类的 getText()方法，获取国际化资 源文件中的信息 </p>\n<p>15、修改 <code>UserAction-login-validation.xml</code>，获取国际化资源文件中的信息 </p>\n<p>16、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>login.jsp</code> 页面， 观察并记录运行结果；</p>\n<p><img src=\"12.png\" alt=\"\"></p>\n<p>17、修改 <code>UserBean.java</code>，将用于保存注册用户生日的变量类型改为 Date 类型，使用 Struts2 内置的类型转换器对请求参数进行校验； </p>\n<p>18、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>register.jsp</code> 页 面，当用户输入的生日不合法时，观察并记录运行结果；</p>\n<p><img src=\"13.png\" alt=\"\"></p>\n<p>19、在工程 struts-prj2 的 cn.edu.zjut.action 包中创建局部属性文件<code>UserAction.properties</code>，修改类型转换的校验信息，并使用 native2ASCII 工具将 <code>UserAction.properties</code> 重新编码 </p>\n<p>20、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>register.jsp</code> 页 面，当用户输入的生日不合法时，观察并记录运行结果；</p>\n<p><img src=\"na.png\" alt=\"\"></p>\n<p>21、参考实验步骤 9，在工程 struts-prj2 的 cn.edu.zjut.action 包中创建 <code>UserAction-register-validation.xml</code> 文件，增加校验信息的配置，使用校验器对用户 注册的请求参数进行校验，要求注册时两次密码输入相同、email 地址格式符合要求等； </p>\n<p>22、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>register.jsp</code> 页 面，观察并记录运行结果；</p>\n<p><img src=\"14.png\" alt=\"\"></p>\n<p>23、修改 UserAction 类， 将 validate()的方法名改为 validateLogin()， 并增加 validateRegister()方法，参考实验步骤 1，使用手工编码方式对请求参数进行数据校验； </p>\n<p>24、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>register.jsp</code> 页 面，观察并记录运行结果。</p>\n<p><img src=\"15.png\" alt=\"\"></p>\n<h3 id=\"拓展实验\"><a href=\"#拓展实验\" class=\"headerlink\" title=\"拓展实验\"></a>拓展实验</h3><p>1、在 struts-prj2 中修改 UserAction 类，通过 ActionContext 获取请求、会话和上下文对象相关联的 Map 对象来实现存取属性的功能 </p>\n<p>2、修改 <code>loginSuccess.jsp</code> 页面，从请求、会话和上下文对象中获取属性值并显示 在页面中 </p>\n<p>3、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>login.jsp</code> 页面，观察并记录运行结果；</p>\n<p><img src=\"16.png\" alt=\"\"></p>\n<p><strong>每提交一次刷新，次数就会增加一次，只有重新部署访问次数才会重置</strong> </p>\n<p>4、修改 UserAction 类，通过实现 Struts 提供的接口：RequestAware、SessionAware 和 ApplicationAware，获取请求、会话和上下文对象相关联的 Map 对象来实现存取属性的功能 </p>\n<p>5、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>login.jsp</code> 页面，观察并记录运行结果；</p>\n<p><img src=\"17.png\" alt=\"\"></p>\n<p>6、修改 UserAction 类，查找相关资料，尝试通过接口：ServletContextAware、 ServletRequestAware、ServletResponseAware 直接访问 Servlet API，实现以上实验步骤 1-3 的相同功能，重新运行并记录结果；</p>\n<p><img src=\"18.png\" alt=\"\"></p>\n<p><img src=\"19.png\" alt=\"\"></p>\n<p>7、修改 UserAction 类，查找相关资料，尝试通过 ServletActionContext 工具类直接访 问 Servlet API，实现以上实验步骤 1-3 的相同功能，重新运行并记录结果；</p>\n<p><img src=\"20.png\" alt=\"\"></p>\n<p><img src=\"21.png\" alt=\"\"></p>\n<p>8、尝试利用 Servlet API 添加购物车功能，在工程 struts-prj2 的 cn.edu.zjut.bean 包中创建 <code>Item.java</code> 用于记录商品信息</p>\n<p>9、在工程 struts-prj2 的 cn.edu.zjut.bean 包中创建 <code>ShopppingCart.java</code> 用于记录用户的购物车信息，为简化操作，在购物车的构造函数中加入商品信息 </p>\n<p>10、重新将 struts-prj2 部署在 Tomcat 服务器上，通过浏览器访问 <code>login.jsp</code>页面， 观察并记录运行结果。</p>\n<p><img src=\"22.png\" alt=\"\"></p>\n"},{"title":"Struts 工作流程总结","date":"2020-02-24T03:10:20.000Z","_content":"\n\n## 知识梳理\n\n1、Struts2 的控制器主要由三个层次组成，分别是过滤器、拦截器和业务控制 Action； \n\n2、过滤器是 Struts2 控制器的最前端控制器，过滤器的使用需要在 `web.xml` 中进行配置；FilterDispatcher 是 Struts2 应用中必须配置使用的过滤器，该过滤器的主要功能 包括执行 Action、清空 ActionContext 对象等； \n\n3、拦截器是 Struts2 中第二个层次的控制器，能够在 Action 执行前后完成一些通用功能； \n\n4、Struts2 内建了大量拦截器， 这些拦截器以 name-class 对的形式配置在 `strutsdefault.xml` 文件中，如果 `struts.xml 中定义的 package 继承了 Struts2 默 认的 `struts-default` 包，便可以直接使用默认拦截器栈 defaultStack； \n\n5、Struts2 也允许自定义拦截器，自定义拦截器类须实现 Interceptor 接口，并覆盖接 口中的 intercept 方法用于实现拦截器的主要功能；自定义拦截器须在 `struts.xml` 中进 行配置才能使用； \n\n6、若在 `struts.xml` 中为 Action 指定了一个拦截器，则默认拦截器栈 defaultStack 将会失效，为了继续使用默认拦截器，必须将其进行显式地配置。\n\n7、Struts API 中的 `com.opensymphony.xwork2.util.ValueStack` 称为值栈，值栈是一 个数据区域，该区域中保存了应用范围内的所有数据和 Action 处理的用户请求数据； \n\n8、值栈被存储在 ActionContext 对象中，因此可以在任何节点访问其中的内容； \n\n9、ValueStack 接口中主要方法有：`Object findValue(String expr)`可以通过表达式查 找值栈中对应的值，`void setValue(String expr, Object value)`用于将对象及其表达式 存到值栈中； \n\n10、OGNL，即对象图导航语言，是 Struts 默认的表达式语言； \n\n11、OGNL 基础单位称为导航链，基本的链由属性名、方法调用、数组或集合元素组成；\n\n12、在 Struts2 中，值栈是 OGNL 上下文的根对象，可以直接访问，而 application、session 等其它对象不是根对象，需要使用#进行访问。\n\n13、Struts2 应用中使用 Action 调用 Model，因此 Struts2 应用中的异常在 Model 层抛 出后，通常在 Action 类中进行处理； \n\n14、Action 可以直接使用 try/catch 捕获异常，然后返回结果视图，跳转到相关页面处理 异常； \n\n15、抛出异常后，也可以不在 Action 类中捕获，而使用 throws 声明异常，交给 Struts2 框架处理； \n\n16、Struts2 允许通过 `struts.xml` 文件来配置异常的处理，使用 `<exception-mapping>` 标签声明异常映射，指定发生该类型异常时跳转的结果视图。\n\n## 实验总结\n**1、自定义拦截器类的作用和实现方法**\n\n**作用：** \nStruts2第二个层次的控制器，能够在Action执行前后完成一些通用功能，完成一些通用的控制逻辑：解析请求参数、类型转换、输入校验、防止表单多次提交。 \n\n**实现方法：**\n\n(1) 创建拦截器Interceptor \n\n(2) 继承 AbstractInterceptor 类，重写 intercept()方法（AbstractInterceptor 类实现了 Interceptor 接口） \n\n(3) Action 内使用拦截器 \n\n(4) 修改 `struts.xml` 文件，增加拦截器的配置 \n\n**2、Interceptor 接口中 intercept(ActionInvocation inv)、init()和 destroy()方法的作用**\n\n- **intercept(ActionInvocation inv)**： 允许 Interceptor 在 ActionInvocation 对请求的其余处理之前和/或之后对请求进行某些 处理，或者使处理短路，并仅返回 String 数值 \n\n- **init()**： 在 interceptor 生成后产生，但在 interceptor 接受任何请求之前调用，使得 interceptor 进行初始化 \n\n- **destroy()**： 让 interceptor 清理它产生的资源 \n\n**3、defaultStack 拦截器栈中包含的主要拦截功能** \n\n- **params**：解析 HTTP 请求参数，并设置成 Action 属性 \n\n- **validation**：执行 xxxAction-validate 中定义的校验器 \n\n- **workflow**：调用 Action 中的 validate 方法 \n\n- **i18n**：负责把用户所选的语言、区域放入用户 Session 中。 \n\n- **createSession**：创建 HttpSession 对象 \n\n- **timer**：负责输出 Action 执行时间，分析性能 \n\n- **autowiring**：自动装配，访问 Spring 中的 Bean \n\n**4、自定义过滤器的实现方法和配置步骤，将拦截器与过滤器进行比较，并将两者的特点及区别**\n\n**配置步骤：**\n\n(1) 创建拦截器类，继承Filter类，重写doFilter方法\n\n(2) `web.xml` 文件配置\n\n**拦截器与过滤器特点和区别：** \n\n- 拦截器：Struts2 中第二个层次的控制器；允许自定义；需要在 web.xml 文件中配置； \n- 过滤器：Struts2 控制器的最前端控制器；允许自定义；需要在 struts.xml 文件中配置。 \n\n**5、ValueStack 接口及其主要方法的作用和开发步骤**\nValueStack 接口中主要方法:findValue(), setValue() \n\n**findValue()**：通过以默认搜索顺序针对堆栈评估给定表达式来查找值。 \n\n**setValue()**：使用默认搜索顺序使用给定的表达式在堆栈中的 bean 上设置属性。 \n\n开发需要引入 `com.opensymphony.xwork2.util.ValueStack` 并实例化 ValueStack 对象，之后通过方法调用实现相关功能。 \n\n**6、OGNL 可访问的对象和基本语法**\n\n可以直接访问值栈 ValueStack（OGNL 上下文的根对象）；Action 实例被保存在值栈中，因此可以直接访问。 基本语法包含#、%、$三种符号，作用见下文 \n\n**7、OGNL 三种常用符号:#、%和$的作用和使用方法**\n\n **%符号**：计算 OGNL 表达式的值 \n \n **$符号**：在国际化资源文件中，引用 OGNL 表达式；在 Struts 2 框架配置文件中引用 OGNL 表达式 \n \n **#符号**：访问 OGNL 上下文和 Action 上下文；构造 Map；过滤和投影集合 \n \n **8、自定义异常类的方法和步骤** \n \n （1）创建自定义异常类并继承 Exception 类 \n \n （2）在 Model 中抛出自定义异常 \n \n （3）在 Action 中捕获异常 \n \n （4）在 `struts.xml` 中设置异常页面导航 \n \n （5）在 Action 中抛出异常，将其交给框架处理 \n \n （6）在 `struts.xml` 中使用标签<exception- mapping>进行异常配置 \n \n **9、整理 Struts2 框架处理异常的机制，整理 `struts.xml` 文件配置异常映射的方法以及相关标签的作用** \n \n Struts2 的异常处理机制是通过在 `struts.xml` 文件中配置<exception-mapping……/>元素完成，配置该元素时，需要指定两个属性： \n \n **exception**：指定该异常类型的完全限定名。\n  \n **result**：指定逻辑视图名。 \n \n 根据`<exception-mapping…../>`元素出现位置的不同，异常映射又可分为两种： \n \n **局部异常映射**：将`<exception-mapping… />`元素作为`<action…/>`元素的子元素配置； \n \n **全局异常映射**：将`<exception-mapping… />`元素作为`<global-exception-mappings… />` 元素的子元素配置； \n \n 全局异常映射对所有的 Action 都有效，但局部异常映射仅对该异常映射所在的 Action 有 效。如果局部异常映射和全局异常映射配置了同一个异常类型，在`<action…./>` 元素内的局部异常映射将覆盖全局异常映射。\n\n","source":"_posts/Struts_Workflow.md","raw":"---\ntitle: Struts 工作流程总结\ndate: 2020-02-24 11:10:20\ncategories: \n- tech\ntags: \n- struts\n- workflow\n- JavaEE\n- 总结\n---\n\n\n## 知识梳理\n\n1、Struts2 的控制器主要由三个层次组成，分别是过滤器、拦截器和业务控制 Action； \n\n2、过滤器是 Struts2 控制器的最前端控制器，过滤器的使用需要在 `web.xml` 中进行配置；FilterDispatcher 是 Struts2 应用中必须配置使用的过滤器，该过滤器的主要功能 包括执行 Action、清空 ActionContext 对象等； \n\n3、拦截器是 Struts2 中第二个层次的控制器，能够在 Action 执行前后完成一些通用功能； \n\n4、Struts2 内建了大量拦截器， 这些拦截器以 name-class 对的形式配置在 `strutsdefault.xml` 文件中，如果 `struts.xml 中定义的 package 继承了 Struts2 默 认的 `struts-default` 包，便可以直接使用默认拦截器栈 defaultStack； \n\n5、Struts2 也允许自定义拦截器，自定义拦截器类须实现 Interceptor 接口，并覆盖接 口中的 intercept 方法用于实现拦截器的主要功能；自定义拦截器须在 `struts.xml` 中进 行配置才能使用； \n\n6、若在 `struts.xml` 中为 Action 指定了一个拦截器，则默认拦截器栈 defaultStack 将会失效，为了继续使用默认拦截器，必须将其进行显式地配置。\n\n7、Struts API 中的 `com.opensymphony.xwork2.util.ValueStack` 称为值栈，值栈是一 个数据区域，该区域中保存了应用范围内的所有数据和 Action 处理的用户请求数据； \n\n8、值栈被存储在 ActionContext 对象中，因此可以在任何节点访问其中的内容； \n\n9、ValueStack 接口中主要方法有：`Object findValue(String expr)`可以通过表达式查 找值栈中对应的值，`void setValue(String expr, Object value)`用于将对象及其表达式 存到值栈中； \n\n10、OGNL，即对象图导航语言，是 Struts 默认的表达式语言； \n\n11、OGNL 基础单位称为导航链，基本的链由属性名、方法调用、数组或集合元素组成；\n\n12、在 Struts2 中，值栈是 OGNL 上下文的根对象，可以直接访问，而 application、session 等其它对象不是根对象，需要使用#进行访问。\n\n13、Struts2 应用中使用 Action 调用 Model，因此 Struts2 应用中的异常在 Model 层抛 出后，通常在 Action 类中进行处理； \n\n14、Action 可以直接使用 try/catch 捕获异常，然后返回结果视图，跳转到相关页面处理 异常； \n\n15、抛出异常后，也可以不在 Action 类中捕获，而使用 throws 声明异常，交给 Struts2 框架处理； \n\n16、Struts2 允许通过 `struts.xml` 文件来配置异常的处理，使用 `<exception-mapping>` 标签声明异常映射，指定发生该类型异常时跳转的结果视图。\n\n## 实验总结\n**1、自定义拦截器类的作用和实现方法**\n\n**作用：** \nStruts2第二个层次的控制器，能够在Action执行前后完成一些通用功能，完成一些通用的控制逻辑：解析请求参数、类型转换、输入校验、防止表单多次提交。 \n\n**实现方法：**\n\n(1) 创建拦截器Interceptor \n\n(2) 继承 AbstractInterceptor 类，重写 intercept()方法（AbstractInterceptor 类实现了 Interceptor 接口） \n\n(3) Action 内使用拦截器 \n\n(4) 修改 `struts.xml` 文件，增加拦截器的配置 \n\n**2、Interceptor 接口中 intercept(ActionInvocation inv)、init()和 destroy()方法的作用**\n\n- **intercept(ActionInvocation inv)**： 允许 Interceptor 在 ActionInvocation 对请求的其余处理之前和/或之后对请求进行某些 处理，或者使处理短路，并仅返回 String 数值 \n\n- **init()**： 在 interceptor 生成后产生，但在 interceptor 接受任何请求之前调用，使得 interceptor 进行初始化 \n\n- **destroy()**： 让 interceptor 清理它产生的资源 \n\n**3、defaultStack 拦截器栈中包含的主要拦截功能** \n\n- **params**：解析 HTTP 请求参数，并设置成 Action 属性 \n\n- **validation**：执行 xxxAction-validate 中定义的校验器 \n\n- **workflow**：调用 Action 中的 validate 方法 \n\n- **i18n**：负责把用户所选的语言、区域放入用户 Session 中。 \n\n- **createSession**：创建 HttpSession 对象 \n\n- **timer**：负责输出 Action 执行时间，分析性能 \n\n- **autowiring**：自动装配，访问 Spring 中的 Bean \n\n**4、自定义过滤器的实现方法和配置步骤，将拦截器与过滤器进行比较，并将两者的特点及区别**\n\n**配置步骤：**\n\n(1) 创建拦截器类，继承Filter类，重写doFilter方法\n\n(2) `web.xml` 文件配置\n\n**拦截器与过滤器特点和区别：** \n\n- 拦截器：Struts2 中第二个层次的控制器；允许自定义；需要在 web.xml 文件中配置； \n- 过滤器：Struts2 控制器的最前端控制器；允许自定义；需要在 struts.xml 文件中配置。 \n\n**5、ValueStack 接口及其主要方法的作用和开发步骤**\nValueStack 接口中主要方法:findValue(), setValue() \n\n**findValue()**：通过以默认搜索顺序针对堆栈评估给定表达式来查找值。 \n\n**setValue()**：使用默认搜索顺序使用给定的表达式在堆栈中的 bean 上设置属性。 \n\n开发需要引入 `com.opensymphony.xwork2.util.ValueStack` 并实例化 ValueStack 对象，之后通过方法调用实现相关功能。 \n\n**6、OGNL 可访问的对象和基本语法**\n\n可以直接访问值栈 ValueStack（OGNL 上下文的根对象）；Action 实例被保存在值栈中，因此可以直接访问。 基本语法包含#、%、$三种符号，作用见下文 \n\n**7、OGNL 三种常用符号:#、%和$的作用和使用方法**\n\n **%符号**：计算 OGNL 表达式的值 \n \n **$符号**：在国际化资源文件中，引用 OGNL 表达式；在 Struts 2 框架配置文件中引用 OGNL 表达式 \n \n **#符号**：访问 OGNL 上下文和 Action 上下文；构造 Map；过滤和投影集合 \n \n **8、自定义异常类的方法和步骤** \n \n （1）创建自定义异常类并继承 Exception 类 \n \n （2）在 Model 中抛出自定义异常 \n \n （3）在 Action 中捕获异常 \n \n （4）在 `struts.xml` 中设置异常页面导航 \n \n （5）在 Action 中抛出异常，将其交给框架处理 \n \n （6）在 `struts.xml` 中使用标签<exception- mapping>进行异常配置 \n \n **9、整理 Struts2 框架处理异常的机制，整理 `struts.xml` 文件配置异常映射的方法以及相关标签的作用** \n \n Struts2 的异常处理机制是通过在 `struts.xml` 文件中配置<exception-mapping……/>元素完成，配置该元素时，需要指定两个属性： \n \n **exception**：指定该异常类型的完全限定名。\n  \n **result**：指定逻辑视图名。 \n \n 根据`<exception-mapping…../>`元素出现位置的不同，异常映射又可分为两种： \n \n **局部异常映射**：将`<exception-mapping… />`元素作为`<action…/>`元素的子元素配置； \n \n **全局异常映射**：将`<exception-mapping… />`元素作为`<global-exception-mappings… />` 元素的子元素配置； \n \n 全局异常映射对所有的 Action 都有效，但局部异常映射仅对该异常映射所在的 Action 有 效。如果局部异常映射和全局异常映射配置了同一个异常类型，在`<action…./>` 元素内的局部异常映射将覆盖全局异常映射。\n\n","slug":"Struts_Workflow","published":1,"updated":"2020-02-27T12:18:41.160Z","_id":"ck74piow30000ca6b3bhn3ffd","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"知识梳理\"><a href=\"#知识梳理\" class=\"headerlink\" title=\"知识梳理\"></a>知识梳理</h2><p>1、Struts2 的控制器主要由三个层次组成，分别是过滤器、拦截器和业务控制 Action； </p>\n<p>2、过滤器是 Struts2 控制器的最前端控制器，过滤器的使用需要在 <code>web.xml</code> 中进行配置；FilterDispatcher 是 Struts2 应用中必须配置使用的过滤器，该过滤器的主要功能 包括执行 Action、清空 ActionContext 对象等； </p>\n<p>3、拦截器是 Struts2 中第二个层次的控制器，能够在 Action 执行前后完成一些通用功能； </p>\n<p>4、Struts2 内建了大量拦截器， 这些拦截器以 name-class 对的形式配置在 <code>strutsdefault.xml</code> 文件中，如果 <code>struts.xml 中定义的 package 继承了 Struts2 默 认的</code>struts-default` 包，便可以直接使用默认拦截器栈 defaultStack； </p>\n<p>5、Struts2 也允许自定义拦截器，自定义拦截器类须实现 Interceptor 接口，并覆盖接 口中的 intercept 方法用于实现拦截器的主要功能；自定义拦截器须在 <code>struts.xml</code> 中进 行配置才能使用； </p>\n<p>6、若在 <code>struts.xml</code> 中为 Action 指定了一个拦截器，则默认拦截器栈 defaultStack 将会失效，为了继续使用默认拦截器，必须将其进行显式地配置。</p>\n<p>7、Struts API 中的 <code>com.opensymphony.xwork2.util.ValueStack</code> 称为值栈，值栈是一 个数据区域，该区域中保存了应用范围内的所有数据和 Action 处理的用户请求数据； </p>\n<p>8、值栈被存储在 ActionContext 对象中，因此可以在任何节点访问其中的内容； </p>\n<p>9、ValueStack 接口中主要方法有：<code>Object findValue(String expr)</code>可以通过表达式查 找值栈中对应的值，<code>void setValue(String expr, Object value)</code>用于将对象及其表达式 存到值栈中； </p>\n<p>10、OGNL，即对象图导航语言，是 Struts 默认的表达式语言； </p>\n<p>11、OGNL 基础单位称为导航链，基本的链由属性名、方法调用、数组或集合元素组成；</p>\n<p>12、在 Struts2 中，值栈是 OGNL 上下文的根对象，可以直接访问，而 application、session 等其它对象不是根对象，需要使用#进行访问。</p>\n<p>13、Struts2 应用中使用 Action 调用 Model，因此 Struts2 应用中的异常在 Model 层抛 出后，通常在 Action 类中进行处理； </p>\n<p>14、Action 可以直接使用 try/catch 捕获异常，然后返回结果视图，跳转到相关页面处理 异常； </p>\n<p>15、抛出异常后，也可以不在 Action 类中捕获，而使用 throws 声明异常，交给 Struts2 框架处理； </p>\n<p>16、Struts2 允许通过 <code>struts.xml</code> 文件来配置异常的处理，使用 <code>&lt;exception-mapping&gt;</code> 标签声明异常映射，指定发生该类型异常时跳转的结果视图。</p>\n<h2 id=\"实验总结\"><a href=\"#实验总结\" class=\"headerlink\" title=\"实验总结\"></a>实验总结</h2><p><strong>1、自定义拦截器类的作用和实现方法</strong></p>\n<p><strong>作用：</strong><br>Struts2第二个层次的控制器，能够在Action执行前后完成一些通用功能，完成一些通用的控制逻辑：解析请求参数、类型转换、输入校验、防止表单多次提交。 </p>\n<p><strong>实现方法：</strong></p>\n<p>(1) 创建拦截器Interceptor </p>\n<p>(2) 继承 AbstractInterceptor 类，重写 intercept()方法（AbstractInterceptor 类实现了 Interceptor 接口） </p>\n<p>(3) Action 内使用拦截器 </p>\n<p>(4) 修改 <code>struts.xml</code> 文件，增加拦截器的配置 </p>\n<p><strong>2、Interceptor 接口中 intercept(ActionInvocation inv)、init()和 destroy()方法的作用</strong></p>\n<ul>\n<li><p><strong>intercept(ActionInvocation inv)</strong>： 允许 Interceptor 在 ActionInvocation 对请求的其余处理之前和/或之后对请求进行某些 处理，或者使处理短路，并仅返回 String 数值 </p>\n</li>\n<li><p><strong>init()</strong>： 在 interceptor 生成后产生，但在 interceptor 接受任何请求之前调用，使得 interceptor 进行初始化 </p>\n</li>\n<li><p><strong>destroy()</strong>： 让 interceptor 清理它产生的资源 </p>\n</li>\n</ul>\n<p><strong>3、defaultStack 拦截器栈中包含的主要拦截功能</strong> </p>\n<ul>\n<li><p><strong>params</strong>：解析 HTTP 请求参数，并设置成 Action 属性 </p>\n</li>\n<li><p><strong>validation</strong>：执行 xxxAction-validate 中定义的校验器 </p>\n</li>\n<li><p><strong>workflow</strong>：调用 Action 中的 validate 方法 </p>\n</li>\n<li><p><strong>i18n</strong>：负责把用户所选的语言、区域放入用户 Session 中。 </p>\n</li>\n<li><p><strong>createSession</strong>：创建 HttpSession 对象 </p>\n</li>\n<li><p><strong>timer</strong>：负责输出 Action 执行时间，分析性能 </p>\n</li>\n<li><p><strong>autowiring</strong>：自动装配，访问 Spring 中的 Bean </p>\n</li>\n</ul>\n<p><strong>4、自定义过滤器的实现方法和配置步骤，将拦截器与过滤器进行比较，并将两者的特点及区别</strong></p>\n<p><strong>配置步骤：</strong></p>\n<p>(1) 创建拦截器类，继承Filter类，重写doFilter方法</p>\n<p>(2) <code>web.xml</code> 文件配置</p>\n<p><strong>拦截器与过滤器特点和区别：</strong> </p>\n<ul>\n<li>拦截器：Struts2 中第二个层次的控制器；允许自定义；需要在 web.xml 文件中配置； </li>\n<li>过滤器：Struts2 控制器的最前端控制器；允许自定义；需要在 struts.xml 文件中配置。 </li>\n</ul>\n<p><strong>5、ValueStack 接口及其主要方法的作用和开发步骤</strong><br>ValueStack 接口中主要方法:findValue(), setValue() </p>\n<p><strong>findValue()</strong>：通过以默认搜索顺序针对堆栈评估给定表达式来查找值。 </p>\n<p><strong>setValue()</strong>：使用默认搜索顺序使用给定的表达式在堆栈中的 bean 上设置属性。 </p>\n<p>开发需要引入 <code>com.opensymphony.xwork2.util.ValueStack</code> 并实例化 ValueStack 对象，之后通过方法调用实现相关功能。 </p>\n<p><strong>6、OGNL 可访问的对象和基本语法</strong></p>\n<p>可以直接访问值栈 ValueStack（OGNL 上下文的根对象）；Action 实例被保存在值栈中，因此可以直接访问。 基本语法包含#、%、$三种符号，作用见下文 </p>\n<p><strong>7、OGNL 三种常用符号:#、%和$的作用和使用方法</strong></p>\n<p> <strong>%符号</strong>：计算 OGNL 表达式的值 </p>\n<p> <strong>$符号</strong>：在国际化资源文件中，引用 OGNL 表达式；在 Struts 2 框架配置文件中引用 OGNL 表达式 </p>\n<p> <strong>#符号</strong>：访问 OGNL 上下文和 Action 上下文；构造 Map；过滤和投影集合 </p>\n<p> <strong>8、自定义异常类的方法和步骤</strong> </p>\n<p> （1）创建自定义异常类并继承 Exception 类 </p>\n<p> （2）在 Model 中抛出自定义异常 </p>\n<p> （3）在 Action 中捕获异常 </p>\n<p> （4）在 <code>struts.xml</code> 中设置异常页面导航 </p>\n<p> （5）在 Action 中抛出异常，将其交给框架处理 </p>\n<p> （6）在 <code>struts.xml</code> 中使用标签<exception- mapping>进行异常配置 </p>\n<p> <strong>9、整理 Struts2 框架处理异常的机制，整理 <code>struts.xml</code> 文件配置异常映射的方法以及相关标签的作用</strong> </p>\n<p> Struts2 的异常处理机制是通过在 <code>struts.xml</code> 文件中配置&lt;exception-mapping……/&gt;元素完成，配置该元素时，需要指定两个属性： </p>\n<p> <strong>exception</strong>：指定该异常类型的完全限定名。</p>\n<p> <strong>result</strong>：指定逻辑视图名。 </p>\n<p> 根据<code>&lt;exception-mapping…../&gt;</code>元素出现位置的不同，异常映射又可分为两种： </p>\n<p> <strong>局部异常映射</strong>：将<code>&lt;exception-mapping… /&gt;</code>元素作为<code>&lt;action…/&gt;</code>元素的子元素配置； </p>\n<p> <strong>全局异常映射</strong>：将<code>&lt;exception-mapping… /&gt;</code>元素作为<code>&lt;global-exception-mappings… /&gt;</code> 元素的子元素配置； </p>\n<p> 全局异常映射对所有的 Action 都有效，但局部异常映射仅对该异常映射所在的 Action 有 效。如果局部异常映射和全局异常映射配置了同一个异常类型，在<code>&lt;action…./&gt;</code> 元素内的局部异常映射将覆盖全局异常映射。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"知识梳理\"><a href=\"#知识梳理\" class=\"headerlink\" title=\"知识梳理\"></a>知识梳理</h2><p>1、Struts2 的控制器主要由三个层次组成，分别是过滤器、拦截器和业务控制 Action； </p>\n<p>2、过滤器是 Struts2 控制器的最前端控制器，过滤器的使用需要在 <code>web.xml</code> 中进行配置；FilterDispatcher 是 Struts2 应用中必须配置使用的过滤器，该过滤器的主要功能 包括执行 Action、清空 ActionContext 对象等； </p>\n<p>3、拦截器是 Struts2 中第二个层次的控制器，能够在 Action 执行前后完成一些通用功能； </p>\n<p>4、Struts2 内建了大量拦截器， 这些拦截器以 name-class 对的形式配置在 <code>strutsdefault.xml</code> 文件中，如果 <code>struts.xml 中定义的 package 继承了 Struts2 默 认的</code>struts-default` 包，便可以直接使用默认拦截器栈 defaultStack； </p>\n<p>5、Struts2 也允许自定义拦截器，自定义拦截器类须实现 Interceptor 接口，并覆盖接 口中的 intercept 方法用于实现拦截器的主要功能；自定义拦截器须在 <code>struts.xml</code> 中进 行配置才能使用； </p>\n<p>6、若在 <code>struts.xml</code> 中为 Action 指定了一个拦截器，则默认拦截器栈 defaultStack 将会失效，为了继续使用默认拦截器，必须将其进行显式地配置。</p>\n<p>7、Struts API 中的 <code>com.opensymphony.xwork2.util.ValueStack</code> 称为值栈，值栈是一 个数据区域，该区域中保存了应用范围内的所有数据和 Action 处理的用户请求数据； </p>\n<p>8、值栈被存储在 ActionContext 对象中，因此可以在任何节点访问其中的内容； </p>\n<p>9、ValueStack 接口中主要方法有：<code>Object findValue(String expr)</code>可以通过表达式查 找值栈中对应的值，<code>void setValue(String expr, Object value)</code>用于将对象及其表达式 存到值栈中； </p>\n<p>10、OGNL，即对象图导航语言，是 Struts 默认的表达式语言； </p>\n<p>11、OGNL 基础单位称为导航链，基本的链由属性名、方法调用、数组或集合元素组成；</p>\n<p>12、在 Struts2 中，值栈是 OGNL 上下文的根对象，可以直接访问，而 application、session 等其它对象不是根对象，需要使用#进行访问。</p>\n<p>13、Struts2 应用中使用 Action 调用 Model，因此 Struts2 应用中的异常在 Model 层抛 出后，通常在 Action 类中进行处理； </p>\n<p>14、Action 可以直接使用 try/catch 捕获异常，然后返回结果视图，跳转到相关页面处理 异常； </p>\n<p>15、抛出异常后，也可以不在 Action 类中捕获，而使用 throws 声明异常，交给 Struts2 框架处理； </p>\n<p>16、Struts2 允许通过 <code>struts.xml</code> 文件来配置异常的处理，使用 <code>&lt;exception-mapping&gt;</code> 标签声明异常映射，指定发生该类型异常时跳转的结果视图。</p>\n<h2 id=\"实验总结\"><a href=\"#实验总结\" class=\"headerlink\" title=\"实验总结\"></a>实验总结</h2><p><strong>1、自定义拦截器类的作用和实现方法</strong></p>\n<p><strong>作用：</strong><br>Struts2第二个层次的控制器，能够在Action执行前后完成一些通用功能，完成一些通用的控制逻辑：解析请求参数、类型转换、输入校验、防止表单多次提交。 </p>\n<p><strong>实现方法：</strong></p>\n<p>(1) 创建拦截器Interceptor </p>\n<p>(2) 继承 AbstractInterceptor 类，重写 intercept()方法（AbstractInterceptor 类实现了 Interceptor 接口） </p>\n<p>(3) Action 内使用拦截器 </p>\n<p>(4) 修改 <code>struts.xml</code> 文件，增加拦截器的配置 </p>\n<p><strong>2、Interceptor 接口中 intercept(ActionInvocation inv)、init()和 destroy()方法的作用</strong></p>\n<ul>\n<li><p><strong>intercept(ActionInvocation inv)</strong>： 允许 Interceptor 在 ActionInvocation 对请求的其余处理之前和/或之后对请求进行某些 处理，或者使处理短路，并仅返回 String 数值 </p>\n</li>\n<li><p><strong>init()</strong>： 在 interceptor 生成后产生，但在 interceptor 接受任何请求之前调用，使得 interceptor 进行初始化 </p>\n</li>\n<li><p><strong>destroy()</strong>： 让 interceptor 清理它产生的资源 </p>\n</li>\n</ul>\n<p><strong>3、defaultStack 拦截器栈中包含的主要拦截功能</strong> </p>\n<ul>\n<li><p><strong>params</strong>：解析 HTTP 请求参数，并设置成 Action 属性 </p>\n</li>\n<li><p><strong>validation</strong>：执行 xxxAction-validate 中定义的校验器 </p>\n</li>\n<li><p><strong>workflow</strong>：调用 Action 中的 validate 方法 </p>\n</li>\n<li><p><strong>i18n</strong>：负责把用户所选的语言、区域放入用户 Session 中。 </p>\n</li>\n<li><p><strong>createSession</strong>：创建 HttpSession 对象 </p>\n</li>\n<li><p><strong>timer</strong>：负责输出 Action 执行时间，分析性能 </p>\n</li>\n<li><p><strong>autowiring</strong>：自动装配，访问 Spring 中的 Bean </p>\n</li>\n</ul>\n<p><strong>4、自定义过滤器的实现方法和配置步骤，将拦截器与过滤器进行比较，并将两者的特点及区别</strong></p>\n<p><strong>配置步骤：</strong></p>\n<p>(1) 创建拦截器类，继承Filter类，重写doFilter方法</p>\n<p>(2) <code>web.xml</code> 文件配置</p>\n<p><strong>拦截器与过滤器特点和区别：</strong> </p>\n<ul>\n<li>拦截器：Struts2 中第二个层次的控制器；允许自定义；需要在 web.xml 文件中配置； </li>\n<li>过滤器：Struts2 控制器的最前端控制器；允许自定义；需要在 struts.xml 文件中配置。 </li>\n</ul>\n<p><strong>5、ValueStack 接口及其主要方法的作用和开发步骤</strong><br>ValueStack 接口中主要方法:findValue(), setValue() </p>\n<p><strong>findValue()</strong>：通过以默认搜索顺序针对堆栈评估给定表达式来查找值。 </p>\n<p><strong>setValue()</strong>：使用默认搜索顺序使用给定的表达式在堆栈中的 bean 上设置属性。 </p>\n<p>开发需要引入 <code>com.opensymphony.xwork2.util.ValueStack</code> 并实例化 ValueStack 对象，之后通过方法调用实现相关功能。 </p>\n<p><strong>6、OGNL 可访问的对象和基本语法</strong></p>\n<p>可以直接访问值栈 ValueStack（OGNL 上下文的根对象）；Action 实例被保存在值栈中，因此可以直接访问。 基本语法包含#、%、$三种符号，作用见下文 </p>\n<p><strong>7、OGNL 三种常用符号:#、%和$的作用和使用方法</strong></p>\n<p> <strong>%符号</strong>：计算 OGNL 表达式的值 </p>\n<p> <strong>$符号</strong>：在国际化资源文件中，引用 OGNL 表达式；在 Struts 2 框架配置文件中引用 OGNL 表达式 </p>\n<p> <strong>#符号</strong>：访问 OGNL 上下文和 Action 上下文；构造 Map；过滤和投影集合 </p>\n<p> <strong>8、自定义异常类的方法和步骤</strong> </p>\n<p> （1）创建自定义异常类并继承 Exception 类 </p>\n<p> （2）在 Model 中抛出自定义异常 </p>\n<p> （3）在 Action 中捕获异常 </p>\n<p> （4）在 <code>struts.xml</code> 中设置异常页面导航 </p>\n<p> （5）在 Action 中抛出异常，将其交给框架处理 </p>\n<p> （6）在 <code>struts.xml</code> 中使用标签<exception- mapping>进行异常配置 </p>\n<p> <strong>9、整理 Struts2 框架处理异常的机制，整理 <code>struts.xml</code> 文件配置异常映射的方法以及相关标签的作用</strong> </p>\n<p> Struts2 的异常处理机制是通过在 <code>struts.xml</code> 文件中配置&lt;exception-mapping……/&gt;元素完成，配置该元素时，需要指定两个属性： </p>\n<p> <strong>exception</strong>：指定该异常类型的完全限定名。</p>\n<p> <strong>result</strong>：指定逻辑视图名。 </p>\n<p> 根据<code>&lt;exception-mapping…../&gt;</code>元素出现位置的不同，异常映射又可分为两种： </p>\n<p> <strong>局部异常映射</strong>：将<code>&lt;exception-mapping… /&gt;</code>元素作为<code>&lt;action…/&gt;</code>元素的子元素配置； </p>\n<p> <strong>全局异常映射</strong>：将<code>&lt;exception-mapping… /&gt;</code>元素作为<code>&lt;global-exception-mappings… /&gt;</code> 元素的子元素配置； </p>\n<p> 全局异常映射对所有的 Action 都有效，但局部异常映射仅对该异常映射所在的 Action 有 效。如果局部异常映射和全局异常映射配置了同一个异常类型，在<code>&lt;action…./&gt;</code> 元素内的局部异常映射将覆盖全局异常映射。</p>\n"},{"title":"Hibernate 基础总结","date":"2020-02-25T05:11:20.000Z","_content":"\n\n## 知识梳理\n\n1、Hibernate 是一个 ORM（Object-Relational Mapping）框架，用于把对象模型表示的对象映射到基于 SQL 的关系模型数据结构中去，采用完全面向对象的方式来操作数据库； \n\n2、Hibernate 的主要作用是简化应用的数据持久层编程，不仅能管理 Java 类到数据库表的映射，还提供数据查询和获取数据的方法，从而大幅减少了开发人员编写 SQL 和 JDBC 代码的时间； \n\n3、Hibernate 框架主要包括持久化对象（Persistent Objects）、Hibernate 配置文件 （一般被命名为*.cfg.xml）、Hibernate 映射文件（一般被命名为 *.hbm.xml ） 三部分； \n\n4、编译运行基于 Hibernate 框架的工程，需要导入相应的 Hibernate 类库； \n\n5、由于 Hibernate 底层是基于 JDBC 的，因此在应用程序中使用 Hibernate 执行持久化操作时也需要导入相关的 JDBC 驱动（例如 MySQL 数据库驱动）；\n\n6、在实际应用中，并不都是一张表与一个实体类映射，往往可能会有一张表跟多个实体类映射的情况，称为粒度设计； \n\n7、如果表中的某些字段联合起来能表示持久化类中的某一个属性，那么可以进行基于设计的粒度设计：将表跟多个类映射；类和类之间使用关联关系；只需要一个映射文件，其中使用 component 元素进行映射； \n\n8、如果表中的某些字段不经常使用，而且占有空间较大，则可以使用基于性能 的粒度设计：一个表可以映射为多个类；每个类对应一个 *.hbm.xml 文件；根据实际情况，使用不同的类。\n\n7、在应用程序中，用来实现业务实体的类被称为持久化类（Persistent Class）如客户信息管理系统中的 Customer 类； \n\n8、Hibernate 框架中的持久化类与数据库表对应，常用 POJO 编程模式实现，符合JavaBean 规范，提供 public 的无参构造方法，提供符合命名规范的 getters 和 setters 方法； \n\n9、持久化类与数据库表对应， 类的属性与表的字段对应；持久化类的对象被称为持久化对象 PO（Persistent Objects），PO 对应表中的一条记录； \n\n10、持久化对象映射数据库中的记录，其映射关系依赖 Hibernate 框架的映射文件配置，映射文件是 XML 文件，往往以*.hbm.xml 形式命名，其中*是持久化对象的类名； \n\n11、Hibernate 映射文件中，元素 `<id>` 表示持久化类中的主键， `<id>` 的子元素 `<generator>` 表示主键的生成策略，其取值可以是“assigned”（用户赋值）、“increment”（自动递增）等等； \n\n12、若数据库表中有多个列组成主键，则需要将其对应的持久化类中相应的多个属性封装成一个类，作为复合主键。\n\n\n## 实验总结\n**1、总结 Hibernate 配置文件`hibernate.cfg.xml`中各元素及其属性的作用；**\n\n- hibernate.connection.url:连接数据库url地址\n- hibernate.connection.username：连接数据库用户名\n- hibernate.connection.password：连接数据库密码\n- \thibernate.connection.driver_class：连接数据库JDBC驱动类\n- hibernate.dialect：连接数据库所使用的SQL语言\n- mapping resource：与当前配置文件相匹配的映射文件\n\n**2、总结持久化类与数据库表的映射关系，以及映射文件中主要元素及其属性的作用**\n\n- `<class  name=\"类名\"  table=\"表名\">`：类和表对应\n- `<id name=\"属性\" column=\"列名\">`：填写主键，即使表内没有主键，配置文件中也要配置一个唯一标识\n- `<generator class=\"assigned\"/>`：主键的生成策略，assigned 表示由用户赋值\n- `<property name=\"属性\" column=\"列名\"/>`：将属性和列对应起来\n\n**3、\t总结Action、Service 和 DAO 之间的调用关系，思考Java Web中的 DAO 类与当前 DAO 类的区别**\n\n**流程：**首先Action接受请求，调用生成的Service实例，Service经过业务逻辑处理之后调用DAO，DAO对数据库进行操作；\n\n**区别：**JavaWeb中DAO文件需要包含连接对象的定义，包含数据库连接和驱动的相关信息，而本实验中相关信息已经包含在配置文件中；JavaWeb中DAO文件需要定义结果集，而本实验中可以直接使用ArrayList存储结果；JavaWeb中DAO文件执行的sql语句为标准的sql语句而本实验中不是。\n\n**4、总结 POJO 模式下持久化类的规范**\n\n1. 提供无参的构造器\n2. 为每一个实体字段提供对应的getter/setter方法\n3. 每一个实体类都需要提供一个标识属性，与数据库中的主键对应。\n4. 实体类字段均使用包装类型\n5. 实体类不能使用final修饰\n\n**5、总结映射文件中主要元素（如class、id、generator、property）及其属性的含义与作用**\n\n•\t`<class>` ：持久化类名，类名class与表名table属性对应\n\n•\t`<id>` ：持久化类中的主键,主键属性与列名column属性对应\n\n•\t`<generator>` ：主键生成策略\n\n•\t`<property>` ：非主键属性property与column属性对应\n\n**6、总结设置复合主键的方法和步骤**\n\n首先将复合主键封装为一个类，修改PO类将复合主键作为其属性之一，修改Hibernate映射文件，将主键类中的每一个属性和表中的列对应，并指定复合主键的类型。\n\n**7、总结 Hibernate 映射文件中主键各种生成策略的作用**\n\n- assigned：用户赋值\n- increment 策略：自动递增;必须保证主键的列是\"long\"、\"integer\"或是\"short\"，必须是一个整数;系统会自动将主键列最大的值获得之后加 1，进行赋值\n- identity：由数据库根据 identity 生成主键，但是数据库必须支持 identity\n- sequence：由数据库根据序列生成主键，但是数据库必须支持 sequence\n- native：系统自动选择相应算法生成主键\n- uuid.hex ：利用 uuid 算法生成主键;必须保证该列是字符串类型;系统会自动给定一个随机、唯一的字符串\n- hilo：根据 Hibernate 的 hilo 生成主键\n\n**8、总结两种粒度设计的方法及特点**\n\n**基于设计的粒度设计：** 将表跟多个类映射；只需要一个映射文件，其中使用component元素进行映射\n\n**基于性能的粒度设计：** 一个表可以映射为多个类，每个类对应一个*.hbm.xml文件，根据实际情况，使用不同的类\n\n**9、总结 Hibernate 配置文件`hibernate.cfg.xml`中的`connection.autocommit`属性的作用**\n\n只有执行 commit 后 connection 的操作才会在数据库中真正执行。如果jdbc connection 的 autoCommit 属性是 false ，且 sql 语句中没有显示 commit，则 sql 语句即使被发送到数据库中也没有真正执行 sql；如果 connection 的 autoCommit 为true，每一条发送到数据库中的sql会自动commit。\n","source":"_posts/Hibernate_Basic.md","raw":"---\ntitle: Hibernate 基础总结\ndate: 2020-02-25 13:11:20\ncategories: \n- tech\ntags: \n- Hibernate\n- JavaEE\n- 总结\n---\n\n\n## 知识梳理\n\n1、Hibernate 是一个 ORM（Object-Relational Mapping）框架，用于把对象模型表示的对象映射到基于 SQL 的关系模型数据结构中去，采用完全面向对象的方式来操作数据库； \n\n2、Hibernate 的主要作用是简化应用的数据持久层编程，不仅能管理 Java 类到数据库表的映射，还提供数据查询和获取数据的方法，从而大幅减少了开发人员编写 SQL 和 JDBC 代码的时间； \n\n3、Hibernate 框架主要包括持久化对象（Persistent Objects）、Hibernate 配置文件 （一般被命名为*.cfg.xml）、Hibernate 映射文件（一般被命名为 *.hbm.xml ） 三部分； \n\n4、编译运行基于 Hibernate 框架的工程，需要导入相应的 Hibernate 类库； \n\n5、由于 Hibernate 底层是基于 JDBC 的，因此在应用程序中使用 Hibernate 执行持久化操作时也需要导入相关的 JDBC 驱动（例如 MySQL 数据库驱动）；\n\n6、在实际应用中，并不都是一张表与一个实体类映射，往往可能会有一张表跟多个实体类映射的情况，称为粒度设计； \n\n7、如果表中的某些字段联合起来能表示持久化类中的某一个属性，那么可以进行基于设计的粒度设计：将表跟多个类映射；类和类之间使用关联关系；只需要一个映射文件，其中使用 component 元素进行映射； \n\n8、如果表中的某些字段不经常使用，而且占有空间较大，则可以使用基于性能 的粒度设计：一个表可以映射为多个类；每个类对应一个 *.hbm.xml 文件；根据实际情况，使用不同的类。\n\n7、在应用程序中，用来实现业务实体的类被称为持久化类（Persistent Class）如客户信息管理系统中的 Customer 类； \n\n8、Hibernate 框架中的持久化类与数据库表对应，常用 POJO 编程模式实现，符合JavaBean 规范，提供 public 的无参构造方法，提供符合命名规范的 getters 和 setters 方法； \n\n9、持久化类与数据库表对应， 类的属性与表的字段对应；持久化类的对象被称为持久化对象 PO（Persistent Objects），PO 对应表中的一条记录； \n\n10、持久化对象映射数据库中的记录，其映射关系依赖 Hibernate 框架的映射文件配置，映射文件是 XML 文件，往往以*.hbm.xml 形式命名，其中*是持久化对象的类名； \n\n11、Hibernate 映射文件中，元素 `<id>` 表示持久化类中的主键， `<id>` 的子元素 `<generator>` 表示主键的生成策略，其取值可以是“assigned”（用户赋值）、“increment”（自动递增）等等； \n\n12、若数据库表中有多个列组成主键，则需要将其对应的持久化类中相应的多个属性封装成一个类，作为复合主键。\n\n\n## 实验总结\n**1、总结 Hibernate 配置文件`hibernate.cfg.xml`中各元素及其属性的作用；**\n\n- hibernate.connection.url:连接数据库url地址\n- hibernate.connection.username：连接数据库用户名\n- hibernate.connection.password：连接数据库密码\n- \thibernate.connection.driver_class：连接数据库JDBC驱动类\n- hibernate.dialect：连接数据库所使用的SQL语言\n- mapping resource：与当前配置文件相匹配的映射文件\n\n**2、总结持久化类与数据库表的映射关系，以及映射文件中主要元素及其属性的作用**\n\n- `<class  name=\"类名\"  table=\"表名\">`：类和表对应\n- `<id name=\"属性\" column=\"列名\">`：填写主键，即使表内没有主键，配置文件中也要配置一个唯一标识\n- `<generator class=\"assigned\"/>`：主键的生成策略，assigned 表示由用户赋值\n- `<property name=\"属性\" column=\"列名\"/>`：将属性和列对应起来\n\n**3、\t总结Action、Service 和 DAO 之间的调用关系，思考Java Web中的 DAO 类与当前 DAO 类的区别**\n\n**流程：**首先Action接受请求，调用生成的Service实例，Service经过业务逻辑处理之后调用DAO，DAO对数据库进行操作；\n\n**区别：**JavaWeb中DAO文件需要包含连接对象的定义，包含数据库连接和驱动的相关信息，而本实验中相关信息已经包含在配置文件中；JavaWeb中DAO文件需要定义结果集，而本实验中可以直接使用ArrayList存储结果；JavaWeb中DAO文件执行的sql语句为标准的sql语句而本实验中不是。\n\n**4、总结 POJO 模式下持久化类的规范**\n\n1. 提供无参的构造器\n2. 为每一个实体字段提供对应的getter/setter方法\n3. 每一个实体类都需要提供一个标识属性，与数据库中的主键对应。\n4. 实体类字段均使用包装类型\n5. 实体类不能使用final修饰\n\n**5、总结映射文件中主要元素（如class、id、generator、property）及其属性的含义与作用**\n\n•\t`<class>` ：持久化类名，类名class与表名table属性对应\n\n•\t`<id>` ：持久化类中的主键,主键属性与列名column属性对应\n\n•\t`<generator>` ：主键生成策略\n\n•\t`<property>` ：非主键属性property与column属性对应\n\n**6、总结设置复合主键的方法和步骤**\n\n首先将复合主键封装为一个类，修改PO类将复合主键作为其属性之一，修改Hibernate映射文件，将主键类中的每一个属性和表中的列对应，并指定复合主键的类型。\n\n**7、总结 Hibernate 映射文件中主键各种生成策略的作用**\n\n- assigned：用户赋值\n- increment 策略：自动递增;必须保证主键的列是\"long\"、\"integer\"或是\"short\"，必须是一个整数;系统会自动将主键列最大的值获得之后加 1，进行赋值\n- identity：由数据库根据 identity 生成主键，但是数据库必须支持 identity\n- sequence：由数据库根据序列生成主键，但是数据库必须支持 sequence\n- native：系统自动选择相应算法生成主键\n- uuid.hex ：利用 uuid 算法生成主键;必须保证该列是字符串类型;系统会自动给定一个随机、唯一的字符串\n- hilo：根据 Hibernate 的 hilo 生成主键\n\n**8、总结两种粒度设计的方法及特点**\n\n**基于设计的粒度设计：** 将表跟多个类映射；只需要一个映射文件，其中使用component元素进行映射\n\n**基于性能的粒度设计：** 一个表可以映射为多个类，每个类对应一个*.hbm.xml文件，根据实际情况，使用不同的类\n\n**9、总结 Hibernate 配置文件`hibernate.cfg.xml`中的`connection.autocommit`属性的作用**\n\n只有执行 commit 后 connection 的操作才会在数据库中真正执行。如果jdbc connection 的 autoCommit 属性是 false ，且 sql 语句中没有显示 commit，则 sql 语句即使被发送到数据库中也没有真正执行 sql；如果 connection 的 autoCommit 为true，每一条发送到数据库中的sql会自动commit。\n","slug":"Hibernate_Basic","published":1,"updated":"2020-02-27T12:12:58.752Z","_id":"ck74pknuh000kca6bhzvr9j3w","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"知识梳理\"><a href=\"#知识梳理\" class=\"headerlink\" title=\"知识梳理\"></a>知识梳理</h2><p>1、Hibernate 是一个 ORM（Object-Relational Mapping）框架，用于把对象模型表示的对象映射到基于 SQL 的关系模型数据结构中去，采用完全面向对象的方式来操作数据库； </p>\n<p>2、Hibernate 的主要作用是简化应用的数据持久层编程，不仅能管理 Java 类到数据库表的映射，还提供数据查询和获取数据的方法，从而大幅减少了开发人员编写 SQL 和 JDBC 代码的时间； </p>\n<p>3、Hibernate 框架主要包括持久化对象（Persistent Objects）、Hibernate 配置文件 （一般被命名为*.cfg.xml）、Hibernate 映射文件（一般被命名为 *.hbm.xml ） 三部分； </p>\n<p>4、编译运行基于 Hibernate 框架的工程，需要导入相应的 Hibernate 类库； </p>\n<p>5、由于 Hibernate 底层是基于 JDBC 的，因此在应用程序中使用 Hibernate 执行持久化操作时也需要导入相关的 JDBC 驱动（例如 MySQL 数据库驱动）；</p>\n<p>6、在实际应用中，并不都是一张表与一个实体类映射，往往可能会有一张表跟多个实体类映射的情况，称为粒度设计； </p>\n<p>7、如果表中的某些字段联合起来能表示持久化类中的某一个属性，那么可以进行基于设计的粒度设计：将表跟多个类映射；类和类之间使用关联关系；只需要一个映射文件，其中使用 component 元素进行映射； </p>\n<p>8、如果表中的某些字段不经常使用，而且占有空间较大，则可以使用基于性能 的粒度设计：一个表可以映射为多个类；每个类对应一个 *.hbm.xml 文件；根据实际情况，使用不同的类。</p>\n<p>7、在应用程序中，用来实现业务实体的类被称为持久化类（Persistent Class）如客户信息管理系统中的 Customer 类； </p>\n<p>8、Hibernate 框架中的持久化类与数据库表对应，常用 POJO 编程模式实现，符合JavaBean 规范，提供 public 的无参构造方法，提供符合命名规范的 getters 和 setters 方法； </p>\n<p>9、持久化类与数据库表对应， 类的属性与表的字段对应；持久化类的对象被称为持久化对象 PO（Persistent Objects），PO 对应表中的一条记录； </p>\n<p>10、持久化对象映射数据库中的记录，其映射关系依赖 Hibernate 框架的映射文件配置，映射文件是 XML 文件，往往以<em>.hbm.xml 形式命名，其中</em>是持久化对象的类名； </p>\n<p>11、Hibernate 映射文件中，元素 <code>&lt;id&gt;</code> 表示持久化类中的主键， <code>&lt;id&gt;</code> 的子元素 <code>&lt;generator&gt;</code> 表示主键的生成策略，其取值可以是“assigned”（用户赋值）、“increment”（自动递增）等等； </p>\n<p>12、若数据库表中有多个列组成主键，则需要将其对应的持久化类中相应的多个属性封装成一个类，作为复合主键。</p>\n<h2 id=\"实验总结\"><a href=\"#实验总结\" class=\"headerlink\" title=\"实验总结\"></a>实验总结</h2><p><strong>1、总结 Hibernate 配置文件<code>hibernate.cfg.xml</code>中各元素及其属性的作用；</strong></p>\n<ul>\n<li>hibernate.connection.url:连接数据库url地址</li>\n<li>hibernate.connection.username：连接数据库用户名</li>\n<li>hibernate.connection.password：连接数据库密码</li>\n<li>hibernate.connection.driver_class：连接数据库JDBC驱动类</li>\n<li>hibernate.dialect：连接数据库所使用的SQL语言</li>\n<li>mapping resource：与当前配置文件相匹配的映射文件</li>\n</ul>\n<p><strong>2、总结持久化类与数据库表的映射关系，以及映射文件中主要元素及其属性的作用</strong></p>\n<ul>\n<li><code>&lt;class  name=&quot;类名&quot;  table=&quot;表名&quot;&gt;</code>：类和表对应</li>\n<li><code>&lt;id name=&quot;属性&quot; column=&quot;列名&quot;&gt;</code>：填写主键，即使表内没有主键，配置文件中也要配置一个唯一标识</li>\n<li><code>&lt;generator class=&quot;assigned&quot;/&gt;</code>：主键的生成策略，assigned 表示由用户赋值</li>\n<li><code>&lt;property name=&quot;属性&quot; column=&quot;列名&quot;/&gt;</code>：将属性和列对应起来</li>\n</ul>\n<p><strong>3、    总结Action、Service 和 DAO 之间的调用关系，思考Java Web中的 DAO 类与当前 DAO 类的区别</strong></p>\n<p><strong>流程：</strong>首先Action接受请求，调用生成的Service实例，Service经过业务逻辑处理之后调用DAO，DAO对数据库进行操作；</p>\n<p><strong>区别：</strong>JavaWeb中DAO文件需要包含连接对象的定义，包含数据库连接和驱动的相关信息，而本实验中相关信息已经包含在配置文件中；JavaWeb中DAO文件需要定义结果集，而本实验中可以直接使用ArrayList存储结果；JavaWeb中DAO文件执行的sql语句为标准的sql语句而本实验中不是。</p>\n<p><strong>4、总结 POJO 模式下持久化类的规范</strong></p>\n<ol>\n<li>提供无参的构造器</li>\n<li>为每一个实体字段提供对应的getter/setter方法</li>\n<li>每一个实体类都需要提供一个标识属性，与数据库中的主键对应。</li>\n<li>实体类字段均使用包装类型</li>\n<li>实体类不能使用final修饰</li>\n</ol>\n<p><strong>5、总结映射文件中主要元素（如class、id、generator、property）及其属性的含义与作用</strong></p>\n<p>•    <code>&lt;class&gt;</code> ：持久化类名，类名class与表名table属性对应</p>\n<p>•    <code>&lt;id&gt;</code> ：持久化类中的主键,主键属性与列名column属性对应</p>\n<p>•    <code>&lt;generator&gt;</code> ：主键生成策略</p>\n<p>•    <code>&lt;property&gt;</code> ：非主键属性property与column属性对应</p>\n<p><strong>6、总结设置复合主键的方法和步骤</strong></p>\n<p>首先将复合主键封装为一个类，修改PO类将复合主键作为其属性之一，修改Hibernate映射文件，将主键类中的每一个属性和表中的列对应，并指定复合主键的类型。</p>\n<p><strong>7、总结 Hibernate 映射文件中主键各种生成策略的作用</strong></p>\n<ul>\n<li>assigned：用户赋值</li>\n<li>increment 策略：自动递增;必须保证主键的列是”long”、”integer”或是”short”，必须是一个整数;系统会自动将主键列最大的值获得之后加 1，进行赋值</li>\n<li>identity：由数据库根据 identity 生成主键，但是数据库必须支持 identity</li>\n<li>sequence：由数据库根据序列生成主键，但是数据库必须支持 sequence</li>\n<li>native：系统自动选择相应算法生成主键</li>\n<li>uuid.hex ：利用 uuid 算法生成主键;必须保证该列是字符串类型;系统会自动给定一个随机、唯一的字符串</li>\n<li>hilo：根据 Hibernate 的 hilo 生成主键</li>\n</ul>\n<p><strong>8、总结两种粒度设计的方法及特点</strong></p>\n<p><strong>基于设计的粒度设计：</strong> 将表跟多个类映射；只需要一个映射文件，其中使用component元素进行映射</p>\n<p><strong>基于性能的粒度设计：</strong> 一个表可以映射为多个类，每个类对应一个*.hbm.xml文件，根据实际情况，使用不同的类</p>\n<p><strong>9、总结 Hibernate 配置文件<code>hibernate.cfg.xml</code>中的<code>connection.autocommit</code>属性的作用</strong></p>\n<p>只有执行 commit 后 connection 的操作才会在数据库中真正执行。如果jdbc connection 的 autoCommit 属性是 false ，且 sql 语句中没有显示 commit，则 sql 语句即使被发送到数据库中也没有真正执行 sql；如果 connection 的 autoCommit 为true，每一条发送到数据库中的sql会自动commit。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"知识梳理\"><a href=\"#知识梳理\" class=\"headerlink\" title=\"知识梳理\"></a>知识梳理</h2><p>1、Hibernate 是一个 ORM（Object-Relational Mapping）框架，用于把对象模型表示的对象映射到基于 SQL 的关系模型数据结构中去，采用完全面向对象的方式来操作数据库； </p>\n<p>2、Hibernate 的主要作用是简化应用的数据持久层编程，不仅能管理 Java 类到数据库表的映射，还提供数据查询和获取数据的方法，从而大幅减少了开发人员编写 SQL 和 JDBC 代码的时间； </p>\n<p>3、Hibernate 框架主要包括持久化对象（Persistent Objects）、Hibernate 配置文件 （一般被命名为*.cfg.xml）、Hibernate 映射文件（一般被命名为 *.hbm.xml ） 三部分； </p>\n<p>4、编译运行基于 Hibernate 框架的工程，需要导入相应的 Hibernate 类库； </p>\n<p>5、由于 Hibernate 底层是基于 JDBC 的，因此在应用程序中使用 Hibernate 执行持久化操作时也需要导入相关的 JDBC 驱动（例如 MySQL 数据库驱动）；</p>\n<p>6、在实际应用中，并不都是一张表与一个实体类映射，往往可能会有一张表跟多个实体类映射的情况，称为粒度设计； </p>\n<p>7、如果表中的某些字段联合起来能表示持久化类中的某一个属性，那么可以进行基于设计的粒度设计：将表跟多个类映射；类和类之间使用关联关系；只需要一个映射文件，其中使用 component 元素进行映射； </p>\n<p>8、如果表中的某些字段不经常使用，而且占有空间较大，则可以使用基于性能 的粒度设计：一个表可以映射为多个类；每个类对应一个 *.hbm.xml 文件；根据实际情况，使用不同的类。</p>\n<p>7、在应用程序中，用来实现业务实体的类被称为持久化类（Persistent Class）如客户信息管理系统中的 Customer 类； </p>\n<p>8、Hibernate 框架中的持久化类与数据库表对应，常用 POJO 编程模式实现，符合JavaBean 规范，提供 public 的无参构造方法，提供符合命名规范的 getters 和 setters 方法； </p>\n<p>9、持久化类与数据库表对应， 类的属性与表的字段对应；持久化类的对象被称为持久化对象 PO（Persistent Objects），PO 对应表中的一条记录； </p>\n<p>10、持久化对象映射数据库中的记录，其映射关系依赖 Hibernate 框架的映射文件配置，映射文件是 XML 文件，往往以<em>.hbm.xml 形式命名，其中</em>是持久化对象的类名； </p>\n<p>11、Hibernate 映射文件中，元素 <code>&lt;id&gt;</code> 表示持久化类中的主键， <code>&lt;id&gt;</code> 的子元素 <code>&lt;generator&gt;</code> 表示主键的生成策略，其取值可以是“assigned”（用户赋值）、“increment”（自动递增）等等； </p>\n<p>12、若数据库表中有多个列组成主键，则需要将其对应的持久化类中相应的多个属性封装成一个类，作为复合主键。</p>\n<h2 id=\"实验总结\"><a href=\"#实验总结\" class=\"headerlink\" title=\"实验总结\"></a>实验总结</h2><p><strong>1、总结 Hibernate 配置文件<code>hibernate.cfg.xml</code>中各元素及其属性的作用；</strong></p>\n<ul>\n<li>hibernate.connection.url:连接数据库url地址</li>\n<li>hibernate.connection.username：连接数据库用户名</li>\n<li>hibernate.connection.password：连接数据库密码</li>\n<li>hibernate.connection.driver_class：连接数据库JDBC驱动类</li>\n<li>hibernate.dialect：连接数据库所使用的SQL语言</li>\n<li>mapping resource：与当前配置文件相匹配的映射文件</li>\n</ul>\n<p><strong>2、总结持久化类与数据库表的映射关系，以及映射文件中主要元素及其属性的作用</strong></p>\n<ul>\n<li><code>&lt;class  name=&quot;类名&quot;  table=&quot;表名&quot;&gt;</code>：类和表对应</li>\n<li><code>&lt;id name=&quot;属性&quot; column=&quot;列名&quot;&gt;</code>：填写主键，即使表内没有主键，配置文件中也要配置一个唯一标识</li>\n<li><code>&lt;generator class=&quot;assigned&quot;/&gt;</code>：主键的生成策略，assigned 表示由用户赋值</li>\n<li><code>&lt;property name=&quot;属性&quot; column=&quot;列名&quot;/&gt;</code>：将属性和列对应起来</li>\n</ul>\n<p><strong>3、    总结Action、Service 和 DAO 之间的调用关系，思考Java Web中的 DAO 类与当前 DAO 类的区别</strong></p>\n<p><strong>流程：</strong>首先Action接受请求，调用生成的Service实例，Service经过业务逻辑处理之后调用DAO，DAO对数据库进行操作；</p>\n<p><strong>区别：</strong>JavaWeb中DAO文件需要包含连接对象的定义，包含数据库连接和驱动的相关信息，而本实验中相关信息已经包含在配置文件中；JavaWeb中DAO文件需要定义结果集，而本实验中可以直接使用ArrayList存储结果；JavaWeb中DAO文件执行的sql语句为标准的sql语句而本实验中不是。</p>\n<p><strong>4、总结 POJO 模式下持久化类的规范</strong></p>\n<ol>\n<li>提供无参的构造器</li>\n<li>为每一个实体字段提供对应的getter/setter方法</li>\n<li>每一个实体类都需要提供一个标识属性，与数据库中的主键对应。</li>\n<li>实体类字段均使用包装类型</li>\n<li>实体类不能使用final修饰</li>\n</ol>\n<p><strong>5、总结映射文件中主要元素（如class、id、generator、property）及其属性的含义与作用</strong></p>\n<p>•    <code>&lt;class&gt;</code> ：持久化类名，类名class与表名table属性对应</p>\n<p>•    <code>&lt;id&gt;</code> ：持久化类中的主键,主键属性与列名column属性对应</p>\n<p>•    <code>&lt;generator&gt;</code> ：主键生成策略</p>\n<p>•    <code>&lt;property&gt;</code> ：非主键属性property与column属性对应</p>\n<p><strong>6、总结设置复合主键的方法和步骤</strong></p>\n<p>首先将复合主键封装为一个类，修改PO类将复合主键作为其属性之一，修改Hibernate映射文件，将主键类中的每一个属性和表中的列对应，并指定复合主键的类型。</p>\n<p><strong>7、总结 Hibernate 映射文件中主键各种生成策略的作用</strong></p>\n<ul>\n<li>assigned：用户赋值</li>\n<li>increment 策略：自动递增;必须保证主键的列是”long”、”integer”或是”short”，必须是一个整数;系统会自动将主键列最大的值获得之后加 1，进行赋值</li>\n<li>identity：由数据库根据 identity 生成主键，但是数据库必须支持 identity</li>\n<li>sequence：由数据库根据序列生成主键，但是数据库必须支持 sequence</li>\n<li>native：系统自动选择相应算法生成主键</li>\n<li>uuid.hex ：利用 uuid 算法生成主键;必须保证该列是字符串类型;系统会自动给定一个随机、唯一的字符串</li>\n<li>hilo：根据 Hibernate 的 hilo 生成主键</li>\n</ul>\n<p><strong>8、总结两种粒度设计的方法及特点</strong></p>\n<p><strong>基于设计的粒度设计：</strong> 将表跟多个类映射；只需要一个映射文件，其中使用component元素进行映射</p>\n<p><strong>基于性能的粒度设计：</strong> 一个表可以映射为多个类，每个类对应一个*.hbm.xml文件，根据实际情况，使用不同的类</p>\n<p><strong>9、总结 Hibernate 配置文件<code>hibernate.cfg.xml</code>中的<code>connection.autocommit</code>属性的作用</strong></p>\n<p>只有执行 commit 后 connection 的操作才会在数据库中真正执行。如果jdbc connection 的 autoCommit 属性是 false ，且 sql 语句中没有显示 commit，则 sql 语句即使被发送到数据库中也没有真正执行 sql；如果 connection 的 autoCommit 为true，每一条发送到数据库中的sql会自动commit。</p>\n"},{"title":"OpenCV 图像直方图与均衡化","date":"2020-03-16T08:20:20.000Z","_content":"\n> 如果您不知道如何在 Mac 上使用 Xcode 配置 `OpenCV`，可以参考我写的上一篇博文。\n\n直方图是图像的一种统计表达，反映了图像中灰度的分布情况。以概率论为基础的，通过改变图像的直方图来改变图象中像素的灰度，以达到图像增强的目标，常称直方图修正。\n\n{% asset_img 直方图.png %}\n\n直方图均衡化原理即借助直方图变换实现（归一的）灰度映射，实现思想为对在图像中像素个数多的灰度级进行展宽，而对像素个数少的灰度级进行缩减。从而达到清晰图像的目的。\n\n回到 `OpenCV`，`OpenCV`中提供了`equalizeHist`函数实现灰度图像直方图均衡化，给出如下函数原型及相关文档。\n\n```\nvoid cv::equalizeHist\t(\tInputArray src,\nOutputArray \tdst \n)\t\n```\n\n{% asset_img equa.jpg %}\n\n实现的图像直方图均衡化算法就是把直方图的每个灰度级进行归一化处理，求各个灰度的累积分布并得到一个映射的灰度映射表，最后根据相应的灰度值来修正原图中的每个像素的像素值。\n\n`OpenCV`中提供了`cvtColor`函数实现彩色图像转为灰度图像，给出如下函数原型及相关文档。\n{% asset_img cvcolor.png %}\n![cvcolo](media/15843608120528/cvcolor.png)\n\n至于直方图的绘制方法，`OpenCV`中提供了`calcList`函数计算图像直方图，尝试使用函数来实现会更符合操作流程。\n{% asset_img calcHist.jpg %}\n\n## 说明\n本次实验需要完成以下任务：\n1. 完成直方图的绘制\n2. 使 RGB 图像变为灰度图像\n3. 完成图像直方图均衡化\n给出如下代码：\n\n```\n#include <opencv2/opencv.hpp>\n#include <iostream>\n\nusing namespace cv;\nusing namespace std;\n\n MatND getHistogram(Mat &image)\n{\n    MatND hist;\n    int channels[] = {0};\n    int dims = 1;\n    int histSize[] = {256};\n    float granges[] = {0, 255};\n    const float *ranges[] = {granges};\n    calcHist(&image, 1, channels, Mat(), hist, dims, histSize, ranges);\n    return hist;\n}\n //  将图像直方图展示出来\n Mat getHistogramImage(Mat &image)\n{\n    MatND hist = getHistogram(image);\n    Mat showImage(256,256, CV_8U,Scalar(0));\n    int i;\n    double maxValue = 0;\n    minMaxLoc(hist, 0, &maxValue, 0, 0);\n    for(i = 0; i < 256; i++)\n    {\n        float value = hist.at<float>(i);\n        int intensity = saturate_cast<int>(256 - 256* (value/maxValue));\n        rectangle(showImage, Point(i,256 - 1), Point((i+1)-1, intensity), Scalar(255));\n    }\n    return showImage;\n}\n\nint main()\n{\n    Mat src= imread(\"original.jpeg\");// 读取图片\n    Mat gray,equa;\n    Mat grayHistogram,equaHistogram;\n\n    if(!src.data)             // 检查非法输入\n      {\n          cout <<  \"无法读取照片\" << endl ;\n          return -1;\n      }\n\n    namedWindow(\"RGB\",WINDOW_AUTOSIZE);   // 创建图片显示自动调整大小的窗口\n    imshow(\"RGB\",src);    // 在窗口显示原始图片\n    \n    cvtColor(src, gray, COLOR_BGR2GRAY);\n    namedWindow(\"GRAY\",WINDOW_AUTOSIZE);\n    imshow(\"GRAY\",gray);    // 在窗口显示灰度图片\n    \n    grayHistogram = getHistogramImage(gray);\n    //获得灰度图直方图\n    namedWindow(\"FirstHistogram\",WINDOW_AUTOSIZE);\nimshow(\"FirstHistogram\",grayHistogram);    // 在窗口显示灰度图直方图\n    \n    equalizeHist(gray, equa);\n    namedWindow(\"EQUA\",WINDOW_AUTOSIZE); \n    imshow(\"EQUA\",equa);    // 在窗口显示均衡化处理后图片\n    \n    imwrite(\"result.jpg\", equa); // 存储实验结果\n    \n    equaHistogram = getHistogramImage(equa);  //获得均衡化处理后直方图\n    \n    namedWindow(\"SecondHistogram\",WINDOW_AUTOSIZE; \n    imshow(\"SecondHistogram\",equaHistogram);    // 在窗口显示均衡化处理后\n    \n    waitKey(0); // 按键等待，需要在窗口任意输入字符退出，0代表永久等待\n    \n    src.release();\n    gray.release();\n    equa.release();\n    grayHistogram.release();\n    equaHistogram.release();\n    destroyWindow(\"RGB\");\n    destroyWindow(\"GRAY\");\n    destroyWindow(\"EQUA\");\n    destroyWindow(\"FirstHistogram\");\n    destroyWindow(\"SecondHistogram\");\n    return 0;\n}\n```\n\n## 实验结果\n![201706061715方宣淼实验一-1-](media/15843608120528/201706061715%E6%96%B9%E5%AE%A3%E6%B7%BC%E5%AE%9E%E9%AA%8C%E4%B8%80-1-.png)\n第一张图片为未处理过的原图，第二张图片为灰度处理后的图片。第三张图片为均衡化处理后的灰度图，从直方图很能看出区别。\n\n## 参考\n[Dongcheng Lai的知乎专栏](https://docs.opencv.org/master/)\n[Dongcheng Lai的知乎专栏](https://zhuanlan.zhihu.com/p/73201428)\n[opencv图像直方图的计算及绘制-Naruto_Q的博客](https://blog.csdn.net/piaoxuezhong/article/details/54588270)","source":"_posts/OpenCV_Grayscale.md","raw":"---\ntitle: OpenCV 图像直方图与均衡化\ndate: 2020-03-16 16:20:20\ncategories: \n- tech\ntags: \n- OpenCV\n- Xcode\n- Grayscale\n---\n\n> 如果您不知道如何在 Mac 上使用 Xcode 配置 `OpenCV`，可以参考我写的上一篇博文。\n\n直方图是图像的一种统计表达，反映了图像中灰度的分布情况。以概率论为基础的，通过改变图像的直方图来改变图象中像素的灰度，以达到图像增强的目标，常称直方图修正。\n\n{% asset_img 直方图.png %}\n\n直方图均衡化原理即借助直方图变换实现（归一的）灰度映射，实现思想为对在图像中像素个数多的灰度级进行展宽，而对像素个数少的灰度级进行缩减。从而达到清晰图像的目的。\n\n回到 `OpenCV`，`OpenCV`中提供了`equalizeHist`函数实现灰度图像直方图均衡化，给出如下函数原型及相关文档。\n\n```\nvoid cv::equalizeHist\t(\tInputArray src,\nOutputArray \tdst \n)\t\n```\n\n{% asset_img equa.jpg %}\n\n实现的图像直方图均衡化算法就是把直方图的每个灰度级进行归一化处理，求各个灰度的累积分布并得到一个映射的灰度映射表，最后根据相应的灰度值来修正原图中的每个像素的像素值。\n\n`OpenCV`中提供了`cvtColor`函数实现彩色图像转为灰度图像，给出如下函数原型及相关文档。\n{% asset_img cvcolor.png %}\n![cvcolo](media/15843608120528/cvcolor.png)\n\n至于直方图的绘制方法，`OpenCV`中提供了`calcList`函数计算图像直方图，尝试使用函数来实现会更符合操作流程。\n{% asset_img calcHist.jpg %}\n\n## 说明\n本次实验需要完成以下任务：\n1. 完成直方图的绘制\n2. 使 RGB 图像变为灰度图像\n3. 完成图像直方图均衡化\n给出如下代码：\n\n```\n#include <opencv2/opencv.hpp>\n#include <iostream>\n\nusing namespace cv;\nusing namespace std;\n\n MatND getHistogram(Mat &image)\n{\n    MatND hist;\n    int channels[] = {0};\n    int dims = 1;\n    int histSize[] = {256};\n    float granges[] = {0, 255};\n    const float *ranges[] = {granges};\n    calcHist(&image, 1, channels, Mat(), hist, dims, histSize, ranges);\n    return hist;\n}\n //  将图像直方图展示出来\n Mat getHistogramImage(Mat &image)\n{\n    MatND hist = getHistogram(image);\n    Mat showImage(256,256, CV_8U,Scalar(0));\n    int i;\n    double maxValue = 0;\n    minMaxLoc(hist, 0, &maxValue, 0, 0);\n    for(i = 0; i < 256; i++)\n    {\n        float value = hist.at<float>(i);\n        int intensity = saturate_cast<int>(256 - 256* (value/maxValue));\n        rectangle(showImage, Point(i,256 - 1), Point((i+1)-1, intensity), Scalar(255));\n    }\n    return showImage;\n}\n\nint main()\n{\n    Mat src= imread(\"original.jpeg\");// 读取图片\n    Mat gray,equa;\n    Mat grayHistogram,equaHistogram;\n\n    if(!src.data)             // 检查非法输入\n      {\n          cout <<  \"无法读取照片\" << endl ;\n          return -1;\n      }\n\n    namedWindow(\"RGB\",WINDOW_AUTOSIZE);   // 创建图片显示自动调整大小的窗口\n    imshow(\"RGB\",src);    // 在窗口显示原始图片\n    \n    cvtColor(src, gray, COLOR_BGR2GRAY);\n    namedWindow(\"GRAY\",WINDOW_AUTOSIZE);\n    imshow(\"GRAY\",gray);    // 在窗口显示灰度图片\n    \n    grayHistogram = getHistogramImage(gray);\n    //获得灰度图直方图\n    namedWindow(\"FirstHistogram\",WINDOW_AUTOSIZE);\nimshow(\"FirstHistogram\",grayHistogram);    // 在窗口显示灰度图直方图\n    \n    equalizeHist(gray, equa);\n    namedWindow(\"EQUA\",WINDOW_AUTOSIZE); \n    imshow(\"EQUA\",equa);    // 在窗口显示均衡化处理后图片\n    \n    imwrite(\"result.jpg\", equa); // 存储实验结果\n    \n    equaHistogram = getHistogramImage(equa);  //获得均衡化处理后直方图\n    \n    namedWindow(\"SecondHistogram\",WINDOW_AUTOSIZE; \n    imshow(\"SecondHistogram\",equaHistogram);    // 在窗口显示均衡化处理后\n    \n    waitKey(0); // 按键等待，需要在窗口任意输入字符退出，0代表永久等待\n    \n    src.release();\n    gray.release();\n    equa.release();\n    grayHistogram.release();\n    equaHistogram.release();\n    destroyWindow(\"RGB\");\n    destroyWindow(\"GRAY\");\n    destroyWindow(\"EQUA\");\n    destroyWindow(\"FirstHistogram\");\n    destroyWindow(\"SecondHistogram\");\n    return 0;\n}\n```\n\n## 实验结果\n![201706061715方宣淼实验一-1-](media/15843608120528/201706061715%E6%96%B9%E5%AE%A3%E6%B7%BC%E5%AE%9E%E9%AA%8C%E4%B8%80-1-.png)\n第一张图片为未处理过的原图，第二张图片为灰度处理后的图片。第三张图片为均衡化处理后的灰度图，从直方图很能看出区别。\n\n## 参考\n[Dongcheng Lai的知乎专栏](https://docs.opencv.org/master/)\n[Dongcheng Lai的知乎专栏](https://zhuanlan.zhihu.com/p/73201428)\n[opencv图像直方图的计算及绘制-Naruto_Q的博客](https://blog.csdn.net/piaoxuezhong/article/details/54588270)","slug":"OpenCV_Grayscale","published":1,"updated":"2020-03-16T16:17:51.281Z","_id":"ck7uo0c3m0000bd6bf004bixr","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>如果您不知道如何在 Mac 上使用 Xcode 配置 <code>OpenCV</code>，可以参考我写的上一篇博文。</p>\n</blockquote>\n<p>直方图是图像的一种统计表达，反映了图像中灰度的分布情况。以概率论为基础的，通过改变图像的直方图来改变图象中像素的灰度，以达到图像增强的目标，常称直方图修正。</p>\n<img src=\"/2020/03/16/OpenCV_Grayscale/%E7%9B%B4%E6%96%B9%E5%9B%BE.png\" class=\"\">\n\n<p>直方图均衡化原理即借助直方图变换实现（归一的）灰度映射，实现思想为对在图像中像素个数多的灰度级进行展宽，而对像素个数少的灰度级进行缩减。从而达到清晰图像的目的。</p>\n<p>回到 <code>OpenCV</code>，<code>OpenCV</code>中提供了<code>equalizeHist</code>函数实现灰度图像直方图均衡化，给出如下函数原型及相关文档。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void cv::equalizeHist\t(\tInputArray src,</span><br><span class=\"line\">OutputArray \tdst </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2020/03/16/OpenCV_Grayscale/equa.jpg\" class=\"\">\n\n<p>实现的图像直方图均衡化算法就是把直方图的每个灰度级进行归一化处理，求各个灰度的累积分布并得到一个映射的灰度映射表，最后根据相应的灰度值来修正原图中的每个像素的像素值。</p>\n<p><code>OpenCV</code>中提供了<code>cvtColor</code>函数实现彩色图像转为灰度图像，给出如下函数原型及相关文档。</p>\n<img src=\"/2020/03/16/OpenCV_Grayscale/cvcolor.png\" class=\"\">\n<p><img src=\"media/15843608120528/cvcolor.png\" alt=\"cvcolo\"></p>\n<p>至于直方图的绘制方法，<code>OpenCV</code>中提供了<code>calcList</code>函数计算图像直方图，尝试使用函数来实现会更符合操作流程。</p>\n<img src=\"/2020/03/16/OpenCV_Grayscale/calcHist.jpg\" class=\"\">\n\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>本次实验需要完成以下任务：</p>\n<ol>\n<li>完成直方图的绘制</li>\n<li>使 RGB 图像变为灰度图像</li>\n<li>完成图像直方图均衡化<br>给出如下代码：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;opencv2&#x2F;opencv.hpp&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace cv;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"> MatND getHistogram(Mat &amp;image)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MatND hist;</span><br><span class=\"line\">    int channels[] &#x3D; &#123;0&#125;;</span><br><span class=\"line\">    int dims &#x3D; 1;</span><br><span class=\"line\">    int histSize[] &#x3D; &#123;256&#125;;</span><br><span class=\"line\">    float granges[] &#x3D; &#123;0, 255&#125;;</span><br><span class=\"line\">    const float *ranges[] &#x3D; &#123;granges&#125;;</span><br><span class=\"line\">    calcHist(&amp;image, 1, channels, Mat(), hist, dims, histSize, ranges);</span><br><span class=\"line\">    return hist;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> &#x2F;&#x2F;  将图像直方图展示出来</span><br><span class=\"line\"> Mat getHistogramImage(Mat &amp;image)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MatND hist &#x3D; getHistogram(image);</span><br><span class=\"line\">    Mat showImage(256,256, CV_8U,Scalar(0));</span><br><span class=\"line\">    int i;</span><br><span class=\"line\">    double maxValue &#x3D; 0;</span><br><span class=\"line\">    minMaxLoc(hist, 0, &amp;maxValue, 0, 0);</span><br><span class=\"line\">    for(i &#x3D; 0; i &lt; 256; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        float value &#x3D; hist.at&lt;float&gt;(i);</span><br><span class=\"line\">        int intensity &#x3D; saturate_cast&lt;int&gt;(256 - 256* (value&#x2F;maxValue));</span><br><span class=\"line\">        rectangle(showImage, Point(i,256 - 1), Point((i+1)-1, intensity), Scalar(255));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return showImage;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Mat src&#x3D; imread(&quot;original.jpeg&quot;);&#x2F;&#x2F; 读取图片</span><br><span class=\"line\">    Mat gray,equa;</span><br><span class=\"line\">    Mat grayHistogram,equaHistogram;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(!src.data)             &#x2F;&#x2F; 检查非法输入</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          cout &lt;&lt;  &quot;无法读取照片&quot; &lt;&lt; endl ;</span><br><span class=\"line\">          return -1;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    namedWindow(&quot;RGB&quot;,WINDOW_AUTOSIZE);   &#x2F;&#x2F; 创建图片显示自动调整大小的窗口</span><br><span class=\"line\">    imshow(&quot;RGB&quot;,src);    &#x2F;&#x2F; 在窗口显示原始图片</span><br><span class=\"line\">    </span><br><span class=\"line\">    cvtColor(src, gray, COLOR_BGR2GRAY);</span><br><span class=\"line\">    namedWindow(&quot;GRAY&quot;,WINDOW_AUTOSIZE);</span><br><span class=\"line\">    imshow(&quot;GRAY&quot;,gray);    &#x2F;&#x2F; 在窗口显示灰度图片</span><br><span class=\"line\">    </span><br><span class=\"line\">    grayHistogram &#x3D; getHistogramImage(gray);</span><br><span class=\"line\">    &#x2F;&#x2F;获得灰度图直方图</span><br><span class=\"line\">    namedWindow(&quot;FirstHistogram&quot;,WINDOW_AUTOSIZE);</span><br><span class=\"line\">imshow(&quot;FirstHistogram&quot;,grayHistogram);    &#x2F;&#x2F; 在窗口显示灰度图直方图</span><br><span class=\"line\">    </span><br><span class=\"line\">    equalizeHist(gray, equa);</span><br><span class=\"line\">    namedWindow(&quot;EQUA&quot;,WINDOW_AUTOSIZE); </span><br><span class=\"line\">    imshow(&quot;EQUA&quot;,equa);    &#x2F;&#x2F; 在窗口显示均衡化处理后图片</span><br><span class=\"line\">    </span><br><span class=\"line\">    imwrite(&quot;result.jpg&quot;, equa); &#x2F;&#x2F; 存储实验结果</span><br><span class=\"line\">    </span><br><span class=\"line\">    equaHistogram &#x3D; getHistogramImage(equa);  &#x2F;&#x2F;获得均衡化处理后直方图</span><br><span class=\"line\">    </span><br><span class=\"line\">    namedWindow(&quot;SecondHistogram&quot;,WINDOW_AUTOSIZE; </span><br><span class=\"line\">    imshow(&quot;SecondHistogram&quot;,equaHistogram);    &#x2F;&#x2F; 在窗口显示均衡化处理后</span><br><span class=\"line\">    </span><br><span class=\"line\">    waitKey(0); &#x2F;&#x2F; 按键等待，需要在窗口任意输入字符退出，0代表永久等待</span><br><span class=\"line\">    </span><br><span class=\"line\">    src.release();</span><br><span class=\"line\">    gray.release();</span><br><span class=\"line\">    equa.release();</span><br><span class=\"line\">    grayHistogram.release();</span><br><span class=\"line\">    equaHistogram.release();</span><br><span class=\"line\">    destroyWindow(&quot;RGB&quot;);</span><br><span class=\"line\">    destroyWindow(&quot;GRAY&quot;);</span><br><span class=\"line\">    destroyWindow(&quot;EQUA&quot;);</span><br><span class=\"line\">    destroyWindow(&quot;FirstHistogram&quot;);</span><br><span class=\"line\">    destroyWindow(&quot;SecondHistogram&quot;);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h2><p><img src=\"media/15843608120528/201706061715%E6%96%B9%E5%AE%A3%E6%B7%BC%E5%AE%9E%E9%AA%8C%E4%B8%80-1-.png\" alt=\"201706061715方宣淼实验一-1-\"><br>第一张图片为未处理过的原图，第二张图片为灰度处理后的图片。第三张图片为均衡化处理后的灰度图，从直方图很能看出区别。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://docs.opencv.org/master/\" target=\"_blank\" rel=\"noopener\">Dongcheng Lai的知乎专栏</a><br><a href=\"https://zhuanlan.zhihu.com/p/73201428\" target=\"_blank\" rel=\"noopener\">Dongcheng Lai的知乎专栏</a><br><a href=\"https://blog.csdn.net/piaoxuezhong/article/details/54588270\" target=\"_blank\" rel=\"noopener\">opencv图像直方图的计算及绘制-Naruto_Q的博客</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>如果您不知道如何在 Mac 上使用 Xcode 配置 <code>OpenCV</code>，可以参考我写的上一篇博文。</p>\n</blockquote>\n<p>直方图是图像的一种统计表达，反映了图像中灰度的分布情况。以概率论为基础的，通过改变图像的直方图来改变图象中像素的灰度，以达到图像增强的目标，常称直方图修正。</p>\n<img src=\"/2020/03/16/OpenCV_Grayscale/%E7%9B%B4%E6%96%B9%E5%9B%BE.png\" class=\"\">\n\n<p>直方图均衡化原理即借助直方图变换实现（归一的）灰度映射，实现思想为对在图像中像素个数多的灰度级进行展宽，而对像素个数少的灰度级进行缩减。从而达到清晰图像的目的。</p>\n<p>回到 <code>OpenCV</code>，<code>OpenCV</code>中提供了<code>equalizeHist</code>函数实现灰度图像直方图均衡化，给出如下函数原型及相关文档。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void cv::equalizeHist\t(\tInputArray src,</span><br><span class=\"line\">OutputArray \tdst </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2020/03/16/OpenCV_Grayscale/equa.jpg\" class=\"\">\n\n<p>实现的图像直方图均衡化算法就是把直方图的每个灰度级进行归一化处理，求各个灰度的累积分布并得到一个映射的灰度映射表，最后根据相应的灰度值来修正原图中的每个像素的像素值。</p>\n<p><code>OpenCV</code>中提供了<code>cvtColor</code>函数实现彩色图像转为灰度图像，给出如下函数原型及相关文档。</p>\n<img src=\"/2020/03/16/OpenCV_Grayscale/cvcolor.png\" class=\"\">\n<p><img src=\"media/15843608120528/cvcolor.png\" alt=\"cvcolo\"></p>\n<p>至于直方图的绘制方法，<code>OpenCV</code>中提供了<code>calcList</code>函数计算图像直方图，尝试使用函数来实现会更符合操作流程。</p>\n<img src=\"/2020/03/16/OpenCV_Grayscale/calcHist.jpg\" class=\"\">\n\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>本次实验需要完成以下任务：</p>\n<ol>\n<li>完成直方图的绘制</li>\n<li>使 RGB 图像变为灰度图像</li>\n<li>完成图像直方图均衡化<br>给出如下代码：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;opencv2&#x2F;opencv.hpp&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace cv;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"> MatND getHistogram(Mat &amp;image)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MatND hist;</span><br><span class=\"line\">    int channels[] &#x3D; &#123;0&#125;;</span><br><span class=\"line\">    int dims &#x3D; 1;</span><br><span class=\"line\">    int histSize[] &#x3D; &#123;256&#125;;</span><br><span class=\"line\">    float granges[] &#x3D; &#123;0, 255&#125;;</span><br><span class=\"line\">    const float *ranges[] &#x3D; &#123;granges&#125;;</span><br><span class=\"line\">    calcHist(&amp;image, 1, channels, Mat(), hist, dims, histSize, ranges);</span><br><span class=\"line\">    return hist;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> &#x2F;&#x2F;  将图像直方图展示出来</span><br><span class=\"line\"> Mat getHistogramImage(Mat &amp;image)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MatND hist &#x3D; getHistogram(image);</span><br><span class=\"line\">    Mat showImage(256,256, CV_8U,Scalar(0));</span><br><span class=\"line\">    int i;</span><br><span class=\"line\">    double maxValue &#x3D; 0;</span><br><span class=\"line\">    minMaxLoc(hist, 0, &amp;maxValue, 0, 0);</span><br><span class=\"line\">    for(i &#x3D; 0; i &lt; 256; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        float value &#x3D; hist.at&lt;float&gt;(i);</span><br><span class=\"line\">        int intensity &#x3D; saturate_cast&lt;int&gt;(256 - 256* (value&#x2F;maxValue));</span><br><span class=\"line\">        rectangle(showImage, Point(i,256 - 1), Point((i+1)-1, intensity), Scalar(255));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return showImage;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Mat src&#x3D; imread(&quot;original.jpeg&quot;);&#x2F;&#x2F; 读取图片</span><br><span class=\"line\">    Mat gray,equa;</span><br><span class=\"line\">    Mat grayHistogram,equaHistogram;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(!src.data)             &#x2F;&#x2F; 检查非法输入</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          cout &lt;&lt;  &quot;无法读取照片&quot; &lt;&lt; endl ;</span><br><span class=\"line\">          return -1;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    namedWindow(&quot;RGB&quot;,WINDOW_AUTOSIZE);   &#x2F;&#x2F; 创建图片显示自动调整大小的窗口</span><br><span class=\"line\">    imshow(&quot;RGB&quot;,src);    &#x2F;&#x2F; 在窗口显示原始图片</span><br><span class=\"line\">    </span><br><span class=\"line\">    cvtColor(src, gray, COLOR_BGR2GRAY);</span><br><span class=\"line\">    namedWindow(&quot;GRAY&quot;,WINDOW_AUTOSIZE);</span><br><span class=\"line\">    imshow(&quot;GRAY&quot;,gray);    &#x2F;&#x2F; 在窗口显示灰度图片</span><br><span class=\"line\">    </span><br><span class=\"line\">    grayHistogram &#x3D; getHistogramImage(gray);</span><br><span class=\"line\">    &#x2F;&#x2F;获得灰度图直方图</span><br><span class=\"line\">    namedWindow(&quot;FirstHistogram&quot;,WINDOW_AUTOSIZE);</span><br><span class=\"line\">imshow(&quot;FirstHistogram&quot;,grayHistogram);    &#x2F;&#x2F; 在窗口显示灰度图直方图</span><br><span class=\"line\">    </span><br><span class=\"line\">    equalizeHist(gray, equa);</span><br><span class=\"line\">    namedWindow(&quot;EQUA&quot;,WINDOW_AUTOSIZE); </span><br><span class=\"line\">    imshow(&quot;EQUA&quot;,equa);    &#x2F;&#x2F; 在窗口显示均衡化处理后图片</span><br><span class=\"line\">    </span><br><span class=\"line\">    imwrite(&quot;result.jpg&quot;, equa); &#x2F;&#x2F; 存储实验结果</span><br><span class=\"line\">    </span><br><span class=\"line\">    equaHistogram &#x3D; getHistogramImage(equa);  &#x2F;&#x2F;获得均衡化处理后直方图</span><br><span class=\"line\">    </span><br><span class=\"line\">    namedWindow(&quot;SecondHistogram&quot;,WINDOW_AUTOSIZE; </span><br><span class=\"line\">    imshow(&quot;SecondHistogram&quot;,equaHistogram);    &#x2F;&#x2F; 在窗口显示均衡化处理后</span><br><span class=\"line\">    </span><br><span class=\"line\">    waitKey(0); &#x2F;&#x2F; 按键等待，需要在窗口任意输入字符退出，0代表永久等待</span><br><span class=\"line\">    </span><br><span class=\"line\">    src.release();</span><br><span class=\"line\">    gray.release();</span><br><span class=\"line\">    equa.release();</span><br><span class=\"line\">    grayHistogram.release();</span><br><span class=\"line\">    equaHistogram.release();</span><br><span class=\"line\">    destroyWindow(&quot;RGB&quot;);</span><br><span class=\"line\">    destroyWindow(&quot;GRAY&quot;);</span><br><span class=\"line\">    destroyWindow(&quot;EQUA&quot;);</span><br><span class=\"line\">    destroyWindow(&quot;FirstHistogram&quot;);</span><br><span class=\"line\">    destroyWindow(&quot;SecondHistogram&quot;);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h2><p><img src=\"media/15843608120528/201706061715%E6%96%B9%E5%AE%A3%E6%B7%BC%E5%AE%9E%E9%AA%8C%E4%B8%80-1-.png\" alt=\"201706061715方宣淼实验一-1-\"><br>第一张图片为未处理过的原图，第二张图片为灰度处理后的图片。第三张图片为均衡化处理后的灰度图，从直方图很能看出区别。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://docs.opencv.org/master/\" target=\"_blank\" rel=\"noopener\">Dongcheng Lai的知乎专栏</a><br><a href=\"https://zhuanlan.zhihu.com/p/73201428\" target=\"_blank\" rel=\"noopener\">Dongcheng Lai的知乎专栏</a><br><a href=\"https://blog.csdn.net/piaoxuezhong/article/details/54588270\" target=\"_blank\" rel=\"noopener\">opencv图像直方图的计算及绘制-Naruto_Q的博客</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/Struts_Experiment/1.png","slug":"1.png","post":"ck7359lit00037c6b68jqbo4u","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/10.png","slug":"10.png","post":"ck7359lit00037c6b68jqbo4u","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/11.png","slug":"11.png","post":"ck7359lit00037c6b68jqbo4u","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/12.png","slug":"12.png","post":"ck7359lit00037c6b68jqbo4u","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/13.png","slug":"13.png","post":"ck7359lit00037c6b68jqbo4u","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/14.png","slug":"14.png","post":"ck7359lit00037c6b68jqbo4u","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/15.png","slug":"15.png","post":"ck7359lit00037c6b68jqbo4u","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/16.png","slug":"16.png","post":"ck7359lit00037c6b68jqbo4u","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/17.png","slug":"17.png","post":"ck7359lit00037c6b68jqbo4u","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/18.png","slug":"18.png","post":"ck7359lit00037c6b68jqbo4u","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/19.png","slug":"19.png","post":"ck7359lit00037c6b68jqbo4u","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/2.png","slug":"2.png","post":"ck7359lit00037c6b68jqbo4u","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/20.png","slug":"20.png","post":"ck7359lit00037c6b68jqbo4u","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/3.png","slug":"3.png","post":"ck7359lit00037c6b68jqbo4u","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/4.png","slug":"4.png","post":"ck7359lit00037c6b68jqbo4u","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/5.png","slug":"5.png","post":"ck7359lit00037c6b68jqbo4u","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/6.png","slug":"6.png","post":"ck7359lit00037c6b68jqbo4u","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/7.png","slug":"7.png","post":"ck7359lit00037c6b68jqbo4u","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/8.png","slug":"8.png","post":"ck7359lit00037c6b68jqbo4u","modified":0,"renderable":0},{"_id":"source/_posts/Struts_Experiment/9.png","slug":"9.png","post":"ck7359lit00037c6b68jqbo4u","modified":0,"renderable":0},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/Headers.png","slug":"Headers.png","post":"ck735cgs200057c6b1plke8p6","modified":0,"renderable":0},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/Library.png","slug":"Library.png","post":"ck735cgs200057c6b1plke8p6","modified":0,"renderable":0},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/Project.png","slug":"Project.png","post":"ck735cgs200057c6b1plke8p6","modified":0,"renderable":0},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/Xcode.png","slug":"Xcode.png","post":"ck735cgs200057c6b1plke8p6","modified":0,"renderable":0},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/dir.png","slug":"dir.png","post":"ck735cgs200057c6b1plke8p6","modified":0,"renderable":0},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/documention.png","slug":"documention.png","post":"ck735cgs200057c6b1plke8p6","modified":0,"renderable":0},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/linker.png","slug":"linker.png","post":"ck735cgs200057c6b1plke8p6","modified":0,"renderable":0},{"_id":"source/_posts/Setting_up_OpenCV_environment_in_Xcode/signature.png","slug":"signature.png","post":"ck735cgs200057c6b1plke8p6","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/1.png","slug":"1.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/14.png","slug":"14.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/uni.png","slug":"uni.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/10.png","slug":"10.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/11.png","slug":"11.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/12.png","slug":"12.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/13.png","slug":"13.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/15.png","slug":"15.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/16.png","slug":"16.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/17.png","slug":"17.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/18.png","slug":"18.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/19.png","slug":"19.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/2.png","slug":"2.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/20.png","slug":"20.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/21.png","slug":"21.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/22.png","slug":"22.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/3.png","slug":"3.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/4.png","slug":"4.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/5.png","slug":"5.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/6.png","slug":"6.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/7.png","slug":"7.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/8.png","slug":"8.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/9.png","slug":"9.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/DMI.png","slug":"DMI.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/button.png","slug":"button.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/Action_Experiment/na.png","slug":"na.png","post":"ck74gdjif00000d6bcx6s3q1s","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV_Grayscale/cvcolor.png","slug":"cvcolor.png","post":"ck7uo0c3m0000bd6bf004bixr","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV_Grayscale/直方图.png","slug":"直方图.png","post":"ck7uo0c3m0000bd6bf004bixr","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV_Grayscale/calcHist.jpg","slug":"calcHist.jpg","post":"ck7uo0c3m0000bd6bf004bixr","modified":1,"renderable":0},{"_id":"source/_posts/OpenCV_Grayscale/equa.jpg","slug":"equa.jpg","post":"ck7uo0c3m0000bd6bf004bixr","modified":1,"renderable":0},{"_id":"source/_posts/OpenCV_Grayscale/result.png","slug":"result.png","post":"ck7uo0c3m0000bd6bf004bixr","modified":1,"renderable":0}],"PostCategory":[{"post_id":"ck74gdjif00000d6bcx6s3q1s","category_id":"ck74gdjik00010d6b5e29chtf","_id":"ck74gdjip00040d6b11v3agua"},{"post_id":"ck735dlve00077c6b1cbs68th","category_id":"ck74gdjik00010d6b5e29chtf","_id":"ck74gdjj0000c0d6b30d5gdrc"},{"post_id":"ck7359lit00037c6b68jqbo4u","category_id":"ck74gdjik00010d6b5e29chtf","_id":"ck74gdjj0000f0d6bdbvnex72"},{"post_id":"ck735cgs200057c6b1plke8p6","category_id":"ck74gdjik00010d6b5e29chtf","_id":"ck74gdjj0000g0d6bg3e38384"},{"post_id":"ck6grd6v50000up6b6ks90kmf","category_id":"ck74gdjiy00090d6bfuxwe57g","_id":"ck74gdjj1000i0d6b9gr48vtg"},{"post_id":"ck74piow30000ca6b3bhn3ffd","category_id":"ck74gdjik00010d6b5e29chtf","_id":"ck74piowa0003ca6b0v0mg9c9"},{"post_id":"ck74pknuh000kca6bhzvr9j3w","category_id":"ck74gdjik00010d6b5e29chtf","_id":"ck74pknuj000nca6b0a274m68"},{"post_id":"ck7uo0c3m0000bd6bf004bixr","category_id":"ck74gdjik00010d6b5e29chtf","_id":"ck7uo5zo10002bd6bdv9ahude"}],"PostTag":[{"post_id":"ck6grolyv00000i6b4dywb26w","tag_id":"ck6grolyz00010i6b62bxgpq7","_id":"ck6grolz000020i6bdaq7bp4o"},{"post_id":"ck74gdjif00000d6bcx6s3q1s","tag_id":"ck74gdjil00020d6bcjyi65hp","_id":"ck74gdjiq00060d6baoksfchx"},{"post_id":"ck74gdjif00000d6bcx6s3q1s","tag_id":"ck74gdjip00030d6beute7fm7","_id":"ck74gdjiq00070d6b3mpb3f13"},{"post_id":"ck74gdjif00000d6bcx6s3q1s","tag_id":"ck74gdjip00050d6bdijq6z16","_id":"ck74gdjiq00080d6b8oz75ou1"},{"post_id":"ck7359lit00037c6b68jqbo4u","tag_id":"ck74gdjil00020d6bcjyi65hp","_id":"ck74gdjj0000b0d6bd6tsbdf7"},{"post_id":"ck7359lit00037c6b68jqbo4u","tag_id":"ck74gdjip00050d6bdijq6z16","_id":"ck74gdjj0000e0d6b058v5xhc"},{"post_id":"ck6grd6v50000up6b6ks90kmf","tag_id":"ck74gdjiy000a0d6bawe64o33","_id":"ck74gdjj1000j0d6b3dtj1bti"},{"post_id":"ck6grd6v50000up6b6ks90kmf","tag_id":"ck74gdjj0000d0d6b7tlh84t9","_id":"ck74gdjj1000k0d6b1k4531w3"},{"post_id":"ck735dlve00077c6b1cbs68th","tag_id":"ck74gdjj0000h0d6bg0g44sjd","_id":"ck74gdjj1000n0d6ba4kp75x6"},{"post_id":"ck735dlve00077c6b1cbs68th","tag_id":"ck74gdjj1000l0d6b5bg78jus","_id":"ck74gdjj1000o0d6b3xdhea7i"},{"post_id":"ck735cgs200057c6b1plke8p6","tag_id":"ck74gdjj1000m0d6baicnbm6d","_id":"ck74gdjj3000q0d6bea1z520z"},{"post_id":"ck735cgs200057c6b1plke8p6","tag_id":"ck74gdjj0000d0d6b7tlh84t9","_id":"ck74gdjj3000r0d6b9q42bnzo"},{"post_id":"ck735cgs200057c6b1plke8p6","tag_id":"ck74gdjiy000a0d6bawe64o33","_id":"ck74gdjj3000s0d6b8qji6j0x"},{"post_id":"ck74piow30000ca6b3bhn3ffd","tag_id":"ck74gdjil00020d6bcjyi65hp","_id":"ck74piowb0007ca6bdfjs66ov"},{"post_id":"ck74piow30000ca6b3bhn3ffd","tag_id":"ck74piow80002ca6b33sg4nz2","_id":"ck74piowb0008ca6b2fo90gym"},{"post_id":"ck74piow30000ca6b3bhn3ffd","tag_id":"ck74gdjip00050d6bdijq6z16","_id":"ck74piowd000aca6bcu6a5luz"},{"post_id":"ck74piow30000ca6b3bhn3ffd","tag_id":"ck74piowa0005ca6b0qsf9gj2","_id":"ck74piowd000bca6be6yfe4z1"},{"post_id":"ck7359lit00037c6b68jqbo4u","tag_id":"ck74piowa0005ca6b0qsf9gj2","_id":"ck74piowr000gca6b89oa7pl4"},{"post_id":"ck7359lit00037c6b68jqbo4u","tag_id":"ck74piowp000fca6bdj06hq2r","_id":"ck74piowr000hca6bd8tu6no6"},{"post_id":"ck74gdjif00000d6bcx6s3q1s","tag_id":"ck74piowa0005ca6b0qsf9gj2","_id":"ck74piowr000ica6bb8bz9ogs"},{"post_id":"ck74gdjif00000d6bcx6s3q1s","tag_id":"ck74piowp000fca6bdj06hq2r","_id":"ck74piowr000jca6b78ragu36"},{"post_id":"ck74pknuh000kca6bhzvr9j3w","tag_id":"ck74piowb0006ca6b7tkw43g4","_id":"ck74pknuj000lca6b9l6g7xzm"},{"post_id":"ck74pknuh000kca6bhzvr9j3w","tag_id":"ck74gdjip00050d6bdijq6z16","_id":"ck74pknuj000mca6b2xq1g8we"},{"post_id":"ck74pknuh000kca6bhzvr9j3w","tag_id":"ck74piowa0005ca6b0qsf9gj2","_id":"ck74pknuj000oca6b9s3dd7kj"},{"post_id":"ck7uo0c3m0000bd6bf004bixr","tag_id":"ck74gdjj1000m0d6baicnbm6d","_id":"ck7uo5zo10003bd6be7vv9fqx"},{"post_id":"ck7uo0c3m0000bd6bf004bixr","tag_id":"ck74gdjj0000d0d6b7tlh84t9","_id":"ck7uo5zo10004bd6beu4c1j03"},{"post_id":"ck7uo0c3m0000bd6bf004bixr","tag_id":"ck7uo5zo00001bd6bcz7hdhke","_id":"ck7uo5zo10005bd6baitt9bhr"}],"Tag":[{"name":"design","_id":"ck6grd6vc0004up6b7eqh6a5a"},{"name":"tech","_id":"ck6grd6ve0007up6b2v5537t5"},{"name":"about","_id":"ck6grolyz00010i6b62bxgpq7"},{"name":"struts","_id":"ck74gdjil00020d6bcjyi65hp"},{"name":"Action","_id":"ck74gdjip00030d6beute7fm7"},{"name":"JavaEE","_id":"ck74gdjip00050d6bdijq6z16"},{"name":"Apple","_id":"ck74gdjiy000a0d6bawe64o33"},{"name":"Xcode","_id":"ck74gdjj0000d0d6b7tlh84t9"},{"name":"Vue.js","_id":"ck74gdjj0000h0d6bg0g44sjd"},{"name":"前端框架","_id":"ck74gdjj1000l0d6b5bg78jus"},{"name":"OpenCV","_id":"ck74gdjj1000m0d6baicnbm6d"},{"name":"workflow","_id":"ck74piow80002ca6b33sg4nz2"},{"name":"总结","_id":"ck74piowa0005ca6b0qsf9gj2"},{"name":"Hibernate","_id":"ck74piowb0006ca6b7tkw43g4"},{"name":"实验","_id":"ck74piowp000fca6bdj06hq2r"},{"name":"Grayscale","_id":"ck7uo5zo00001bd6bcz7hdhke"}]}}