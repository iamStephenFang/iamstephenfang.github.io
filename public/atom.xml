<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StephenFang</title>
  
  
  <link href="https://stephefang.me/atom.xml" rel="self"/>
  
  <link href="https://stephefang.me/"/>
  <updated>2022-07-24T15:58:50.272Z</updated>
  <id>https://stephefang.me/</id>
  
  <author>
    <name>Stephen Fang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WWDC22 UIKit 新变化</title>
    <link href="https://stephefang.me/2022/07/24/WWDC22-UIKit/"/>
    <id>https://stephefang.me/2022/07/24/WWDC22-UIKit/</id>
    <published>2022-07-24T15:15:00.000Z</published>
    <updated>2022-07-24T15:58:50.272Z</updated>
    
    <content type="html"><![CDATA[<p>最近几年的 WWDC 每年都能看到很多 SwiftUI 的新能力，但不能忽略的是 UIKit 框架的更新。</p><p>今年的 <a href="https://developer.apple.com/videos/play/wwdc2022/10068/">What’s New in UIKit Session</a> 主要包括以下几个方面</p><ul><li>生产力提升</li><li>控制增强</li><li>API 改进</li><li>UIKit 与 SwiftUI 混编</li></ul><p>我按照业务理解和适配进度的优先级，对 session 内容进行了重新排序和整理，对 <a href="https://github.com/ferhanakkan">@ferhanakkan</a> 的仓库进行了一些改动，以下为我的总结。</p><span id="more"></span><p><a href="https://github.com/iamStephenFang/WhatsNewInUIKit">https://github.com/iamStephenFang/WhatsNewInUIKit</a></p><h2 id="API-改进"><a href="#API-改进" class="headerlink" title="API 改进"></a>API 改进</h2><p>在 iOS 16 中部分 API 废弃，需要开发者进行适配，同时有一些新能力可以实现。</p><h3 id="UIDevice"><a href="#UIDevice" class="headerlink" title="UIDevice"></a>UIDevice</h3><ul><li>为了防止用户留下指纹， <code>UIDevice.name</code> 现在会报告模型名称而非用户自定义的设备名称。 使用自定义名称需要获得授权。  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// iOS 16 之前 (e.g. &quot;My iPhone&quot;)</span></span><br><span class="line"><span class="comment">// iOS 16 (e.g. &quot;iPhone 13&quot;)</span></span><br><span class="line"><span class="built_in">UIDevice</span>().name</span><br></pre></td></tr></table></figure></li><li>不再支持 <code>UIDevice.orientation</code>， 应使用 <code>UIViewController</code> 相关API， 如 <code>preferredInterfaceOrientation</code> 来获取应用界面的预期呈现方向。  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UIDeviceOrientation(rawValue: 0) -&gt; .unknown</span></span><br><span class="line"><span class="built_in">UIDevice</span>().orientation</span><br><span class="line"></span><br><span class="line"><span class="comment">// UIInterfaceOrientation(rawValue: 1) -&gt; .portrait (iPhone)</span></span><br><span class="line"><span class="built_in">UIViewController</span>().preferredInterfaceOrientationForPresentation</span><br></pre></td></tr></table></figure></li></ul><h3 id="UIScreen"><a href="#UIScreen" class="headerlink" title="UIScreen"></a>UIScreen</h3><p>iOS 16 为 配备了 M1 芯片的 iPad 以及 Mac 带来了 Stage Manager （台前调度）功能，作为应用开发者无需对代码进行改动即可适用该功能。</p><aside>💡 在 iOS 13 前开发单窗口的 App，由 `UIApplication` 负责 App 状态，`UIApplicationDelegate`（`AppDelegate`）负责 App 事件和生命周期，然而这种模式不适用于开发多窗口的 iPad App 或 Mac Catalyst App。 iOS 13 引入了构建多窗口应用的 `UIScene`，并对功能职责进行了重新拆分，将 UI 相关的状态、事件和生命周期交与 `UIWindowScene` 和 `UIWindowSceneDelegate`（`SceneDelegate`）负责，`UISceneSession` 负责持久化的 UI 状态。</aside><p>如果仍在使用旧版本的 UIScreen API，有必要迁移到新的 <code>UITraitCollection</code> 和 <code>UIScene</code> API</p><p><a href="https://developer.apple.com/documentation/uikit/uiscreen/deprecated_symbols">Apple Developer Documentation</a></p><ul><li><code>UIScreen.main</code> 已废弃，需要使用<code>(UIApplication.shared.connectedScenes.first as? UIWindowScene)?.screen</code></li><li>UIScreen 生命周期通知废弃，包括 <code>didConnectNotification</code>、<code>didDisconnectNotification</code>，需要使用 <code>UIScene</code>相关方法</li></ul><h3 id="自适应大小-cell"><a href="#自适应大小-cell" class="headerlink" title="自适应大小 cell"></a>自适应大小 cell</h3><p><code>UICollectionView</code> 和 <code>UITableView</code> 的 cell 支持了自适应调整大小能力。控制自适应调整大小的是 <code>selfSizingInvalidation</code> 属性，默认开启。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UICollectionView</span> </span>&#123;</span><br><span class="line"><span class="comment">// Default is .enabled</span></span><br><span class="line">    <span class="keyword">var</span>.selfSizingInvalidation: <span class="type">SelfSizingInvalidation</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">16.0</span>, <span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SelfSizingInvalidation</span> : <span class="title">Int</span>, @<span class="title">unchecked</span> <span class="title">Sendable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// No updates will take place when -invalidateIntrinsicContentSize is called on a self-sizing cell or its contentView.</span></span><br><span class="line">        <span class="keyword">case</span> disabled <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/// Calling -invalidateIntrinsicContentSize on a self-sizing cell or its contentView will cause it to be resized if necessary.</span></span><br><span class="line">        <span class="keyword">case</span> enabled <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/// Calling -invalidateIntrinsicContentSize on a self-sizing cell or its contentView will cause it to be resized if necessary, and</span></span><br><span class="line">        <span class="comment">/// any Auto Layout changes within the contentView of a self-sizing cell will automatically trigger -invalidateIntrinsicContentSize.</span></span><br><span class="line">        <span class="keyword">case</span> enabledIncludingConstraints <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>若使用了 <code>UIListContentConfiguration</code> 配置cell，每当 cell 的配置发生更改时会自动执行 invalidation。</li><li>若不使用 <code>UIListContentConfiguration</code> 配置cell，可以调用 cell 的 <code>invalidateIntrinsicContentSize</code> 方法手动执行 invalidation。</li><li>若使用 Auto Layout 布局cell，可以通过设置 <code>selfSizingInvalidation</code> 属性为<code>enabledInclingConstraints</code> 来使其接收 Auto Layout 变更。即当 cell 检测到 contentView 内部的任何自动布局变化时，将自动调用 <code>invalidateIntrinsicContentSize</code> 方法。</li></ul><p>默认情况下 cell 自适应调整大小会伴随着动画，可以在 <code>invalidateIntrinsicContentSize</code> 方法外包一层 <code>performWithoutAnimation</code> 从而取消调整大小时的动画。 </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@objc</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">didTapCollapseButton</span>()</span> &#123;</span><br><span class="line">        label.text <span class="operator">=</span> <span class="type">Constants</span>.shortText</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">didTapCollapseWithoutAnimationButton</span>()</span> &#123;</span><br><span class="line">        label.text <span class="operator">=</span> <span class="type">Constants</span>.shortText</span><br><span class="line">        <span class="type">UIView</span>.performWithoutAnimation &#123;</span><br><span class="line">            <span class="keyword">self</span>.invalidateIntrinsicContentSize()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.stephenfang.me/mweb/SelfSizing.gif" alt="SelfSizing.gif"></p><p><code>UICollectionView</code> 和 <code>UITableView</code> 将 cell 自适应大小的 invalidation 行为智能合并处理，并在最佳时间执行更新。</p><h3 id="UISheetPresentationController"><a href="#UISheetPresentationController" class="headerlink" title="UISheetPresentationController"></a>UISheetPresentationController</h3><p>在 iOS 15 上苹果推出了表单展示控件，可以通过简单的代码 present 出 <code>.medium()</code> 和 <code>.large()</code> 两种大小的底部表单。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// on iOS 15</span></span><br><span class="line"><span class="keyword">let</span> vc <span class="operator">=</span> <span class="type">UINavigationController</span>(rootViewController: <span class="type">DemoViewController</span>())</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> sheet <span class="operator">=</span> vc.sheetPresentationController &#123;</span><br><span class="line">sheet.detents <span class="operator">=</span> [.medium(), .large()]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">self</span>.present(vc, animated: <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>用户可以通过拖拽的方式实现高度的切换，但是当时底栏不具备自定义高度的能力。</p><p><img src="http://image.stephenfang.me/mweb/UISheetPresentationController1.png" alt="UISheetPresentationController1.png"></p><p><img src="http://image.stephenfang.me/mweb/UISheetPresentationController2.png" alt="UISheetPresentationController2.png"></p><p>在 iOS 16 上苹果开放了 <code>UISheetPresentationController.Detent.Identifier</code> 提供了自定义的能力。</p><p>可以简单返回一个常量值或最大高度的百分比来控制表单高度。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainActor</span> <span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Detent</span> : <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">        <span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">medium</span>() -&gt; <span class="title">Self</span></span></span><br><span class="line"><span class="class">        <span class="title">open</span> <span class="title">class</span> <span class="title">func</span> <span class="title">large</span>() -&gt; <span class="title">Self</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        @<span class="title">available</span>(<span class="title">iOS</span> 16.0, *)</span></span><br><span class="line"><span class="class">        <span class="title">open</span> <span class="title">var</span> <span class="title">identifier</span>: <span class="title">UISheetPresentationController</span>.<span class="title">Detent</span>.<span class="title">Identifier</span> </span>&#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a custom detent</span></span><br><span class="line">sheet.detents <span class="operator">=</span> [</span><br><span class="line">    .large(),</span><br><span class="line">    .custom &#123; context <span class="keyword">in</span></span><br><span class="line">        <span class="number">0.3</span> <span class="operator">*</span> context.maximumDetentValue</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>更标准的做法是通过自定义 identifier 定制表单展示控件的高度。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Define a custom identifier</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UISheetPresentationController</span>.<span class="title">Detent</span>.<span class="title">Identifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> small <span class="operator">=</span> <span class="type">UISheetPresentationController</span>.<span class="type">Detent</span>.<span class="type">Identifier</span>(<span class="string">&quot;small&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Assign identifier to custom detent</span></span><br><span class="line">sheet.detents <span class="operator">=</span> [</span><br><span class="line">    .large(),</span><br><span class="line">    .custom (identifier: .small) &#123; context <span class="keyword">in</span></span><br><span class="line">        <span class="number">0.3</span> <span class="operator">*</span> context.maximumDetentValue</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Disable dimming above the custom detent</span></span><br><span class="line">sheet.largestUndimmedDetentIdentifier <span class="operator">=</span> .small</span><br></pre></td></tr></table></figure><p>在使用的过程总需要注意表单展示控件高度不包含 <code>SafeAreaInsets</code>，计算布局时需要注意。</p><p><img src="http://image.stephenfang.me/mweb/UISheetPresentationController.png" alt="UISheetPresentationController"></p><h2 id="UI-控件"><a href="#UI-控件" class="headerlink" title="UI 控件"></a>UI 控件</h2><h3 id="UIPasteControl"><a href="#UIPasteControl" class="headerlink" title="UIPasteControl"></a>UIPasteControl</h3><p>在 iOS 16 前在 app 内执行复制粘贴操作会在顶部显示banner，在 iOS 16上 banner 被 alert 所取代。仍然由系统自动提示，根据用户的选项允许剪贴板内容访问。</p><p><img src="http://image.stephenfang.me/mweb/UIPasteControl0.png" alt="UIPasteControl0"></p><p><img src="http://image.stephenfang.me/mweb/UIPasteControl1.png" alt="UIPasteControl1"></p><p>开发者可以用新加入的 <code>UIPasteControl</code> 作为粘贴控件替换这个 alert，可以在<a href="https://developer.apple.com/documentation/uikit/uipastecontrol">这里</a>找到相关文档。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">lazy</span> <span class="keyword">var</span> pasteControl: <span class="type">UIPasteControl</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> pasteControlConfig <span class="operator">=</span> <span class="type">UIPasteControl</span>.<span class="type">Configuration</span>()</span><br><span class="line">        pasteControlConfig.baseBackgroundColor <span class="operator">=</span> .systemBlue</span><br><span class="line">        pasteControlConfig.baseForegroundColor <span class="operator">=</span> .white</span><br><span class="line">        pasteControlConfig.cornerRadius <span class="operator">=</span> <span class="number">5.0</span></span><br><span class="line">        pasteControlConfig.displayMode <span class="operator">=</span> .iconAndLabel</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> pasteControl <span class="operator">=</span> <span class="type">UIPasteControl</span>(configuration: pasteControlConfig)</span><br><span class="line">        pasteControl.target <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        <span class="keyword">return</span> pasteControl</span><br><span class="line">    &#125; ()</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: UIPasteConfigurationSupporting</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">canPaste</span>(<span class="keyword">_</span> <span class="params">itemProviders</span>: [<span class="type">NSItemProvider</span>])</span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">paste</span>(<span class="params">itemProviders</span>: [<span class="type">NSItemProvider</span>])</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> itemProvider <span class="operator">=</span> itemProviders.first &#123;</span><br><span class="line">            <span class="keyword">if</span> itemProvider.canLoadObject(ofClass: <span class="type">NSString</span>.<span class="keyword">self</span>) &#123;</span><br><span class="line">                itemProvider.loadObject(ofClass: <span class="type">NSString</span>.<span class="keyword">self</span>) &#123; (text, error) <span class="keyword">in</span></span><br><span class="line">                    <span class="keyword">if</span> text <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">                        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                            <span class="keyword">self</span>.label.text <span class="operator">=</span> text <span class="keyword">as?</span> <span class="type">String</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.stephenfang.me/mweb/UIPasteControl2.png" alt="UIPasteControl2"></p><p><img src="http://image.stephenfang.me/mweb/UIPasteControl3.png" alt="UIPasteControl3"></p><p>这个适配虽然达成了必须有用户交互才能读取剪贴板的目的，但也等来了一些开发者的吐槽。</p><p><a href="https://twitter.com/cyanapps/status/1535187013611438081">https://twitter.com/cyanapps/status/1535187013611438081</a></p><h3 id="UIPageControl"><a href="#UIPageControl" class="headerlink" title="UIPageControl"></a>UIPageControl</h3><p><code>UIPageControl</code> 在 iOS 16 上得到了增强，主要包括以下两点</p><ol><li>可以针对不同的选中状态展示不同的图像 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// The preferred image for the current page indicator. Symbol images are recommended. Default is nil.</span></span><br><span class="line">    <span class="comment">/// If this value is nil, then UIPageControl will use \c preferredPageIndicatorImage (or its per-page variant) as</span></span><br><span class="line">    <span class="comment">/// the indicator image.</span></span><br><span class="line">    <span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">16.0</span>, <span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> preferredCurrentPageIndicatorImage: <span class="type">UIImage</span>?</span><br></pre></td></tr></table></figure></li><li>可以设置布局方向为水平或垂直 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// The layout direction of the page indicators. The default value is \c UIPageControlDirectionNatural.</span></span><br><span class="line">    <span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">16.0</span>, <span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> direction: <span class="type">UIPageControl</span>.<span class="type">Direction</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">16.0</span>, <span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Direction</span> : <span class="title">Int</span>, @<span class="title">unchecked</span> <span class="title">Sendable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/// Page indicators are laid out in the natural direction of the system locale.</span></span><br><span class="line">        <span class="comment">/// By default, this is equivalent to @c UIPageControlDirectionLeftToRight on LTR locales, and</span></span><br><span class="line">        <span class="comment">/// @c UIPageControlDirectionRightToLeft on RTL locales.</span></span><br><span class="line">        <span class="keyword">case</span> natural <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/// Page indicators are laid out from left to right.</span></span><br><span class="line">        <span class="keyword">case</span> leftToRight <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/// Page indicators are laid out from right to left.</span></span><br><span class="line">        <span class="keyword">case</span> rightToLeft <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/// Page indicators are laid out from top to bottom.</span></span><br><span class="line">        <span class="keyword">case</span> topToBottom <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/// Page indicators are laid out from bottom to top.</span></span><br><span class="line">        <span class="keyword">case</span> bottomToTop <span class="operator">=</span> <span class="number">4</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p>GitHub上的 <a href="https://github.com/ferhanakkan">@ferhanakkan</a> 提供了以下 Demo。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">lazy</span> <span class="keyword">var</span> pageControl: <span class="type">UIPageControl</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="variable">$0</span>.backgroundColor <span class="operator">=</span> .orange</span><br><span class="line">        <span class="variable">$0</span>.layer.cornerRadius <span class="operator">=</span> <span class="number">8</span></span><br><span class="line">        <span class="variable">$0</span>.layer.masksToBounds <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">        <span class="variable">$0</span>.currentPage <span class="operator">=</span> .zero</span><br><span class="line">        <span class="variable">$0</span>.numberOfPages <span class="operator">=</span> collectionViewData.count</span><br><span class="line">        <span class="variable">$0</span>.direction <span class="operator">=</span> .leftToRight</span><br><span class="line">        <span class="variable">$0</span>.preferredIndicatorImage <span class="operator">=</span> <span class="type">UIImage</span>(systemName: <span class="string">&quot;star&quot;</span>)</span><br><span class="line">        <span class="variable">$0</span>.preferredCurrentPageIndicatorImage <span class="operator">=</span> <span class="type">UIImage</span>(systemName: <span class="string">&quot;star.fill&quot;</span>)</span><br><span class="line">        <span class="variable">$0</span>.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$0</span></span><br><span class="line">    &#125;(<span class="type">UIPageControl</span>())</span><br></pre></td></tr></table></figure><p><img src="http://image.stephenfang.me/mweb/UIPageControl.gif" alt="UIPageControl.gif"></p><h3 id="UICalendarView"><a href="#UICalendarView" class="headerlink" title="UICalendarView"></a>UICalendarView</h3><p>之前一直希望 iOS 能够集成一个类似 <a href="https://github.com/WenchaoD/FSCalendar">FSCalendar</a> 的日历组件，在 iOS 16上终于算是等到了。<code>UICalendarView</code> 是 <code>UIDatePicker</code> 的内联日历样式，它和 <code>UIDatePicker</code> 最主要的一个区别在于 <code>UICalendarView</code> 将日期表示为 <code>NSDateComponents</code> 而不是 <code>NSDate</code>。</p><aside>💡 `NSDateComponents` 能够更好、更精确地表示数据模型， `NSDate` 是时间点的表示。</aside><p><code>UICalendarView</code>现在作为一个独立的全功能组件形式提供，它具备了以下几种特性。</p><ul><li>支持日期单选或多选</li><li>支持在范围内框选日期和禁用个别日期</li><li>支持对标注日期进行装饰</li><li>明确由哪个 <code>NSCalendar</code> 表示</li></ul><p>接下来尝试构建一个多选日期日历。</p><ol><li>创建一个 <code>UICalendarView</code> 对象，为其设置 <code>delegate</code> 并指定其 <code>calendar</code> 属性。如果需要采用农历，更改 <code>NSCalendar</code> 的初始化即可（ <code>Calendar(identifier: .chinese)</code>）</li><li>配置多日期选择需要创建一个 <code>UICalendarSelectionMultiDate</code> 对象，并为其 <code>selectedDates</code> 属性进行赋值，再将此对象作为 <code>selectionBehavior</code> 属性传给我们创建的 <code>UICalendarView</code> 对象</li><li>通过 <code>UICalendarViewDelegate</code> 中的 <code>multidateselect: canSelectDate:</code> 方法可以控制哪些日期可以被选择，如防止日历中选中单个日期。无法选择的日期会被置灰。</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Configuring a calendar view with multi-date selection</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> calendarView <span class="operator">=</span> <span class="type">UICalendarView</span>()</span><br><span class="line">calendarView.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">calendarView.calendar <span class="operator">=</span> <span class="type">Calendar</span>(identifier: .gregorian)</span><br><span class="line">view.addSubview(calendarView)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> multiDateSelection <span class="operator">=</span> <span class="type">UICalendarSelectionMultiDate</span>(delegate: <span class="keyword">self</span>)</span><br><span class="line">multiDateSelection.selectedDates <span class="operator">=</span> myDatabase.selectedDates()</span><br><span class="line">calendarView.selectionBehavior <span class="operator">=</span> multiDateSelection</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">multiDateSelection</span>(</span></span><br><span class="line"><span class="function">    <span class="keyword">_</span> <span class="params">selection</span>: <span class="type">UICalendarSelectionMultiDate</span>,</span></span><br><span class="line"><span class="function">    <span class="params">canSelectDate</span> <span class="params">dateComponents</span>: <span class="type">DateComponents</span></span></span><br><span class="line"><span class="function">)</span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> myDatabase.hasAvailabilities(for: dateComponents)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UICalendarViewDelegate</code> 提供了 <code>calendarView: decorationForDateComponents:</code> 方法对日历中的日期进行装饰。</p><ul><li>如果不需要装饰直接返回 nil 即可</li><li>可以通过简单的图像构造装饰日期</li><li>可以通过自定义视图装饰日期</li><li>自定义装饰视图不允许交互</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Configuring Decorations</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calendarView</span>(</span></span><br><span class="line"><span class="function">    <span class="keyword">_</span> <span class="params">calendarView</span>: <span class="type">UICalendarView</span>, </span></span><br><span class="line"><span class="function">    <span class="params">decorationFor</span> <span class="params">dateComponents</span>: <span class="type">DateComponents</span></span></span><br><span class="line"><span class="function">)</span> -&gt; <span class="type">UICalendarView</span>.<span class="type">Decoration</span>? &#123;</span><br><span class="line">    <span class="keyword">switch</span> myDatabase.eventType(on: dateComponents) &#123;</span><br><span class="line">    <span class="keyword">case</span> .none:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">case</span> .busy:</span><br><span class="line">        <span class="keyword">return</span> .default()</span><br><span class="line">    <span class="keyword">case</span> .travel:</span><br><span class="line">        <span class="keyword">return</span> .image(airplaneImage, color: .systemOrange)</span><br><span class="line">    <span class="keyword">case</span> .party:</span><br><span class="line">        <span class="keyword">return</span> .customView &#123;</span><br><span class="line">            <span class="type">MyPartyEmojiLabel</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.stephenfang.me/mweb/UICalendarView.png" alt="UICalendarView"></p><h2 id="导航栏提升"><a href="#导航栏提升" class="headerlink" title="导航栏提升"></a>导航栏提升</h2><h3 id="UINavigationItemStyle"><a href="#UINavigationItemStyle" class="headerlink" title="UINavigationItemStyle"></a><strong>UINavigationItemStyle</strong></h3><p>新引入了 <code>Browser</code>、<code>Editor</code> 两种导航样式，目前支持的<code>UINavigationItemStyle</code> 有以下几种</p><p><img src="http://image.stephenfang.me/mweb/UINavigationItemStyle.png" alt="UINavigationItemStyle"></p><ul><li><code>Navigator</code>：遵循传统的 push / pop 模型，如设置app</li><li><code>Browser</code>：使用历史记录或文件夹结构导航，如 Safari、系统文件app</li><li><code>Editor</code>：导航栏中间为文件相关操作，标题则在最左边</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Adopt the editor navigation style for the navigation item.</span></span><br><span class="line">navigationItem.style <span class="operator">=</span> .editor</span><br></pre></td></tr></table></figure><h3 id="Center-Items"><a href="#Center-Items" class="headerlink" title="Center Items"></a>Center Items</h3><p>center items 是展示在导航栏中间的的控件组，能够提供对应用程序最重要功能的快速访问。</p><p><img src="http://image.stephenfang.me/mweb/CenterItems.png" alt="CenterItems"></p><p>用户可以移动、移除或添加来定制导航栏的 center items。默认不展示的 center items 出现在自定义弹出窗口中，可以通过点击更多按钮中的 Customize Toolbar 菜单访问。</p><p>为了实现这一能力，应用程序需要为导航项的<code>customizationIdentifier</code>属性提供一个字符串，UIKit 能够根据这个 identifier 自动保存和恢复用户自定义设定。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Setting a non-nil customizationIdentifier enables customization and UIKit will automatically save &amp; restore customizations based on this identifier. The identifier must be unique within the scope of the application.</span></span><br><span class="line">    <span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">16.0</span>, <span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> customizationIdentifier: <span class="type">String</span>?</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set a customizationIdentifier and add center item groups.</span></span><br><span class="line">navigationItem.customizationIdentifier <span class="operator">=</span> <span class="string">&quot;editorViewCustomization&quot;</span></span><br></pre></td></tr></table></figure><p>配置 center Items 需要为 <code>navigationItem.centerItemGroups</code> 属性赋值</p><ul><li>若需创建用户无法移动或移除的 item，需要调用 <code>UIBarButtonItem</code> 的实例方法 <code>createFixedGroup()</code></li><li>若需创建可调整的 <code>BarButtonItemGroup</code><ul><li>拟定 <code>customizationIdentifier</code> 作为唯一标识</li><li><code>UIBarButtonItems</code> 一次只能在一个 <code>UIBarButtonItemGroup</code> 中</li><li>将一个 bar button item添加到一个 group 中会将其从之前的任何 group 中移除</li><li><code>isInDefaultCustomization</code>属性设置默认是否出现在导航栏中</li><li><code>BarButtonItemGroup</code> 通常包含多个可以提供定制能力的 <code>UIAction</code></li></ul></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/// Create a fixed group containing this bar button item. UIBarButtonItems may only be in a single UIBarButtonItemGroup at a time, adding a bar button item to a group removes it from any previous group.</span></span><br><span class="line">    <span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">16.0</span>, <span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">creatingFixedGroup</span>()</span> -&gt; <span class="type">UIBarButtonItemGroup</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Create an optional BarButtonItemGroup containing only this bar button item. UIBarButtonItems may only be in a single UIBarButtonItemGroup at a time, adding a bar button item to a group removes it from any previous group.</span></span><br><span class="line">    <span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">16.0</span>, <span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">@available</span>(<span class="keyword">tvOS</span>, unavailable)</span><br><span class="line">    <span class="keyword">@available</span>(<span class="keyword">watchOS</span>, unavailable)</span><br><span class="line">    <span class="meta">@MainActor</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">creatingOptionalGroup</span>(<span class="params">customizationIdentifier</span>: <span class="type">String</span>, <span class="params">isInDefaultCustomization</span>: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">true</span>)</span> -&gt; <span class="type">UIBarButtonItemGroup</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">configureCenterItemGroups</span>()</span> &#123;</span><br><span class="line"></span><br><span class="line">navigationItem.centerItemGroups <span class="operator">=</span> [</span><br><span class="line">            <span class="type">UIBarButtonItem</span>(primaryAction: <span class="type">UIAction</span>(title: <span class="string">&quot;Sync Scrolling&quot;</span>, image: syncScrollingImage) &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] action <span class="keyword">in</span></span><br><span class="line">                syncScrolling.toggle()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> barButtonItem <span class="operator">=</span> action.sender <span class="keyword">as?</span> <span class="type">UIBarButtonItem</span> &#123;</span><br><span class="line">                    barButtonItem.image <span class="operator">=</span> syncScrollingImage</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).creatingFixedGroup(),</span><br><span class="line">            </span><br><span class="line">           <span class="type">UIBarButtonItem</span>(primaryAction: <span class="type">UIAction</span>(title: <span class="string">&quot;Add Link&quot;</span>, image: <span class="type">UIImage</span>(systemName: <span class="string">&quot;link&quot;</span>)) &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                insertTag(.link)</span><br><span class="line">            &#125;).creatingOptionalGroup(customizationIdentifier: <span class="string">&quot;addLink&quot;</span>)</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="type">UIBarButtonItem</span>(title: <span class="string">&quot;Insert Image&quot;</span>, image: <span class="type">UIImage</span>(systemName: <span class="string">&quot;photo&quot;</span>), menu: <span class="type">UIMenu</span>(title: <span class="string">&quot;Insert Image&quot;</span>, children: [</span><br><span class="line">                <span class="type">UIAction</span>(title: <span class="string">&quot;From Photo Library&quot;</span>, image: <span class="type">UIImage</span>(systemName: <span class="string">&quot;photo.on.rectangle&quot;</span>)) &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                    <span class="keyword">let</span> picker <span class="operator">=</span> <span class="type">UIImagePickerController</span>()</span><br><span class="line">                    picker.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">                    present(picker, animated: <span class="literal">true</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="type">UIAction</span>(title: <span class="string">&quot;From File&quot;</span>, image: <span class="type">UIImage</span>(systemName: <span class="string">&quot;folder&quot;</span>)) &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                    <span class="keyword">let</span> picker <span class="operator">=</span> <span class="type">UIDocumentPickerViewController</span>(forOpeningContentTypes: [.image], asCopy: <span class="literal">true</span>)</span><br><span class="line">                    picker.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">                    isPickingImageFromFile <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                    present(picker, animated: <span class="literal">true</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="type">UIAction</span>(title: <span class="string">&quot;Blank Image Tag&quot;</span>, image: <span class="type">UIImage</span>(systemName: <span class="string">&quot;tag&quot;</span>)) &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                    insertTag(.image)</span><br><span class="line">                &#125;</span><br><span class="line">            ])).creatingOptionalGroup(customizationIdentifier: <span class="string">&quot;addImage&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>center items 针对 Mac Catalyst 的 NSToolbar 和 iPad 并排模式能够实现自动适配。</p><p><img src="http://image.stephenfang.me/mweb/NSToolbar.png" alt="NSToolbar"></p><p><img src="http://image.stephenfang.me/mweb/iPadSide.png" alt="iPadSide"></p><h3 id="文件菜单"><a href="#文件菜单" class="headerlink" title="文件菜单"></a>文件菜单</h3><p>当用户点击导航项目的标题时会出现文件菜单，从上到下可以将其拆分成三部分</p><ol><li>Document header：包含文件名、文件类型、文件大小、分享菜单等</li><li>Suggested  title menu：与当前文档相关的建议操作</li><li>Custom title menu：自定义操作</li></ol><p><img src="http://image.stephenfang.me/mweb/TitleMenu.png" alt="TitleMenu"></p><p><strong>Document header</strong></p><p>Document header 显示当前文档相关的信息，包括标题、文件类型和大小，还提供了分享或拖放文档的能力。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">16.0</span>, <span class="operator">*</span>)</span><br><span class="line"><span class="meta">@MainActor</span> <span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">UIDocumentProperties</span> : <span class="title">NSObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// When initializing with a url, UIKit will automatically lookup metadata based on the data at that url.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">init</span>(<span class="params">url</span>: <span class="type">URL</span>)</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Initialize with metadata directly when the item is not backed by a url.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">init</span>(<span class="params">metadata</span>: <span class="type">LPLinkMetadata</span>)</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// The metadata to use. UIKit will generate this automatically if a url is given at initialization time.</span></span><br><span class="line">    <span class="keyword">@NSCopying</span> <span class="keyword">open</span> <span class="keyword">var</span> metadata: <span class="type">LPLinkMetadata</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// To support drag &amp; drop, assign a closure to return an array of drag items corresponding to the represented document.</span></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> dragItemsProvider: ((<span class="type">UIDragSession</span>) -&gt; [<span class="type">UIDragItem</span>])<span class="operator">?</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// To support sharing, assign a closure to return a UIActivityViewController configured to share the represented document.</span></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> activityViewControllerProvider: (() -&gt; <span class="type">UIActivityViewController</span>)<span class="operator">?</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// If enabled, shows an icon representation of the document in the navigation bar.</span></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> wantsIconRepresentation: <span class="type">Bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要Document header相关能力<strong>，</strong>使用<code>UIDocumentProperties</code> 对象给<code>navigationItem.documentProperties</code>属性赋值即可。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> documentProperties <span class="operator">=</span> <span class="type">UIDocumentProperties</span>(url: document.fileURL)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> itemProvider <span class="operator">=</span> <span class="type">NSItemProvider</span>(contentsOf: document.fileURL) &#123;</span><br><span class="line">    documentProperties.dragItemsProvider <span class="operator">=</span> &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">        [<span class="type">UIDragItem</span>(itemProvider: itemProvider)]</span><br><span class="line">    &#125;</span><br><span class="line">    documentProperties.activityViewControllerProvider <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="type">UIActivityViewController</span>(activityItems: [itemProvider], applicationActivities: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">navigationItem.title <span class="operator">=</span> document.localizedName</span><br><span class="line">navigationItem.documentProperties <span class="operator">=</span> documentProperties</span><br></pre></td></tr></table></figure><p><strong>Title Menu</strong></p><p>配置 title menu 需要给 <code>navigationItem.titleMenuProvider</code> 返回菜单 closure。系统返回给closure了一组 suggested actions，包括移动和复制；应用定义了动作包括文档导出为 HTML 和 PDF。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// When non-nil, UIKit will generate suggestedActions and call this block to generate a menu that is displayed from the title.</span></span><br><span class="line">    <span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">16.0</span>, <span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> titleMenuProvider: (([<span class="type">UIMenuElement</span>]) -&gt; <span class="type">UIMenu</span>?)<span class="operator">?</span></span><br><span class="line"></span><br><span class="line">navigationItem.titleMenuProvider <span class="operator">=</span> &#123; suggested <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> custom <span class="operator">=</span> [</span><br><span class="line">        <span class="type">UIMenu</span>(title: <span class="string">&quot;Export…&quot;</span>, image: <span class="type">UIImage</span>(systemName: <span class="string">&quot;arrow.up.forward.square&quot;</span>), children: [</span><br><span class="line">            <span class="type">UIAction</span>(title: <span class="string">&quot;HTML&quot;</span>, image: <span class="type">UIImage</span>(systemName: <span class="string">&quot;safari&quot;</span>)) &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                previewView.exportAsWebArchive(named: document.localizedName, presenter: <span class="keyword">self</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="type">UIAction</span>(title: <span class="string">&quot;PDF&quot;</span>, image: <span class="type">UIImage</span>(systemName: <span class="string">&quot;doc.richtext&quot;</span>)) &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                previewView.exportAsPDF(named: document.localizedName, presenter: <span class="keyword">self</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        ])</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="type">UIMenu</span>(children: suggested <span class="operator">+</span> custom)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UINavigationItem</code>提供了对文件重命名的支持。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">UINavigationItemRenameDelegate</span> : <span class="title">AnyObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// This method is called when renaming has ended. The title on the navigation item has already been changed when this method is called but</span></span><br><span class="line">    <span class="comment">/// clients can make further adjustments to it when necessary.</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">navigationItem</span>(<span class="keyword">_</span>: <span class="type">UINavigationItem</span>, <span class="params">didEndRenamingWith</span> <span class="params">title</span>: <span class="type">String</span>)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Controls whether the rename action is supported for the given navigation item. For example this method is called when the navigation bar&#x27;s</span></span><br><span class="line">    <span class="comment">/// document menu is shown to validate if the rename action should be part of that menu.</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">navigationItemShouldBeginRenaming</span>(<span class="keyword">_</span>: <span class="type">UINavigationItem</span>)</span> -&gt; <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Called when we begin renaming. Implementing this method allows for customizing the initial text that will show up in the text field as well as the</span></span><br><span class="line">    <span class="comment">/// selected range of that text.</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">navigationItem</span>(<span class="keyword">_</span>: <span class="type">UINavigationItem</span>, <span class="params">willBeginRenamingWith</span> <span class="params">suggestedTitle</span>: <span class="type">String</span>, <span class="params">selectedRange</span>: <span class="type">Range</span>&lt;<span class="type">String</span>.<span class="type">Index</span>&gt;)</span> -&gt; (<span class="type">String</span>, <span class="type">Range</span>&lt;<span class="type">String</span>.<span class="type">Index</span>&gt;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// This method can be used to prevent renaming from happening. However there are cases (e.g. when a new navigation item is pushed on the navigation</span></span><br><span class="line">    <span class="comment">/// bar) where this method will not be called and instead navigationItem:didEndRenamingWithTitle: is called right away. Clients are therefore expected to</span></span><br><span class="line">    <span class="comment">/// handle titles in navigationItem:didEndRenamingWithTitle: for which they would return NO from navigationItem:shouldEndRenamingWithTitle:.</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">navigationItem</span>(<span class="keyword">_</span>: <span class="type">UINavigationItem</span>, <span class="params">shouldEndRenamingWith</span> <span class="params">title</span>: <span class="type">String</span>)</span> -&gt; <span class="type">Bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启用该能力需要遵循<code>UINavigationItemRenameDelegate</code>，并使用 <code>navigationItem.renameDelegate</code> 绑定到 self。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigationItem.renameDelegate <span class="operator">=</span> <span class="keyword">self</span></span><br></pre></td></tr></table></figure><h2 id="体验提升"><a href="#体验提升" class="headerlink" title="体验提升"></a>体验提升</h2><p>如果你对这部分内容感兴趣可以移步此<a href="https://developer.apple.com/wwdc22/10071">Session</a></p><h3 id="Find-and-Replace"><a href="#Find-and-Replace" class="headerlink" title="Find and Replace"></a>Find and Replace</h3><p><code>UITextView</code>、<code>WKWebView</code>、<code>PDFView</code> 都支持了系统层级的查找与替换功能。</p><p><img src="http://image.stephenfang.me/mweb/editorTextView.png" alt="editorTextView"></p><p>如果你在开发中的视图是上述 View 的子类，如<code>editorTextView</code> 是<code>UITextView</code> 的子类，启用查找和替换只需要一行代码。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">editorTextView.isFindInteractionEnabled <span class="operator">=</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="UIEditMenu"><a href="#UIEditMenu" class="headerlink" title="UIEditMenu"></a>UIEditMenu</h3><p>Edit menu 交互菜单能够针对当前展示的内容提供诸如剪切、粘贴和粘贴等编辑动作。系统会针对当前用户的交互方式提供符合交互的菜单展示形式。</p><p><img src="http://image.stephenfang.me/mweb/UIEditMenu0.png" alt="UIEditMenu0"></p><p><img src="http://image.stephenfang.me/mweb/UIEditMenu1.png" alt="UIEditMenu1"></p><ul><li>对于触摸交互，动作以 editing menu 的形式展示</li><li>对于指针的交互，动作以 context menu的形式展示</li></ul><p>标准的 UIKit 类，如 <code>UITextView</code> 或者 <code>UITextField</code>，已经预先支持了Edit Menu交互，你可以便捷地框选一个地址然后获得类似地图导航的交互菜单选项。</p><p><img src="http://image.stephenfang.me/mweb/UIEditMenu2.png" alt="UIEditMenu2.png"></p><p>在通用视图中添加 Edit menu 交互菜单</p><ol><li>创建一个 Edit menu 交互对象，并在默认 initializer 传入一个可选的 delegate。</li><li>在视图上调用 <code>addInteraction(_:)</code> 来添加交互对象</li><li>创建一个 gesture recognizer 来触发交互，并将其添加到视图中</li></ol><p>以下苹果提供的例子中创建了一个由长按触发的 Edit menu 交互菜单。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add the edit menu interaction.</span></span><br><span class="line">    editMenuInteraction <span class="operator">=</span> <span class="type">UIEditMenuInteraction</span>(delegate: <span class="keyword">self</span>)</span><br><span class="line">    interactionView.addInteraction(editMenuInteraction<span class="operator">!</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create the gesture recognizer.</span></span><br><span class="line">    <span class="keyword">let</span> longPress <span class="operator">=</span> <span class="type">UILongPressGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(didLongPress(<span class="keyword">_</span>:)))</span><br><span class="line">    longPress.allowedTouchTypes <span class="operator">=</span> [<span class="type">UITouch</span>.<span class="type">TouchType</span>.direct.rawValue <span class="keyword">as</span> <span class="type">NSNumber</span>]</span><br><span class="line">    interactionView.addGestureRecognizer(longPress)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">didLongPress</span>(<span class="keyword">_</span> <span class="params">recognizer</span>: <span class="type">UIGestureRecognizer</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> location <span class="operator">=</span> recognizer.location(in: <span class="keyword">self</span>.view)</span><br><span class="line">    <span class="keyword">let</span> configuration <span class="operator">=</span> <span class="type">UIEditMenuConfiguration</span>(identifier: <span class="literal">nil</span>, sourcePoint: location)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> interaction <span class="operator">=</span> editMenuInteraction &#123;</span><br><span class="line">        <span class="comment">// Present the edit menu interaction.</span></span><br><span class="line">        interaction.presentEditMenu(with: configuration)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Edit menu 交互菜单包括标准编辑操作，包括剪贴、复制、删除等等，可参考<code>UIResponderStandardEditActions</code>。</li><li>可以使用 <code>UIEditMenuInteractionDelegate</code> 提供的方法向Edit menu 交互菜单添加额外项目。</li><li>对于文本视图可以使用<code>UITextViewDelegate</code>、<code>UITextFieldDelegate</code>或<code>UITextInput</code>中的方法为特定文本范围指定菜单显示的项目。</li></ul><h3 id="Sidebar"><a href="#Sidebar" class="headerlink" title="Sidebar"></a>Sidebar</h3><p>在 iOS 16 中，侧边栏会在 Slide-over（侧拉）模式下自动显示。UIKit 会管理一组私有视图。</p><p><img src="http://image.stephenfang.me/mweb/Sidebar.png" alt="Sidebar"></p><h3 id="SFSymbols"><a href="#SFSymbols" class="headerlink" title="SFSymbols"></a>SFSymbols</h3><p>SFSymbols 在 iOS 16 上支持四种 <code>renderingMode</code>，分别是 </p><ul><li>monochrome</li><li>multicolor</li><li>hierarchical</li><li>palette</li></ul><p><img src="http://image.stephenfang.me/mweb/renderingMode.png" alt="renderingMode"></p><p>在 iOS 15 及之前的版本中，默认使用 monochrome 渲染 symbol。</p><p>在 iOS 16 如果没有指定renderingMode，默认使用 hierarchical 渲染 symbol，可以通过 <code>UIImage.SymbolConfiguration.preferringMonochrome()</code> 指定渲染方式。</p><p><img src="http://image.stephenfang.me/mweb/preferringMonochrome.png" alt="preferringMonochrome"></p><p>同时增加了对可变 symbol 的支持，即支持根据从 0 到 1 的值变化映射 symbol 的变化，当然，这需要 symbol 自身支持该能力。</p><p>假设 App 使用了<code>speaker.3.wave.fill</code> 符号表示当前音量级别，在值为 0 时扬声器波纹消失表示最低音量水平，当该值增加到 1 时扬声器的波形逐渐填充完整，表示音量水平提高。</p><p><img src="http://image.stephenfang.me/mweb/variableValue.png" alt="variableValue"></p><p>使用方法也非常简单直白，通过标准的 SF Symbols API 为 UIImage 设置 <code>variableValue</code> 参数即可，甚至将该属性与 <code>renderingMode</code> 组合使用以进一步设计符号的样式。</p><p>以下为 GitHub上 <a href="https://github.com/ferhanakkan">@ferhanakkan</a> 的 Demo。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@objc</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">sliderDidValueChange</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="type">UISlider</span>)</span> &#123;</span><br><span class="line">        imageView.image <span class="operator">=</span> <span class="type">UIImage</span>(</span><br><span class="line">            systemName: <span class="string">&quot;wifi&quot;</span>,</span><br><span class="line">            variableValue: <span class="type">Double</span>(sender.value),</span><br><span class="line">            configuration: <span class="type">UIImage</span>.<span class="type">SymbolConfiguration</span>(paletteColors: [.orange])</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.stephenfang.me/mweb/sfsymbols.gif" alt="sfsymbols.gif"></p><p>学习如何创建自定义变量符号可以观看 <a href="https://developer.apple.com/videos/play/wwdc2022/10158/">Adopt variable color in SF Symbols</a> 和 <a href="https://developer.apple.com/videos/play/wwdc2022/10157/">What’s new in SF Symbols 4</a> 这两个Session。</p><h3 id="Swift-Concurrency-and-Sendable"><a href="#Swift-Concurrency-and-Sendable" class="headerlink" title="Swift Concurrency and Sendable"></a>Swift Concurrency and Sendable</h3><p>UIKit 现在可以与 Swift Concurrency 同时使用，包括 immutable 类型，如以下的类型遵循了 Sendable</p><ul><li><code>UIImage</code></li><li><code>UIColor</code></li><li><code>UIFont</code></li><li><code>UITraitCollection</code></li></ul><p>对象可以在 MainActor 和自定义 actor 之间发送而不会收到编译器警告。</p><p>苹果提供的例子中，有一个叫做 Processor 的自定义 actor，以及一个被绑定到 MainActor 的叫做 ImageViewer 的 ViewController。在 <code>sendImageForProcessing</code> 方法中 ImageViewer 将图像发送给 Processor进行处理，目前是安全的。</p><p>因为 UIImage 是 immutable 类型， Processor 必须创建新的拷贝来执行操作。任何引用原始图像的代码都不会显示这些修改，共享状态也不会发生不安全的变化。</p><p><img src="http://image.stephenfang.me/mweb/Concurrency0.png" alt="Concurrency0"></p><p>对比一下因为 mutable 而没有遵循 Sendable 的 UIBezierPath，以前只能在文档中表示，现在可以由编译器进行检查。</p><p><img src="http://image.stephenfang.me/mweb/Concurrency1.png" alt="Concurrency1"></p><p>要了解更多关于 Sendable 和 Swift Concurrency 移步视频 <a href="https://developer.apple.com/videos/play/wwdc2022/110351/">Eliminate data races using Swift Concurrency</a> 和 <a href="https://developer.apple.com/videos/play/wwdc2022/110350/">Visualize and optimize Swift Concurrency</a>。</p><h2 id="UIKit-and-SwiftUI"><a href="#UIKit-and-SwiftUI" class="headerlink" title="UIKit and SwiftUI"></a>UIKit and SwiftUI</h2><p>过去如果想要实现将 SwiftUI 视图嵌入 UIView 视图，一般需要这么做。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> controller <span class="operator">=</span> <span class="type">UIHostingController</span>(rootView: <span class="type">SwiftUIView</span>())</span><br><span class="line">addChild(controller)</span><br><span class="line">view.addSubview(controller.view)</span><br><span class="line">controller.didMove(toParent: <span class="keyword">self</span>)</span><br></pre></td></tr></table></figure><p>在 iOS 16上推出了 <code>UIHostingConfiguration</code> ，你可以在 <code>UICollectionView</code> 和 <code>UITableView</code> 中以 <code>contentConfiguration</code> 的方式将 SwiftUI 构建的 View 嵌入 cell。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cell.contentConfiguration <span class="operator">=</span> <span class="type">UIHostingConfiguration</span> &#123;</span><br><span class="line">    <span class="type">SwiftUIView</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>最近几年的 WWDC 中看到苹果对于 UIKit 的理解，倡导使用 configuration 的方式构建组件、菜单，一方面参照人机交互指南构建组件能够确保交互不被滥用，另一方面降低了开发者的接入成本。</p><p>作为开发者，一起尝试兼容 app 到 iOS 16，适配新的API，探索新的业务可能性吧。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.swiftjectivec.com/ios-16-notable-uikit-additions/">https://www.swiftjectivec.com/ios-16-notable-uikit-additions/</a></li><li><a href="https://blog.appcircle.io/whats-new-in-uikit-at-ios-16-wwdc22">https://blog.appcircle.io/whats-new-in-uikit-at-ios-16-wwdc22</a></li><li><a href="https://developer.apple.com/wwdc22/10068">https://developer.apple.com/wwdc22/10068</a></li><li><a href="https://juejin.cn/post/7111173753668632584">https://juejin.cn/post/7111173753668632584</a></li><li><a href="https://github.com/WenchaoD/FSCalendar">https://github.com/WenchaoD/FSCalendar</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近几年的 WWDC 每年都能看到很多 SwiftUI 的新能力，但不能忽略的是 UIKit 框架的更新。&lt;/p&gt;
&lt;p&gt;今年的 &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2022/10068/&quot;&gt;What’s New in UIKit Session&lt;/a&gt; 主要包括以下几个方面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生产力提升&lt;/li&gt;
&lt;li&gt;控制增强&lt;/li&gt;
&lt;li&gt;API 改进&lt;/li&gt;
&lt;li&gt;UIKit 与 SwiftUI 混编&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我按照业务理解和适配进度的优先级，对 session 内容进行了重新排序和整理，对 &lt;a href=&quot;https://github.com/ferhanakkan&quot;&gt;@ferhanakkan&lt;/a&gt; 的仓库进行了一些改动，以下为我的总结。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://stephefang.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Swift" scheme="https://stephefang.me/tags/Swift/"/>
    
    <category term="WWDC" scheme="https://stephefang.me/tags/WWDC/"/>
    
  </entry>
  
  <entry>
    <title>2022年六月读书摘录</title>
    <link href="https://stephefang.me/2022/07/15/202206ReadingList/"/>
    <id>https://stephefang.me/2022/07/15/202206ReadingList/</id>
    <published>2022-07-15T05:10:12.000Z</published>
    <updated>2022-07-24T16:53:19.928Z</updated>
    
    <content type="html"><![CDATA[<p>继上个月分享了一些读书摘录之后这个月也没闲着，一共读了五本书。</p><ul><li>《长安的荔枝》</li><li>《失落的卫星》</li><li>《午夜降临前抵达》</li><li>《克拉拉与太阳》</li><li>《工作、消费主义和新穷人》</li></ul><span id="more"></span><h1 id="《长安的荔枝》"><a href="#《长安的荔枝》" class="headerlink" title="《长安的荔枝》"></a>《长安的荔枝》</h1><p><a href="https://movie.douban.com/subject/35651341/">长安的荔枝</a></p><p>取材于“一骑红尘妃子笑，无人知是荔枝来”，马伯庸讲故事的能力确实令人惊叹，也很是期待同名的电影作品。</p><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><blockquote><p><strong>唯有早点跟妻子和离，一别两宽，将来事发才不会累及家人。李善德可以趁这最后四个月横行一下，多捞些油水，尽量把香积贷偿清，好歹能给孤女寡妇留下一处宅子。</strong></p></blockquote><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><blockquote><p><strong>一番铜臭交易之后，心中那点“昔我往矣”的淡淡离愁，也便没了踪影，倒省了很多苦情文章。</strong></p></blockquote><blockquote><p><strong>听说百越民风彪悍，生翅者不食幞头，带腿者不食案几，余者无不可入口，果然没有夸张。</strong></p></blockquote><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><blockquote><p><strong>自己那二十多年的上林署监事，其实只窥到了朝廷的小小一角。这个坐落着诸多衙署的庞大皇城，比秦岭密林更加错综复杂，它运转的规律比道经更为玄妙。不熟悉的人贸然踏入，就像落入壶口瀑布下的奔腾乱流一样，撞得头破血流</strong></p></blockquote><blockquote><p><strong>做官之道，其实就三句话：和光同尘，好处均沾，花花轿子众人齐抬。一个人吃独食，是吃不长久的。</strong></p></blockquote><h1 id="《失落的卫星》"><a href="#《失落的卫星》" class="headerlink" title="《失落的卫星》"></a>《失落的卫星》</h1><p>看了刘子超的书才知道原来旅行文学这么有趣，并不是类似流水账之类的产物。<br>从作者文字中窥见了很多人情世故，带着我的思绪去了遥远的中亚。</p><p><a href="https://book.douban.com/subject/35025453/">失落的卫星</a></p><h2 id="序幕-大巴扎、流放者和塔季扬娜"><a href="#序幕-大巴扎、流放者和塔季扬娜" class="headerlink" title="序幕 大巴扎、流放者和塔季扬娜"></a>序幕 大巴扎、流放者和塔季扬娜</h2><blockquote><p><strong>哈萨克是俄国十月革命后才产生的概念。当时，苏联把西方的民族国家理论应用到中亚这片民族观念尚处于前现代状态的土地上。哈萨克斯坦，连同其他四个斯坦国一起，诞生于这样的背景下。</strong></p></blockquote><blockquote><p><strong>1854年，陀思妥耶夫斯基被发配至哈萨克斯坦东部的塞米伊。他刚在西伯利亚的鄂木斯克服刑四年，因此即便是这样闭塞的边疆小镇，也令他欣喜。因为他终于可以摘掉镣铐，同时获准阅读《圣经》之外的书籍。</strong></p></blockquote><blockquote><p><strong>中国的吉尔吉斯人叫作“柯尔克孜族”；李白据说生于碎叶城，就位于今天吉尔吉斯境内的托克马克。</strong></p></blockquote><h3 id="边城浮世绘"><a href="#边城浮世绘" class="headerlink" title="边城浮世绘"></a>边城浮世绘</h3><blockquote><p><strong>“对我这代吉尔吉斯人来说，苏联就像史前时代，与我们无关。”阿拜说，“从父母那里，我听过不少苏联时代的故事，但却无法激起太多共鸣。”</strong></p></blockquote><blockquote><p><strong>不过，我可以告诉你，不要抨击绿色和平，更不要抨击LGBT——这是我的女友说的。她说，阿拜，如果你想获得诺贝尔文学奖，那你就不要抨击绿色和平，更不要抨击LGBT。”<br>“她确实聪明。”</strong></p></blockquote><blockquote><p><strong>我始终觉得自己流淌着游牧民族的血液——不是草原游牧民族，而是当代游牧民族。这样的人总是不停移动，从世界的一个地方到另一个地方，缺乏归属感，家只不过是当下的落脚之处。对他们来说，旅行不是为了去任何地方，只是为了旅行。最重要的事情是移动。</strong></p></blockquote><h3 id="加加林疗养院"><a href="#加加林疗养院" class="headerlink" title="加加林疗养院"></a>加加林疗养院</h3><blockquote><p><strong>所有人的餐食都是一样的——就像那些服务员脸上的表情——具有社会主义的一致性。</strong></p></blockquote><h3 id="杜尚别复调"><a href="#杜尚别复调" class="headerlink" title="杜尚别复调"></a>杜尚别复调</h3><blockquote><p><strong>想借此赋予塔吉克人一点犹太民族在他们自己历史中找到的那种悲怆感。相比一个王朝的覆灭，文化根基的丧失更加悲惨。</strong></p></blockquote><blockquote><p><strong>让人想到后来伊拉克人民推倒萨达姆的雕像。无事可做的男人们一脸仇恨，他们举着拳头，喊着口号，仿佛在进行一场游戏，只是没人相信这场游戏会有任何严重的后果。</strong></p></blockquote><blockquote><p><strong>但我只是说，你还年轻，还没跨越那道“阴影线”——这是约瑟夫·康拉德说的，你感到烦闷、厌倦、不满、迷茫，这是生活中必将来临的那个时刻。</strong></p></blockquote><h3 id="从帕米尔公路到瓦罕山谷"><a href="#从帕米尔公路到瓦罕山谷" class="headerlink" title="从帕米尔公路到瓦罕山谷"></a>从帕米尔公路到瓦罕山谷</h3><blockquote><p><strong>说这话时，司机的表情并没有任何不满，口气中甚至还带着几分理解。警察相信，凭他们的制服，索取是名正言顺的事。司机大概也这么认为。</strong></p></blockquote><blockquote><p><strong>我想起一路上经过的那些分界线：同样的民族，同样的生活方式，被分割开来，像刀子割开的伤口。</strong></p></blockquote><h3 id="不安的山谷"><a href="#不安的山谷" class="headerlink" title="不安的山谷"></a>不安的山谷</h3><blockquote><p><strong>取消宗教、推行民族融合的苏联，宗教和族群的界限变得模糊不清，一种相对平静的关系维持了数十年。可是一旦这种体制濒临溃败，宗教势力和民族主义就会结合在一起，导致惨剧发生。</strong></p></blockquote><blockquote><p><strong>在《本地人的今与昔》一书中，纳利夫金总结了两个民族之间不太融洽的历史关系：乌兹别克人是定居民族，而吉尔吉斯人是游牧民族。乌兹别克人瞧不起吉尔吉斯人，而又惧怕他们的武力。乌兹别克人大都是农民、工匠、商人，而吉尔吉斯人喜欢在山间放牧，住在传统毡房里。他们不时劫掠乌兹别克人的马匹，只有当他们需要买东西时，才会下到乌兹别克人居住的绿洲城镇。这时，乌兹别克人就会大肆嘲笑吉尔吉斯人的愚昧无知，然后狠狠地敲他们一笔。</strong></p></blockquote><h3 id="通向撒马尔罕的金色之路"><a href="#通向撒马尔罕的金色之路" class="headerlink" title="通向撒马尔罕的金色之路"></a>通向撒马尔罕的金色之路</h3><blockquote><p><strong>中国人的丝绸和瓷器传入这里，而粟特人则将制造玻璃和酿造葡萄酒的技艺传入中国。东西方的珠宝、首饰、钱币在这里荟聚，还有用骨头精心雕刻的下棋者。</strong></p></blockquote><blockquote><p><strong>作为旅行者，我只是机械地从一个遗迹，移动到另一个遗迹，试图从每个遗迹中眺望到一点遥远时代的微暗火光。</strong></p></blockquote><p>以后每去一个博物馆都可以说成是自己在眺望<strong>遥远时代的微暗火光。</strong></p><h3 id="布哈拉的博弈与离散"><a href="#布哈拉的博弈与离散" class="headerlink" title="布哈拉的博弈与离散"></a>布哈拉的博弈与离散</h3><blockquote><p><strong>在这里，苏联纪念物是如此之多，而且便宜得惊人。谁又能想到它们曾是一代人的荣誉和骄傲？是那些人用生命加以守护的珍宝？</strong></p></blockquote><h3 id="困守咸海的人"><a href="#困守咸海的人" class="headerlink" title="困守咸海的人"></a>困守咸海的人</h3><blockquote><p><strong>咸海王讲起他的治理之道。他时常对工人们说，来到这里，只有一个目的，那就是一门心思地挣钱。他禁止工人喝酒，但也知道，私下里人人都会喝。只要不闹出事来，就应该“睁一只眼闭一只眼”。他管这叫“中国人的智慧”。</strong></p></blockquote><h3 id="突厥斯坦的小人物"><a href="#突厥斯坦的小人物" class="headerlink" title="突厥斯坦的小人物"></a>突厥斯坦的小人物</h3><blockquote><p><strong>随着阿拉伯人的征伐，造纸术由中亚传入西亚、北非和欧洲。</strong></p></blockquote><blockquote><p><strong>我留意了一下画作的时间——1954年。前一年，斯大林刚刚去世，苏联进入“解冻”时期。已经在塔拉兹待了十三年的布雷默，想必也感受到一丝春意——你甚至能在他的画笔中看到一种有意克制的轻松。</strong></p></blockquote><blockquote><p><strong>他早有准备，说不定在家排练过。那张消瘦的胡茬脸，配合抑扬顿挫的口气，外加耸动的眉骨，活脱脱地展现了一个乌兹别克人的“交易的艺术”，体现了哈萨克人心目中“萨特人”的狡黠。我一时间钦佩不已，于是没再还价，就点头同意了。</strong></p></blockquote><p>作者笔下不少地区的中亚人都有这般特点，他们的这番特点也是经济水平和历史造成的。</p><blockquote><p><strong>帖木儿是一个被高估的英雄人物。他没有为帝国创造出一个生生不息的文化，只是留下一些建筑，供人凭吊而已。一旦他的个人意志退潮，帝国也就随之烂尾。这些建筑——无论是对于宗教，还是人民——意义都非常有限。</strong></p></blockquote><h3 id="草原核爆"><a href="#草原核爆" class="headerlink" title="草原核爆"></a>草原核爆</h3><blockquote><p><strong>“你们的祖国是哪里？”“你用什么语言思考，你的祖国就是哪里。”“我们说俄语，可我们生活在哈萨克斯坦。”“我们不属于俄国，不属于哈萨克斯坦，更不属于朝鲜或韩国。”“我们是什么人？”</strong></p></blockquote><blockquote><p><strong>我沿着指引观看。每看完一部分，大妈就把那部分的照明关掉。虽说博物馆有政府补贴，也收门票，但看来还是资金紧张，不得不省钱度日。</strong></p></blockquote><blockquote><p><strong>一旦国家的意志退潮，人们就会自然地用脚投票。科学家和军人带着家眷匆匆离开，短短数月内，查干人去楼空。</strong></p></blockquote><h3 id="七河之地"><a href="#七河之地" class="headerlink" title="七河之地"></a>七河之地</h3><blockquote><p><strong>在广大的中亚乡村地带，我都目睹了类似情况：相比他们苏联出身的父母，独立后的年轻一代反而更加传统、保守。</strong></p></blockquote><h2 id="尾声-扎尔肯特：进步前哨站"><a href="#尾声-扎尔肯特：进步前哨站" class="headerlink" title="尾声 扎尔肯特：进步前哨站"></a>尾声 扎尔肯特：进步前哨站</h2><blockquote><p><strong>苏俄治下的和平促进了中亚的繁荣，但也埋下分裂的种子。独立后，中亚开始对自己的历史和未来有了新的看法，不同的思潮与想法在这片土地上反复激荡。而今天，中国的崛起将会改变这里的引力，为中亚带来不同的前景。</strong></p></blockquote><p>结尾的爱国情怀反倒是有些突然，不过经过那么多天奔波回到祖国确实会有这番情感。</p><h1 id="《午夜降临前抵达》"><a href="#《午夜降临前抵达》" class="headerlink" title="《午夜降临前抵达》"></a>《午夜降临前抵达》</h1><p>读的刘子超的第二本作品，书籍中的一句话我很是喜欢。“旅行中的相遇，就如同空中交汇的流星，短暂的火花过后，依然是两块丑陋的陨石。我们期待旅途中的相遇，但相遇也注定了分离。”</p><p><a href="https://book.douban.com/subject/35522033/">午夜降临前抵达</a></p><h3 id="第一章-疆界的消失，德累斯顿大轰炸，老布拉格的幽灵"><a href="#第一章-疆界的消失，德累斯顿大轰炸，老布拉格的幽灵" class="headerlink" title="第一章 疆界的消失，德累斯顿大轰炸，老布拉格的幽灵"></a>第一章 疆界的消失，德累斯顿大轰炸，老布拉格的幽灵</h3><blockquote><p><strong>不喜欢把每一段行程都安排得严丝合缝的旅行，没有即兴，没有随心所欲，没有突发奇想，旅行更像是一种苦行。</strong></p></blockquote><h3 id="第二章-火车情结，横穿波希米亚，死亡赋格"><a href="#第二章-火车情结，横穿波希米亚，死亡赋格" class="headerlink" title="第二章 火车情结，横穿波希米亚，死亡赋格"></a>第二章 火车情结，横穿波希米亚，死亡赋格</h3><blockquote><p><strong>伯格说：“年轻人，这世上还有哪个国家比波兰更习惯与忧伤这种情感妥协共处呢？”</strong></p></blockquote><blockquote><p><strong>我感到一切战争、屠杀、罪行总会影响到之后的每一个人，无论哪一方，只是以各自不同的方式罢了。</strong></p></blockquote><h3 id="第三章-读艺术史的女孩，塔特拉山，猎人小屋"><a href="#第三章-读艺术史的女孩，塔特拉山，猎人小屋" class="headerlink" title="第三章 读艺术史的女孩，塔特拉山，猎人小屋"></a>第三章 读艺术史的女孩，塔特拉山，猎人小屋</h3><blockquote><p><strong>除了酒吧和饭馆，其他公众场合禁止饮酒。一旦被警察发现，可能受到重罚。具体来说，惩戒的程度根据喝酒的多少而定。</strong></p></blockquote><blockquote><p><strong>山在白天是一种壮美，到了夜晚却令人心悸。那种庞大而未知的存在，不分昼夜地永恒矗立，让我感到自己的渺小和脆弱。如果山愿意，它可以轻而易举地摧毁我，而我此刻还活着，不过依赖于它的垂怜。</strong></p></blockquote><blockquote><p><strong>旅行中的相遇，就如同空中交汇的流星，短暂的火花过后，依然是两块丑陋的陨石。我们期待旅途中的相遇，但相遇也注定了分离。</strong></p></blockquote><h3 id="第四章-卫星城，沃利肖像，昨日的世界"><a href="#第四章-卫星城，沃利肖像，昨日的世界" class="headerlink" title="第四章 卫星城，沃利肖像，昨日的世界"></a>第四章 卫星城，沃利肖像，昨日的世界</h3><blockquote><p><strong>因为放弃了发掘城市秘密的野心，反而获得了一种轻松自在的心理状态：无须再去看着地图，寻找那些著名景点；也无须为了找到当地人的秘密据点而犯愁；更不用因为自己对这座城市的无知而羞愧。</strong></p></blockquote><blockquote><p><strong>在维也纳，这类具有历史意义的每一幢房屋的拆除，就像从我们身上夺取了一部分灵魂。</strong></p></blockquote><blockquote><p><strong>对于这家百年咖啡馆来说，一部好莱坞电影的意义显然算不上重大，它根本不屑把任何电影海报张贴出来。一切都尽量维持着1880年的原貌——那是哈布斯堡王朝最辉煌的时代。</strong></p></blockquote><h3 id="第五章-中国“倒爷”，骑行者俱乐部，土耳其浴室"><a href="#第五章-中国“倒爷”，骑行者俱乐部，土耳其浴室" class="headerlink" title="第五章 中国“倒爷”，骑行者俱乐部，土耳其浴室"></a>第五章 中国“倒爷”，骑行者俱乐部，土耳其浴室</h3><blockquote><p><strong>风景缺少的只是赞美。<br>——切斯瓦夫·米沃什，《风景》</strong></p></blockquote><blockquote><p><strong>一个国家的年轻人如果都以拥有“公共层面”的身份为荣，那么这个国家无疑是充满希望的。</strong></p></blockquote><blockquote><p><strong>我相信过去不曾终结，它仍然在另一个维度上运行。通过旧房子、旧书、旧照片，我们得以窥视那个维度里的吉光片羽。</strong></p></blockquote><h3 id="第六章-挥之不去的饥饿感，分裂的南斯拉夫，湖底的钟声"><a href="#第六章-挥之不去的饥饿感，分裂的南斯拉夫，湖底的钟声" class="headerlink" title="第六章 挥之不去的饥饿感，分裂的南斯拉夫，湖底的钟声"></a>第六章 挥之不去的饥饿感，分裂的南斯拉夫，湖底的钟声</h3><blockquote><p><strong>多次和日本人相遇以后，我总结出了在国外分辨他们的三种方法：一、他们把sorry念成soli；二、他们人手一本日本大宝石出版社的《走遍全球》；三、或者说是一种天赋亦可，他们总能在鸟不拉屎的地方，找到极为正宗的日本料理。</strong></p></blockquote><blockquote><p><strong>正如米兰·昆德拉所说，生长于一个小国有时候是一种优势。因为身处小国，要么做一个可怜的、眼光狭窄的人，要么成为一个广闻博识的“世界性的人”。</strong></p></blockquote><blockquote><p><strong>作为少数民族作家，他们不仅是在使用词语，他们是在运用整个存在，运用民族精神和神话，运用记忆、传统和文化来写作。对他们来说，语言就是命运——一个民族的命运。</strong></p></blockquote><h3 id="第一章-古树茶，故乡在塞尔维亚，撒旦的探戈"><a href="#第一章-古树茶，故乡在塞尔维亚，撒旦的探戈" class="headerlink" title="第一章 古树茶，故乡在塞尔维亚，撒旦的探戈"></a>第一章 古树茶，故乡在塞尔维亚，撒旦的探戈</h3><blockquote><p><strong>对于那一代匈牙利人来说，迈克尔·杰克逊代表着对美国文化的想象，甚至是对“西方”的想象。因为铁幕粗暴地把“中欧”这一概念取消了，使匈牙利、东德、捷克斯洛伐克、波兰成了与美国和西欧对立的“东欧”。</strong></p></blockquote><blockquote><p><strong>拍摄一位匈牙利裔的塞尔维亚艺术家坐通勤火车过境。每次，他都在火车过境时进入洗手间，让同一泡尿液撒在两个国家的土地上。</strong></p></blockquote><blockquote><p><strong>“在莫哈奇失去的远比现在多。”意思是说，最困难的时刻已经过去，以后再遇到的困难算得了什么？借此鼓起自己面对困难和挫折的勇气。</strong></p></blockquote><h3 id="第二章-物理老师的秘密往事，两个哑巴，赖奇克劳动营"><a href="#第二章-物理老师的秘密往事，两个哑巴，赖奇克劳动营" class="headerlink" title="第二章 物理老师的秘密往事，两个哑巴，赖奇克劳动营"></a>第二章 物理老师的秘密往事，两个哑巴，赖奇克劳动营</h3><blockquote><p><strong>相比一个没人关心政治的社会，一个人人都热衷参与政治的社会，反而更可怕——只有极权时代才会出现这样的情况。</strong></p></blockquote><blockquote><p><strong>我喜欢火车站，因为它像一幕话剧的逼真布景，也是一座城市的风情写照。悲欢离合在这里上演，也在这里结束。在火车站，旅行者可以得到关于一座城市的全部想象。</strong></p></blockquote><h3 id="第三章-布尔诺之星，异乡人，冬之旅"><a href="#第三章-布尔诺之星，异乡人，冬之旅" class="headerlink" title="第三章 布尔诺之星，异乡人，冬之旅"></a>第三章 布尔诺之星，异乡人，冬之旅</h3><blockquote><p><strong>当然，”玛丽亚笑了，“只是相处一段时间后发现，那种建立在共同生活基础上的固定关系并不是我想要的。”</strong></p></blockquote><h3 id="第四章-弗罗茨瓦夫与平行世界，叶子和臭鼬，一场风暴的结语"><a href="#第四章-弗罗茨瓦夫与平行世界，叶子和臭鼬，一场风暴的结语" class="headerlink" title="第四章 弗罗茨瓦夫与平行世界，叶子和臭鼬，一场风暴的结语"></a>第四章 弗罗茨瓦夫与平行世界，叶子和臭鼬，一场风暴的结语</h3><blockquote><p><strong>在旅游已经相当普遍的今天，“游客”（tourist）似乎已经变成一个格调不高的概念，暗含着浅薄、低俗之意。逼格更高的说法是“旅行者”（traveler）。因为“travel”一词，来自古老的拉丁语，与宗教朝圣中的苦行和精神升华有关。在古代，旅行的最初形态和唯一目的就是朝圣。</strong></p></blockquote><blockquote><p><strong>政治和文学在语言和精神上迥然不同：“对我有益的对他们有害，适合他们的我却觉得难以消受。我们是两种泾渭分明的风格。”</strong></p></blockquote><h3 id="第五章-“舒伯特”号列车，帝国的切片，萨尔茨堡的雨"><a href="#第五章-“舒伯特”号列车，帝国的切片，萨尔茨堡的雨" class="headerlink" title="第五章 “舒伯特”号列车，帝国的切片，萨尔茨堡的雨"></a>第五章 “舒伯特”号列车，帝国的切片，萨尔茨堡的雨</h3><blockquote><p><strong>大部分时间，我面对的是近乎荒凉的风景。如果说开车是一种思考形式，那么它更接近冥想，不要求思想过于集中，而是鼓励思绪自由飘荡</strong></p></blockquote><h3 id="第六章-流亡之地，黄金时代，最后的游荡"><a href="#第六章-流亡之地，黄金时代，最后的游荡" class="headerlink" title="第六章 流亡之地，黄金时代，最后的游荡"></a>第六章 流亡之地，黄金时代，最后的游荡</h3><blockquote><p><strong>以至于我感到这些游荡在码头的人全都有一种审美上的自觉——他们出现在这里，并非有任何事情要做，而仅仅是出于美学的需要。</strong></p></blockquote><blockquote><p><strong>工人和穷文人热爱的咖啡馆，已经中产阶级化。如果乔伊斯不幸晚生一百年，他很可能无力负担这里的消费。</strong></p></blockquote><blockquote><p><strong>这个世界大概本就没有“黄金时代”。尤其是对于作家和艺术家，生活和伟大的作品之间，总存在某种“古老的敌意”。所谓“黄金时代”，只是胜利者事后的“怀乡”，只是对过去浪漫主义的怀想，只是一片树叶或者一粒止痛片，</strong></p></blockquote><blockquote><p><strong>而我出生在一个巨变中的国度，成长阶段所熟悉的一切都已物是人非。我不得不接受或大或小的变迁，并且乐于像幽灵一样在废墟间游荡。这片广袤的欧洲腹地——这本书写到的所有地方，为我这样的幽灵提供了游荡之所。我不时唏嘘于它们的变化，同时也试图发现那些被时光留下的永恒之物。</strong></p></blockquote><h3 id="后记-在旅行和写作中确认自我"><a href="#后记-在旅行和写作中确认自我" class="headerlink" title="后记 在旅行和写作中确认自我"></a>后记 在旅行和写作中确认自我</h3><blockquote><p><strong>目的地旅行、阅读、寻找素材、日复一日地写作。它也教会了我对作家来说更重要的品质：保持耐心、享受孤独。</strong></p></blockquote><h1 id="《克拉拉与太阳》"><a href="#《克拉拉与太阳》" class="headerlink" title="《克拉拉与太阳》"></a>《克拉拉与太阳》</h1><p><a href="https://book.douban.com/subject/35315153/">克拉拉与太阳</a></p><p>因为豆瓣畅销书的光环就挑出时间看了，随着年岁增长我越来越不愿意读这些文学意义上的小说了。<br>这本书讲的确实是一个很与时俱进且新奇的故事，看完之后我也不禁思考人和所谓的人工智能的机器人在意识上区别究竟是什么。</p><h2 id="第四部"><a href="#第四部" class="headerlink" title="第四部"></a>第四部</h2><blockquote><p><strong>古往今来，一个世纪又一个世纪，人们彼此陪伴，共同生活，爱着彼此，恨着彼此，却全都是基于一个错误的假设。一种我们过去在懵懵懂懂之中一直固守的迷信。</strong></p></blockquote><h2 id="译后记"><a href="#译后记" class="headerlink" title="译后记"></a>译后记</h2><blockquote><p><strong>正是由于自私的欲望与升华的渴望并存，人类的心中才会充满了矛盾、彷徨与痛苦；没有了自私那下坠的重力，一切崇高、向上的人性也就虚无缥缈得失去了分量。自私是人类沉重的负担，但也许在并不遥远的未来，也会是人之所以为人的一个最重要的锚点吧。</strong></p></blockquote><h1 id="《工作、消费主义和新穷人》"><a href="#《工作、消费主义和新穷人》" class="headerlink" title="《工作、消费主义和新穷人》"></a>《工作、消费主义和新穷人》</h1><p>在哔哩哔哩看到了对于这本书内容的分析，你可以直接批判它就是典型的白左思想书籍，但这本书还是很值得一读。</p><p><a href="https://book.douban.com/subject/35593780/">工作、消费主义和新穷人</a></p><h3 id="要么工作，要么死亡"><a href="#要么工作，要么死亡" class="headerlink" title="要么工作，要么死亡"></a>要么工作，要么死亡</h3><blockquote><p><strong>在“大量减少”穷人的过程中，工作伦理的贡献是无价的。毕竟，工作伦理主张：无论生活多么悲惨，只要它是由劳动报酬支撑的，就具有道德优越性。</strong></p></blockquote><h3 id="制造生产者"><a href="#制造生产者" class="headerlink" title="制造生产者"></a>制造生产者</h3><blockquote><p><strong>除了那些由于世袭或暴富，可以自给自足悠然生活的人以外，“你是谁”这个问题的答案通常指向人们所在的公司以及该公司的能力。</strong></p></blockquote><h3 id="从“更好”到“更多”"><a href="#从“更好”到“更多”" class="headerlink" title="从“更好”到“更多”"></a>从“更好”到“更多”</h3><blockquote><p><strong>工作伦理的宣讲力度与潜在劳动者因失去自由产生的抵制情绪成正比。宣讲的目的在于消除抵制。工作伦理是一种工具，目的是使工人们丧失独立性，服从于工厂制度。</strong></p></blockquote><blockquote><p><strong>大多数美国社会历史学家都认为，推动美国工业前进的是企业精神和跻身上层阶级的愿望，而非工作伦理。</strong></p></blockquote><blockquote><p><strong>工业社会是以权力冲突拉开序幕，那时的人们为自治和自由而斗争。时过境迁，现在他们只会为了获取更多盈余而斗争。人们默默接受了现存的权力结构，对这种结构的修正被排除在议程之外。越来越多的人认为，从工匠变成工人时失去的人的尊严，只有通过赢得更多盈余才能恢复。这种变迁中，努力工作能使人们道德升华的呼声日益衰弱。现在，衡量人们声望和社会地位的是工资的差别，而不是勤于工作的道德或惰于工作的罪恶。</strong></p></blockquote><h3 id="第二章-从工作伦理到消费美学"><a href="#第二章-从工作伦理到消费美学" class="headerlink" title="第二章 从工作伦理到消费美学"></a>第二章 从工作伦理到消费美学</h3><blockquote><p><strong>之所以称之为“生产者社会”，是因为那时人们主要以生产者的身份参与其中。社会塑造其成员的方式由社会分工的需要决定，社会希望其成员有能力和意愿参与社会分工。在当前这个近现代（late-morden）、次现代（second-morden）或后现代（postmorden）阶段，社会主要要求人们以消费者的能力参与其中，首先依照“消费者”角色需要塑造其成员，并期望他们具有消费的能力和意愿。</strong></p></blockquote><blockquote><p><strong>想要提高消费者的消费能力就不能让他们休息。他们需要不断地接受新的诱惑，持续处于永不枯竭的兴奋之中，持续处于怀疑和不满之中。诱使他们转移注意力的诱饵需要肯定这种怀疑，同时提供一个宣泄的出口：“你以为这就是全部？好戏还在后头呢！</strong></p></blockquote><blockquote><p><strong>正常运转的消费者社会中，消费者会主动寻求被诱惑。他们的生活从吸引到吸引，从诱惑到诱惑，从吞下一个诱饵到寻找另一个诱饵，每一个新的吸引、诱惑和诱饵都不尽相同，似乎比之前的更加诱人。他们生活于这种轮回，就像他们的先辈，那些生产者，生活于一个传送带和下一个传送带之间。</strong></p></blockquote><h3 id="制造消费者"><a href="#制造消费者" class="headerlink" title="制造消费者"></a>制造消费者</h3><blockquote><p><strong>消费者社会中，与其说经济增长取决于“国家生产力”（即健康充裕的劳动力、充实的财政收入、勇往直前具有企业家精神的资本所有者和经营者），不如说取决于消费者的热情和活力。</strong></p></blockquote><blockquote><p><strong>今天流行的口号是“灵活”，这个越来越时髦的概念代表的是一场几乎没有任何规则的雇佣和解雇游戏，而且在游戏进行时，单方面就可以随时更改规则。</strong></p></blockquote><h3 id="消费者社会的穷人"><a href="#消费者社会的穷人" class="headerlink" title="消费者社会的穷人"></a>消费者社会的穷人</h3><blockquote><p><strong>杰里米·希布鲁克（Jeremy Seabrook）曾提醒过他的读者，当今社会依赖于“制造人为的、主观的不满足感”，因为本质上“人们满足于自己拥有的东西才是最可怕的威胁”。于是，人们真正拥有的东西被淡化，被贬低，被较富裕的人锋芒毕露的奢侈消费所掩盖：“富人成为被普遍崇拜的对象”。</strong></p></blockquote><h3 id="福利国家的衰败"><a href="#福利国家的衰败" class="headerlink" title="福利国家的衰败"></a>福利国家的衰败</h3><blockquote><p><strong>这个星球上，部分地区已经充满老于世故的消费者，但也还存在广袤的处女地，那里有不需要激发消费欲望就能获得的顺从劳动力，那里的人为了维持生计而卑微地工作。但是，在本地市场，你需要源源不断地创造新的欲望，并保持雇员工资增长，以确保这些欲望能够变成普遍切实的需求。</strong></p></blockquote><h3 id="招致毁灭的成功"><a href="#招致毁灭的成功" class="headerlink" title="招致毁灭的成功"></a>招致毁灭的成功</h3><blockquote><p><strong>获得社会帮助并脱离劣势地位的人，不仅失去了回馈的动力，而且变成了最强烈的诋毁者。从某种意义上说，“平权法案”培养的是自己的掘墓人</strong></p></blockquote><h3 id="第四章-工作伦理和新穷人"><a href="#第四章-工作伦理和新穷人" class="headerlink" title="第四章 工作伦理和新穷人"></a>第四章 工作伦理和新穷人</h3><blockquote><p><strong>某国整体失业率快速上升时，你看不到证券市场有任何焦虑的迹象，更谈不上恐慌，它们反倒可能表现火爆。</strong></p></blockquote><h3 id="定居者与游牧者"><a href="#定居者与游牧者" class="headerlink" title="定居者与游牧者"></a>定居者与游牧者</h3><blockquote><p>显然，最后一类人在出售劳动力时面临的困难最小，他们的潜在买家并不会特别挑剔。“常规劳动者”从事的工作既不需要难以掌握的稀有技能，也不需要面对面与顾客沟通所需的特殊机敏，因此他们可以比较容易地在所有有偿的低技能工作中切换。但出于同样的原因，他们也很容易被弃用，工作不稳定。他们随时可能被替换，这不会给雇主带来什么损失。他们可能在生意不景气时被就地解雇，因为业务回暖时有很多这样的人随时可以上岗。因此，他们没有找麻烦的气力，没有讨价还价的资本，即使有能力也愿意争取更好的就业条件，他们仍没有胜算的机会。</p></blockquote><blockquote><p>这类人很少有抗争的意愿，特别是团结起来一致行动的意愿。所有的情况似乎都对他们不利。他们的工作是脆弱的，肯定不会持续很久，随时可能消失不见；今天的伙伴明天可能就各奔东西，去向遥远的地方……投身于工人的团结和集体抗争，需要付出长期的、充满风险的努力，注定收益不大，成本却高得难以计量。如果这样的状况持续很久，看不到任何改观，那些受雇者的世界观和心态也会相应变化。“</p></blockquote><blockquote><p><strong>如果你喜欢为之工作的公司，并期望未来一直和它携手前行，那么最多在下一轮的“外包”或“裁员”时，你就会受到伤害。总而言之，这种被称为“劳动力市场灵活性”的重要转变，给长期协作的可能性蒙上了一层阴影，更不用说对“共同事业”全心全意、无条件的承诺和忠诚。</strong></p></blockquote><blockquote><p><strong>求职者仍像以前一样“受缚于土地”，不能自由迁徙，只能依赖本地的工作谋生，资本现在则可以无拘无束地移动，不用在意距离和国界。</strong></p></blockquote><blockquote><p><strong>资本完全没必要承受本地劳动力日益膨胀的自信（以及日益增长的要求）所带来的不便（和高昂的成本）。长期雇用导致这些定居劳动力越来越勇敢，并且有足够（过多）的时间变得更团结、更强大、更坚固。然而，当游牧资本想要转移到其他地方时，定居的劳动力根本就没有机会阻碍它转移，更不用说将其永久绑定，因此他们没有机会争取自己的权利，实现自己的抱负。</strong></p></blockquote><blockquote><p><strong>无论从哪个方面看，脆弱性和不稳定性像幽灵一样萦绕在各种工作周围。不同工作的区别仅在于是否能有效防范雇员的反抗：以消极怠工、逃避责任来对抗雇佣关系的脆弱性。没有哪种工作能免除失业，也没有人可以免除近来出现的“长期失业”——这个词现在已经被更准确地描述为“过剩”。如果说“失业”，甚至是长期失业，意味着工作生活的一个阶段，那么“过剩”则更贴近如今失业的本质。它暗示了一场不可逆转的灾难最终到来。它是通向废品站的一张单程票……</strong></p></blockquote><h3 id="从“失业”到“过剩”"><a href="#从“失业”到“过剩”" class="headerlink" title="从“失业”到“过剩”"></a>从“失业”到“过剩”</h3><blockquote><p><strong>随着经济周期的每一次轮回，“失业”这个概念的内涵发生了变化，“失业”之下的希望也越来越不切实际。这种体验无情地累加，推动了真正的“范式转变”产生——“过剩”这个新词，替代了“失业”。</strong></p></blockquote><blockquote><p><strong>如今的精简型、小型化、资本和知识密集型产业，则把劳动力视为生产力提升的制约要素。这是对曾被奉为经典的斯密_里卡多_马克思劳动价值论的直接挑战。</strong></p></blockquote><blockquote><p><strong>近来重新鼓吹工作伦理的目的，是为了“将值得帮助的穷人和不值得帮助的穷人分开，把责难倾倒给后者，以合理化社会对他们的冷漠”，因此“说明贫穷是个人缺陷的必然后果，进而促成对穷人和被剥夺者的漠不关心”￼。换言之，工作伦理虽然不再是减少贫困的手段，却能帮助调和社会众生和永恒存在的穷人之间的关系，有助于整个社会的安宁平和。</strong></p></blockquote><h3 id="用于底层阶级的工作伦理"><a href="#用于底层阶级的工作伦理" class="headerlink" title="用于底层阶级的工作伦理"></a>用于底层阶级的工作伦理</h3><blockquote><p><strong>正如堕入底层是一个选择问题，脱离贫困也是个选择问题——如果作出的是正确的选择。穷人沦为底层阶级是选择的结果，这个观点暗示的是，他们完全可以作出另一种选择，使自己从困境中解脱出来。</strong></p></blockquote><blockquote><p><strong>在社会日益富裕的过程中，如果贫困仍继续存在并持续扩大，那么工作伦理一定是无效的。但是，如果我们相信，工作伦理之所以无效只是因为其戒律没有得到很好的倾听和遵从，那么，就只能用那些掉队者的道德缺陷或犯罪倾向予以解释</strong></p></blockquote><h3 id="贫穷即犯罪"><a href="#贫穷即犯罪" class="headerlink" title="贫穷即犯罪"></a>贫穷即犯罪</h3><blockquote><p><strong>底层阶级冒犯了大多数人珍视的价值观，却又紧紧抓着它们，渴望像其他自力更生的人一样，获得消费生活的乐趣。换句话说，美国人对底层阶级真正的不满意在于，这些人的梦想，他们渴望的生活模式居然和自己如此相似。</strong></p></blockquote><blockquote><p>近年来的犯罪率上升，不是功能失调或疏忽大意的结果，而是消费者社会自身的产物，这在逻辑上（而非在法律上）是合理的。更重要的是，这也是消费者社会不可避免的产物。消费者需求越大（即市场诱导越有效），消费者社会就越安全，越繁荣。然而，与此同时，那些有欲望并能满足自己欲望的人（已经被诱惑并能按照诱惑的期望行动的人）与那些已经被诱惑却无法按照期望采取行动的人，两者之间的差距越拉越大。</p></blockquote><blockquote><p>市场诱惑，既是伟大的均衡器，也是伟大的分化器。为了取得效果，消费的诱惑、消费更多的理念必须传达到每一个角落，不加区别地传达给每一个愿意聆听的人。然而，总是存在不能够按照诱惑的期望付诸行动的人，他们每天面对着那些获得满足的人展示的令人眼花缭乱的景象。这些人被告知，奢侈的消费是成功的标志，是赢得公众掌声和名誉的捷径。他们还了解到，拥有和消费某些商品，践行这种生活方式，是幸福的必要条件，甚至是实现人类尊严的必要条件。</p></blockquote><blockquote><p><strong>如果消费是衡量成功人生的标准，衡量幸福的标准，甚至是衡量尊严的标准，那么人类欲望的潘多拉之盒已经打开，再多的购买和刺激的感觉，都不能唤回过去“达到标准”带来的满足感：现在根本就没有标准可言。</strong></p></blockquote><h3 id="逐出道德义务的世界"><a href="#逐出道德义务的世界" class="headerlink" title="逐出道德义务的世界"></a>逐出道德义务的世界</h3><blockquote><p><strong>在“电视中”的人们死于饥荒和疾病的那片遥远土地上，也诞生了“亚洲小龙”——虽然所有“小龙”加起来也不及亚洲人口的百分之一。它们传达了想要传达的：饥荒和无家可归是他们自己的选择。其他选项是存在的，然而他们缺乏勤奋和决心。字里行间的意思是，穷人应该对自己的命运负责。他们可以像“亚洲小龙”一样，选择勤奋节俭的生活。</strong></p></blockquote><h3 id="殖民主义，还是剩余劳动力输出"><a href="#殖民主义，还是剩余劳动力输出" class="headerlink" title="殖民主义，还是剩余劳动力输出"></a>殖民主义，还是剩余劳动力输出</h3><blockquote><p><strong>从一开始，现代就是大迁徙的时代。至今为止，不计其数的人远渡重洋，离开无法生存的故土，去往满载憧憬的异国他乡。随着时间的推移，现代化的热门区域不断变化，热门的线路也不断变化，但总体来说，移民都是从世界上“较发达”（现代化程度较高）的地区向“不发达”（在现代化冲击下还未舍弃其传统的社会经济平衡）的地区流动。</strong></p></blockquote><h3 id="工作和贫穷问题的全球化新维度"><a href="#工作和贫穷问题的全球化新维度" class="headerlink" title="工作和贫穷问题的全球化新维度"></a>工作和贫穷问题的全球化新维度</h3><blockquote><p><strong>远方的人遭受苦难直接或间接的源头，或许正是我们此时此地的所作所为，但由于距离遥远，它们并不会引起道德上的共鸣，也不会像身边所见的苦难那样能够引发强烈的行动意愿。</strong></p></blockquote><h3 id="社会问题转为法律和秩序问题"><a href="#社会问题转为法律和秩序问题" class="headerlink" title="社会问题转为法律和秩序问题"></a>社会问题转为法律和秩序问题</h3><blockquote><p><strong>“无用之人”大规模聚集并迅速膨胀，看上去会变成持续的、永久的存在。这要求采取更严格的隔离政策和极端的安全措施，以免危及“社会的健康”以及社会系统的“正常运转”。</strong></p></blockquote><blockquote><p><strong>可以说，监狱是把穷人和失业者（更准确地说，无法就业的人）从“社会问题”范畴转移到法律秩序范畴的过程中采用的手段，是消除他们对于整个社会潜在的破坏性影响的投资。</strong></p></blockquote><h3 id="从社会国家到“安全国家”"><a href="#从社会国家到“安全国家”" class="headerlink" title="从社会国家到“安全国家”"></a>从社会国家到“安全国家”</h3><blockquote><p><strong>市场竞争造成的就业环境不稳定，是且将继续是人们对于未来不确定性、对于社会地位和自尊的不安全感的主要根源。</strong></p></blockquote><h2 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h2><h3 id="第六章-新穷人的前景"><a href="#第六章-新穷人的前景" class="headerlink" title="第六章 新穷人的前景"></a>第六章 新穷人的前景</h3><blockquote><p><strong>渴望把人类世界变成一个无机的世界，在那里一切都完美运行，按部就班，服从于一个超越个体的系统。然而，向往秩序就是向往死亡，因为生命本身就是不断破坏秩序的过程。或者换句话说：对秩序的渴望是一种堂皇的托辞，是强烈厌世的借口。</strong></p></blockquote><h3 id="失去位置的穷人"><a href="#失去位置的穷人" class="headerlink" title="失去位置的穷人"></a>失去位置的穷人</h3><blockquote><p><strong>学识渊博的经济学家忙不迭地立即证明，当工资保持在低水平的时候，“穷人会做更多的工作，实际上生活得更好”，而他们领取高工资时，他们就迷失于无所事事和聚众闹事。</strong></p></blockquote><blockquote><p><strong>想符合社会规范，成为一个合格的社会成员，就需要对消费市场的诱惑作出及时有效的反应，需要为“清空供给”作出贡献，需要在经济环境出现问题时，积极参与“消费者主导的复苏”。穷人没有体面的收入，没有信用卡和美好前景，他们达不到要求。今天穷人打破的社会规范——使他们“不正常”的规范，是消费能力规范而非就业规范。今天的穷人是“不消费的人”，而非“失业者”。他们首先被定义为有缺陷的消费者，因为他们没有履行最重要的社会责任——积极有效地购买市场提供的商品和服务。消费者社会的资产负债表中，穷人明显是负债，无论如何也不能把他们记入现在或未来的资产。</strong></p></blockquote><h3 id="没有位置，没有道德义务"><a href="#没有位置，没有道德义务" class="headerlink" title="没有位置，没有道德义务"></a>没有位置，没有道德义务</h3><blockquote><p><strong>如果穷人试图捍卫福利体系的残存，他们很快就会发现自己没有谈判的筹码，无法传达自己的声音，更不可能给对手造成威胁。他们尤其没有任何能力来打动社会上的普通公民，大众受到了政客的蛊惑，他们被劝说不要因为内心的冲动投票，而要根据自己的利益投票。</strong></p></blockquote><h3 id="工作伦理，还是生活道德"><a href="#工作伦理，还是生活道德" class="headerlink" title="工作伦理，还是生活道德"></a>工作伦理，还是生活道德</h3><blockquote><p>收入权利与收入能力脱钩的想法其实并不保守。根据我们的推论，实现它恰恰需要一个非常大的转变。我们将不得不放弃目前生活模式中一些神圣不可侵犯的假设（由于缺少反思，它们显得更加神圣）。例如，效率是一件好事，无论它目的何在，也无论它是否会带来痛苦的副作用。再例如，凡是“经济增长”的东西，即统计意义上“今天比昨天多，明天比今天多”的东西，就是好的，而无视其增长过程中对人类生存环境和自然（全人类共享的生存环境）造成的损害。</p></blockquote><blockquote><p>对那些因为需要作出巨大的转变而反对的人，我们只能再次引用科尼利厄斯的话来回答。当一个采访者问他：“那么，你想要什么？改变人类吗？”，卡斯托利亚蒂斯回答说：“不，没有那么夸张：我希望人类改变，正像他们已经改变过两三次那样。”[8]<br>至少现在还有希望，人类能够再次完成同样的壮举。毕竟，正如帕特里克·库里（Patrick Curry）所言，“群体自愿的返璞归真，正成为群体贫困的唯一有意义的替代。</p></blockquote><p>并不认同这样的观点。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;继上个月分享了一些读书摘录之后这个月也没闲着，一共读了五本书。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《长安的荔枝》&lt;/li&gt;
&lt;li&gt;《失落的卫星》&lt;/li&gt;
&lt;li&gt;《午夜降临前抵达》&lt;/li&gt;
&lt;li&gt;《克拉拉与太阳》&lt;/li&gt;
&lt;li&gt;《工作、消费主义和新穷人》&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="阅读" scheme="https://stephefang.me/categories/%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="读书" scheme="https://stephefang.me/tags/%E8%AF%BB%E4%B9%A6/"/>
    
    <category term="长安的荔枝" scheme="https://stephefang.me/tags/%E9%95%BF%E5%AE%89%E7%9A%84%E8%8D%94%E6%9E%9D/"/>
    
    <category term="马伯庸" scheme="https://stephefang.me/tags/%E9%A9%AC%E4%BC%AF%E5%BA%B8/"/>
    
    <category term="失落的卫星" scheme="https://stephefang.me/tags/%E5%A4%B1%E8%90%BD%E7%9A%84%E5%8D%AB%E6%98%9F/"/>
    
    <category term="午夜降临前抵达" scheme="https://stephefang.me/tags/%E5%8D%88%E5%A4%9C%E9%99%8D%E4%B8%B4%E5%89%8D%E6%8A%B5%E8%BE%BE/"/>
    
    <category term="刘子超" scheme="https://stephefang.me/tags/%E5%88%98%E5%AD%90%E8%B6%85/"/>
    
    <category term="工作、消费主义和新穷人" scheme="https://stephefang.me/tags/%E5%B7%A5%E4%BD%9C%E3%80%81%E6%B6%88%E8%B4%B9%E4%B8%BB%E4%B9%89%E5%92%8C%E6%96%B0%E7%A9%B7%E4%BA%BA/"/>
    
    <category term="克拉拉与太阳" scheme="https://stephefang.me/tags/%E5%85%8B%E6%8B%89%E6%8B%89%E4%B8%8E%E5%A4%AA%E9%98%B3/"/>
    
  </entry>
  
  <entry>
    <title>2022年五月读书摘录</title>
    <link href="https://stephefang.me/2022/06/15/202205ReadingList/"/>
    <id>https://stephefang.me/2022/06/15/202205ReadingList/</id>
    <published>2022-06-15T05:10:12.000Z</published>
    <updated>2022-07-24T16:47:51.194Z</updated>
    
    <content type="html"><![CDATA[<p>最近看社会新闻很是头疼，也想着找一些地方发泄一些情绪，结果发现一旦拿起一本书看烦恼就能够暂时解除，便结束了这个念头。<br>今年囫囵吞枣读了不少书，早早达成了一个月读一本书的目标。但是很多书读完一遍过一段时间很难再去梳理，可能等同于没读，于是决定将书里的内容摘出来在博客上分享，也方便自己随时回忆。<br>有些书自己什么时候读完的也不记得了，之后每个月会对自己读的书进行一次整理，这起主要是四本书，《乔纳森传》、《平成十二年》、《UNIX传奇》以及《重走》。</p><span id="more"></span><h1 id="《UNIX传奇》"><a href="#《UNIX传奇》" class="headerlink" title="《UNIX传奇》"></a>《UNIX传奇》</h1><p><a href="https://book.douban.com/subject/35292726/">UNIX传奇</a></p><p>这本书极大激发了我对于计算机研究的兴趣，从作者的讲述中了解到 UNIX 和实验室的发展历程以及这群人和这群人的创造的影响。</p><p>原来写代码是有使命感的，让我在专注工作的同时能够感受到写代码给我带来的成就感。</p><h3 id="1-1-贝尔实验室的物理科学研究"><a href="#1-1-贝尔实验室的物理科学研究" class="headerlink" title="1.1 贝尔实验室的物理科学研究"></a>1.1 贝尔实验室的物理科学研究</h3><blockquote><p>现今世界已全然不同，多数人只做未来几个月的规划，功夫都花在了预测下一季度财务状况上。</p></blockquote><p>时常能够在网络上看到对于现今人类不思进取的责难，的确，战争时期的人类在科技领域取得了耀眼的成就，近几十年的发展相较于战争时期再或者是冷战时期可以说发展缓慢。现代社会的法则更聚焦于商业上的成功。</p><h3 id="1-5-137→127→1127→11276"><a href="#1-5-137→127→1127→11276" class="headerlink" title="1.5 137→127→1127→11276"></a>1.5 137→127→1127→11276</h3><blockquote><p>相对于“我的人比你的人强”，我们更加会说“别忘记你的人还做了一件好事”。</p></blockquote><p>在工作过程中需要肯定其他团队的成员的价值，懂得谦虚。</p><h3 id="3-2-Unix房间"><a href="#3-2-Unix房间" class="headerlink" title="3.2 Unix房间"></a>3.2 Unix房间</h3><blockquote><p>独立办公室虽然比开放式区域成本更高，但也给了员工安静平和的空间，让员工可以不受旁边没完没了的噪声影响，专注于工作，还能够保存图书、文件，关上门就能沉思或私聊。</p></blockquote><h3 id="3-5-丹尼斯·里奇小传"><a href="#3-5-丹尼斯·里奇小传" class="headerlink" title="3.5 丹尼斯·里奇小传"></a>3.5 丹尼斯·里奇小传</h3><blockquote><p>到了1973年，Unix已经从原来的汇编语言改为C语言编写，系统的维护和修改变得更加容易。</p></blockquote><h3 id="4-2-系统调用"><a href="#4-2-系统调用" class="headerlink" title="4.2 系统调用"></a>4.2 系统调用</h3><blockquote><p><strong>文件只是字节。用户决定这些字节代表什么，而操作系统则只负责存储和取出，不向用户暴露设备属性。</strong></p></blockquote><h3 id="4-5-grep命令"><a href="#4-5-grep命令" class="headerlink" title="4.5 grep命令"></a>4.5 grep命令</h3><blockquote><p><strong>grep这个名字来自ed文本编辑器中的命令g/re/p，它列出所有符合正则表达式模式re的行。</strong></p></blockquote><p>在学习 Linux 的时候接触了这个命令却一直不知道它的历史。</p><h3 id="4-7-C语言"><a href="#4-7-C语言" class="headerlink" title="4.7 C语言"></a>4.7 C语言</h3><blockquote><p><strong>C语言既古怪又有缺点，却获得了巨大的成功。虽然历史上的意外事件肯定有帮助，但C语言显然满足了人们对一种系统实现语言的需求，这种语言需要足够高效，足以取代汇编语言，但又足够抽象和流畅，足以描述各种环境下的算法和交互。</strong></p></blockquote><h3 id="5-2-Yacc，Lex，Make"><a href="#5-2-Yacc，Lex，Make" class="headerlink" title="5.2 Yacc，Lex，Make"></a>5.2 Yacc，Lex，Make</h3><blockquote><p><strong>Lint这个名字来自从衣服上捡拾绒毛（lint）的情景。虽然其功能已多被纳入C语言编译器，但其概念体现到了其他语言的类似工具中。</strong></p></blockquote><h3 id="5-3-文档编制"><a href="#5-3-文档编制" class="headerlink" title="5.3 文档编制"></a>5.3 文档编制</h3><blockquote><p><strong>也许，今天不会有很多人记得，当机器容量以千字节而不是千兆字节为单位时，时间和空间的利用效率乃是重中之重。每个字节都得斟酌使用，所以在某种程度上，每条指令也得再三推敲，因此，一种能在这两方面都节约的语言不仅优秀，而且是实际需要。</strong></p></blockquote><p>在日常写代码的过程中只有在 Code Review 的过程中会关注执行效率，会不曾想到在计算机存储和性能吃紧的时候每一次优化都非常有意义。</p><h3 id="5-6-其他贡献"><a href="#5-6-其他贡献" class="headerlink" title="5.6 其他贡献"></a>5.6 其他贡献</h3><blockquote><p><strong>Unix和C语言被广泛采用，导致20世纪80年代和90年代的CPU设计围绕着它们运转，没人成功制造出为其他语言优化的CPU。</strong></p></blockquote><h3 id="6-1-程序员工作台"><a href="#6-1-程序员工作台" class="headerlink" title="6.1 程序员工作台"></a>6.1 程序员工作台</h3><blockquote><p><strong>SCCS的基本思想是，程序员签出代码库中的一部分，锁定这部分代码，其他程序员在锁持有者解锁之前不能修改它，这样就避免了多位程序员同时对代码做出不一致的修改。当然还是会出问题，如粗心大意或程序崩溃都可能会导致代码死锁。另外，如果锁定范围太大，就会拖慢同时修改的速度。</strong></p></blockquote><h3 id="6-2-高校授权"><a href="#6-2-高校授权" class="headerlink" title="6.2 高校授权"></a>6.2 高校授权</h3><blockquote><p><strong>加利福尼亚大学伯克利分校是最活跃的许可获得者之一，该校的一些研究生对系统做出了重大贡献，最终演化出伯克利软件发行版（Berkeley Software Distribution，BSD）。BSD是由最初的科研版Unix演变而来的两个主要分支之一。</strong></p></blockquote><h3 id="8-1-伯克利软件发行版"><a href="#8-1-伯克利软件发行版" class="headerlink" title="8.1 伯克利软件发行版"></a>8.1 伯克利软件发行版</h3><blockquote><p><strong>BSD的后裔如今仍然活跃，FreeBSD、OpenBSD和NetBSD等变种都在继续发展。苹果公司的Darwin（macOS的核心）所使用的NextSTEP也是BSD的衍生版本。</strong></p></blockquote><h3 id="8-3-Minix和Linux"><a href="#8-3-Minix和Linux" class="headerlink" title="8.3 Minix和Linux"></a>8.3 Minix和Linux</h3><blockquote><p><strong>我相信API不该有版权。如果API有版权，我们就不会有与Unix相似的各种操作系统，包括Linux在内，因为它们全是基于Unix系统调用接口的独立实现。我们可能也不会有Cygwin这样的软件包，它是Unix实用程序的Windows实现，为Windows用户提供了类似Unix的命令行界面。事实上，如果接口的独立实现可以被宣告所有权的公司所限制，我们就不太可能有很多独立实现。</strong></p></blockquote><h3 id="8-4-Plan-9"><a href="#8-4-Plan-9" class="headerlink" title="8.4 Plan 9"></a>8.4 Plan 9</h3><blockquote><p>*Plan 9确实为世界贡献了一件无比重要的东西：Unicode的UTF-8编码。</p></blockquote><h3 id="8-5-流散"><a href="#8-5-流散" class="headerlink" title="8.5 流散"></a>8.5 流散</h3><blockquote><p><strong>朗讯与法国电信公司阿尔卡特（Alcatel）合并成立阿尔卡特-朗讯（Alcatel-Lucent），而阿尔卡特-朗讯又在2016年被诺基亚收购。</strong></p></blockquote><h3 id="9-1-技术方面"><a href="#9-1-技术方面" class="headerlink" title="9.1 技术方面"></a>9.1 技术方面</h3><blockquote><p><strong>人们有时会用代码行数来评价软件的生产力。在Unix的世界里，生产力却往往以删除了多少特殊情况或代码行数来衡量。</strong></p></blockquote><blockquote><p><strong>Unix的高明之处在于选择了足够普适的抽象概念，既能发挥巨大的作用，又不至于在性能上付出太大代价。</strong></p></blockquote><blockquote><p><strong>Unix哲学是关于如何处理计算任务的编程风格。这是道格·麦基尔罗伊在《贝尔实验室技术杂志》（Bell Labs Technical Journal）Unix特刊的前言中总结出来的。<br>（i）让每个程序做好一件事。要做一件新的工作，就构建新程序，而不是通过增加新“特性”使旧程序复杂化。<br>（ii）预期每个程序的输出都能成为另一个未知程序的输入。不要用无关的信息来干扰输出。避免使用严格的分栏对齐或二进制输入格式。不要执着于交互式输入。<br>（iii）设计和构建软件，甚至是操作系统，要尽早试用，最好是在几周内就用起来。大刀阔斧砍掉笨拙的部件，重建它们。<br>（iv）宁可绕道构建用后即弃的工具来减轻编程负担，也别依赖经验欠奉的帮助。</strong></p></blockquote><h3 id="9-2-组织"><a href="#9-2-组织" class="headerlink" title="9.2 组织"></a>9.2 组织</h3><blockquote><p><strong>研究人员可以长期甚至年复一年地探索他们认为重要的想法，而不必每隔几个月就向人证明自己在努力。</strong></p></blockquote><p>没有背负 KPI 的压力，自己确定自己的研究目标，对于自主的人来说无疑是一件幸福的事。</p><blockquote><p><strong>再优秀的视频会议系统也无法取代就在隔壁的合作者和随手可得的专家。</strong></p></blockquote><p>在 WFH 逐渐流行的今天我也仍然相信这一点。之前在诺基亚公司实习的时候 leader 提到有员工会为了沟通一个业务专程从国外飞来，相信面对面的价值也是这家公司的价值观之一。</p><blockquote><p><strong>积极的研究者能和师生们讨论技术话题，总能学到有用的东西，为公司树立正面形象。</strong></p></blockquote><blockquote><p><strong>部门主管应当知晓手下工作的细节，不是为了争论它有多了不起，而是为了能够解释给其他人听，帮助建立联系。</strong></p></blockquote><blockquote><p><strong>要建立和维持一个组织，使其成员相互喜欢和尊重，并享受彼此的陪伴，这需要付出努力。不能靠管理部门的命令，也不能靠外部顾问来创造。它是在一起工作的乐趣中有机地成长起来的，也是在一起玩耍的乐趣和互相欣赏中成长起来的。</strong></p></blockquote><p>带一个团队不是团建就足够的，同一家公司同一个部门不同团队的氛围可能都存在较大不同。</p><p>没有人离职的团队不一定是最好的团队，但离职率最高的团队一定是有其原因的，领导肯定负有责任。</p><h3 id="9-3-认可"><a href="#9-3-认可" class="headerlink" title="9.3 认可"></a>9.3 认可</h3><blockquote><p><strong>1993年电影《侏罗纪公园》（Jurassic Park）中有个著名场景，13岁的莱克斯·墨菲[Lex Murphy，阿丽亚娜·理查兹（Ariana Richards）饰]说：“这是个Unix系统! 我会用。”她浏览文件系统，找到大门控制装置，锁上了门，从而使大家免于被迅猛龙吃掉（图9-1）。这一幕可以说是极客们的高峰时刻。</strong></p></blockquote><p>毫不夸张地说这部电影在上映几十年后重映我第一次看印象最深的就是这个镜头。</p><h3 id="9-4-历史能重演吗"><a href="#9-4-历史能重演吗" class="headerlink" title="9.4 历史能重演吗"></a>9.4 历史能重演吗</h3><blockquote><p><strong>似乎可以预见，将会继续有新的语言出现，让编程变得更简单、更安全。同样可以预测，不会只有一种语言，然而每种语言都有得有失，无法满足所有目的。</strong></p></blockquote><h1 id="《乔纳森传》"><a href="#《乔纳森传》" class="headerlink" title="《乔纳森传》"></a>《乔纳森传》</h1><p><a href="https://book.douban.com/subject/25786645/">乔纳森传</a></p><h2 id="第二章-英国的设计教育"><a href="#第二章-英国的设计教育" class="headerlink" title="第二章 英国的设计教育"></a>第二章 英国的设计教育</h2><blockquote><p><strong>20世纪20年代德国的包豪斯建筑学派理念，在20世纪50年代被英国设计界采纳并使用，”她说，“例如，在包豪斯，有所谓的基础学年，而英国的设计专业也有。基础学年就是指，学生从零开始学习设计，与以往的知识没有关系，完全从头开始。”</strong></p></blockquote><p>之前收听 <a href="http://anyway.fm/">Anyway.FM</a> 有一期节目讲述了包豪斯的意义，节目中推荐了<a href="https://www.bilibili.com/s/video/BV1Ka4y1a7a2">梁文道老师的包豪斯纪录片</a>，很值得一看。</p><blockquote><p><strong>乔纳森以一种不同寻常的方式来到了纽卡斯尔综合性工程技术学院：他错过了开学的第一天，因为当时他要去领一个设计奖，这多多少少让一起入学的同学感到震惊。“新生入学的前两天，他都不在——他带着自己高中时的作品去领取一个设计奖。”汤奇回忆说。</strong></p></blockquote><blockquote><p><strong>他从不自大，这在学设计的学生中是难得的优点。大多数学设计的学生尽管没多少才华，但是却很自负，而乔纳森完全不一样。做设计的时候，他是真的热爱自己的工作，对于自己的任务，他向来都是全身心投入。”</strong></p></blockquote><h2 id="第三章-伦敦的生活"><a href="#第三章-伦敦的生活" class="headerlink" title="第三章 伦敦的生活"></a>第三章 伦敦的生活</h2><blockquote><p><strong>他对人性化技术非常感兴趣。他设计时总是会先追问一样东西应该是什么样的。他拥有去除或无视某些东西的能力，他不关心一个产品的现状是怎样的，或者一个工程师说它必须是什么样的。他可以从基础开始对任何一样产品或用户界面进行设计。</strong></p></blockquote><p>我认为设计一个 App 和做一个产品也应该是如此，如果只是拿来主义，最终诞生的必然是不如主流产品的产品。</p><blockquote><p><strong>这第一台PowerBook有着嵌入式的键盘、中央定点设备以及前倾的手腕放置区（掌托），足以为未来20年笔记本电脑的设立下基本标准，这一事实至今仍然令大家震惊不已。“我们的PowerBook十分成功，”布伦纳说，“这太让我惊讶了。那台机器和设计本身还有那么多的不足之处。我本以为那将成为一次巨大的失败。但今天回过头来看，基本上所有的笔记本电脑都是那样设计的：嵌入式键盘、掌托以及中央定点设备。”</strong></p></blockquote><blockquote><p><strong>大多数情况下，当他接受设计委托的时候，许多关键性决策已经由内部做好了。乔纳森逐渐相信，要想成就一件史无前例的新事物，就需要从组织内部进行彻底的变化。</strong></p></blockquote><h2 id="第四章-初到苹果"><a href="#第四章-初到苹果" class="headerlink" title="第四章 初到苹果"></a>第四章 初到苹果</h2><blockquote><p><strong>布伦纳的这些选择是正确的，比如：制作室和工程团队的分离，松散的管理结构，工作流程中的合作以及向咨询模式的转变。苹果公司的设计团队之所以能做到如此高效，其中一个原因就是保留了布伦纳原始的结构。</strong></p></blockquote><blockquote><p><strong>1996年，布伦纳成为五角设计旧金山办公室的一员。他和亚马逊合作设计了最早的电子阅读器Kindle，也参与了耐克和惠普很多产品的设计。2007年，布伦纳参与设计了安德烈·罗梅勒（Dr. Dre）品牌的魔音耳机，</strong></p></blockquote><blockquote><p><strong>诺曼说，在某种程度上，这是“一个结构良好的程序”，但是他也指出了它的缺点。它不仅很慢、麻烦、繁琐，而且不可避免会导致“折衷”。当一个小组想这么做，而另一个小组想那样做，特色逐渐就会被取代，导致产品缺乏凝聚力。</strong></p></blockquote><blockquote><p><strong>布伦纳说：“商人的想法是创造出每个人都喜欢的东西，这会导致产品走中庸路线。于是就变成了‘能不能达到一致同意’的问题，这就是为什么你很少看到天才的火花的原因。”</strong></p></blockquote><p>可能用来解释现今时代的苹果很合适。但是我个人很喜欢现在苹果推出的产品，包括 MacBook Pro 上SD卡槽和 MagSafe 接口的回归，不再是设计师的一意孤行而是权衡了用户诉求的产品。</p><h2 id="第五章-乔布斯重返苹果"><a href="#第五章-乔布斯重返苹果" class="headerlink" title="第五章 乔布斯重返苹果"></a>第五章 乔布斯重返苹果</h2><blockquote><p><strong>停产一个比较受欢迎的产品，大多数高管都会思虑再三。牛顿的支持者拿着标语牌和扬声器，涌进苹果公司总部的停车场（其中一条标语写道：我在乎牛顿）。由于像Palm Pilot这样的掌上电脑的成功，掌上电脑的种类不断增加，但是对乔布斯来说，牛顿只是一个分散注意力的东西。他想让苹果公司将精力集中于电脑，这才是它的核心产品。</strong></p></blockquote><blockquote><p><strong>“每位设计师都有一个自己的计划表，或是自己的设计理念，（对于他们的活动）根本毫无任何控制可言，”设计师道格·萨茨格说，“一位设计师有一个关于便携笔记本应该如何设计的想法，另一位设计师又有一个关于打印机应该如何设计的想法。但是关于下一代苹果超级电脑应该是什么样子的，却根本没有一个协调统一的想法。这个设计团队并没有建立在协调合作的基础之上。每位设计师都各自为战，都有着自己强烈的设计意识。他们看起来就像是在为许多不同的公司进行设计一样。”</strong></p></blockquote><blockquote><p><strong>在iMac一体机没有软盘驱动器一事上，乔纳森站在苹果一边。他说：“关于新产品没有软盘驱动器这个问题，我不能代表苹果公司回答你。我只能给你我的回答，‘当人在前进的时候，总是需要把一些东西抛在身后。只要我还有一口气在，我就会继续争论下去，软盘驱动器实在是过时的技术了。我听过很多次这样的抱怨，但是如果前进的道路上没有摩擦，你的脚步就不会像自己希望的那样坚定。’”</strong></p></blockquote><blockquote><p><strong>乔纳森反驳说，把iMac设计成特别的外形并非是故意为之，它的与众不同是设计过程的必然结果。他说：“我认为很多人起初都把设计看作一种有力的区别手段，能将自己的产品与其他产品相区别，我实在讨厌那种观点。那只是以企业为本，而不是以消费者和人为本。我们的目标不只是要突出自己的产品，而是要创造出在未来会受到人们喜爱的产品，了解这一点非常重要。我们的目标实现之后，结果必然就会与众不同。”</strong></p></blockquote><h2 id="第六章-捷报频传"><a href="#第六章-捷报频传" class="headerlink" title="第六章 捷报频传"></a>第六章 捷报频传</h2><blockquote><p><strong>“一切都被记录下来，这是非常必要的。因为很多环节都是动态的。”萨利说道，“即使是我在苹果工作的时候，所有的工艺也都已经确定。这就解释了，为什么对于员工来说，苹果能成为一家很适合为之工作的公司。因为他们有指导工作的手册，在生产软件或是硬件的过程中，这些手册会提供帮助。</strong></p></blockquote><blockquote><p><strong>“仅仅把狂热的激情放在显而易见的事物上是远远不够的，你需要把注意力和热情放在人们容易忽略的细节上，这才是起决定性作用的。”乔纳森说道。</strong></p></blockquote><h2 id="第七章-铁幕背后的设计工作室"><a href="#第七章-铁幕背后的设计工作室" class="headerlink" title="第七章 铁幕背后的设计工作室"></a>第七章 铁幕背后的设计工作室</h2><blockquote><p><strong>在苹果公司，乔纳森的角色一直在演变，逐渐由一位设计师变成了管理层的一分子。他不仅负责团队的管理，也开始着手新成员的招募。同时，他也是设计团队与公司其他部门——尤其是管理层——的信息沟通渠道。他与史蒂夫·乔布斯一直关系密切，而现在，他和公司领导层也是如此——所有新产品开发的种类和研究方向都是他们共同决定的。没有他的指示，什么都没法动工，甚至连产品颜色和按键细节都得由他拍板决定。“一切工作都得经过乔纳森的审阅。”一位设计师说。</strong></p></blockquote><blockquote><p><strong>与苹果的其他部门相比，乔纳森对自己团队非常袒护。“他会独自承担整个团队的过错，”乔达姆·巴克斯说，“对于设计出现的问题，他会把责任揽在自己身上。如果有哪个环节没有达到标准，他会说那是他的过错。他从未抛下团队中的任何一员。”</strong></p></blockquote><h1 id="《平成十二年》"><a href="#《平成十二年》" class="headerlink" title="《平成十二年》"></a>《平成十二年》</h1><p><a href="https://book.douban.com/subject/30413118/">平成十二年</a></p><h2 id="第7章-党派间的较量"><a href="#第7章-党派间的较量" class="headerlink" title="第7章 党派间的较量"></a>第7章 党派间的较量</h2><blockquote><p>日本是一面镜子。当你用狭隘的眼光看这个世界时，你人生的道路也会变得狭隘。那些用与时俱进的眼光看世界的人，早已远远地把你甩在身后。</p></blockquote><blockquote><p>如今，中国人研究日本已经不能只看《菊与刀》了。同样，日本人解剖中国也不能只盯着《阿Q正传》。双方都在进步，都在为寻找新方向而努力。愿以邻为鉴，可知兴衰。</p></blockquote><h1 id="《重走》"><a href="#《重走》" class="headerlink" title="《重走》"></a>《重走》</h1><p><a href="https://book.douban.com/subject/35436901/">重走</a></p><h2 id="序二-一次神游"><a href="#序二-一次神游" class="headerlink" title="序二 一次神游"></a>序二 一次神游</h2><blockquote><p><strong>旅行最宝贵的价值在于更好地理解世界和自我。</strong></p></blockquote><blockquote><p><strong>当我们回想自己的一生，我们会意识到，旅行是一段徐徐展开的经历，它会在往后的岁月不断制造回响。它是你长期的投资，源源不断地给你发放红利。</strong></p></blockquote><h3 id="第四章-在南岳：我见证了中国吸收欧洲成就最后的伟大日子"><a href="#第四章-在南岳：我见证了中国吸收欧洲成就最后的伟大日子" class="headerlink" title="第四章 在南岳：我见证了中国吸收欧洲成就最后的伟大日子"></a>第四章 在南岳：我见证了中国吸收欧洲成就最后的伟大日子</h3><blockquote><p><strong>学生作文文法有误，或不改，或改而不评；行文不贯，改，偶或加评；文不达，而有思想，助其达；文字华丽，作老生之谈，指出其空泛；文达而无新解，不评，也不给好分；文达而有新解，小误不足病</strong></p></blockquote><blockquote><p><strong>宓一生极少与自然山水近接，故恒溺惑于人事，局囿于道德。即如Wordsworth（华兹华斯）之久居Lake Districts（英国湖区）……皆有助成其文章与修养工夫，亦皆宓所未得尝受”</strong></p></blockquote><blockquote><p><strong>正如人一肚皮的世故，却有一点童心，满脸上的雀斑，却有两汪秋水，一街的电灯和汽车，却有头上的亮月，我们喜欢热闹，但是难忘记清静”</strong></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近看社会新闻很是头疼，也想着找一些地方发泄一些情绪，结果发现一旦拿起一本书看烦恼就能够暂时解除，便结束了这个念头。&lt;br&gt;今年囫囵吞枣读了不少书，早早达成了一个月读一本书的目标。但是很多书读完一遍过一段时间很难再去梳理，可能等同于没读，于是决定将书里的内容摘出来在博客上分享，也方便自己随时回忆。&lt;br&gt;有些书自己什么时候读完的也不记得了，之后每个月会对自己读的书进行一次整理，这起主要是四本书，《乔纳森传》、《平成十二年》、《UNIX传奇》以及《重走》。&lt;/p&gt;</summary>
    
    
    
    <category term="阅读" scheme="https://stephefang.me/categories/%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="读书" scheme="https://stephefang.me/tags/%E8%AF%BB%E4%B9%A6/"/>
    
    <category term="乔纳森传" scheme="https://stephefang.me/tags/%E4%B9%94%E7%BA%B3%E6%A3%AE%E4%BC%A0/"/>
    
    <category term="平成十二年" scheme="https://stephefang.me/tags/%E5%B9%B3%E6%88%90%E5%8D%81%E4%BA%8C%E5%B9%B4/"/>
    
    <category term="UNIX传奇" scheme="https://stephefang.me/tags/UNIX%E4%BC%A0%E5%A5%87/"/>
    
    <category term="西南联大" scheme="https://stephefang.me/tags/%E8%A5%BF%E5%8D%97%E8%81%94%E5%A4%A7/"/>
    
    <category term="重走" scheme="https://stephefang.me/tags/%E9%87%8D%E8%B5%B0/"/>
    
  </entry>
  
  <entry>
    <title>云南旅行流水账</title>
    <link href="https://stephefang.me/2022/02/20/Yunnan_Travelling/"/>
    <id>https://stephefang.me/2022/02/20/Yunnan_Travelling/</id>
    <published>2022-02-20T08:00:00.000Z</published>
    <updated>2022-07-24T15:18:00.328Z</updated>
    
    <content type="html"><![CDATA[<p>去年国庆期间和朋友一起去了趟云南，起初安排的路线是 <strong>丽江 -&gt; 香格里拉 -&gt; 泸沽湖 -&gt; 昆明</strong>，在旅程中我们从时间和成本上考量，加上路人给予的一些建议，最终的路线是 <strong>丽江 -&gt; 大理 -&gt; 昆明</strong>。</p><p>由于工作较忙一直没有时间整理旅行中的见闻，最近在整理博客的时候静下心来完善之前写的日记，花了一下午将六天的经历整理成一片流水账，发表在个人博客上图一乐。</p><span id="more"></span><h1 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h1><p>为了让旅程显得没有那么劳累，特地选择了一个出发时间较晚的航班，同时为了节省费用，预定了需要转机的机票。这次旅行不能说是一时兴起，应该说是弥补了暑假没有毕业旅行的遗憾。<br>10点从萧山机场出发，到达丽江已是下午三点，一下飞机就能感受到离天空的距离更近了，作为一个从平原来的人并没有明显感觉空气稀薄了。</p><p><img src="http://image.stephenfang.me/yunnan/ff6659d985f90f0c02800c28ab472fda.jpeg" alt="ff6659d985f90f0c02800c28ab472fda"></p><p>这是我第一次来云南。在网上冲浪的时候时常能刷到云南的名山大川，也想着有一天能来看看，碰巧朋友对云南也抱着很深的念想。<br>对于云南我比较熟悉的是大理、丽江这些旅游城市的名字，时常能在热门旅游排行榜上看到他们的位置，由于同事强烈推荐了泸沽湖，在安排行程的时候我也将其考虑在内。<br>在飞机上就能够感受到云南的山是磅礴的，完全不同于江南的柔美风格。</p><p><img src="http://image.stephenfang.me/yunnan/ebf28efdfe345106d0894026adf5c5d7.jpeg" alt="ebf28efdfe345106d0894026adf5c5d7"></p><p>从三义机场坐大巴到丽江古城有一个小时的车程。在规划旅程的时候没有特别调查过丽江古城是否那么值得去住下，只是草草在Airbnb上检索和筛选了几家我和同伴都满意的民宿。拎着行李穿过大半个古城，总算到达了我们的民宿。</p><p><img src="http://image.stephenfang.me/yunnan/e22ae0331bbbd911244cac0de7e40b07.jpeg" alt="e22ae0331bbbd911244cac0de7e40b07"><br><img src="http://image.stephenfang.me/yunnan/095486935be166df4f6d224b8006b0fb.jpeg" alt="095486935be166df4f6d224b8006b0fb"></p><p>丽江古城的开发不能说好，它在保留着一些古城风貌的同时植入了太多的商业元素，路边的花卉就像是不要钱似的堆积着。让我感到欣慰的就是民宿整体让人满意，里面的配套设施十分扎实，还可以吃到房东准备的高山苹果。<br><img src="http://image.stephenfang.me/yunnan/16453260665672.jpg"></p><p>从民宿的院子里可以痴痴地望上天空好久，在杭州几乎没有看到蓝色饱和度这么高的天空。院子里还有一只慵懒的猫咪在晒太阳，爬上二楼可以望到远处的高山。</p><p><img src="http://image.stephenfang.me/yunnan/fe0b10442075f57e72b60acdf5ad2b98.jpeg" alt="fe0b10442075f57e72b60acdf5ad2b98"></p><p>差不多到了吃饭的点，初来乍到怕在古城里被宰，咨询了房东的意见后选择了古城北门附近的一家腊排骨火锅。我和同伴对于腊肉并没有那么钟意，吃前几块的时候感觉是很新奇的味道，再往后吃只能感到油腻，不过望着远山吃饭真的称得上是一种享受。</p><p><img src="http://image.stephenfang.me/yunnan/356e4921d91f036d68ce3affe6876d23.jpeg" alt="356e4921d91f036d68ce3affe6876d23"></p><p>大概是在古城里逛了很久才动了回民宿的念头，正遇上两位准备退房的广东大学生。在交谈中得知他们从大理一路玩过来，没有抢到上玉龙雪山的票，正准备赶往下一站。正巧我们也没有决定第二天去哪里玩，本想着去香格里拉——所谓的「小拉萨」朝圣，无奈经费和时间都不太宽裕，不如按部就班去一趟必去的玉龙雪山。<br>记忆中两个男生都挺健谈的，给予了我们不少旅行的建议，我认为在旅行中和他人的沟通是旅行中很重要的一部分，和不同行业、不同年龄、不同地方的人对话总会有新的启发。</p><pre><code>Date:    2021年10月4日 GMT+8 13:12:03Weather:    15 °C Mostly CloudyLocation:    大具乡, 丽江市, 云南省, 中国</code></pre><h1 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h1><p>云南的早晨就应该从一碗米线开始。<br>考虑到米线的价格不会太贵，这一次没有选择古城外的店铺，而是在古城内参考大众点评选择了一家米线店。这家店生意很旺，来就餐的排队到了院子之外，然而实话说这碗米线的味道只能说十分平淡，烤豆腐做的也烧欠火候，汤头在江浙人看来不能说是鲜。</p><p><img src="http://image.stephenfang.me/yunnan/48d24d21aa00d5d4e7bc1e3ba5c5f49c.jpeg" alt="48d24d21aa00d5d4e7bc1e3ba5c5f49c"></p><p>一大早约到了玉龙雪山中午的上山票，于是整个行程可以安排的较为轻松些。<br>六点多兴奋的睡不着觉，走上二楼拍了一张早晨的天空，狠狠的呼吸着属于丽江早晨的空气。这个画面几乎是永久性地储存在我的记忆里，文件名大概是是丽江古城。</p><p><img src="http://image.stephenfang.me/yunnan/f04c219816bdd3bfe2ab16565bc11c39.jpeg" alt="f04c219816bdd3bfe2ab16565bc11c39"></p><p>在红太阳广场遇到了本地人私家车揽客被警察带走的囧事，等待了许久和一对情侣一起坐上了车身写着监督电话的客运小巴。<br>一路上健谈的司机都在吐槽「丽江已经不是丽江人的丽江了」，由于政府拿到的投资多为外地人控制，导致不少本地人丢失了工作，如开车上山这件事，在许多年前一直是本地人重要的收入来源，而目前上山的公交车为司机口中的「上海人」所垄断，从事车辆营运需要获得政府的许可，同时政府也不允许司机们口头吆喝。其实这样的事情在全国各地都多有发生，我倒不认为规范营运和所谓的「垄断」是一种坏事，但从某种程度上而言部分本地人赖以维持生计的权益确实收到了侵害。</p><p><img src="http://image.stephenfang.me/yunnan/08c598b790ebfa3719b52f832fdabbe3.jpeg" alt="08c598b790ebfa3719b52f832fdabbe3"></p><p>在快到达玉龙雪山的地方有一个收费站，进山需要缴纳小一百元，目前仍然维持着停车人工买票的经营模式，效率十分低下，国庆期间卡在这个流程大概得有半个小时之久，真希望当地部门能认真把这个流程优化一下，但整个进山过程中的路大多是平坦而宽阔的，如果是自驾会有比较好的驾驶体验（如果不考虑之后的停车成本）。<br><img src="http://image.stephenfang.me/yunnan/6660eb08e1d26b5a0659f59b2f5e2420.jpeg" alt="6660eb08e1d26b5a0659f59b2f5e2420"><br><img src="http://image.stephenfang.me/yunnan/a87fd3ce6194d05bac05f3b2a25eadfb.jpeg" alt="a87fd3ce6194d05bac05f3b2a25eadfb"></p><p>在古城外20元买了中型的氧气罐，足够支撑上山使用了，晚上其实并没有休息好但事实证明登上4680打卡点并没有那么劳累，必要的时候吸上几口氧气就能缓解略微头晕的症状，但还是不建议以比较快的速度登顶。</p><p><img src="http://image.stephenfang.me/yunnan/316100ee6464e5da3b992e9067d49e08.jpeg" alt="316100ee6464e5da3b992e9067d49e08"></p><p>天公不作美，甚至伴着一点小雨，没有欣赏到雪山远处的美景，只见之处都是灰茫茫的一片。<br><img src="http://image.stephenfang.me/yunnan/cc978145478ad3e23a52935829d89939.jpeg" alt="cc978145478ad3e23a52935829d89939"></p><p>休息处的核桃饼还蛮值得一试，10块钱的价格勉强可以把午饭解决。</p><p><img src="http://image.stephenfang.me/yunnan/704d2973e79389ad94887d6134a716c8.jpeg" alt="704d2973e79389ad94887d6134a716c8"></p><p>下山前往蓝月谷的路程有了中国式旅游那味儿，上车睡觉下车拍照。从蓝月谷有很多平台可以望向远处的雪山，就什么也不做搁那儿坐着也十分惬意。</p><p><img src="http://image.stephenfang.me/yunnan/2acfd9c02a752ea35fb36dac8a3e200f.jpeg" alt="2acfd9c02a752ea35fb36dac8a3e200f"></p><p>来云南第一次吃上与菇有关的菜，云南菜大概是中油重盐，也或许是店家做的有点问题，吃这一碗饭我喝了整整五杯水仍不解渴，但饭的味道还是不错的，以后不想再尝试了。<br>之所以吃上商场里的这家店是因为没排上大众点评上那家知名的云南菜馆，票据上写着过号顺延，紧赶慢赶到达等来的是服务员的一句前面有客人闹了不给号了，瞬间感觉服务水平摆在这儿，这家店也不会太好吃。</p><p><img src="http://image.stephenfang.me/yunnan/57ec94ff173d417e84f559ab75e353c9.jpeg" alt="57ec94ff173d417e84f559ab75e353c9"></p><p>陪同学去星巴克处理了一些工作，回到民宿已经是10点多了。古城里的星巴克格外的安静，要想这可是国庆期间，上了二楼找一个位置坐下，听不到一点吵闹。<br>民宿的书架上放了不少供取阅的「真书」，老板似乎是一对建筑师夫妻，我花了一个小时翻完了这本《MUJI HOME》，不知道中国的一二线城市房地产发展会不会在之后也走上日本的老路，年轻人在思想上也有所转变，一些老房子经过适当的装修也能够化腐朽为神奇，按照自己的想法装修自己的家绝对是一件非常幸福的事情。</p><h1 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h1><p><img src="http://image.stephenfang.me/yunnan/61a143f375f819ee4186829a62215429.jpeg" alt="61a143f375f819ee4186829a62215429"><br>离开丽江前去了在民宿看的旅游书里推荐的黑龙潭公园，这个公园给我的感觉实在是过于好了，我愿意将其称为丽江人民公园。相较于茶马古道这些商业化的景点，我觉得来看看当地人会去的地方或许更有意义，旅游书诚不欺我。</p><p><img src="http://image.stephenfang.me/yunnan/a8c5c140d69f1154cbda5277e92f039c.jpeg" alt="a8c5c140d69f1154cbda5277e92f039c"></p><p>在这里可以看到丽江古城的变迁摄影展，可以看到年轻人在河边挥洒着画笔，还可以看到当地居民缅怀的一位官员。</p><p><img src="http://image.stephenfang.me/yunnan/4651b6bb2e85a93273df870e4a60045c.jpeg" alt="4651b6bb2e85a93273df870e4a60045c"></p><p>从古城打车去火车站也没有花上太久的时间，丽江站的外形还是很有地方特色的，内部建设就是典型的小型站，类似于之前去过的富阳站、瑞安站。</p><p><img src="http://image.stephenfang.me/yunnan/6b21b5f176b03681159c0a1c7a5a58e4.jpeg" alt="6b21b5f176b03681159c0a1c7a5a58e4"></p><p>国庆期间出游另一个坏处就是会遇上各种各样的人，先有一对情侣要求和我换靠窗的位置，后有熊孩子在后座踢椅子，他们的家长不仅坐视不管还一直叽叽喳喳交谈。这趟高铁并没有给我留下比较好的印象。</p><p>由于来大理也是临时决定，在大理入住的民宿就没有丽江那么宜居，宣传的海景民宿在二层根本不用指望能看到海，房间里放着积灰严重的洗衣机也没有提供洗衣粉，客厅放了一个杆子弯的网红日落灯，除了一本影集是真的书，书架上就全是标准廉价装修的假书了。最离谱的是退房后客服还强行要求给五星好评，给我恶心坏了。</p><p><img src="http://image.stephenfang.me/yunnan/108d5fd13d35506b472ed33f9a2497f9.jpeg" alt="108d5fd13d35506b472ed33f9a2497f9"></p><p>大理应该是旅游开发和经济发展都比较好的城市了，最明显的感受是商场比丽江的上档次不少，晚饭必须把菌菇火锅安排上。这间店也有不少本地人来吃，价格基本也和大城市平齐了，好在服务不错、干净卫生。菌菇确实如宣传那般鲜，吃完也没有躺板板，安全下车，这也或许是我在云南吃过最满意的一顿。</p><p><img src="http://image.stephenfang.me/yunnan/2e1f673192e99c97b4910d7aab1e75e6.jpeg" alt="2e1f673192e99c97b4910d7aab1e75e6"></p><p>来大理之前就在冲浪的时候看到了不少租车环海的视频，我们自然也想享受这个待遇。国庆期间的溢价还是过于严重了，一辆甲壳虫一天的租金超出了500元，所谓丰田才是真正的生活，花了300多元租了一辆雷凌。<br>当地的商家估计也就准备等着这个时候赚一票，不在这个时候发力疫情期间的业绩会差很多。</p><p><img src="http://image.stephenfang.me/yunnan/ce2006588d71ddde28cb01a190c03ae2.jpeg" alt="ce2006588d71ddde28cb01a190c03ae2"></p><p>晚上和同伴开车去了一趟大理古城，在民宿闲着也是闲着。嘴上是说着去完丽江古城再也不去古城，结果是自己又把自己坑了，更何况是在国庆期间毫无旅游体验。唯一让我感到值得的就是城内城外的一些古建筑，没有在大理找到博物馆这样的公共设施，我是记得在历史上有大理国这样的存在，但在大理没有系统的了解过这边的历史。</p><h1 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h1><p><img src="http://image.stephenfang.me/yunnan/3290cecf78f33c0e065609cde15b6de7.jpeg" alt="3290cecf78f33c0e065609cde15b6de7"><br>在同伴的一个朋友推荐下，我们起了个大早来到体育馆边上的湿地公园看日出。整个公园的视野非常开阔，除了随风轻拂的草还有许多叫不出名的鸟类，远远看和整个天空慢慢被照亮，欣喜油然而生。</p><p><img src="http://image.stephenfang.me/yunnan/30CE04A9-36BB-46EF-971A-72B005C5BA5F_1_105_c.jpeg" alt="30CE04A9-36BB-46EF-971A-72B005C5BA5F_1_105_c"></p><p>在湿地公园碰到了一位来拍延时的当地大叔，他自称是在这里看日出的常客。大叔就拍摄的机位和大理的游览线路做了一些推荐，包括绕海的线路可以倒着来，事实上这条建议帮了我们大忙，避免了国庆期间堵车的风险。</p><p><img src="http://image.stephenfang.me/yunnan/51079b511ac7f74a0fe197abda5541d3.jpeg" alt="51079b511ac7f74a0fe197abda5541d3"></p><p>大叔说洱海是值得细细品味的，我现在也认同他说的这句话，洱海在大理人心中的地位不亚于西湖在杭州人心中的地位。</p><p><img src="http://image.stephenfang.me/yunnan/4a313a162a1f22dc95af102404a712f7.jpeg" alt="4a313a162a1f22dc95af102404a712f7"></p><p>来云南几天看到过不少的饵丝招牌却一直不知是何物，既然起了个大早就不能放弃吃早饭的机会，遂驱车20分钟赶往附近的一条老街。大理相较于丽江公共交通的体系还是相当完善的，但如果能在大理租车出行上的体验会是翻倍的。</p><p>饵丝是由饵块演变出来的，饵块切丝便做成了饵丝，可以理解成口感不同的米线，饵丝的硬度会更扎实，加上各种料味道还算不错。</p><p><img src="http://image.stephenfang.me/yunnan/c5e72ddcf812bb34166acb276181cfeb.jpeg" alt="c5e72ddcf812bb34166acb276181cfeb"></p><p>回到民宿还只是早上8点多，稍作休息将行李搬运到车上就正式开始了今天的自驾游。<br>云南的天渲染的比游戏里还蓝，一路上心情都十分愉悦，硬要说有什么不好就是日照过于充足隔一段时间就需要补一下防晒。</p><p><img src="http://image.stephenfang.me/yunnan/beaaf91430d33942c6d443f4cebd0d4a.jpeg" alt="beaaf91430d33942c6d443f4cebd0d4a"><br><img src="http://image.stephenfang.me/yunnan/072c7b06cde8ef5dc980cebf835dc163.jpeg" alt="072c7b06cde8ef5dc980cebf835dc163"></p><p>不少80后会选择来大理寻找自由，这句话放在90后身上也不过时。中饭是在双廊的一家音乐餐厅解决的，价格基本上与一线城市物价持平，吉他小哥大概是李志的迷弟，弹唱了很多逼哥的冷门歌曲，再配合这般景致这顿饭吃的蛮值得。</p><p><img src="http://image.stephenfang.me/yunnan/cf832aeed47083beeca1bfcc88230025.jpeg" alt="cf832aeed47083beeca1bfcc88230025"></p><p>三塔是大叔推荐的景点，当时查阅了一下维基百科就决定去了。</p><blockquote><p>崇圣寺始建于南诏蒙劝丰佑统治时期（公元823～859年），在大理国时期扩展为890间屋子、11400尊佛像、三阁、七楼、九殿及百厦，被称为“佛都”。大理国22代国王中，就先后有9位到崇圣寺出家为僧。</p><p>崇圣寺曾有五大重器：三塔、南诏建极大钟、雨铜观音铜像、元代高僧圆护大师书写的“证道歌碑”及“佛都匾”、明代的“三圣金像”。崇圣寺经明清战争、清军围剿杜文秀、文化大革命等浩劫最终被毁，五大重器只剩下三塔。</p></blockquote><p><img src="http://image.stephenfang.me/yunnan/0B31E373-1185-4390-8F68-D14FA0FD6FC1_1_105_c.jpeg" alt="0B31E373-1185-4390-8F68-D14FA0FD6FC1_1_105_c"></p><p>由于时间上不太充裕没有爬上苍山俯瞰三塔，但三塔的气魄着实给我还是留下了很深的印象。从崇圣寺等级最高的中心建筑大雄宝殿可以俯瞰整个洱海，符合石牌坊上「山海大观」这四个字。需要注意的这个景点有高铁票证明是可以享受折半票价的，非常值得一来。</p><p><img src="http://image.stephenfang.me/yunnan/5ABC1848-5190-411F-8CA2-B640A4DE26D1_1_201_a.heic" alt="5ABC1848-5190-411F-8CA2-B640A4DE26D1_1_201_a"></p><p>这次旅行的景点路线基本都是当天决定的，基本没有心理上的负担，虽然赶来赶去还会有些疲乏，但比以前有计划性的出行要惬意不少。</p><p><img src="http://image.stephenfang.me/yunnan/90926a9797e2ec14b83e09df8b4299d2.jpeg" alt="90926a9797e2ec14b83e09df8b4299d2"></p><p>大理到昆明其实有高铁直达，而从丽江到昆明有K9634号豪华卧铺车。我和同伴都从未坐过卧铺车，当时一拍脑袋就决定试试坐一晚上的卧铺，第二天醒来就已经在昆明了，还能剩下一晚的房钱。事实上这趟车票价非常高，一路上多是走走停停，但如果是为了体验也无妨性价比。</p><p><img src="http://image.stephenfang.me/yunnan/ef6bea43d3d26a1624ebccb97a30ebb3.jpeg" alt="ef6bea43d3d26a1624ebccb97a30ebb3"><br><img src="http://image.stephenfang.me/yunnan/2e42842beac0ba05459cdb5d294de2d6.jpeg" alt="2e42842beac0ba05459cdb5d294de2d6"></p><p>昆明客运段这趟车的宣传还是不错的，车厢内十分整洁，毯子被子枕头该有的一个不少，承诺有的设施如K房、餐车也都有，但我没有up主那种社交技能只是走马观花逛了一圈。只要你不抱有洗澡的念头卧铺还是不错的。</p><h1 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h1><p>与我同车厢的有一对武汉来的情侣，还有一位在深圳工作的毕业生，我们一直聊到12点多也没有一点不适，话题包括了这几天的所见所闻，交换了各自对旅行的看法。与我差不多大的毕业生刚从香格里拉徒步回来，我还蛮羡慕这种旅行方式，但自己没有这种魄力。<br>卧铺旅行的感受就像是抽盲盒，同行的小伙伴就没有那么幸运，被抽到的车厢里大家互不交谈，还被请求换了铺位。</p><p><img src="http://image.stephenfang.me/yunnan/9504afa8c61a7633bf37c39002d915cb.jpeg" alt="9504afa8c61a7633bf37c39002d915cb"></p><p>一觉醒来已是8点，进行了简单的洗漱后泡上了火车站买的方便面。一晚上车厢略有颠簸但睡得挺香，发呆看着窗外城市的轮廓越来越接近。</p><p><img src="http://image.stephenfang.me/yunnan/af993427107372b2886b63b7c9c396c0.jpeg" alt="af993427107372b2886b63b7c9c396c0"></p><p>到达昆明站的时候终于有了一缕阳光，工作中9点起床的日子久了已经没有了早晨身体被唤醒的感觉，拎着行李走过站台感觉不到一丝疲惫。</p><p><img src="http://image.stephenfang.me/yunnan/d42fba4b5eff5a699e567ca8d36f3c63.jpeg" alt="d42fba4b5eff5a699e567ca8d36f3c63"></p><p>联系上了Airbnb上昆明的房东，由于不能提前入住，房东给我们打点了一间存放行李的屋子，安放妥当后就坐上出租车去往了必到的景点——滇池。<br>这个季节的滇池和我想象中的有很大出入，首先海鸥要在冬季才能见到，其次滇池的水是碧绿碧绿的，作为一个刚从大理来的人我觉得还是洱海更胜一筹。</p><p><img src="http://image.stephenfang.me/yunnan/46757eadeec04da52def179f08bd4668.jpeg" alt="46757eadeec04da52def179f08bd4668"></p><p>来春城前我最想去的景点是西南联大博物馆，最近也在读重走西南联大，对此景点期许有加。事实上目前整个建筑是云南师范大学的一部分，在疫情期间不再对外开放，等到达师范大学门口的时候失望到达了顶点。<br>只能在学校附近找了一家米线店安抚一下自己，点了一碗状元米线还送了一碗汽锅鸡，整个吃米线的过程仪式感很足。</p><p><img src="http://image.stephenfang.me/yunnan/4904f2c886474b702ec5da3cdf7b2258.jpeg" alt="4904f2c886474b702ec5da3cdf7b2258"></p><p>昆明的地铁饮料几乎是被百事承包了，这个橘味的微笑泡泡在杭州我从未见过，喝起来和芬达的味道非常相似。</p><p><img src="http://image.stephenfang.me/yunnan/32e8d9681f300e3335b74c1b8aa1a2b5.jpeg" alt="32e8d9681f300e3335b74c1b8aa1a2b5"><br><img src="http://image.stephenfang.me/yunnan/b18fec1a67bac4a8a609d80d6ad46b83.jpeg" alt="b18fec1a67bac4a8a609d80d6ad46b83"></p><p>春城的花市是很有名的，在这里能够以极低的价格采购到鲜花并且当天快递发货，多肉也都是白菜价十块钱能买到品种不同的四五株，把这里当作一个景点来逛也非常合适。</p><p><img src="http://image.stephenfang.me/yunnan/d999d61dfe2d1e2749c967e131b44192.jpeg" alt="d999d61dfe2d1e2749c967e131b44192"></p><p>每个地方都有每个地方的人民广场，丽江是黑龙潭广场，昆明便是翠湖公园，配合着还潮乐队的《慈城公园交谊舞》整个散步的过程都惬意了不少。</p><p><img src="http://image.stephenfang.me/yunnan/2e182c6678ec1152380f6ec24ee58f60.jpeg" alt="2e182c6678ec1152380f6ec24ee58f60"></p><p>云倒映在水潭里的样子还蛮好看的，可能去公园走走在年轻人看来依旧是一种老掉牙的行为吧。</p><p><img src="http://image.stephenfang.me/yunnan/977c252e72092f9da3a94edf9c4ef98c.jpeg" alt="977c252e72092f9da3a94edf9c4ef98c"></p><p>昆明有许多博物馆，包括云南省博、昆明市博、云南民族博物馆、铁路博物馆，每一个我都很想去。当天没能进去西南联大博物馆，又没能约上陆军讲武堂，第二天就要从这座城市离开了。<br>花了半小时研究翠湖公园附近的可去之处来度过这个下午，发现公园的出口就有一个砖石结构的法式建筑，是前云南省主席卢汉的住宅。</p><p><img src="http://image.stephenfang.me/yunnan/bc57c0074c571a7efaeea3c883024211.jpeg" alt="bc57c0074c571a7efaeea3c883024211"></p><p><img src="http://image.stephenfang.me/yunnan/c5720fb9d797408c126bbcd968cd7ea7.jpeg" alt="c5720fb9d797408c126bbcd968cd7ea7"></p><p>卢汉公馆的参观过程十分有序，严格限制了同时参观人数。这个建筑见证了昆明和平起义，保留十分完好，装修风格非常豪华，庭院的形制与电视里看过的民国电视剧里的大户人家宅邸几乎一致。</p><p><img src="http://image.stephenfang.me/yunnan/e963ec748d29ef90eae9b24d3535d898.jpeg" alt="e963ec748d29ef90eae9b24d3535d898"></p><p>由于有些不甘心没去成博物馆，况且离饭点还有不少时间，就打车去云南市博溜达了一圈。馆内整体设施都比较陈旧了，三个展中关于飞虎队的展览挺有意思，看到了迪士尼给飞虎队设计的Logo。</p><p><img src="http://image.stephenfang.me/yunnan/d7335431c71cb8fef2427fc7879ac848.jpeg" alt="d7335431c71cb8fef2427fc7879ac848"></p><p>从滇池载我们回来的当地司机推荐给我们的饭馆叫外婆味道，这家店的菜还蛮对江浙人胃口，性价比也足够高，79元的套餐内有三个菜。干锅包菜的名字叫手撕莲花白还蛮意外的，套餐外另点的豆腐也非常好吃，可能是除火锅外在云南吃的最舒心的一顿。</p><p><img src="http://image.stephenfang.me/yunnan/c3777d824991be041e7b7af642017f43.jpeg" alt="c3777d824991be041e7b7af642017f43"><br><img src="http://image.stephenfang.me/yunnan/562ce2e3de9e87a94fbde1b4e1dd14e3.jpeg" alt="562ce2e3de9e87a94fbde1b4e1dd14e3"></p><p>这家店是连锁店，我们选的这家在比较市中心的位置了，走上个几百米就是恒隆广场。整个昆明的高楼并不是很多，走上恒隆的观景台看昆明的天际线（并不是）还蛮开心的，心里却想着是第二天就要赶回去上班了还没有好好放松。</p><p><img src="http://image.stephenfang.me/yunnan/030e7c01c93a7b0b8dbcfa893440cf94.jpeg" alt="030e7c01c93a7b0b8dbcfa893440cf94"><br><img src="http://image.stephenfang.me/yunnan/0b4718d1a680f3f5b69c632195d5387a.jpeg" alt="0b4718d1a680f3f5b69c632195d5387a"></p><p>我们住的民宿可以远眺昆明的市中心。开上一瓶恒隆买的果酒，在旅行的倒数第二天，总算是可以歇下来整理照片玩会儿游戏了。</p><h1 id="第六天"><a href="#第六天" class="headerlink" title="第六天"></a>第六天</h1><p><img src="http://image.stephenfang.me/yunnan/48c733ee259ed52252243a3979983a6c.jpeg" alt="48c733ee259ed52252243a3979983a6c"></p><p>一大早在车笛声中醒来，就准备着和云南道别了。</p><p><img src="http://image.stephenfang.me/yunnan/c2b58a28831d3b476798e23ba616bf0c.jpeg" alt="c2b58a28831d3b476798e23ba616bf0c"></p><p>今天的安排只安排了一个目的地，就是云南省博物馆。<br>在省级博物馆中我已经打卡过了浙江省博、湖北省博、广东省博、上海市博，几乎每个博物馆都有和国家宝藏的梦幻联动，为参观的过程添加了许多趣味。云南省博物馆的外立面取意于云南传统民居“一颗印”，外形源自石林风化地貌特征。</p><p><img src="http://image.stephenfang.me/yunnan/8af47fc3fb3fe1ef67dd6b8efd5742be.jpeg" alt="8af47fc3fb3fe1ef67dd6b8efd5742be"></p><p>三层的展览一上午根本来不及看完，为了尽可能多的看到展品，只能走马观花式的有选择性的看了一圈。精美如这件贝器盖，远看有些像小时候玩的工兵，实则表现的是滇族与昆明族军队交战。</p><p><img src="http://image.stephenfang.me/yunnan/f1eade5b620f110d31ad54902fb8e5d2.jpeg" alt="f1eade5b620f110d31ad54902fb8e5d2"></p><p>这件与博物馆前巨型雕塑一致的金翅鸟自然来头不小，以下是摘录对它的描述。</p><blockquote><p>宋代大理国银鎏金镶珠金翅鸟，1978年出土于大理崇圣寺主塔。金翅鸟梵名为“迦楼罗”，被尊为大理的保护神，是佛教护法中的天龙八部之一。传说金翅鸟原来十分凶悍，以龙为食。后来金翅鸟皈依佛教，成为了佛教的护法神。这只金翅鸟头饰羽冠，两只利爪立于莲座之上。镂花火焰形背光插在尾身之间，镶饰有5粒水晶珠。体态雄健圆浑，生机勃勃，工艺可谓精美绝伦。</p></blockquote><p><img src="http://image.stephenfang.me/yunnan/1d0d2098ad7d1fb5b380aeb17dd1aa3c.jpeg" alt="1d0d2098ad7d1fb5b380aeb17dd1aa3c"></p><p>价值连城的宝物还有不少，工艺精湛的如这件明代金镶红蓝宝石冠，值得驻足许久欣赏。</p><p><img src="http://image.stephenfang.me/yunnan/37beddf0ed48d168e6423345197cf381.jpeg" alt="37beddf0ed48d168e6423345197cf381"></p><p>结束了博物馆的游览整个云南之旅也就告一段落了，几年前转机经过昆明长水机场，心里想着以后还会来到这里，如今算是了却了这个念想，一点都不感到意外。以后还会不会来昆明不好说，但一定会再来到云南去更多的城市走走看看。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;去年国庆期间和朋友一起去了趟云南，起初安排的路线是 &lt;strong&gt;丽江 -&amp;gt; 香格里拉 -&amp;gt; 泸沽湖 -&amp;gt; 昆明&lt;/strong&gt;，在旅程中我们从时间和成本上考量，加上路人给予的一些建议，最终的路线是 &lt;strong&gt;丽江 -&amp;gt; 大理 -&amp;gt; 昆明&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;由于工作较忙一直没有时间整理旅行中的见闻，最近在整理博客的时候静下心来完善之前写的日记，花了一下午将六天的经历整理成一片流水账，发表在个人博客上图一乐。&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="https://stephefang.me/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="旅行" scheme="https://stephefang.me/tags/%E6%97%85%E8%A1%8C/"/>
    
    <category term="云南" scheme="https://stephefang.me/tags/%E4%BA%91%E5%8D%97/"/>
    
    <category term="中国" scheme="https://stephefang.me/tags/%E4%B8%AD%E5%9B%BD/"/>
    
  </entry>
  
  <entry>
    <title>iOS14 &amp; iOS 15 相册适配</title>
    <link href="https://stephefang.me/2022/01/20/Photo_Library/"/>
    <id>https://stephefang.me/2022/01/20/Photo_Library/</id>
    <published>2022-01-20T09:10:20.000Z</published>
    <updated>2022-07-24T15:18:13.051Z</updated>
    
    <content type="html"><![CDATA[<p>开发迭代为了解决测试提出的「选中的照片」权限适配问题，花时间研究了<a href="https://developer.apple.com/videos/play/wwdc2020/10641">Handle the Limited Photos Library in your app</a> 和 <a href="https://developer.apple.com/videos/play/wwdc2020/10652/?time=841">Meet the new Photos picker</a> session，整理<a href="http://music-overmind.hz.netease.com/18/requirement/issues/OMMUSIC-77674">需求内容</a>汇总并实现，同时还解决了一处 iOS 15.2 下可能导致崩溃的相册权限问题。</p><span id="more"></span><h1 id="崩溃问题"><a href="#崩溃问题" class="headerlink" title="崩溃问题"></a>崩溃问题</h1><blockquote><p>15.2 系统版本下在使用调用本地相册相关的功能后（上传作品、更换头像、歌房玩法公屏…） app 就会卡死。</p></blockquote><hr><p><strong>思路</strong>：按照给出的路径进行复现，发现在给予相册访问权限以后无法复现该问题，但是在相册权限为**<code>PHAuthorizationStatusNotDetermined</code><strong>（第一次选择本地相册弹框选择「选中的照片」）以及</strong><code>PHAuthorizationStatusDenied</code>** （不给予相册权限）会出现长达数十秒的卡顿和崩溃，点击暂停执行可以看到主线程被blocked了正在等待。</p><p><img src="http://image.stephenfang.me/mweb/POPO20220118-144240.jpg" alt="POPO20220118-144240.jpg"></p><p>回到图片框架上，MZAssetsLibrary在init后执行了<code>[PHPPhotoLibrary registerChangeObserver:]</code>，于是有理由怀疑是不是这一行代码相关的API执行了变动。</p><p><img src="http://image.stephenfang.me/mweb/Untitled.png" alt="Untitled"></p><p>在苹果开发者论坛找到了答案：</p><p><a href="https://developer.apple.com/forums/thread/696131">ios 15.2 beta app stuck</a></p><p>在 iOS 15.2 之前使用<code>[PHPPhotoLibrary registerChangeObserver:]</code>通知不需要相册权限，然而在 iOS 15.2 之后 Apple 新增了应用隐私报告，添加了该方法的相册权限前提。</p><hr><p><strong>解决方案</strong>：先注册相册请求，在获取到权限之后针对可访问的相册权限注册该通知，如<code>PHAuthorizationStatusAuthorized</code>、<code>PHAuthorizationStatusLimited</code>，但是需要涉及到旧版本的权限兼容，于是引出了权限适配方案。</p><h1 id="相册权限适配"><a href="#相册权限适配" class="headerlink" title="相册权限适配"></a>相册权限适配</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>在 iOS 13 及以前，当用户首次访问应用程序时，会被要求开放大量权限，比如相册、定位、联系人，实际上该应用可能仅仅需要一个选择图片功能，却被要求开放整个照片库的权限，这确实是不合理的。</p><p>在 iOS 14 中引入了 “LimitedPhotos Library” 的概念，用户可以授予应用访问其一部分的照片，对于应用来说，仅能读取到用户选择让应用来读取的照片。</p><p><img src="http://image.stephenfang.me/mweb/Xnip2022-01-06_21-34-51.jpg" alt="Xnip2022-01-06_21-34-51.jpg"></p><p>![Untitled](<a href="http://image.stephenfang.me/mweb/Untitled">http://image.stephenfang.me/mweb/Untitled</a> 1.png)</p><p>具体体现在</p><ol><li>授权弹窗中增加了 Select Photo 选项。用户可以在 App 请求调用相册时选择部分照片让 App 读取。从 App 的视⻆来看，你的相册里就只有这几张照片，App 无法得知其它照片的存在。</li><li>当用户选择权限为<code>PHAuthorizationStatusLimited</code>如果未适配，可能会在每次触发相册功能时都弹窗询问用户是否需要修改照片权限。可通过在 Info.plist 设置<code>PHPhotoLibraryPreventAutomaticLimitedAccessAlert</code>为 <code>YES</code> 来阻止该弹窗反复弹出</li></ol><h2 id="API-改变"><a href="#API-改变" class="headerlink" title="API 改变"></a>API 改变</h2><p>从开发适配的角度，需要关注新的请求权限和请求权限的方法。</p><p>列举出的请求权限共以下几种，其中<code>PHAuthorizationStatusLimited</code>的注释中给出了适配方法。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, PHAuthorizationStatus) &#123;</span><br><span class="line">    PHAuthorizationStatusNotDetermined = <span class="number">0</span>, <span class="comment">// User has not yet made a choice with regards to this application</span></span><br><span class="line">    PHAuthorizationStatusRestricted,        <span class="comment">// This application is not authorized to access photo data.</span></span><br><span class="line">                                            <span class="comment">// The user cannot change this application’s status, possibly due to active restrictions</span></span><br><span class="line">                                            <span class="comment">//   such as parental controls being in place.</span></span><br><span class="line">    PHAuthorizationStatusDenied,            <span class="comment">// User has explicitly denied this application access to photos data.</span></span><br><span class="line">    PHAuthorizationStatusAuthorized,        <span class="comment">// User has authorized this application to access photos data.</span></span><br><span class="line">    PHAuthorizationStatusLimited API_AVAILABLE(ios(<span class="number">14</span>)), <span class="comment">// User has authorized this application for limited photo library access. Add PHPhotoLibraryPreventAutomaticLimitedAccessAlert = YES to the application&#x27;s Info.plist to prevent the automatic alert to update the users limited library selection. Use -[PHPhotoLibrary(PhotosUISupport) presentLimitedLibraryPickerFromViewController:] from PhotosUI/PHPhotoLibrary+PhotosUISupport.h to manually present the limited library picker.</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>请求权限的方法也得到了更新，需要注意的是</p><ul><li>只有使用新的<code>requestAuthorizationForAccessLevel:(PHAccessLevel)accessLevel</code> 方法才能正确获取到  <code>PHAuthorizationStatusLimited</code> 权限</li><li>如果使用以前的API来获取权限状态，<code>PHAuthorizationStatusLimited</code> 状态下返回<code>PHAuthorizationStatusAuthorized</code></li><li>在请求权限的时候需要给予读写权限参数<code>PHAccessLevel</code>，可选值为<code>PHAccessLevelAddOnly</code> 与 <code>PHAccessLevelReadWrite</code>，仅在<code>PHAccessLevelReadWrite</code> 下才能够获取到<code>PHAuthorizationStatusLimited</code> 权限</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Library access authorization status</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Replaces \c +authorizationStatus to support add-only/read-write access level status</span></span><br><span class="line">+ (PHAuthorizationStatus)authorizationStatusForAccessLevel:(PHAccessLevel)accessLevel API_AVAILABLE(macosx(<span class="number">11.0</span>), ios(<span class="number">14</span>), tvos(<span class="number">14</span>));</span><br><span class="line">+ (<span class="keyword">void</span>)requestAuthorizationForAccessLevel:(PHAccessLevel)accessLevel handler:(<span class="keyword">void</span>(^)(PHAuthorizationStatus status))handler API_AVAILABLE(macosx(<span class="number">11.0</span>), ios(<span class="number">14</span>), tvos(<span class="number">14</span>)) <span class="built_in">NS_SWIFT_ASYNC</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Deprecated and replaced by authorizationStatusForAccessLevel:, will return \c PHAuthorizationStatusAuthorized if the user has chosen limited photo library access</span></span><br><span class="line">+ (PHAuthorizationStatus)authorizationStatus API_DEPRECATED_WITH_REPLACEMENT(<span class="string">&quot;+authorizationStatusForAccessLevel:&quot;</span>, ios(<span class="number">8</span>, API_TO_BE_DEPRECATED), macos(<span class="number">10.13</span>, API_TO_BE_DEPRECATED), tvos(<span class="number">10</span>, API_TO_BE_DEPRECATED));</span><br><span class="line">+ (<span class="keyword">void</span>)requestAuthorization:(<span class="keyword">void</span>(^)(PHAuthorizationStatus status))handler API_DEPRECATED_WITH_REPLACEMENT(<span class="string">&quot;+requestAuthorizationForAccessLevel:handler:&quot;</span>, ios(<span class="number">8</span>, API_TO_BE_DEPRECATED), macos(<span class="number">10.13</span>, API_TO_BE_DEPRECATED), tvos(<span class="number">10</span>, API_TO_BE_DEPRECATED));</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, PHAccessLevel) &#123;</span><br><span class="line">    PHAccessLevelAddOnly = <span class="number">1</span>,</span><br><span class="line">    PHAccessLevelReadWrite = <span class="number">2</span>,</span><br><span class="line">&#125; API_AVAILABLE(macos(<span class="number">11.0</span>), ios(<span class="number">14</span>), tvos(<span class="number">14</span>));</span><br></pre></td></tr></table></figure><p>针对业务需求对代码进行了部分重构，原代码采用if-else结构进行控制，还需要判断iOS版本结构会过于混乱。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> (^setUpUI)(PHAuthorizationStatus status) = ^(PHAuthorizationStatus status)&#123;</span><br><span class="line">            <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">                <span class="keyword">case</span> PHAuthorizationStatusNotDetermined: &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> PHAuthorizationStatusAuthorized:</span><br><span class="line">                <span class="keyword">case</span> PHAuthorizationStatusLimited: &#123;</span><br><span class="line">                    [<span class="keyword">self</span>.library registerChangeObserver:<span class="keyword">self</span>];</span><br><span class="line">                    loadCollections();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> PHAuthorizationStatusDenied:</span><br><span class="line">                <span class="keyword">case</span> PHAuthorizationStatusRestricted: &#123;</span><br><span class="line">                    notAllowed();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">default</span>: &#123;</span><br><span class="line">                    notAllowed();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (status == PHAuthorizationStatusNotDetermined) &#123;</span><br><span class="line">            <span class="keyword">if</span> (@available(iOS <span class="number">14</span>, *)) &#123;</span><br><span class="line">                [PHPhotoLibrary requestAuthorizationForAccessLevel:PHAccessLevelReadWrite handler:^(PHAuthorizationStatus status) &#123;</span><br><span class="line">                    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                        setUpUI(status);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                [PHPhotoLibrary requestAuthorization:^(PHAuthorizationStatus status) &#123;</span><br><span class="line">                    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                        setUpUI(status);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setUpUI(status);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><hr><p>![Untitled](<a href="http://image.stephenfang.me/mweb/Untitled">http://image.stephenfang.me/mweb/Untitled</a> 2.png)</p><p>若要在应用内唤起访问系统受限相册的选择面板需要调用以下API，并且监听图片变化做相应处理。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)presentLimitedLibraryPickerFromViewController:(<span class="built_in">UIViewController</span> *)controller;</span><br></pre></td></tr></table></figure><p>在 iOS 15 中还针对以上API提供了回调。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)presentLimitedLibraryPickerFromViewController:(<span class="built_in">UIViewController</span> *)controller </span><br><span class="line">                                    completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *))completionHandler;</span><br></pre></td></tr></table></figure><h2 id="视觉适配"><a href="#视觉适配" class="headerlink" title="视觉适配"></a>视觉适配</h2><p>找视觉沟通前研究了微信和微博如何做适配，可以说微博的适配方案加上了引导体验更加完整。</p><p><img src="http://image.stephenfang.me/mweb/6ce25100-2cea-41de-8867-04ff5aa4acf4.jpg" alt="6ce25100-2cea-41de-8867-04ff5aa4acf4.jpg"></p><p><img src="http://image.stephenfang.me/mweb/e9aab135-4eb6-489b-af70-3d1664354d2f.jpg" alt="e9aab135-4eb6-489b-af70-3d1664354d2f.jpg"></p><p>目前音街相册实现效果如下图所示。</p><p>![Untitled](<a href="http://image.stephenfang.me/mweb/Untitled">http://image.stephenfang.me/mweb/Untitled</a> 3.png)</p><p>![Untitled](<a href="http://image.stephenfang.me/mweb/Untitled">http://image.stephenfang.me/mweb/Untitled</a> 4.png)</p><h1 id="照片选择器"><a href="#照片选择器" class="headerlink" title="照片选择器"></a>照片选择器</h1><p>在 iOS 14 中官方推荐使用 <code>PhotosUI</code> 框架下的 <code>PHPicker</code> 来替代 <code>UIImagePickerController</code> 进行图片选择。</p><p><code>PHPicker</code> 为独立进程，会在视图最顶层进行展示，应用内无法对其进行截图也无法直接访问到其内的数据，同时在功能上支持多选，支持搜索，支持按图片、视频、LivePhotos进行筛选</p><p><code>UIImagePickerViewController</code> 功能受限，每次只能选择一张图片，将逐渐被废弃，同时<code>UIImagePickerController</code> 中三个 <code>sourceType</code>两个被废弃，只留下 <code>camera</code>。</p><h2 id="功能一览"><a href="#功能一览" class="headerlink" title="功能一览"></a>功能一览</h2><ul><li>支持缩放  <img src="http://image.stephenfang.me/mweb/IMG_9246.png" alt="IMG_9246.PNG"></li><li>支持搜索  <img src="http://image.stephenfang.me/mweb/IMG_9248.png" alt="IMG_9248.PNG"></li><li>支持分类  <img src="http://image.stephenfang.me/mweb/IMG_9247.png" alt="IMG_9247.PNG"></li></ul><h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><p>在调用方法上，需要首先声明 <code>PHPickerConfiguration</code> 并进行配置，再将其传递给<code>PHPickerViewController</code> 完成调用。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PHPickerConfiguration *config = [[PHPickerConfiguration alloc] init];</span><br><span class="line">config.selectionLimit = <span class="number">3</span>;  <span class="comment">// 可选择的资源数量，0表示不设限制，默认为1</span></span><br><span class="line">config.filter = [PHPickerFilter imagesFilter]; <span class="comment">// 只显示图片，默认全选，可选择imagesFilter、livePhotosFilter、videosFilter</span></span><br><span class="line">config.preferredAssetRepresentationMode = PHPickerConfigurationAssetRepresentationModeCurrent; <span class="comment">// 如果要获取视频最好设置该属性，避免系统对视频进行转码</span></span><br><span class="line"></span><br><span class="line">PHPickerViewController *pickerViewController = [[PHPickerViewController alloc] initWithConfiguration:config];</span><br><span class="line">pickerViewController.delegate = <span class="keyword">self</span>;</span><br><span class="line">[<span class="keyword">self</span> presentViewController:pickerViewController animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p>![Untitled](<a href="http://image.stephenfang.me/mweb/Untitled">http://image.stephenfang.me/mweb/Untitled</a> 5.png)</p><hr><p><code>PHPickerConfiguration</code>、<code>PHPickerFilter</code> 和 <code>PHPickerResult</code> 都是作为结构体而不是作为类桥接到 Swift 中，从<code>PHPickerViewController</code> 返回使用<code>NSItemProvider</code>,与 <code>UIImagePickerController</code> 不同</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)picker:(PHPickerViewController *)picker didFinishPicking:(<span class="built_in">NSArray</span>&lt;PHPickerResult *&gt; *)results&#123;</span><br><span class="line">   [picker dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">for</span> (PHPickerResult *result <span class="keyword">in</span> results) &#123;</span><br><span class="line">      <span class="comment">// Get UIImage</span></span><br><span class="line">      [result.itemProvider loadObjectOfClass:[<span class="built_in">UIImage</span> <span class="keyword">class</span>] completionHandler:^(__kindof <span class="keyword">id</span>&lt;<span class="built_in">NSItemProviderReading</span>&gt;  _Nullable object, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">         <span class="keyword">if</span> ([object isKindOfClass:[<span class="built_in">UIImage</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">               <span class="built_in">NSLog</span>(<span class="string">@&quot;Selected image: %@&quot;</span>, (<span class="built_in">UIImage</span>*)object);</span><br><span class="line">            &#125;);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;];</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h2><ul><li>加载 iCloud 资源时没有进度回调</li><li>不支持图片编辑（比如选择头像要将图片裁剪成圆形）</li></ul><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://developer.apple.com/videos/play/wwdc2020/10641">Handle the Limited Photos Library in your app</a> </p><p><a href="https://developer.apple.com/videos/play/wwdc2020/10652/?time=841">Meet the new Photos picker</a></p><p><a href="https://developer.apple.com/documentation/photokit/delivering_an_enhanced_privacy_experience_in_your_photos_app?language=objc">Delivering an Enhanced Privacy Experience in Your Photos App</a></p><p><a href="https://www.appcoda.com/phpicker/">The Complete Guide to PHPicker API in iOS 14</a></p><p><a href="https://developer.aliyun.com/article/768114">新零售淘系技术 - iOS14 隐私适配及部分解决方案</a></p><p><a href="https://juejin.cn/post/6881513652176814093">RayJiang97-为什么不推荐使用 PHPicker</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;开发迭代为了解决测试提出的「选中的照片」权限适配问题，花时间研究了&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2020/10641&quot;&gt;Handle the Limited Photos Library in your app&lt;/a&gt; 和 &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2020/10652/?time=841&quot;&gt;Meet the new Photos picker&lt;/a&gt; session，整理&lt;a href=&quot;http://music-overmind.hz.netease.com/18/requirement/issues/OMMUSIC-77674&quot;&gt;需求内容&lt;/a&gt;汇总并实现，同时还解决了一处 iOS 15.2 下可能导致崩溃的相册权限问题。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://stephefang.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Swift" scheme="https://stephefang.me/tags/Swift/"/>
    
    <category term="Objective-C" scheme="https://stephefang.me/tags/Objective-C/"/>
    
    <category term="Photo" scheme="https://stephefang.me/tags/Photo/"/>
    
    <category term="iOS 15" scheme="https://stephefang.me/tags/iOS-15/"/>
    
    <category term="iOS 14" scheme="https://stephefang.me/tags/iOS-14/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI开发初探</title>
    <link href="https://stephefang.me/2021/07/15/SwiftUIExploration/"/>
    <id>https://stephefang.me/2021/07/15/SwiftUIExploration/</id>
    <published>2021-07-15T07:20:20.000Z</published>
    <updated>2022-07-24T16:01:12.019Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用 SwiftUI 完成了一部分项目的编写，我将完成项目时使用 SwiftUI 进行开发的体验做简单的总结。本文也同时发表于网易KM平台。</p><span id="more"></span><h1 id="最近项目"><a href="#最近项目" class="headerlink" title="最近项目"></a>最近项目</h1><ul><li>基于知识图谱的推荐系统的设计与实现（客户端部分采用 SwiftUI 实现）</li></ul><p><img src="http://image.stephenfang.me/mweb/Recommender.png"></p><p><img src="http://image.stephenfang.me/mweb/Structure.png"></p><ul><li>知识图谱入门简介（UI 部分采用 SwiftUI 实现，WWDC Swift Student Challenge获奖项目）</li></ul><p><a href="https://github.com/iamStephenFang/KnowledgeGraph">iamStephenFang/KnowledgeGraph</a></p><p><img src="http://image.stephenfang.me/mweb/KG.png"></p><ul><li>FinMatters（一款采用 SwiftUI 编写的理财 App）</li></ul><p><img src="http://image.stephenfang.me/mweb/Fin.png"></p><h1 id="哪些优点"><a href="#哪些优点" class="headerlink" title="哪些优点"></a>哪些优点</h1><h2 id="指令式编程-VS-声明式编程"><a href="#指令式编程-VS-声明式编程" class="headerlink" title="指令式编程 VS 声明式编程"></a>指令式编程 VS 声明式编程</h2><p>指令式编程逐条指示计算机<strong>怎么做，</strong>注重于<strong>描述过程</strong></p><ul><li>运算语句：let a = 1 + 2</li><li>循环语句: for while</li><li>条件语句: if switch</li></ul><h2 id="声明式编程教会计算机做什么，注重于描述结果"><a href="#声明式编程教会计算机做什么，注重于描述结果" class="headerlink" title="声明式编程教会计算机做什么，注重于描述结果"></a>声明式编程教会计算机<strong>做什么，</strong>注重于<strong>描述结果</strong></h2><ul><li>Map： let squares = nums.map {$0* $0}</li><li>Reduce： let total = nums.reduce(10.0,+)</li><li>Filter： let evens = nums.filter { $0% 2 == 0 }</li></ul><h2 id="声明式UI"><a href="#声明式UI" class="headerlink" title="声明式UI"></a>声明式UI</h2><p>1.View并不负责渲染，并非传统意义的视图层级，而是对视图组织关系的声明</p><p>2.决定 UI 状态的状态 State 存储在对象之中</p><p>3.View = func(State)通过控制和改变 State来得到确定的 View</p><p>4.State 改变时调用上述函数获取新的 State 的 View，重新渲染更改部分</p><h2 id="开发体验"><a href="#开发体验" class="headerlink" title="开发体验"></a>开发体验</h2><ul><li>UIKit 组件混编成本不高</li><li>复杂视图减少代码量</li><li>Model-View-ViewModel</li><li>动画、效果、手势实现简单</li></ul><p><img src="http://image.stephenfang.me/mweb/Code1.png"></p><h2 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h2><ul><li>在 iPad 上的 Swift Playground编写 SwiftUI 相关代码</li></ul><p><img src="http://image.stephenfang.me/mweb/PG.png"></p><ul><li>在 Xcode 中可以实现实时的、可响应的预览</li></ul><p><img src="http://image.stephenfang.me/mweb/Demo.png"></p><ul><li>跨端开发压力小，实现iOS、iPadOS、watchOS、macOS同步开发</li></ul><p><img src="http://image.stephenfang.me/mweb/CP.png"></p><h1 id="哪些缺点"><a href="#哪些缺点" class="headerlink" title="哪些缺点"></a>哪些缺点</h1><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><ul><li>发布于 WWDC19</li><li>Xcode 11.0+</li><li>iOS 13.0+</li><li>网易云音乐iOS 11.0+</li></ul><h2 id="组件开发"><a href="#组件开发" class="headerlink" title="组件开发"></a>组件开发</h2><p>表面上 SwiftUI 集成了很多可用的组件，但在实现自定义组件时还是需要自行编写元组件相关的代码，并且目前三方组件库可选择的项目较少。</p><p><img src="http://image.stephenfang.me/mweb/Code2.png"></p><p><img src="http://image.stephenfang.me/mweb/Code3.png"></p><p><img src="http://image.stephenfang.me/mweb/Fin2.png"></p><p>原生组件可供更改的样式极其有限，有时候一些问题的解决方案代码并不优雅，比如导航栏只能手动隐藏、全屏状态下无法展示Modal、List 的分割线无法移除等等。</p><p><img src="http://image.stephenfang.me/mweb/Code4.png"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span>&#123;</span><br><span class="line">            <span class="type">ZStack</span> &#123;</span><br><span class="line">                <span class="type">Color</span>(<span class="string">&quot;Background&quot;</span>).ignoresSafeArea()</span><br><span class="line">                <span class="type">VStack</span>&#123;</span><br><span class="line">                    <span class="type">TopNavView</span>(navDesc: “总览<span class="string">&quot;)</span></span><br><span class="line"><span class="string">                        .padding(.horizontal)</span></span><br><span class="line"><span class="string">                        .padding(.top, 0)</span></span><br><span class="line"><span class="string">                    </span></span><br><span class="line"><span class="string">                    VStack&#123;&#125;</span></span><br><span class="line"><span class="string">      / *** 省略内容 ***/</span></span><br><span class="line"><span class="string">                .navigationTitle(&quot;</span><span class="string">&quot;)</span></span><br><span class="line"><span class="string">                .navigationBarHidden(true)</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br></pre></td></tr></table></figure><h2 id="组件缺失"><a href="#组件缺失" class="headerlink" title="组件缺失"></a>组件缺失</h2><ul><li>WKWebView 混编</li></ul><p><img src="http://image.stephenfang.me/mweb/Code4.png"></p><ul><li>SwiftUIX <a href="https://github.com/SwiftUIX/SwiftUIX">https://github.com/SwiftUIX/SwiftUIX</a></li><li>SwiftUI-Introspect <a href="https://github.com/SwiftUIX/SwiftUIX">https://github.com/SwiftUIX/SwiftUIX</a></li></ul><h2 id="开发体验问题"><a href="#开发体验问题" class="headerlink" title="开发体验问题"></a>开发体验问题</h2><ul><li>寻找问题答案成本较高，Stack Overflow可能都未收录</li><li>API 在 SwiftUI 大版本更新时存在差别</li><li>View Hierarchy 检查器无法使用</li><li>Live Preview 渲染经常出错且消耗大量性能</li><li>错误信息有时存在误导</li></ul><h1 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h1><ul><li>目前适合个人开发者开发个人项目</li><li>两年内随着老款iOS设备的淘汰能够看到更多的 SwiftUI 应用</li><li>SwiftUI 与 Combine 的结合</li><li>苹果平台应用有跨端需求可以减少开发成本</li><li>开发体验上好于 Flutter、React Native</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://designcode.io/swiftui2-course">https://designcode.io/swiftui2-course</a></li><li><a href="https://www.raywenderlich.com/19611194-multiplatform-app-tutorial-swiftui-and-xcode-12">https://www.raywenderlich.com/19611194-multiplatform-app-tutorial-swiftui-and-xcode-12</a></li><li><a href="https://www.fivestars.blog/articles/custom-view-styles/">https://www.fivestars.blog/articles/custom-view-styles/</a></li><li><a href="https://objccn.io/products/functional-swift/">https://objccn.io/products/functional-swift/</a></li><li><a href="https://objccn.io/products/swift-ui">https://objccn.io/products/swift-ui</a></li><li><a href="https://www.fivestars.blog/articles/swiftui-hud/">https://www.fivestars.blog/articles/swiftui-hud/</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近使用 SwiftUI 完成了一部分项目的编写，我将完成项目时使用 SwiftUI 进行开发的体验做简单的总结。本文也同时发表于网易KM平台。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://stephefang.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Swift" scheme="https://stephefang.me/tags/Swift/"/>
    
    <category term="SwiftUI" scheme="https://stephefang.me/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>Effective Objective-C 总结</title>
    <link href="https://stephefang.me/2021/07/12/EffectiveObjcTips/"/>
    <id>https://stephefang.me/2021/07/12/EffectiveObjcTips/</id>
    <published>2021-07-12T03:34:32.000Z</published>
    <updated>2022-07-24T15:19:23.329Z</updated>
    
    <content type="html"><![CDATA[<p>准备开始写 Objective-C 之前花了一些时间重新阅读这本经典的《Effective Objective-C》，在阅读的过程中对重点内容进行了一些摘录，在方便自己复习的同时将相关内容在博客分享出来供参考。</p><span id="more"></span><h2 id="第一节"><a href="#第一节" class="headerlink" title="第一节"></a>第一节</h2><ul><li>Objective-C 采用了动态绑定的消息结构，在运行时检查对象的类型，运行期环境决定了接受消息后需要执行的代码。</li><li>Objective-C 对象所占内存分配在堆空间中，分配在堆空间中的内存必须直接管理。</li><li>定义中不含*的变量分配在栈空间上，分配在栈的用于保存变量的内存会在栈帧弹出时自动清理。</li><li>如果需要存储int、float、double、char等非对象类型推荐使用结构体。</li></ul><h2 id="第二节"><a href="#第二节" class="headerlink" title="第二节"></a>第二节</h2><ul><li>在 .h 文件中使用@class 标识需要引入的类并且在 .m 文件中引入相关头文件，该种方式被称为向前声明，简单的说，将引入头文件的时机尽量向后可以减短编译的时间，并且能够解决互相引用问题。尽量不要引入头文件，降低类之间的耦合。</li><li>有时无法使用向前声明，比如要声明某个类遵循一项协议。此时应尽量把“该类遵循某协议〞的这条声明移至“class-continuation 分类” 中。如果不行就把协议单独放在一个头文件中然后将其引人。</li></ul><h2 id="第三节"><a href="#第三节" class="headerlink" title="第三节"></a>第三节</h2><ul><li>尽量使用字面量语法创建字符串、数值、数组、字典</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSNumber</span> *intNumber = @<span class="number">1</span>;</span><br><span class="line"><span class="built_in">NSNumber</span> *floatNumber = @<span class="number">1.1</span>f;</span><br><span class="line"><span class="built_in">NSNumber</span> *doubleNumber = @<span class="number">1.123456</span>;</span><br><span class="line"><span class="built_in">NSNumber</span> *boolNumber = @YES;</span><br><span class="line"><span class="built_in">NSNumber</span> *charNumber = @<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> numberInt = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">float</span> numberFloat = <span class="number">1.23</span>f;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSArray</span> *animals = @[<span class="string">@&quot;cat&quot;</span>, <span class="string">@&quot;dog&quot;</span>, <span class="string">@&quot;mouse&quot;</span>];</span><br><span class="line"><span class="built_in">NSString</span> *dog = <span class="string">@&quot;shiba&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSDictionary</span> *personData = @&#123;<span class="string">@&quot;firstName&quot;</span> : <span class="string">@&quot;Stephen&quot;</span>,</span><br><span class="line"> <span class="string">@&quot;lastName&quot;</span> : <span class="string">@&quot;Fang&quot;</span>,</span><br><span class="line"> <span class="string">@&quot;gender&quot;</span> : <span class="string">@&quot;male&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li>NSArray 的 arrayWithObjects 方法依次处理各个参数直到发现nil，而如果使用字面量的方法在创建时就会抛出异常终止程序执行，需要确保创建的数组与字典中不含有nil</li><li>尽量使用取下标的方式来访问数组或字典中的元素</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *dog = animals[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">NSString</span> *lastName = personData[<span class="string">@&quot;lastName&quot;</span>];</span><br></pre></td></tr></table></figure><h2 id="第四节"><a href="#第四节" class="headerlink" title="第四节"></a>第四节</h2><ul><li>#define预处理指令声明全局变量尽量少用，编译器只会执行查找和替换操作，不会产生重复定义的警告信息</li><li>尽量使用 static const 声明的方式来完成变量的声明，static表示该变量在定义此变量的编译单元中可见，而static const不会创建符号，只是将变量替换为常量</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">NSTimeInterval</span> kAnimationDuration = <span class="number">0.3</span>;</span><br></pre></td></tr></table></figure><ul><li>编译器看到extern关键字得知全局符号表中包含该符号无需查看该定义就允许只用该常量，该类常量只可以定义一次，命名最好使用与之相关的类名作为前缀</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In the header file</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> EOCStringConstant;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In the implementation file </span></span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> EOCStringConstant = <span class="string">@&quot;DEMO&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="第五节"><a href="#第五节" class="headerlink" title="第五节"></a>第五节</h2><ul><li>保证枚举由底层数据类型实现，不采用编译器所选类型</li><li>凡是需要以按位或操作来组合的枚举都应使用NS_OPTIONS定义，若枚举不需要相互组合应使用NS_ENUM来定义</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, STFFeedPageType) &#123;</span><br><span class="line">    STFFeedPageTypeNone = <span class="number">0</span>,             <span class="comment">// 未知</span></span><br><span class="line">    STFFeedPageTypeFollow = <span class="number">1</span>,           <span class="comment">// 关注页</span></span><br><span class="line">    STFFeedPageTypeRecommend = <span class="number">2</span>,        <span class="comment">// 推荐页</span></span><br><span class="line">    STFFeedPageTypeFeatured = <span class="number">3</span>,         <span class="comment">// 精选页</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, AgoraAudioSessionOperationRestriction) &#123;</span><br><span class="line">    <span class="comment">/** No restriction, the SDK has full control of the audio session operations. */</span></span><br><span class="line">    AgoraAudioSessionOperationRestrictionNone              = <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/** The SDK does not change the audio session category. */</span></span><br><span class="line">    AgoraAudioSessionOperationRestrictionSetCategory       = <span class="number">1</span>,</span><br><span class="line">    <span class="comment">/** The SDK does not change any setting of the audio session (category, mode, categoryOptions). */</span></span><br><span class="line">    AgoraAudioSessionOperationRestrictionConfigureSession  = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">    <span class="comment">/** The SDK keeps the audio session active when leaving a channel. */</span></span><br><span class="line">    AgoraAudioSessionOperationRestrictionDeactivateSession = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">    <span class="comment">/** The SDK does not configure the audio session anymore. */</span></span><br><span class="line">    AgoraAudioSessionOperationRestrictionAll               = <span class="number">1</span> &lt;&lt; <span class="number">7</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>处理枚举类型的switch语句不要实现default分支</li></ul><h2 id="第六节"><a href="#第六节" class="headerlink" title="第六节"></a>第六节</h2><ul><li>在iOS中一般不使用atomic，因为同步锁会带来较大的开销，且无法保证线程安全</li><li>尽量使用@property语法定义对象封装的数据</li><li>在设置属性对应的实例变量时需要遵从属性声明的语义</li><li>针对CGFloat、NSInteger此类纯量类型采用assign声明即可</li><li>copy类型用于保护NSString*类型的封装性，在ARC下直接访问一个声明为copy的属性并不会直接拷贝而是保留新值释放旧值</li></ul><h2 id="第七节"><a href="#第七节" class="headerlink" title="第七节"></a>第七节</h2><ul><li>在对象内部尽量直接访问实例变量<ul><li>速度更快且生成的代码会直接访问对象实例变量的那块内存</li><li>不会调用“设置方法”</li><li>不会触发KVO，但需要确定是否会产生问题</li><li>通过给getter、setter设置断点可以进行监控和确定访问时机</li></ul></li><li>在写入实例变量时可以通过属性写入，读取实例变量时直接访问，可以作为一种折中方案</li><li>在初始化方法及dealloc方法中，应该直接通过实例变量读取数据，即_</li><li>懒加载方式中必须使用getter的方式访问属性，如果在没有用getter的情况下直接访问实例变量会导致得到是尚未设置好的变量</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (STFComponent*)component &#123;</span><br><span class="line"><span class="keyword">if</span> (!_component) &#123;</span><br><span class="line">_component = [SFComponent new];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _component;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第八节"><a href="#第八节" class="headerlink" title="第八节"></a>第八节</h2><ul><li>== 操作符对比的是两个指针本身并非所指对象</li><li>NSString类实现了一个等同判断方法即isEqualToString，执行该方法的速度快于执行isEqual</li><li>检测对象的等同性需要提供 isEqual 与 hash 方法，NSObject对于两个方法默认实现是仅当指针值完全相等才返回相等，需要针对具体的需求制定检测方案</li><li>编写hash方法时需要使用计算速度快且哈希碰撞低的算法</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- （<span class="built_in">BOOL</span>）isEqual:(<span class="keyword">id</span>)object &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">self</span> == object) <span class="keyword">return</span> <span class="literal">YES</span>; <span class="comment">// 指向同一个对象必然相等</span></span><br><span class="line"><span class="keyword">if</span> ([<span class="keyword">self</span> <span class="keyword">class</span>] != [object <span class="keyword">class</span>]) <span class="keyword">return</span> <span class="literal">NO</span>; <span class="comment">//不属于同一个类不相等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测每一个属性是否相等</span></span><br><span class="line">STFPerson *someone = (STFPerson*) object;</span><br><span class="line"><span class="keyword">if</span> (![_firstName isEqualToString:someone.firstName])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line"><span class="keyword">if</span> (![_lastName isEqualToString:someone.lastName])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line"><span class="keyword">if</span> (![_age != someone.age])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> - (<span class="built_in">NSUInteger</span>)hash &#123;</span><br><span class="line"><span class="built_in">NSUInteger</span> firstNameHash = [_firstName hash]；</span><br><span class="line"><span class="built_in">NSUInteger</span> lastNameHash = [_lastName hash]；</span><br><span class="line"><span class="built_in">NSUInteger</span> ageHash = [_ageHash hash]；</span><br><span class="line"><span class="keyword">return</span> firstNameHash ^ lastNameHash ^ ageHash；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>NSArray有等同性判定方法”isEqualToArray:”，而NSDictionary有等同性判定方法”isEqualToDictionary:”， NSArray检测方式为首先核对两个数组包含对象的个数是否相等，若相等在每个对应位置调用”isEqual:”方法</li><li>在编写判定方法时应一并覆写”isEqual:”方法，如果接收该消息的对象与受测参数来自一个类就调用自己编写的判定方法，负责交由超类判定</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-  (<span class="built_in">BOOL</span>)isEqual:(<span class="keyword">id</span>)object &#123;</span><br><span class="line"><span class="keyword">if</span> ([<span class="keyword">self</span> <span class="keyword">class</span>] == [object <span class="keyword">class</span>]) </span><br><span class="line"><span class="keyword">return</span> [<span class="keyword">self</span> isEqualToPerson:(STFPerson*)object];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> [<span class="keyword">super</span> isEqual: object];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第九节"><a href="#第九节" class="headerlink" title="第九节"></a>第九节</h2><ul><li>UIButton类使用者无需关系创建出来的按钮属于哪个子类也无需考虑按钮绘制方式等细节</li><li>类族的使用需要遵循以下原则<ul><li>子类应该继承自类族的抽象基类</li><li>子类应该定义自己的数据存储方式</li><li>子类应该覆写超类文档中需要覆写的方法</li></ul></li></ul><h2 id="第十节"><a href="#第十节" class="headerlink" title="第十节"></a>第十节</h2><ul><li>在其他做法不可行的条件下可以选用关联对象，因为这种做法同样会引入难以查找的bug（不建议使用）</li></ul><h2 id="第十一节"><a href="#第十一节" class="headerlink" title="第十一节"></a>第十一节</h2><ul><li>在编译期就能决定运行时所需要调用的函数为静态绑定，而所需要调用的函数直到运行期才能确定为动态绑定</li><li>runtime决定了对象收到消息后调用哪个方法，甚至在程序运行时可以改变。发送给对象的所有消息都由动态信息派发系统处理</li><li>objc_msgSend函数根据receive和selector的类型调用适当的方法，通过查找每个类中的“表格”查找需要执行的方法并跳转至相应的实现</li><li>尾调用优化在函数的最后一项是调用另一个函数时生效，编译器生成跳转至另一个函数所需的指令码</li></ul><h2 id="第十二节"><a href="#第十二节" class="headerlink" title="第十二节"></a>第十二节</h2><ul><li><p>消息转发分为两个阶段</p><ul><li>第一阶段：动态方法解析</li><li>第二阶段：消息转发机制</li></ul><p>  <img src="http://image.stephenfang.me/mweb/Untitled.png"></p></li><li><p>receiver在每一步都有机会处理消息且步骤越往后处理消息的代价越大</p></li><li><p>如果对象没有办法响应某个selector则进入消息转发流程,runtime的动态方法解析可以在需要某个方法时将其加入类中，对象可以将无法解析的selector转交给其他对象处理。这一步结束后若仍然无法处理selector则启动消息转发机制</p></li></ul><h2 id="第十三节"><a href="#第十三节" class="headerlink" title="第十三节"></a>第十三节</h2><ul><li>在runtime中可以向类中新增或替换selector对应的方法实现，但一般只用于调试</li><li>method swizzling，即使用另一份实现替换原有的方法实现，可以用于向原有的实现中添加新功能</li></ul><h2 id="第十四节"><a href="#第十四节" class="headerlink" title="第十四节"></a>第十四节</h2><ul><li>每个Objective-C对象实例都有指向Class对象的指针，每个对象结构体的首个成员是Class类的变量，该变量定义了对象所属的类，通常称为”is a”指针</li><li>isMemberOfClass 判断对象是否为某个特定类的实例，isKindOfClass 判断对象是否是某类或派生类的实例</li><li>动态类型特性可以用于从 collection 中获取对象（类型信息查询方法）</li><li>假设名为SomeClass的子类继承自NSObject可以得到以下继承体系</li></ul><p><img src="http://image.stephenfang.me/mweb/Untitled1.png"></p><h2 id="第十五节"><a href="#第十五节" class="headerlink" title="第十五节"></a>第十五节</h2><ul><li>类名、分类名都应该加上相应的前缀，如果使用三方库编写自己的代码并分发尤其需要注意重复符号问题</li></ul><p><img src="http://image.stephenfang.me/mweb/Untitled2.png"></p><h2 id="第十六节"><a href="#第十六节" class="headerlink" title="第十六节"></a>第十六节</h2><ul><li>在类中实现一个designated initializer，尽量在文档中指明初始化需要调用该方法</li><li>若designated initializer不同于超类则需覆写超类对应方法</li><li>如果超类的初始化方法不适用于子类应覆写超类方法并抛出异常</li></ul><h2 id="第十七节"><a href="#第十七节" class="headerlink" title="第十七节"></a>第十七节</h2><ul><li>实现description方法能够返回一个有意义的字符串来描述实例，需要打印出类的名字和指针地址因为有时候会用到</li><li>使用NSDictionary来编写description方法使代码更容易维护</li></ul><p><img src="http://image.stephenfang.me/mweb/Untitled3.png"></p><ul><li>在调试时打印更为详尽的对象描述信息应实现debugDescription方法</li></ul><p><img src="http://image.stephenfang.me/mweb/Untitled4.png"></p><h2 id="第十八节"><a href="#第十八节" class="headerlink" title="第十八节"></a>第十八节</h2><ul><li>尽量创建不可变对象，把对外公开的属性设置为只读且在必要时对外公布属性</li><li>某属性仅用于对象内部修改应将其从readonly改为readwrite属性</li><li>可变的collection不应作为属性公开，而应提供相关方法修改可变的collection</li></ul><h2 id="第十九节"><a href="#第十九节" class="headerlink" title="第十九节"></a>第十九节</h2><p>如果从其他框架中继承子类务必遵循命名惯例，如从UIView中继承自定义子类则类名末尾词为View，若创建自定义委托协议末尾应跟上Delegate一词。</p><p><img src="http://image.stephenfang.me/mweb/Untitled5.png"></p><h2 id="第二十节"><a href="#第二十节" class="headerlink" title="第二十节"></a>第二十节</h2><ul><li>适当给私有方法加上前缀可以很容易将其与公共方法进行区分</li><li>不应使用一个下划线做私有方法的前缀，如 _resetViewController 方法已经被苹果实现</li></ul><h2 id="第二十一节"><a href="#第二十一节" class="headerlink" title="第二十一节"></a>第二十一节</h2><ul><li>Objective-C对于异常采取的态度为：只有在极为罕见的情况下才抛出异常，并在异常抛出后无需考虑恢复问题，应用程序此时应该退出。异常应该运用于极其严重的问题</li></ul><p><img src="http://image.stephenfang.me/mweb/Untitled6.png"></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)doSomething:(<span class="built_in">NSError</span>**) error</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)doSomething:(<span class="built_in">NSError</span>**) error &#123;</span><br><span class="line"><span class="comment">// do something that may cause an error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( <span class="comment">/* there was an error */</span> ) &#123;</span><br><span class="line"><span class="keyword">if</span> (error) &#123;</span><br><span class="line">*error = [<span class="built_in">NSErrorerrorwithDomain</span>:domain code:code userInfo:userInfo];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line"><span class="built_in">BOOL</span> ret = [object doSomething: &amp;error];</span><br><span class="line"><span class="keyword">if</span> (ret) &#123;</span><br><span class="line">     <span class="comment">// handle error </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.stephenfang.me/mweb/Untitled7.png"></p><p>传递给方法的是个指针，指针本身指向另一个指向NSError对象的指针，或认为其为一个直接指向NSError对象的指针。在 ARC 中，指针所指向的对象会在方法执行完毕后自动释放。</p><h2 id="第二十二节"><a href="#第二十二节" class="headerlink" title="第二十二节"></a>第二十二节</h2><ul><li>使自己的类支持拷贝操作需要实现NSCopying协议，该协议只有一个方法且不必担心zone参数。覆写copy方法真正需要实现的是copyWithZone方法。</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)copyWithZone:(<span class="built_in">NSZone</span>*)zone</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)copyWithZone:(<span class="built_in">NSZone</span>*)zone &#123;</span><br><span class="line">STFPerson *<span class="keyword">copy</span> = [[<span class="keyword">self</span> <span class="keyword">class</span>] allocWithZone:zone]initWithFirstName:_firstName andLastName:_lastName];</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">copy</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在可变对象上调用copy会返回一个不可变类的实例，可能会把NSMutableArray对象当作NSArray返回，为了安全起见使用copy和mutableCopy这两个方法复制对象</p></li><li><p>深拷贝与浅拷贝</p><ul><li>深拷贝：拷贝对象自身时一并拷贝其底层数据，需要新增一个专门执行深拷贝的方法</li><li>浅拷贝：只拷贝容器对象本身不拷贝其中数据；Foundation框架所有collection类执行拷贝的默认情况；实现copyWithZone方法</li><li>图解：</li></ul><p> <img src="http://image.stephenfang.me/mweb/Untitled8.png"></p></li></ul><h2 id="第二十三节"><a href="#第二十三节" class="headerlink" title="第二十三节"></a>第二十三节</h2><p>   <img src="http://image.stephenfang.me/mweb/Untitled9.png"></p><p>   <img src="http://image.stephenfang.me/mweb/Untitled10.png"></p><p>   <img src="http://image.stephenfang.me/mweb/Untitled11.png"></p><p>   <img src="http://image.stephenfang.me/mweb/Untitled12.png"></p><p>   <img src="http://image.stephenfang.me/mweb/Untitled13.png"></p><p>   <img src="http://image.stephenfang.me/mweb/Untitled14.png"></p><p>存放委托对象的属性需要为weak（在对象销毁时自动清空）或unsafe_unretained（不需要自动清空）。</p><p>   <img src="http://image.stephenfang.me/mweb/Untitled15.png"></p><p>   <img src="http://image.stephenfang.me/mweb/Untitled16.png"></p><p>   <img src="http://image.stephenfang.me/mweb/Untitled17.png"></p><ul><li>某个对象从另一个对象获取数据可以使用委托模式，亦成为数据源模式，数据的流动如上图所示</li><li>如果有必要可以实现有段位的结构体将委托对象是否能响应相关协议的信息缓存至其中</li></ul><h2 id="第二十四条"><a href="#第二十四条" class="headerlink" title="第二十四条"></a>第二十四条</h2><ul><li><p>通过分类机制将代码划分为易于管理的小块</p><p> <img src="http://image.stephenfang.me/mweb/Untitled18.png"></p><p> <img src="http://image.stephenfang.me/mweb/Untitled19.png"></p><p> <img src="http://image.stephenfang.me/mweb/Untitled20.png"></p><p> <img src="http://image.stephenfang.me/mweb/Untitled21.png"></p></li><li><p>可以创建名为Private的分类并将私有方法放在里面，这个分类的方法只在类和框架内部使用无需对外公布</p></li></ul><h2 id="第二十五条"><a href="#第二十五条" class="headerlink" title="第二十五条"></a>第二十五条</h2><ul><li><p>向第三方类中添加分类时给分类名与方法名加上前缀</p><p> <img src="http://image.stephenfang.me/mweb/Untitled22.png"></p></li></ul><h2 id="第二十六条"><a href="#第二十六条" class="headerlink" title="第二十六条"></a>第二十六条</h2><ul><li><p>在实现分类时所有属性都应该定义在主接口内，类所封装的所有数据都应该定义在主接口内</p><p> <img src="http://image.stephenfang.me/mweb/Untitled23.png"></p></li></ul><h2 id="第二十七条"><a href="#第二十七条" class="headerlink" title="第二十七条"></a>第二十七条</h2><ul><li><p>class-continuation 分类中可以定义方法和实例变量，如下方式中_anotherInstanceVariable 是隐藏的状态</p>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">STFPerson</span>() </span>&#123;</span><br><span class="line"><span class="built_in">NSString</span> *_anInstanceVariable;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Methods declaration</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">STFPerson</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> _anotherInstanceVariable;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Methods implementation </span></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p> <img src="http://image.stephenfang.me/mweb/Untitled24.png"></p></li><li><p>WebKit、CoreAnimation 底层大部分代码用C++编写，对外展示的为Objective-C接口</p><p> <img src="http://image.stephenfang.me/mweb/Untitled25.png"></p></li><li><p>上图方式可以随意调用setFirstName与setLastName方法与点语法设置属性，同时外界无法修改对象，完成了类型的拓展</p><p> <img src="http://image.stephenfang.me/mweb/Untitled26.png"></p><ul><li>不需要在公共接口中声明类遵从了私有协议，而应该改到 class-continuation 分类内进行声明</li></ul></li></ul><h2 id="第二十八条"><a href="#第二十八条" class="headerlink" title="第二十八条"></a>第二十八条</h2><ul><li><p>协议可以在某种程度上提供匿名类型，具体的对象类型淡化成为遵从某个协议的id类型，协议离规定对象应该实现的方法。下图中与数据库连接相关的类名称就无法泄漏</p><p>  <img src="http://image.stephenfang.me/mweb/Untitled27.png"></p></li><li><p>使用匿名对象实现类型名称的隐藏，需要注意的是对象需要能够响应定义在协议中的方法</p></li><li><p>下图中其中sectionInfo为匿名对象，把section数组中返回的内部状态对象视为遵从NSFetchedResultsSectionInfo的匿名对象，隐藏了相关实现细节。</p><p>  <img src="http://image.stephenfang.me/mweb/Untitled28.png"></p></li></ul><h2 id="第二十九条"><a href="#第二十九条" class="headerlink" title="第二十九条"></a>第二十九条</h2><ul><li><p>对象创建完成后引用计数至少为1，如果需要保留该对象需要调用retain方法，如果不再需要该对象则调用release、autorelease方法，当引用计数归零时对象被回收</p><p>  <img src="http://image.stephenfang.me/mweb/Untitled29.png"></p></li><li><p>为了避免使用无效对象一般在完成调用release之后清空指针，保证不会出现指向无效对象的指针</p>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSNumber</span> *number = [[<span class="built_in">NSNumber</span> alloc]initWithInt: <span class="number">1234</span>];</span><br><span class="line">[array addObject: number];</span><br><span class="line">[number release];</span><br><span class="line">number = <span class="literal">nil</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="第三十条"><a href="#第三十条" class="headerlink" title="第三十条"></a>第三十条</h2><ul><li>ARC会自动执行retain、release、autorelease等操作，不能直接对这些方法（还包括dealloc）进行调用</li><li>ARC在调用这些方法并不通过Objective-C消息派发机制，而是直接调用底层C语言版本，能够带来更好的性能</li><li>若方法名以以下的几个四个词语开头则表示返回的对象归调用者所有，反之返回的对象会自动释放<ul><li>copy</li><li>mutableCopy</li><li>new</li><li>alloc</li></ul></li></ul><h2 id="第三十一条"><a href="#第三十一条" class="headerlink" title="第三十一条"></a>第三十一条</h2><p>   <img src="http://image.stephenfang.me/mweb/Untitled30.png"></p><ul><li>如果对象持有文件描述符等系统资源，应该专门写一个方法释放此类资源，用完使用close方法</li><li>执行异步任务的方法和只能在正常状态下执行的方法不应在dealloc中调用</li></ul><h2 id="第三十二条"><a href="#第三十二条" class="headerlink" title="第三十二条"></a>第三十二条</h2><ul><li><p>ARC不生成安全处理异常所需的清理代码，开启编译器标志后可以生成这种代码但是会导致应用程序变大，且会降低运行效率</p><p> <img src="http://image.stephenfang.me/mweb/Untitled31.png"></p></li></ul><h2 id="第三十三条"><a href="#第三十三条" class="headerlink" title="第三十三条"></a>第三十三条</h2><ul><li><p>当指向EOCClassA的实例引用移除后unsafe_unretained属性仍然指向已经回收的实例，而weak属性指向nil</p><p>  <img src="http://image.stephenfang.me/mweb/Untitled32.png"></p></li></ul><h2 id="第三十四条"><a href="#第三十四条" class="headerlink" title="第三十四条"></a>第三十四条</h2><p>系统会自动创建一些线程，如主线程或GCD机制中的线程都有自动释放池，这些线程都有autoreleasepool，每次执行event loop就会将其清空</p><p>   <img src="http://image.stephenfang.me/mweb/Untitled33.png"></p><p>   <img src="http://image.stephenfang.me/mweb/Untitled34.png"></p><h2 id="第三十五条"><a href="#第三十五条" class="headerlink" title="第三十五条"></a>第三十五条</h2><ul><li>系统在回收对象时可以将其转化为僵尸对象，通过环境变量NSZombieEnabled可以开启该功能，或在Xcode中开启</li></ul><p><img src="http://image.stephenfang.me/mweb/Untitled35.png"></p><ul><li>系统修改对象的isa指针指向特殊的僵尸类可以时该对象成为僵尸对鲜花，僵尸类能够响应所有的selector，在打印一条包含消息内容及接受者的消息后终止应用程序</li></ul><h2 id="第三十六条"><a href="#第三十六条" class="headerlink" title="第三十六条"></a>第三十六条</h2><p>在 ARC 下调用查询对象当前引用计数的方法会触发崩溃</p><pre><code><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSUInteger</span>)retainCount</span><br></pre></td></tr></table></figure></code></pre><p>事实上该方法不应该调用，方法返回的retainCount是某个给定时间点上的数值，并未考虑系统会稍后清空自动释放池，无法反应对象生命期的全貌。</p><h2 id="第三十七条"><a href="#第三十七条" class="headerlink" title="第三十七条"></a>第三十七条</h2><ul><li><p>Block与定义它的函数共享同一个范围内的信息，块自有其相关类型，可以将块赋值给变量并使用它</p>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> (^someBlock) () = ^ &#123;</span><br><span class="line"><span class="comment">// Block implementation</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> other = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> (^addBlock) (<span class="keyword">int</span> a, <span class="keyword">int</span> b) = ^ (<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line"><span class="keyword">return</span> other + a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> sum = addBlock(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><ul><li>需要在Block内修改的变量需要加上 _block 修饰符，如果将块定义在Objective-C类的实例方法中，除了可以访问类的所有的实例变量外还可以使用self变量且无需添加_block。</li><li>定义Block的时候分配的内存区域在栈上，即块只在定义的范围内有效，可以创建不会捕捉任何状态的全局块</li></ul></li></ul><p><img src="http://image.stephenfang.me/mweb/Untitled36.png"></p><p><img src="http://image.stephenfang.me/mweb/Untitled37.png"></p><h2 id="第三十八条"><a href="#第三十八条" class="headerlink" title="第三十八条"></a>第三十八条</h2><p><img src="http://image.stephenfang.me/mweb/Untitled38.png"></p><ul><li><p>以下展示了SDWebImage中Block的写法</p>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^SDWebImageDownloaderProgressBlock)(<span class="built_in">NSUInteger</span> receivedSize, <span class="keyword">long</span> <span class="keyword">long</span> expectedSize);</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^SDWebImageDownloaderCompletedBlock)(<span class="built_in">UIImage</span> *image, <span class="built_in">NSData</span> *data, <span class="built_in">NSError</span> *error, <span class="built_in">BOOL</span> finished);</span><br><span class="line"></span><br><span class="line">****- (<span class="keyword">void</span>)setImageWithURL:(<span class="built_in">NSURL</span> *)url placeholderImage:(<span class="built_in">UIImage</span> *)placeholder options:(SDWebImageOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageCompletedBlock)completedBlock;</span><br><span class="line">- (<span class="keyword">id</span>&lt;SDWebImageOperation&gt;)downloadImageWithURL:(<span class="built_in">NSURL</span> *)url</span><br><span class="line">                                        options:(SDWebImageDownloaderOptions)options</span><br><span class="line">                                       progress:(SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class="line">                                      completed:(SDWebImageDownloaderCompletedBlock)completedBlock;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>&lt;SDWebImageOperation&gt;)downloadImageWithURL:(<span class="built_in">NSURL</span> *)url</span><br><span class="line">                                timeOutInterval:(<span class="built_in">NSTimeInterval</span>)timeOutInterval</span><br><span class="line">                                        options:(SDWebImageDownloaderOptions)options</span><br><span class="line">                                       progress:(SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class="line">                                      completed:(SDWebImageDownloaderCompletedBlock)completedBlock;</span><br></pre></td></tr></table></figure></li></ul><h2 id="第三十九条"><a href="#第三十九条" class="headerlink" title="第三十九条"></a>第三十九条</h2><ul><li><p>简洁程度上Delegate与Block的对比</p><p> <img src="http://image.stephenfang.me/mweb/Untitled39.png"></p><p> <img src="http://image.stephenfang.me/mweb/Untitled40.png"></p></li><li><p>处理多个请求时Delegate与Block的对比</p><p> <img src="http://image.stephenfang.me/mweb/Untitled41.png"></p><p> <img src="http://image.stephenfang.me/mweb/Untitled42.png"></p><p> <img src="http://image.stephenfang.me/mweb/Untitled43.png"></p><p> <img src="http://image.stephenfang.me/mweb/Untitled44.png"></p></li><li><p>在处理请求时采用两个独立的处理Block（1/2）</p><p> <img src="http://image.stephenfang.me/mweb/Untitled45.png"></p><p> <img src="http://image.stephenfang.me/mweb/Untitled46.png"></p><p> <img src="http://image.stephenfang.me/mweb/Untitled47.png"></p></li><li><p>在处理请求时采用同一个处理Block，令Block更为灵活但更为冗长</p><p> <img src="http://image.stephenfang.me/mweb/Untitled48.png"></p><p> <img src="http://image.stephenfang.me/mweb/Untitled49.png"></p></li></ul><h2 id="第四十条"><a href="#第四十条" class="headerlink" title="第四十条"></a>第四十条</h2><p>大部分网络通信库写法</p><p>   <img src="http://image.stephenfang.me/mweb/Untitled50.png"></p><p>为了使得在下载完成后通过以下方法执行调用者指定的Block，需要将completion handler保存至实例变量，一旦运行完completion handler之后没有必要对其进行保留，从而避免出现retain cycle</p><p>   <img src="http://image.stephenfang.me/mweb/Untitled51.png"></p><p>   <img src="http://image.stephenfang.me/mweb/Untitled52.png"></p><h2 id="第四十一条"><a href="#第四十一条" class="headerlink" title="第四十一条"></a>第四十一条</h2><ul><li><p>串行队列，将读取操作与写入操作安排到同个队列中保证数据同步，可以将设置方法由同步派发改为异步执派发</p><p> <img src="http://image.stephenfang.me/mweb/Untitled53.png"></p><p> <img src="http://image.stephenfang.me/mweb/Untitled54.png"></p><ul><li>并发队列，读取与写入操作可以随时执行</li></ul><p> <img src="http://image.stephenfang.me/mweb/Untitled55.png"></p><p>  创建栅栏使得barrier块单独执行不与其他Block并行，对并发队列有意义，因为串行Block按顺序逐个执行</p><p> <img src="http://image.stephenfang.me/mweb/Untitled56.png"></p><p> <img src="http://image.stephenfang.me/mweb/Untitled57.png"></p><p> <img src="http://image.stephenfang.me/mweb/Untitled58.png"></p></li></ul><h2 id="第四十二条"><a href="#第四十二条" class="headerlink" title="第四十二条"></a>第四十二条</h2><ul><li><p>performSelector接受的参数类型为id，限定了传入参数必须是对象，不能是整数或者浮点数，并且最多只能接受两个参数</p><p> <img src="http://image.stephenfang.me/mweb/Untitled59.png"></p></li><li><p>延后执行某项任务，优先使用GCD的方式</p><p> <img src="http://image.stephenfang.me/mweb/Untitled60.png"></p></li><li><p>把任务放到主线程上执行，把任务封装至Block中用GCD相关方法更为合适</p><p> <img src="http://image.stephenfang.me/mweb/Untitled61.png"></p></li><li><p>performSelector在内存管理方面存在缺失，无法确定将执行的Selector具体是什么</p></li></ul><h2 id="第四十三条"><a href="#第四十三条" class="headerlink" title="第四十三条"></a>第四十三条</h2><ul><li><p>GCD是纯C的API，操作队列是Objective-C的对象</p></li><li><p>Block是轻量级的书籍结构而Operation是重量级的Objective-C对象</p></li><li><p>在执行后台任务时GCD并不一定是最佳方式</p></li><li><p>使用NSOperation与NSOperationQueue有以下好处，能够实现纯GCD具备的绝大部分功能</p><p> <img src="http://image.stephenfang.me/mweb/Untitled62.png"></p><p> <img src="http://image.stephenfang.me/mweb/Untitled63.png"></p><p> <img src="http://image.stephenfang.me/mweb/Untitled64.png"></p></li><li><p>NSNotificationCenter 的 addObserverForName: 方法接受的参数是块而不是Selector</p><p> <img src="http://image.stephenfang.me/mweb/Untitled65.png"></p></li><li><p>确定哪一种方法的最好方式是测试性能</p><h2 id="第四十四条"><a href="#第四十四条" class="headerlink" title="第四十四条"></a>第四十四条</h2></li><li><p>dispatch group 能够将任务分组，调用者可以等待这组任务执行完毕同时也可以在提供回调函数之后继续执行</p></li><li><p>如下函数是dispatch_async的变体</p></li></ul><p><img src="http://image.stephenfang.me/mweb/Untitled66.png"></p><ul><li>如下函数用于等待 dispatch group 执行完毕，timeout 参数表示阻塞时间，若执行时间短于timeout返回0</li></ul><p><img src="http://image.stephenfang.me/mweb/Untitled67.png"></p><ul><li>如下函数中可以传入在特定线程上执行的Block</li></ul><p><img src="http://image.stephenfang.me/mweb/Untitled68.png"></p><ul><li>令数组每个对象都执行某个任务，并且等待每个任务都执行完毕可以使用如下GCD特性</li></ul><p><img src="http://image.stephenfang.me/mweb/Untitled69.png"></p><ul><li>若当前线程不阻塞可以使用notify函数取代wait</li></ul><p><img src="http://image.stephenfang.me/mweb/Untitled70.png"></p><ul><li>区分任务的优先级放置于不同的线程执行，同时将所有任务归于一个dispatch group，并且在执行完毕后获得通知（并发队列）</li></ul><p><img src="http://image.stephenfang.me/mweb/Untitled71.png"></p><ul><li>将任务提交到串行队列中并用dispatch group 跟踪执行情况</li></ul><p><img src="http://image.stephenfang.me/mweb/Untitled72.png"></p><p><img src="http://image.stephenfang.me/mweb/Untitled73.png"></p><h2 id="第四十五条"><a href="#第四十五条" class="headerlink" title="第四十五条"></a>第四十五条</h2><ul><li><p>常用的一种共享单例的方法</p><p> <img src="http://image.stephenfang.me/mweb/Untitled74.png"></p></li><li><p>使用GCD实现共享单例的方法</p><p> <img src="http://image.stephenfang.me/mweb/Untitled75.png"></p></li><li><p>使用 dispatch_once 能够简化代码并且彻底保证线程安全开发者无需关心加锁或同步，所有问题都由GCD在底层进行处理，static 作用域能够保证编译器在每次执行该方法时复用该变量而不是重复创建</p></li></ul><h2 id="第四十六条"><a href="#第四十六条" class="headerlink" title="第四十六条"></a>第四十六条</h2><ul><li>dispatch_get_current_queue 函数尽量不要使用</li></ul><h2 id="第四十七条"><a href="#第四十七条" class="headerlink" title="第四十七条"></a>第四十七条</h2><ul><li><p>框架指一系列代码被封装为动态库，并且在其中放入描述接口的头文件，iOS平台的系统框架仍然采用了动态库</p></li><li><p>iOS应用程序不允许在其中包含动态库于是就出现了静态库</p></li><li><p>关于静态库与动态库的了解可以参考 <a href="https://juejin.cn/post/6844904031937101838">细说iOS静态库和动态库</a></p></li><li><p>Cocoa 本身并不是框架而是集成了一批创建应用程序时需要用到的框架</p></li><li><p>Objective-C编程的一个重要特点是经常需要用到底层的C语言级API</p></li><li><p>CoreAnimation 使用Objective-C进行编写，而 CoreGraphics 框架采用C语言进行编写，两者均为 UI 框架之下的一等框架</p></li></ul><h2 id="第四十八条"><a href="#第四十八条" class="headerlink" title="第四十八条"></a>第四十八条</h2><ul><li><p>遍历方式</p><ul><li>for循环</li></ul><p> <img src="http://image.stephenfang.me/mweb/Untitled76.png"></p><p>  字典与 set 均无顺序，无法根据下标访问数值。于是需要获取字典内所有键或 set 内所有对象，从而产生空间上的额外开销。然而执行反向遍历时 for 循环会更为方便。</p><ul><li>NSEnumerator</li></ul>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dictionary</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *dict = <span class="comment">/* ... */</span>;</span><br><span class="line"><span class="built_in">NSEnumerator</span> *enumerator = [dict keyEnumerator];</span><br><span class="line"><span class="keyword">id</span> key;</span><br><span class="line"><span class="keyword">while</span> ((key = [enumerator nextObject]) != <span class="literal">nil</span>) &#123;</span><br><span class="line"><span class="keyword">id</span> value = dict[key];</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set</span></span><br><span class="line"><span class="built_in">NSSet</span> *set = <span class="comment">/* ... */</span>;</span><br><span class="line"><span class="built_in">NSEnumerator</span> *enumerator = [set objectEnumerator];</span><br><span class="line"><span class="keyword">id</span> object;</span><br><span class="line"><span class="keyword">while</span> ((object = [enumerator nextObject]) != <span class="literal">nil</span>) &#123;</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array</span></span><br><span class="line"><span class="built_in">NSArray</span> *array = <span class="comment">/* ... */</span>;</span><br><span class="line"><span class="built_in">NSEnumerator</span> *enumerator = [array reverseObjectEnumerator];</span><br><span class="line"><span class="keyword">id</span> object;</span><br><span class="line"><span class="keyword">while</span> ((object = [enumerator nextObject]) != <span class="literal">nil</span>) &#123;</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  对于所有的collection都可以采用这套语法，在读法上更容易被理解</p><ul><li>for in 快速遍历</li></ul>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dictionary</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *dict = <span class="comment">/* ... */</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">id</span> key <span class="keyword">in</span> dict) &#123;</span><br><span class="line"><span class="keyword">id</span> value = dict[key];</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set</span></span><br><span class="line"><span class="built_in">NSSet</span> *set = <span class="comment">/* ... */</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">id</span> object <span class="keyword">in</span> set) &#123;</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array</span></span><br><span class="line"><span class="built_in">NSArray</span> *array = <span class="comment">/* ... */</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">id</span> object <span class="keyword">in</span> array) &#123;</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">id</span> object <span class="keyword">in</span> [array reverseObjectEnumerator]) &#123;</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  某个支持快速遍历的类的对象遵从 NSFastEnumeration 协议可以实现对象的迭代，而NSEnumerator 也实现了该协议，该遍历方法无法获取遍历操作针对的下标。</p><ul><li>基于Block的遍历</li></ul>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dictionary</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *dict = <span class="comment">/* ... */</span>;</span><br><span class="line">[array enumerateKeysAndObjectsUsingBlock:</span><br><span class="line">^(<span class="keyword">id</span> key, <span class="keyword">id</span> object, <span class="built_in">BOOL</span> *stop) &#123;</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line"><span class="keyword">if</span> (shouldStopHere) &#123;</span><br><span class="line">*stop = <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set</span></span><br><span class="line"><span class="built_in">NSSet</span> *set = <span class="comment">/* ... */</span>;</span><br><span class="line">[array enumerateObjectsUsingBlock:</span><br><span class="line">^(<span class="keyword">id</span> object, <span class="built_in">BOOL</span> *stop) &#123;</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line"><span class="keyword">if</span> (shouldStopHere) &#123;</span><br><span class="line">*stop = <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array</span></span><br><span class="line"><span class="built_in">NSArray</span> *array = <span class="comment">/* ... */</span>;</span><br><span class="line">[array enumerateObjectsUsingBlock:</span><br><span class="line">^(<span class="keyword">id</span> object, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> *stop) &#123;</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line"><span class="keyword">if</span> (shouldStopHere) &#123;</span><br><span class="line">*stop = <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>  使得遍历能够从Block中获取信息，并且可以在遍历数组获取数组的下标。</p><p>  NSEnumerationOptions 类型为enum，如果开启了NSEnumerationConcurrent 底层会使用GCD处理出发执行事宜，采用其他方法很难实现。</p></li></ul><h2 id="第四十九条"><a href="#第四十九条" class="headerlink" title="第四十九条"></a>第四十九条</h2><ul><li><p>使用桥接技术可以实现定义在Foundation框架内的Objective-C类与CoreFoundation 框架中的 C 数据结构的相互转换</p>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *anNSArray = @[@<span class="number">1</span>, @<span class="number">2</span>, @<span class="number">3</span>, @<span class="number">4</span>, @<span class="number">5</span>];</span><br><span class="line"><span class="built_in">CFArrayRef</span> *aCGArray = (__bridge <span class="built_in">CFArrayRef</span>)anNSArray;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;size of array = %li&quot;</span>, <span class="built_in">CFArrayGetCount</span>(aCFArray)); </span><br><span class="line"></span><br><span class="line">gradientLayer.colors = @[(__bridge <span class="keyword">id</span>)[<span class="built_in">UIColor</span> ne_colorWithHexString:<span class="string">@&quot;000000&quot;</span> alpha:<span class="number">0.95</span>].CGColor,</span><br><span class="line">                                            (__bridge <span class="keyword">id</span>)[<span class="built_in">UIColor</span> ne_colorWithHexString:<span class="string">@&quot;000000&quot;</span> alpha:<span class="number">0.95</span>].CGColor,</span><br><span class="line">                                            (__bridge <span class="keyword">id</span>)[<span class="built_in">UIColor</span> ne_colorWithHexString:<span class="string">@&quot;000000&quot;</span> alpha:<span class="number">0.72</span>].CGColor,</span><br><span class="line">                                            (__bridge <span class="keyword">id</span>)[<span class="built_in">UIColor</span> ne_colorWithHexString:<span class="string">@&quot;000000&quot;</span> alpha:<span class="number">0.45</span>].CGColor,</span><br><span class="line">                                            (__bridge <span class="keyword">id</span>)[<span class="built_in">UIColor</span> ne_colorWithHexString:<span class="string">@&quot;000000&quot;</span> alpha:<span class="number">0.28</span>].CGColor,</span><br><span class="line">                                            ]; </span><br></pre></td></tr></table></figure></li><li><p>__bridge 含义为ARC具备该对象的所有权，__bridge_retained表示ARC交出该对象的所有权， 通过__bridge告诉ARC如何处理转换涉及的Objective-C对象</p></li><li><p>Foundation 框架中的 Objective-C 类具备的某些功能是 CoreFoundation 框架中的 C语言数据结构不具备的</p></li></ul><h2 id="第五十条"><a href="#第五十条" class="headerlink" title="第五十条"></a>第五十条</h2><ul><li>NSCache 在系统资源耗尽时能够自动删减缓存，采用LRU策略</li><li>NSCache并不会直接拷贝键，而是保留键</li><li>NSCache是线程安全的，多个线程可以同时访问NSCache</li><li>NSCache可以设置针对对象个数以及总成本的上限</li></ul><p>缓存的一般用法</p><p>   <img src="http://image.stephenfang.me/mweb/Untitled77.png"></p><p>   <img src="http://image.stephenfang.me/mweb/Untitled78.png"></p><p>加入 NSPurgeable 的缓存用法</p><p>   <img src="http://image.stephenfang.me/mweb/Untitled79.png"></p><p>   <img src="http://image.stephenfang.me/mweb/Untitled80.png"></p><ul><li>重复计算会带来性能开销的数据值得被放入缓存，从而提高应用程序的响应速度</li><li>NSPurgeableData 与 NSCache 一起使用能够实现自动清除数据的功能</li></ul><h2 id="第五十一条"><a href="#第五十一条" class="headerlink" title="第五十一条"></a>第五十一条</h2><ul><li>load 方法并不像普通的方法那样，她不遵从继承规则，如果某个类本身不实现load方法那么无论其各级超类是否实现此方法系统都不会调用</li><li>load 与 initialize 方法务必精简实现，因为会产生阻塞从而使得应用程序无响应</li><li>initialize 方法在程序首次用该类前调用一次，并且使用runtime进行调用，只应该用来设置内部数据而不应该调用其他方法</li><li>如果某个类本身不实现 initialize 方法然而超类完成了就会调用超类的实现方法，如下图中初始化子类后由于该类未覆写该方法于是需要执行父类的实现代码，于是得到了通常的子类实现方法</li></ul><p><img src="http://image.stephenfang.me/mweb/Untitled81.png"></p><p><img src="http://image.stephenfang.me/mweb/Untitled82.png"></p><p><img src="http://image.stephenfang.me/mweb/Untitled83.png"></p><h2 id="第五十二条"><a href="#第五十二条" class="headerlink" title="第五十二条"></a>第五十二条</h2><ul><li><p>NSTimer 对象会保留目标直到计时器失效，需要调用invalidate方法令其失效</p><p> <img src="http://image.stephenfang.me/mweb/Untitled84.png"></p><p> <img src="http://image.stephenfang.me/mweb/Untitled85.png"></p></li><li><p>反复执行的计时器容易引入retain cycle，可以使用 Block 的方式打破，需要注意的是必须创建分类来加入相关实现代码</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;准备开始写 Objective-C 之前花了一些时间重新阅读这本经典的《Effective Objective-C》，在阅读的过程中对重点内容进行了一些摘录，在方便自己复习的同时将相关内容在博客分享出来供参考。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://stephefang.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Xcode" scheme="https://stephefang.me/tags/Xcode/"/>
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://stephefang.me/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Muzik开发总结 — 设计与实现</title>
    <link href="https://stephefang.me/2020/07/15/Muzik_Progress/"/>
    <id>https://stephefang.me/2020/07/15/Muzik_Progress/</id>
    <published>2020-07-15T11:15:20.000Z</published>
    <updated>2022-07-24T15:20:23.603Z</updated>
    
    <content type="html"><![CDATA[<p>我希望有一款 Tab Based 的 iOS App 带来简约轻量的音乐播放体验，作为一个有一些 iOS 基础的人，我决定自己开发一个简单的本地音乐播放器，正好实践一些 UIKit 控件的使用。</p><span id="more"></span><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>本系列文章是开发一个简易的音乐播放器（暂时命名为“Muzik”）的博客记录，本篇目的在于展示设计与实现方面的进度。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>iOS 13.6</li><li>Xcode 11.6</li></ul><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p><img src="http://image.stephenfang.me/sketch.png" alt="截图2020-07-27 at 22.58.20"><br>在项目开始编写代码前，我使用 Sketch 对整个App 进行设计，确定了字体与元素的使用规范，方便之后针对我想要实现的设计进行微调。其实这一步也可以直接在 StoryBoard 中完成，然而添加阴影等操作在 Sketch 等原型创作工具中更为直观。<br>在完成设计后我尝试使用 Sketch Mirror、MockUp工具对 App 上手的感受进行评估，并发送原型给朋友了解他们提出的一些建议。<br><img src="http://image.stephenfang.me/mweb/15958622925026.png"><br>至少在 MockUp 效果下 App的整体观感还让我比较满意。我希望这种简单的风格贯穿整个 App，使得我能够用 UIKit 较为轻松地实现 App 的功能。<br> <img src="http://image.stephenfang.me/mweb/15958623328077.png"></p><p>支持 Dark Mode 也是大势所趋，针对 iOS 13 之后的 App 都应该加入支持。为了给 iPhone X设备带来更好的视觉观感，我选择了纯黑作为 App 的底色。<br><img src="http://image.stephenfang.me/mweb/15958624669288.jpg"></p><h2 id="组织"><a href="#组织" class="headerlink" title="组织"></a>组织</h2><p>按照 Sketch 中的页面设计，我将整体 App 分为精选、专辑、歌曲、音乐人、播放列表、正在播放这几个部分，其中我希望有一个小组件能像原生音乐App一样能够看到当前播放进度以及进行快捷操作，于是我将包含显示当前播放内容的 UIView 置于App的顶层位置，其中UIView中包含 UIProgressView 等控件。这是我目前能够想到且实现的理想方法，缺点即需要为下层的所有视图添加 Offset。<br>Tab + Navigation 是 iOS 开发中一种非常常见的模式，每一个页面依次对应了精选、专辑、歌曲、音乐人、播放列表的功能。<br><img src="http://image.stephenfang.me/strc.png"></p><h2 id="页面实现"><a href="#页面实现" class="headerlink" title="页面实现"></a>页面实现</h2><h3 id="精选页面"><a href="#精选页面" class="headerlink" title="精选页面"></a>精选页面</h3><p>页面包含最近添加的专辑、收听最多的歌曲、常听的播放列表等栏目组成，点击不同栏目的项目可以触发不同的二级功能。从此页面可以简述我的设计理念，即专辑使用卡片式的设计语言，更契合 iOS 13 的设计风格。<br><img src="http://image.stephenfang.me/mweb/15958633632257.jpg" alt="-w301"></p><h3 id="专辑页面"><a href="#专辑页面" class="headerlink" title="专辑页面"></a>专辑页面</h3><p>卡片式的专辑页面，点击不同的专辑进入详情页面。需要注意的是我为该页面添加了可隐藏的索引栏，避免索引栏与专辑页面重合，显得过于拥挤，这一点在歌曲页面可以看到。<br><img src="http://image.stephenfang.me/mweb/15958635741661.jpg" alt="-w301"></p><p>点击专辑卡片进入相应的详情页面，简单的 TableView 实现。<br><img src="http://image.stephenfang.me/mweb/15958637814033.jpg" alt="-w301"></p><h2 id="歌曲页面"><a href="#歌曲页面" class="headerlink" title="歌曲页面"></a>歌曲页面</h2><p>从歌曲页面可以看到右侧的可隐藏的索引栏，这里学习了 Ecoute 的设计。App 整体的设计风格十分统一，无论是字体还是网格。<br><img src="http://image.stephenfang.me/mweb/15958640618143.jpg" alt="-w301"></p><h2 id="音乐人页面"><a href="#音乐人页面" class="headerlink" title="音乐人页面"></a>音乐人页面</h2><p>这个页面是我目前不满意的一个页面，因为 iOS 的MediaLibrary 框架中并没有提供获取 <code>albumArtist</code>的 <code>artwork</code> 的方法。目前有改进的方案，即通过请求 iTunes Store 数据库返回 JSON，获取其中的艺人封面 url 并缓存其中的艺人封面。思路有一些类似于 <a href="https://github.com/SDWebImage/SDWebImage">SDWebImage</a>，然而希望以自己的方式进行简单实现。<br><img src="http://image.stephenfang.me/mweb/15958641787194.jpg" alt="-w301"></p><p>同样，点击不同的 row 进入相应的音乐人详情页面，区别是这个采用 CollectionView 实现。<br><img src="http://image.stephenfang.me/mweb/15958647723869.jpg" alt="-w301"></p><h2 id="播放列表页面"><a href="#播放列表页面" class="headerlink" title="播放列表页面"></a>播放列表页面</h2><p>根据播放列表的实际需求实现了显示页面，由于时间过于仓促没有认真适配播放列表的缩略图。<br>正打算自己花时间写一个类似于原声音乐播放器的播放列表的缩略图效果，我在 GitHub 上找到了一个类似的开源项目: <a href="https://github.com/zhengjinghua/StitchingImage"><br>StitchingImage</a><br><img src="http://image.stephenfang.me/mweb/15958648056682.jpg" alt="-w301"></p><p>然而实现语言为 Objective-C，我正在尝试用 Swift 将其进行重写，之后会开源到 GitHub 上。</p><p>详情页还是同样的味道，目前做的仍然十分粗糙，我会尝试对 UI 进行持续改进。<br><img src="http://image.stephenfang.me/mweb/15958650862897.jpg" alt="-w301"></p><h2 id="搜索页面"><a href="#搜索页面" class="headerlink" title="搜索页面"></a>搜索页面</h2><p>点击任意一级页面导航栏的搜索按钮会激活搜索页面，使用框架的方法调用实现了简单的检索。<br><img src="http://image.stephenfang.me/mweb/15958640040336.jpg" alt="-w301"></p><h2 id="正在播放页面"><a href="#正在播放页面" class="headerlink" title="正在播放页面"></a>正在播放页面</h2><p>类似于原生的播放页面，目前正在对整个页面进行重构，包括 UI 部分与代码部分。<br>目前主要通过 Timer 与 Observer 实现了简单的功能实现，但是为了达到优雅听歌的目标功能远不于此，我正在尝试接入<a href="https://github.com/ddddxxx/LyricsKit">LyricsKit</a> 使得页面具有显示歌词的功能，这里需要用到 ScrollView 与 PageControl的加持。<br><img src="http://image.stephenfang.me/mweb/15958655245499.jpg" alt="-w301"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上为目前的进度总结，我会持续更新 App 的开发过程，包括代码总结与功能实现。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我希望有一款 Tab Based 的 iOS App 带来简约轻量的音乐播放体验，作为一个有一些 iOS 基础的人，我决定自己开发一个简单的本地音乐播放器，正好实践一些 UIKit 控件的使用。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://stephefang.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Swift" scheme="https://stephefang.me/tags/Swift/"/>
    
    <category term="音乐App" scheme="https://stephefang.me/tags/%E9%9F%B3%E4%B9%90App/"/>
    
  </entry>
  
  <entry>
    <title>Muzik开发总结 — AVAudioPlayer 实践</title>
    <link href="https://stephefang.me/2020/07/08/Muzik_GettingStarted/"/>
    <id>https://stephefang.me/2020/07/08/Muzik_GettingStarted/</id>
    <published>2020-07-08T11:20:20.000Z</published>
    <updated>2022-07-24T15:20:12.059Z</updated>
    
    <content type="html"><![CDATA[<p>最近又放弃了使用 Apple Music，作为一个从音乐下载时代过来的人，我仍然保持着将歌曲同步至 iPhone 再聆听的习惯，即使我仍然无法摆脱流媒体的束缚。话说回来，Apple 原生的 Music.app 的体验除了交互，于我而言是糟糕的，我更希望有一款 Tab Based 的 iOS App 支撑这种体验，作为一个有一些 iOS 基础的人，我决定自己开发一个简单的本地音乐播放器，正好学习一些 UIKit 控件。</p><span id="more"></span><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>本系列文章是开发一个简易的音乐播放器（暂时命名为“Muzik”）的博客记录，本篇目的在于实践一个简单的 AVAudioPlayer Demo 模拟 Music.app 的播放功能，内容十分基础。<br>需要注意的是，此 Demo 并没有采用读取系统音乐资料库需要的 MPMediaPlayer。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>Swift 5</li><li>iOS 13.5</li><li>Xcode 11.5</li></ul><p>在 Xcode 项目属性的 General 选项卡中点击底部的 Frameworks and Libraries，搜索AVFoundation Framework 将其添加至项目中。</p><h2 id="歌曲列表界面"><a href="#歌曲列表界面" class="headerlink" title="歌曲列表界面"></a>歌曲列表界面</h2><p>为了进行简单的 Demo，我将两首下载好歌曲添加到 Xcode 项目文件夹下，分别为<code>Song1.mp3</code>与<code>Song2.mp3</code>，并创建简单的结构体命名为 Song：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Song</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> songName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> albumName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> artistName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> imageName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> trackName: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了在播放时展示专辑封面，我将两首 .mp3 文件的专辑封面添加至 Assets，参照 Song 命名为 Cover1 与 Cover 2。我比较习惯于 AutoLayout 与代码布局共同使用，使用 StoryBoard 进行小项目的简单布局十分方便。<br>首先，创建一个<code>ViewController</code>展示歌曲页面，添加<code>UITableView</code>并调整约束，需要将 TableView 对象的 <code>Content</code> 属性改为 <code>Dynamic Prototypes</code>，将 对象的Cell的 <code>Style</code>属性更改为<code>Subtitle</code>，至此 StoryBoard 部分已经完成。<br>来到与该<code>ViewController</code>相对应的<code>ViewController.swift</code>文件，由于是在Storyboard中创建<code>UITableView</code>，所以需要通过<code>@IBOutlet</code>连接之前创建的<code>UITableView</code>，方法如Ctrl+拖拽，同时需要在<code>viewDidLoad()</code>中设置<code>UITableView</code>对象的<code>delegate</code>与<code>dataSource</code>。需要注意的是使用<code>UITableView</code>的方法需要 conforms to 相关的 protocols, 以上均为基本操作。<br>我需要在<code>viewDidLoad()</code>阶段加载歌曲的相关信息，于是创建<code>configureSongs()</code>方法为<code>songs</code>数组添加相关数据（需要在之前创建）。<br>尝试完成页面功能布局，作为Demo该 TableView 对象只包含一个 Section 的内容，如果需要调用系统音乐资料库的 <code>MPMediaItem</code>，需要使用 NSRange 对不同 Section 的内容进行排序（A-Z）。为了避免列表中图片大小显示不一致问题，我将 Row 的高度更改为60。在<code>cellForRowAt</code>方法中定制 cell，在<code>didSelectRowAt</code>方法中令其 present 播放器页面，相关内容在后文中讨论，目前这个页面看起来是这样的(先忽略 Tab 的效果)。<br><img src="http://image.stephenfang.me/screen1.png"><br>懒人代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UITableViewDelegate</span>, <span class="title">UITableViewDataSource</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">var</span> songTable: <span class="type">UITableView</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> songs <span class="operator">=</span> [<span class="type">Song</span>]()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        configureSongs()</span><br><span class="line">        songTable.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        songTable.dataSource <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">configureSongs</span>()</span> &#123;</span><br><span class="line">        songs.append(<span class="type">Song</span>(songName: <span class="string">&quot;Pretender&quot;</span>, albumName: <span class="string">&quot;Pretender&quot;</span>, artistName: <span class="string">&quot;Official鬍子男dism&quot;</span>, imageName: <span class="string">&quot;Cover1&quot;</span>, trackName: <span class="string">&quot;Song1&quot;</span>))</span><br><span class="line">        songs.append(<span class="type">Song</span>(songName: <span class="string">&quot;Imagine&quot;</span>, albumName: <span class="string">&quot;The Mango Tree&quot;</span>, artistName: <span class="string">&quot;Jack Johnson&quot;</span>, imageName: <span class="string">&quot;Cover2&quot;</span>, trackName: <span class="string">&quot;Song2&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">numberOfRowsInSection</span> <span class="params">section</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> songs.count</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">heightForRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">60</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">cellForRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> songCell <span class="operator">=</span> tableView.dequeueReusableCell(withIdentifier: <span class="string">&quot;songCell&quot;</span>, for: indexPath)</span><br><span class="line">        <span class="keyword">let</span> song <span class="operator">=</span> songs[indexPath.row]</span><br><span class="line">        </span><br><span class="line">        songCell.textLabel<span class="operator">?</span>.text <span class="operator">=</span> song.songName</span><br><span class="line">        songCell.detailTextLabel<span class="operator">?</span>.text <span class="operator">=</span> song.albumName <span class="operator">+</span> <span class="string">&quot;  &quot;</span> <span class="operator">+</span> song.artistName</span><br><span class="line">        songCell.imageView<span class="operator">?</span>.image <span class="operator">=</span> <span class="type">UIImage</span>(named: song.imageName)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> songCell</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">didSelectRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> &#123;</span><br><span class="line">        tableView.deselectRow(at: indexPath, animated: <span class="literal">true</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> position <span class="operator">=</span> indexPath.row</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> songView <span class="operator">=</span> storyboard<span class="operator">?</span>.instantiateViewController(identifier: <span class="string">&quot;player&quot;</span>) <span class="keyword">as?</span> <span class="type">PlayerViewController</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        songView.position <span class="operator">=</span> position</span><br><span class="line">        songView.songs <span class="operator">=</span> songs</span><br><span class="line">        </span><br><span class="line">        present(songView,animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="正在播放界面"><a href="#正在播放界面" class="headerlink" title="正在播放界面"></a>正在播放界面</h2><p>创建<code>PlayerViewController</code>展示正在播放的页面，不需要与任何View进行连接，之后创建一个 UIView 令其紧贴 Safe Area 将其命名为 holder。这次我采用代码进行布局，最终看起来应该是这样的，虽然很不美观但是 it just works。<br><img src="http://image.stephenfang.me/screen2.png">。<br>在开始代码注解前了解一下我的思路。其中<code>viewDidLayoutSubviews</code>方法在controller 的子视图的 position 和 size 被改变的时候被调用。在 view 已经被设计 subviews 并且还没有被展示在屏幕上时候，可以调用此方法改变这个view。任何依赖于 bounds 并且需要完成的操作都应该放在<code>viewDidLayoutSubviews</code>中而不是<code>viewDidLoad</code>或<code>viewWillAppear</code>中，因为 view 的 frame 和 bounds 直到 AutoLayout 完成工作的时候才会被确定，所以在执行完Auto Layout之后会调用此方法。<br>当用户点击上一首歌曲或下一首歌曲按钮后，需要改变控件内容的显示，我的想法是通过调用<code>removeFromSuperview()</code>方法，该方法即进行视图节点删除的操作，执行这个方法等于在 View 的树形结构中找到该节点并删除该节点及其子节点，而并非只是删除该节点自己，同时把该对象从响应者链中移除。在ARC的情况下执行<code>removeFromSuperview</code>方法多次也没有问题因为由系统自动管理。<br>那么在调用<code>removeFromSuperview</code>后势必需要重新载入页面元素，并且控制播放的过程，这个时候可以采用一个统一的方法在页面载入、切换的时候进行操作。对于 <code>AVAudioPlayer</code>的调用方面，需要导入<code>AVFoundation</code>框架并初始化<code>AVAudioPlayer</code>对象。由于之前导入了 .mp3 文件，需要做的是让<code>AVAudioPlayer</code>获取待播放的歌曲 url，之前的 ViewController 对 Song 的具体内容有定义，而<code>Bundle.main.path</code>代表获取工程目录下的文件。系统启动时会激活 <code>AVAudioSession</code>，通过设置<code>active</code>为”true”激活 Session，设置为“false”解除 Session 的激活状态，<code>options</code>使用 “.notifyOthersOnDeactivation” 使音频会话停用时其它音频会话可以返回到其它活动状态。对于<code>sharedInstance</code>包含五种设置方法，希望深入了解的参见这篇文章 <a href="https://www.jianshu.com/p/ae843162ace1">AVAudioSession - Category、Model、Options、Error参数详解</a><br>Int 类型的变量<code>position</code>代表当前用户点按的歌曲在 songs 中所处下标，相关的 UIElement 配置都很容易理解不在此赘述，为了模拟 Music.app 的效果，我尝试使用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">0.2</span>, animations: &#123;</span><br><span class="line">               <span class="keyword">self</span>.albumImageView.frame <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">30</span>, y: <span class="number">30</span>, width: <span class="keyword">self</span>.holder.frame.size.width <span class="operator">-</span> <span class="number">60</span>, height: <span class="keyword">self</span>.holder.frame.size.width <span class="operator">-</span> <span class="number">60</span>)</span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></figure><p>实现类似的点击暂停或播放按钮后专辑封面大小变化的的效果，如果页面上已经对元素进行了大小限制使用<code>CGAffineTransform(scaleX: &lt;CGFloat&gt;, y: &lt;CGFloat&gt;)</code>也能够达到类似的效果。最后给出此次 Demo 所有的代码，对于播放器的开发进展我会持续更新，🦔本系列的第一篇文章。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> AVFoundation</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlayerViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> position: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> songs: [<span class="type">Song</span>] <span class="operator">=</span> []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> holder: <span class="type">UIView</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> player: <span class="type">AVAudioPlayer</span>?</span><br><span class="line">    <span class="keyword">let</span> playPauseButton <span class="operator">=</span> <span class="type">UIButton</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> albumImageView: <span class="type">UIImageView</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> imageView <span class="operator">=</span> <span class="type">UIImageView</span>()</span><br><span class="line">        imageView.contentMode <span class="operator">=</span> .scaleAspectFill</span><br><span class="line">        <span class="keyword">return</span> imageView</span><br><span class="line">    &#125; ()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> nameLabel: <span class="type">UILabel</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> label <span class="operator">=</span> <span class="type">UILabel</span>()</span><br><span class="line">        label.textAlignment <span class="operator">=</span> .center</span><br><span class="line">        label.numberOfLines <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> label</span><br><span class="line">    &#125; ()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> albumLabel: <span class="type">UILabel</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> label <span class="operator">=</span> <span class="type">UILabel</span>()</span><br><span class="line">        label.textAlignment <span class="operator">=</span> .center</span><br><span class="line">        label.numberOfLines <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> label</span><br><span class="line">    &#125; ()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> artistLabel: <span class="type">UILabel</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> label <span class="operator">=</span> <span class="type">UILabel</span>()</span><br><span class="line">        label.textAlignment <span class="operator">=</span> .center</span><br><span class="line">        label.numberOfLines <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> label</span><br><span class="line">    &#125; ()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLayoutSubviews</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLayoutSubviews()</span><br><span class="line">        <span class="keyword">if</span> holder.subviews.count <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">            configurePlayer()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span>(<span class="keyword">_</span> <span class="params">animated</span>: <span class="type">Bool</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewWillDisappear(animated)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> player <span class="operator">=</span> player &#123;</span><br><span class="line">            player.stop()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">configurePlayer</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> song <span class="operator">=</span> songs[position]</span><br><span class="line">        <span class="keyword">let</span> urlString <span class="operator">=</span> <span class="type">Bundle</span>.main.path(forResource: song.trackName, ofType: <span class="string">&quot;.mp3&quot;</span>)</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> <span class="type">AVAudioSession</span>.sharedInstance().setMode(.default)</span><br><span class="line">            <span class="keyword">try</span> <span class="type">AVAudioSession</span>.sharedInstance().setActive(<span class="literal">true</span>, options: .notifyOthersOnDeactivation)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> urlString <span class="operator">=</span> urlString <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            player <span class="operator">=</span> <span class="keyword">try</span> <span class="type">AVAudioPlayer</span>(contentsOf: <span class="type">URL</span>(string: urlString)<span class="operator">!</span>)</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> player <span class="operator">=</span> player <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            player.volume <span class="operator">=</span> <span class="number">0.5</span></span><br><span class="line">            </span><br><span class="line">            player.play()</span><br><span class="line">        &#125; <span class="keyword">catch</span>  &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error occurred&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// UI</span></span><br><span class="line">        <span class="comment">// Album</span></span><br><span class="line">        albumImageView.frame <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">10</span>,</span><br><span class="line">                                      y: <span class="number">10</span>,</span><br><span class="line">                                      width: holder.frame.size.width <span class="operator">-</span> <span class="number">20</span>,</span><br><span class="line">                                      height: holder.frame.size.width <span class="operator">-</span> <span class="number">20</span>)</span><br><span class="line">        albumImageView.image <span class="operator">=</span> <span class="type">UIImage</span>(named: song.imageName)</span><br><span class="line">        holder.addSubview(albumImageView)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Label</span></span><br><span class="line">        nameLabel.frame <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">10</span>, y: albumImageView.frame.size.height <span class="operator">+</span> <span class="number">10</span>, width: holder.frame.size.width <span class="operator">-</span> <span class="number">20</span> , height: <span class="number">70</span>)</span><br><span class="line">        albumLabel.frame <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">10</span>, y: albumImageView.frame.size.height <span class="operator">+</span> <span class="number">80</span>, width: holder.frame.size.width <span class="operator">-</span> <span class="number">20</span> , height: <span class="number">70</span>)</span><br><span class="line">        artistLabel.frame <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">10</span>, y: albumImageView.frame.size.height <span class="operator">+</span> <span class="number">140</span>, width: holder.frame.size.width <span class="operator">-</span> <span class="number">20</span> , height: <span class="number">70</span>)</span><br><span class="line">        </span><br><span class="line">        nameLabel.text <span class="operator">=</span> song.songName</span><br><span class="line">        albumLabel.text <span class="operator">=</span> song.albumName</span><br><span class="line">        artistLabel.text <span class="operator">=</span> song.artistName</span><br><span class="line">        </span><br><span class="line">        holder.addSubview(nameLabel)</span><br><span class="line">        holder.addSubview(albumLabel)</span><br><span class="line">        holder.addSubview(artistLabel)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Button</span></span><br><span class="line">        <span class="keyword">let</span> nextButton <span class="operator">=</span> <span class="type">UIButton</span>()</span><br><span class="line">        <span class="keyword">let</span> backButton <span class="operator">=</span> <span class="type">UIButton</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> buttonSize: <span class="type">CGFloat</span> <span class="operator">=</span> <span class="number">50</span></span><br><span class="line">        </span><br><span class="line">        playPauseButton.frame <span class="operator">=</span> <span class="type">CGRect</span>(x: (holder.frame.size.width <span class="operator">-</span> buttonSize)<span class="operator">/</span><span class="number">2.0</span>, y: artistLabel.frame.origin.y <span class="operator">+</span> <span class="number">90</span>, width: buttonSize, height: buttonSize)</span><br><span class="line">        nextButton.frame <span class="operator">=</span> <span class="type">CGRect</span>(x: holder.frame.size.width <span class="operator">-</span> <span class="number">20</span> <span class="operator">-</span> buttonSize, y: artistLabel.frame.origin.y <span class="operator">+</span> <span class="number">90</span>, width: buttonSize, height: buttonSize)</span><br><span class="line">        backButton.frame <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">20</span>, y: artistLabel.frame.origin.y <span class="operator">+</span> <span class="number">90</span>, width: buttonSize, height: buttonSize)</span><br><span class="line">        </span><br><span class="line">        playPauseButton.addTarget(<span class="keyword">self</span>, action: #selector(didTapPauseButton), for: .touchUpInside)</span><br><span class="line">        nextButton.addTarget(<span class="keyword">self</span>, action: #selector(didTapNextButton), for: .touchUpInside)</span><br><span class="line">        backButton.addTarget(<span class="keyword">self</span>, action: #selector(didTapBackButton), for: .touchUpInside)</span><br><span class="line">        </span><br><span class="line">        playPauseButton.setBackgroundImage(<span class="type">UIImage</span>(systemName: <span class="string">&quot;pause.fill&quot;</span>), for: .normal)</span><br><span class="line">        nextButton.setBackgroundImage(<span class="type">UIImage</span>(systemName: <span class="string">&quot;forward.fill&quot;</span>), for: .normal)</span><br><span class="line">        backButton.setBackgroundImage(<span class="type">UIImage</span>(systemName: <span class="string">&quot;backward.fill&quot;</span>), for: .normal)</span><br><span class="line">        </span><br><span class="line">        playPauseButton.tintColor <span class="operator">=</span> .black</span><br><span class="line">        nextButton.tintColor <span class="operator">=</span> .black</span><br><span class="line">        backButton.tintColor <span class="operator">=</span> .black</span><br><span class="line">        </span><br><span class="line">        holder.addSubview(playPauseButton)</span><br><span class="line">        holder.addSubview(nextButton)</span><br><span class="line">        holder.addSubview(backButton)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Element</span></span><br><span class="line">        <span class="keyword">let</span> slider <span class="operator">=</span> <span class="type">UISlider</span>(frame: <span class="type">CGRect</span>(x: <span class="number">20</span>, y: holder.frame.size.height <span class="operator">-</span> <span class="number">60</span>, width: holder.frame.size.width <span class="operator">-</span> <span class="number">40</span>, height: <span class="number">50</span>))</span><br><span class="line">        </span><br><span class="line">        slider.value <span class="operator">=</span> <span class="number">50</span></span><br><span class="line">        slider.addTarget(<span class="keyword">self</span>, action: #selector(didSlideSlider(<span class="keyword">_</span>:)), for: .valueChanged)</span><br><span class="line">        holder.addSubview(slider)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">didSlideSlider</span> (<span class="keyword">_</span> <span class="params">slider</span>: <span class="type">UISlider</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> value <span class="operator">=</span> slider.value</span><br><span class="line">        player<span class="operator">?</span>.volume <span class="operator">=</span> value</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">didTapPauseButton</span> ()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> player<span class="operator">?</span>.isPlaying <span class="operator">==</span> <span class="literal">true</span> &#123;</span><br><span class="line">            player<span class="operator">?</span>.pause()</span><br><span class="line">            playPauseButton.setBackgroundImage(<span class="type">UIImage</span>(systemName: <span class="string">&quot;play.fill&quot;</span>), for: .normal)</span><br><span class="line">            <span class="type">UIView</span>.animate(withDuration: <span class="number">0.2</span>, animations: &#123;</span><br><span class="line">                <span class="keyword">self</span>.albumImageView.frame <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">30</span>, y: <span class="number">30</span>, width: <span class="keyword">self</span>.holder.frame.size.width <span class="operator">-</span> <span class="number">60</span>, height: <span class="keyword">self</span>.holder.frame.size.width <span class="operator">-</span> <span class="number">60</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            player<span class="operator">?</span>.play()</span><br><span class="line">            playPauseButton.setBackgroundImage(<span class="type">UIImage</span>(systemName: <span class="string">&quot;pause.fill&quot;</span>), for: .normal)</span><br><span class="line">            <span class="type">UIView</span>.animate(withDuration: <span class="number">0.2</span>, animations: &#123;</span><br><span class="line">                <span class="keyword">self</span>.albumImageView.frame <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">10</span>, y: <span class="number">10</span>, width: <span class="keyword">self</span>.holder.frame.size.width <span class="operator">-</span> <span class="number">20</span>, height: <span class="keyword">self</span>.holder.frame.size.width <span class="operator">-</span> <span class="number">20</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">didTapNextButton</span> ()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> position <span class="operator">&lt;</span> (songs.count <span class="operator">-</span> <span class="number">1</span> )&#123;</span><br><span class="line">            position <span class="operator">=</span> position <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">            player<span class="operator">?</span>.stop()</span><br><span class="line">            <span class="keyword">for</span> subview <span class="keyword">in</span> holder.subviews &#123;</span><br><span class="line">                subview.removeFromSuperview()</span><br><span class="line">            &#125;</span><br><span class="line">            configurePlayer()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">didTapBackButton</span> ()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> position <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            position <span class="operator">=</span> position <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">            player<span class="operator">?</span>.stop()</span><br><span class="line">            <span class="keyword">for</span> subview <span class="keyword">in</span> holder.subviews &#123;</span><br><span class="line">                subview.removeFromSuperview()</span><br><span class="line">            &#125;</span><br><span class="line">            configurePlayer()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近又放弃了使用 Apple Music，作为一个从音乐下载时代过来的人，我仍然保持着将歌曲同步至 iPhone 再聆听的习惯，即使我仍然无法摆脱流媒体的束缚。话说回来，Apple 原生的 Music.app 的体验除了交互，于我而言是糟糕的，我更希望有一款 Tab Based 的 iOS App 支撑这种体验，作为一个有一些 iOS 基础的人，我决定自己开发一个简单的本地音乐播放器，正好学习一些 UIKit 控件。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://stephefang.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Swift" scheme="https://stephefang.me/tags/Swift/"/>
    
    <category term="AudioPlayer" scheme="https://stephefang.me/tags/AudioPlayer/"/>
    
  </entry>
  
  <entry>
    <title>设计、摄影与编码的碎碎念</title>
    <link href="https://stephefang.me/2020/07/05/Design_Thoughts/"/>
    <id>https://stephefang.me/2020/07/05/Design_Thoughts/</id>
    <published>2020-07-04T17:20:20.000Z</published>
    <updated>2022-07-24T15:18:44.351Z</updated>
    
    <content type="html"><![CDATA[<p>学习了一部分 Design + Code 课程，在 Dribbble 发布了一部分用 Sketch 设计的东西，加之十分喜欢 Notion 这款笔记应用，使得我产生了对于设计与编码的一些零碎的思考。<br>Notion招聘的标准为“Designer Who Can Code”，我将其视为也是一种社会需求的反馈，相较于强调编码的能力，他们的团队更强调设计师的属性。随着应用程序的同质化越来越明显，优秀的设计、优秀的交互能够给用户带来耳目一新的体验，有时能够获得更好的回报。</p><span id="more"></span><h2 id="最近的定位"><a href="#最近的定位" class="headerlink" title="最近的定位"></a>最近的定位</h2><p>在学习前端课程的时候，我看到身边的同学虽然掌握着编码的技能却把页面写得一团糟。对于设计师而言，从事前端工程师或许是一个不错的选择，事实也确实如此。如果希望成为一名独立开发者，那么设计的技能更是不可或缺。<br>随着 iOS 14 的推出，SwiftUI更是被推到了一个更高优先级的位置上，甚至对于新版本的小部件的适配都需要使用 SwiftUI。上学期自学了 iOS 相关的课程，当时的 SwiftUI 并未完善，在编码的过程中还能遇到 bug，这一点暂且不提，我仍然期待 SwiftUI 的新表现，可以说对于设计师乃至独立开发者而言 SwiftUI 绝对是一个重大利好，开发的门槛进一步降低。<br>我的计算机学习生涯带给我的优势又体现在哪里呢，可能是更好的计算机基础，可能是对于算法优化的了解。如果我将自己定位于独立开发者，我会更倾向于做设计导向的App而不是算法导向的App，虽然其中的技术含量可能看起来捉襟见愁，但我认为优秀的设计（不仅仅是界面设计，也包括组织设计）是驱使用户选择的更大诱因。意思并不是算法不重要，而是要对内容进行良好的包装，这一点将用于指导我未来App的开发。</p><h2 id="最近的设计"><a href="#最近的设计" class="headerlink" title="最近的设计"></a>最近的设计</h2><p>由于并不是设计出身，我自学了 Design + Code 的设计课程，包括Sketch的使用、字体、动画的应用等等，并且学习了少数派的「比身边人多懂一点设计」课程，后者非常推荐没有设计基础的人仔细阅读。目前能做出一些符合我想发的、并不蹩脚的设计，如 App 的 icon 设计、UI设计等等。<br>列举两个我发布在 Dribbble 上的作品，第一个是对 Notion 图标的重新设计。由于 Notion 是一款笔记应用，我能够联想到彩色的便签与装帧精美的册子，那如何体现 Notion 的品牌意义呢？我参考了原版 Notion 的图标，为了使得大写字母显得不那么突兀，我为其加上了阴影。最后参照 Logic Pro X等 App 给予其一个恰到好处的倾角。该图标被 Andreas Storm 等人Rebound，也算是一个不小的成就。<br><img src="http://image.stephenfang.me/%E6%88%AA%E5%9B%BE2020-07-12%20at%2001.21.51.png"><br>另一个设计方案就是我的音乐播放器设计，目前编码已经完成了1/2，是我目前完成的第一个“有设计”的App，至少MockUp看起来还不错。其设计理念十分简洁，一个页面只完成一个类别的功能，充分利用 UIKit，目前仍然有不少功能想做，包括接入 Apple Music、从LyricsKit获取歌词等等，无法确定何时上架。<br><img src="http://image.stephenfang.me/%E6%88%AA%E5%9B%BE2020-07-12%20at%2001.33.30.png"><br>最后放出我在 Dribbble 的地址： <a href="https://dribbble.com/stephenfang">https://dribbble.com/stephenfang</a></p><h2 id="最近的摄影"><a href="#最近的摄影" class="headerlink" title="最近的摄影"></a>最近的摄影</h2><p>因为疫情缘故今年并没有出门，连寒假旅行也连带取消了，只能通过 Unsplash 发一些先前的照片，我所理解的低阶摄影（也就是我目前实践的）满足于把画面交代清楚，以不一样的构图拍出比游客照更具有感觉的东西。好的照片应该是能够讲述故事的，这也是街头摄影之所以能打动人的原因，显然我并没有做到，但是我仍在不断尝试让平凡的照片看起来具有不平凡的内容。例如对于物体的拍摄，我希望画面能够传递一定的感情信息，例如以下的猫狗照片，你可能会思考它们此刻在想些什么。<br><img src="http://image.stephenfang.me/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.52.32.png"><br><img src="http://image.stephenfang.me/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.54.52.png"><br>另一个要点就是构图，简单的构图方式可能得到不同的效果。构图方式可以简单复制，而建筑和你的视角则不会。<br><img src="http://image.stephenfang.me/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.56.52.png"><br><img src="http://image.stephenfang.me/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.59.12.png"><br>罗伯特·卡帕说过“如果你拍得不够好，是因为你离得不够近”，不做这句话的过分解读，但我确实能够以此作为我玩摄影的一条箴言。以下为在上海人民英雄纪念碑下拍摄的照片，当时只是感觉自己被震撼到了就按下了快门，没有想到登上了 Unsplash 的信息流推荐，这也促使着我业余时间在该平台下继续深耕。<br><img src="http://image.stephenfang.me/%E6%88%AA%E5%9B%BE2020-07-12%20at%2014.00.55.png"><br>最后放出我在 Unsplash 的地址： <a href="https://unsplash.com/@stephenfang">https://unsplash.com/@stephenfang</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习了一部分 Design + Code 课程，在 Dribbble 发布了一部分用 Sketch 设计的东西，加之十分喜欢 Notion 这款笔记应用，使得我产生了对于设计与编码的一些零碎的思考。&lt;br&gt;Notion招聘的标准为“Designer Who Can Code”，我将其视为也是一种社会需求的反馈，相较于强调编码的能力，他们的团队更强调设计师的属性。随着应用程序的同质化越来越明显，优秀的设计、优秀的交互能够给用户带来耳目一新的体验，有时能够获得更好的回报。&lt;/p&gt;</summary>
    
    
    
    <category term="设计" scheme="https://stephefang.me/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="UI" scheme="https://stephefang.me/tags/UI/"/>
    
    <category term="UX" scheme="https://stephefang.me/tags/UX/"/>
    
  </entry>
  
  <entry>
    <title>iOS 图像处理 App - OpenCV 与 Swift 开发</title>
    <link href="https://stephefang.me/2020/07/01/Haze-Free/"/>
    <id>https://stephefang.me/2020/07/01/Haze-Free/</id>
    <published>2020-07-01T01:20:20.000Z</published>
    <updated>2022-07-24T15:19:44.478Z</updated>
    
    <content type="html"><![CDATA[<p>本篇内容主要包含在 iOS 项目项目中添加 OpenCV 库、Objective-C++ 与 Swift 的结合使用，及桥接文件的添加等等，为 OpenCV 系列的第四篇文章。</p><span id="more"></span><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>本学期选修了 OpenCV 相关课程，最后课程设计为完成一个图像去雾功能的小程序。作为一个具备 iOS 相关基础的程序员，我没有选用老师推荐的 Qt 平台，而是选择在 iOS 平台上实现算法的应用。最终实现效果还不错，而其中去雾算法参考了何凯明博士的论文<a href="http://kaiminghe.com/publications/cvpr09.pdf">Kaiming He. Single Image Haze Removal Using Dark Channel Prior</a>，不在本文的讨论范畴，本文主要对Objective-C++ 与 Swift 的结合开发做一个总结。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>Swift 5</li><li>iOS 13.4</li><li>Xcode 11.5</li><li>OpenCV Framework 4.3.0</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>OpenCV Package 可以通过以下两种方式添加到 iOS 项目当中：</p><ol><li>使用 CocoaPods 添加<br>Profile 中添加 OpenCV：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target &#x27;Haze-Free&#x27; do</span><br><span class="line">  use_frameworks!</span><br><span class="line">  pod &#x27;OpenCV&#x27;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>2.自行下载并添加<br>在官网下载相应版本的<a href="https://opencv.org/releases/">iOS Pack</a>，解压后得到一个 opencv2.framework 库，创建项目并右键添加文件到项目。</p><h2 id="桥接"><a href="#桥接" class="headerlink" title="桥接"></a>桥接</h2><p>OpenCV 框架由 C++ 进行编码，通过将 C++ 代码插入 Objective-C 就成为了 Objective-C++ 代码。但是 Swift 本身与 Objective-C / Objective-C++ 并不兼容，所以需要一个Bridging Header 将 OpenCV 的功能接口暴露给 Swift。<br>以下为简单的示意图。<br><img src="http://image.stephenfang.me/%E6%88%AA%E5%9B%BE2020-07-12%20at%2015.18.30.png"></p><p>添加一个 Objective-C 文件到项目中将其命名为“OpenCvWrapper”，包含<code>OpenCvWrapper.h</code>与<code>OpenCvWrapper.m</code>两个文件，需要将文件扩展名“.m”改为“.mm”。如果自动弹出提示是否添加 Bridging-Header 文件选择添加；如果没有提示，则手动添加一个 Bridging-Header 文件，即添加一个头文件（Header file），重命名为“项目名-Bridging-Header.h”（本例中为：Haze-Free-Bridging-Header.h），部分项目结构图如下。<br><img src="http://image.stephenfang.me/%E6%88%AA%E5%9B%BE2020-07-12%20at%2015.54.22.png"></p><h2 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h2><p>如果你对 C++ 和 Objective-C 有一定了解，那完全能够理解以下的步骤。<br>其中 Bridging-Header 对 Objective-C++ 类及方法进行定义，而 OpenCVWrapper 主要面向具体定义的类及方法实现。<br>假设我需要对图片进行灰度化处理，需要调用的 OpenCV 函数为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cvtColor</span>(source, target, COLOR_BGR2GRAY);</span><br></pre></td></tr></table></figure><p>我尝试在<code>OpenCvWrapper.h</code>中声明实现的方法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+(UIImage *) makeGary: (UIImage *) image;</span><br></pre></td></tr></table></figure><p>显然 Swift 无法接受 Mat 类型的数据，若需要对图像进行处理并在 View 中显示，需要的是ImageView 获取到 image，换言之，我们需要进行 UIImage 与 Mat 之间的类型转换，而 OpenCV iOS 框架中就做了这样的事情。所以我们的<code>OpenCvWrapper.mm</code>看起来会是这样。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;opencv2/imgcodecs/ios.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;OpenCvWrapper.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line">@implementation OpenCvWrapper</span><br><span class="line"></span><br><span class="line">+(UIImage *) makeGary: (UIImage *) image</span><br><span class="line">&#123;</span><br><span class="line">    Mat source,target;</span><br><span class="line">    <span class="built_in">UIImageToMat</span>(image,source);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(source.<span class="built_in">channels</span>() == <span class="number">1</span>) <span class="keyword">return</span> image;</span><br><span class="line">    <span class="built_in">cvtColor</span>(source, target, COLOR_BGR2GRAY);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">MatToUIImage</span>(target);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>接下来需要做的事情就轻车熟路了，只需要通过<code>OpenCvWrapper.makeGary(image)</code>方法即可返回一个经过处理的 UIImage 对象。</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>我给予了 Haze-Free 图像处理App三种图像处理功能，分别是去雾、灰度化与中值滤波，考虑到处理图像本身需要一定的等待时间，我添加了 UIActivityIndicatorView 并放置了一个无法交互的 UIView 在需要的时候出现，同时 GCD 也可以加以运用，以下为部分改进后的代码。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">let</span> queue <span class="operator">=</span> <span class="type">DispatchQueue</span>(label: <span class="string">&quot;process-queue&quot;</span>, qos: .userInitiated)</span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">ProcessType</span> </span>&#123;</span><br><span class="line">     <span class="keyword">case</span> toGrayScale, toHazeFree, toSoftFilter</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span>(<span class="keyword">_</span> <span class="params">animated</span>: <span class="type">Bool</span>)</span> &#123;</span><br><span class="line">     <span class="keyword">super</span>.viewWillAppear(<span class="literal">true</span>)</span><br><span class="line">     <span class="keyword">self</span>.loadingOverlayView.isHidden <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">toGrayScale</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="keyword">Any</span>)</span> &#123;</span><br><span class="line">     processImage(withType: .toGrayScale)</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">toHazeFree</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="keyword">Any</span>)</span> &#123;</span><br><span class="line">     processImage(withType: .toHazeFree)</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">toSoftFilter</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="keyword">Any</span>)</span> &#123;</span><br><span class="line">     processImage(withType: .toSoftFilter)</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">processImage</span>(<span class="params">withType</span> <span class="params">type</span>: <span class="type">ProcessType</span>)</span> &#123;</span><br><span class="line">     <span class="keyword">self</span>.loadingOverlayView.isHidden <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">     <span class="keyword">let</span> image <span class="operator">=</span> <span class="keyword">self</span>.demoImageView.image<span class="operator">!</span></span><br><span class="line">     queue.async &#123;</span><br><span class="line">         <span class="keyword">let</span> processed: <span class="type">UIImage</span></span><br><span class="line">         <span class="keyword">switch</span> type &#123;</span><br><span class="line">         <span class="keyword">case</span> .toHazeFree:</span><br><span class="line">             processed <span class="operator">=</span> <span class="type">OpenCvWrapper</span>.hazeFree(image)</span><br><span class="line">         <span class="keyword">case</span> .toSoftFilter:</span><br><span class="line">             processed <span class="operator">=</span> <span class="type">OpenCvWrapper</span>.softFilter(image)</span><br><span class="line">         <span class="keyword">case</span> .toGrayScale:</span><br><span class="line">             processed <span class="operator">=</span> <span class="type">OpenCvWrapper</span>.makeGary(image)</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">self</span>.processed <span class="operator">=</span> processed</span><br><span class="line">         <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">             <span class="keyword">self</span>.performSegue(withIdentifier: <span class="string">&quot;SavingPhoto&quot;</span>, sender: <span class="literal">nil</span>)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p>在写 App 的过程中遇到了一个重大问题，去雾算法验证无误后始终无法得到正确的去雾图像，于是开始对去雾步骤中所有的阶段性图像打断点，一一验证得到的图像结果。最后根据StackOverFlow 上的解释以及断点结果查明了原因，原因出在 <code>UIImageToMat</code> 方法返回的Mat 类型上。<br><img src="http://image.stephenfang.me/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.40.11.png"><br><code>UIImageToMat</code> 方法返回的Mat类型为 <code>CV_8UC4</code>，而程序中需要的 Mat 格式为 <code>CV_8UC3</code>，需要使用<code>cvtColor()</code> 方法对其进行转换，改正后程序正常运行。<br>在使用 SFSymbols 时遇到了一些bug，UIButton的 image 使用 SFSymbol出现了无法显示Background 的问题，Debug View Hierarchy也看不出来名堂，最后只好换了自定义的icon。<br><img src="http://image.stephenfang.me/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.51.25.png"></p><h2 id="App-总结"><a href="#App-总结" class="headerlink" title="App 总结"></a>App 总结</h2><h3 id="UI总结"><a href="#UI总结" class="headerlink" title="UI总结"></a>UI总结</h3><p>研究了iOS的设计原则后，针对该程序设计了以下页面，包含欢迎页面、权限获取页面、图像浏览页面、图像处理页面与图像分享页面，尽最大程度减少不同页面之间的耦合，使整体的页面逻辑更加清晰。<br><img src="http://image.stephenfang.me/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.56.25.png"><br>在对iOS开发框架进行实践后，为 App 增加了中值滤波和灰度转换的功能，同时嵌入了Unsplash 获取图像的SDK，使得程序不仅能够从相册、相机获取图像，还能够直接从 Unsplash 无版权图像网站通过关键字检索获取图像。同时新增了图像分享的入口。为了适应新的变化将页面进行了部分重组，使其更加符合开发需求。<br><img src="http://image.stephenfang.me/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.58.22.png"><br>未来可能会考虑将该项目进行开源，现阶段仍然希望其具备更多的功能，以下为软件的运行测试。</p><h3 id="页面逻辑"><a href="#页面逻辑" class="headerlink" title="页面逻辑"></a>页面逻辑</h3><p><img src="http://image.stephenfang.me/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.44.23.png"></p><ul><li>开启App后进入引导页面，提示用户使用该App需遵守相关用户协议。</li><li>点击开始处理后跳转至第二个页面，页面显示提示需要选择图像</li><li>点击选择图像后，用户需要在三种图像获取图形中做出选择，或选择取消</li></ul><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p><img src="http://image.stephenfang.me/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.46.41.png"></p><ul><li>处理相册图片实例，点选最近拍摄的照片，程序在本视图中加载此图像</li><li>点击三个处理按钮中的最右者，即中值滤波效果，视图会进行跳转</li><li>新的视图包含了保存和分享图像的功能，若点击保存，程序会将图像写入相册并告知用户</li></ul><p><img src="http://image.stephenfang.me/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.51.50.png"></p><ul><li>尝试从相册加载一张新图像，可以看到图像中的树林被雾霾覆盖</li><li>点击最左侧的去雾操作，由于去雾操作运算量较大，并且为了避免用户在运算过程中点按按钮，整个可操作区域不可点按，同时有活动指示环展示加载进度</li><li>需要注意的是三个图像操作都采用了多线程的方式</li><li>处理完成图像后可以点击分享按钮使用系统内建的分享服务进行图像的分享</li></ul><p><img src="http://image.stephenfang.me/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.54.28.png"></p><ul><li>尝试从相机拍摄一张图像</li><li>点击拍摄按钮后图像被获取，可以使用该图像进行处理</li><li>在视图中加载图像后尝试点击中间的灰度化图像处理</li><li>图像灰度化操作完成可以预览效果和保存、分享</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] Kaiming He. Single Image Haze Removal Using Dark Channel Prior [D]. 2009,CVPR<br>[2] Alexander Shishkov, Kirill Kornyakov. Instant OpenCV for iOS (English Edition) [M]. Packt Publishing, 2013<br>[3] Matthijs Hollemans. The iOS Apprentice [M]. Razeware LLC, 2014</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇内容主要包含在 iOS 项目项目中添加 OpenCV 库、Objective-C++ 与 Swift 的结合使用，及桥接文件的添加等等，为 OpenCV 系列的第四篇文章。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://stephefang.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="OpenCV" scheme="https://stephefang.me/tags/OpenCV/"/>
    
    <category term="Swift" scheme="https://stephefang.me/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>软件设计模式 - 单例模式</title>
    <link href="https://stephefang.me/2020/06/07/Singleton_Pattern/"/>
    <id>https://stephefang.me/2020/06/07/Singleton_Pattern/</id>
    <published>2020-06-07T05:23:20.000Z</published>
    <updated>2022-07-24T15:21:42.188Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式(Singleton Pattern)，也叫单子模式，属于创建型模式的一种。单例模式重点解决几个不同的客户对象需要引用同个对象，且这种类型的对象数目不止一个的问题。通过确保一个类只能有一个实例，提供对该实例的全局访问，使得客户对象无需操心是否存在单例类的实例，实例化由单例类自己控制。</p><span id="more"></span><h2 id="模式简介"><a href="#模式简介" class="headerlink" title="模式简介"></a>模式简介</h2><p>某些时候整个系统只需要拥有一个全局对象，却有利于协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息，这种方式简化了在复杂环境下的配置管理。<br>单例类存在多种实现方式，较为普遍的实现方式为饿汉式单例类与懒汉式单例类。其中饿汉式单例类在被加载时就将自己实例化。单从资源利用效率角度来讲，饿汉式单例类比懒汉式单例类稍差些。从速度和反应时间角度来讲，饿汉式单例类则比懒汉式单例类稍好些。懒汉式单例类在实例化时，必须处理好在多个线程同时首次引用此类时的访问限制问题，特别是当单例类作为资源控制器，在实例化时必然涉及资源初始化，而资源初始化很有可能耗费大量时间，这意味着出现多线程同时首次引用此类的机率变得较大，需要通过同步化机制进行控制。具体的单例模式实现方式会在后文重点讨论。<br>单例模式的优点在于可以严格控制客户怎样以及何时访问它，为设计及开发团队提供了共享的概念。同时由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能。然而，由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。单例类的职责过重，在一定程度上违背了“单一职责原则”。至于单例模式相关的设计原则会在后文中逐一列举。<br>单例模式应用十分广泛，如需创建一个对象需要耗费大量时间与空间资源时，如IO，数据库连接等，再如需要生成唯一id、静态类型的的工具类等情形也需要使用单例模式。</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><p>与单例设计模式相关的有以下OOP设计原则。</p><ul><li>迪米特原则<br>迪米特法则（Law of Demeter），一个类对于其他类知道的越少越好，就是说一个对象应当对其他对象有尽可能少的了解,只和朋友通信，不和陌生人说话。<br>在单例模式中表现为其他类对该单例类了解的尽量少。其他类获取该单例类的对象只需要通过其暴露的方法即可，而不需要了解单例具体是怎么创建的。假如该单例类创建的过程变得更加复杂，其他类的调用还是通过这个简单的方法获得对象，不用关心单例类增加了哪些代码。</li><li>单一职责原则<br>单一职责模式的定义为，就一个类而言，应该仅有一个引起它变化的原因。单例类的职责过重，既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起，在一定程度上违背了单一职责原则。违背单一职责原则带来的弊端不限于复用能力越弱、多个职责，一个职责的变化可能会影响到其他的职责等。<br>在使用具体的设计模式前应该思考与之相关的设计原则，进而确定该设计模式是否符合需要，以单例模式为例，单例类没有接口，不能继承，与单一职责原则冲突，仅适用于只关心内部逻辑而不关心外面如何实例化的情形。</li></ul><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>单例模式的实现需以下三个部分：</p><ul><li>一个引用单例对象的静态私有成员变量</li><li>一个公共静态方法，负责实现一次性的实例化并返回对单例对象的引用</li><li>设置为保护型或私有型的构造方法<br>根据单例模式的成员可以画出相应的类图，其中包含引用单例对象的静态私有成员变量instance；公共静态方法getInstance()负责实现一次性的实例化并返回对单例对象的引用；设置私有型的构造方法Singleton()。</li></ul><p><img src="http://image.stephenfang.me/mweb/15917501563785.jpg"><br>图3.1 单例模式的类图</p><p>在所有常见的设计模式中，singleton模式是唯一一个能够用短短几十行代码完成实现的模式，接下来以不同的例子探讨单例模式的解法。</p><ol><li>只适用于单线程模式的解法（懒汉式）<br>由于单例模式要求只能生成一个实例，因此我们必须把构造函数设为私有函数以禁止他人创建实例。可以通过定义一个静态的实例，在需要的时候创建该实例。下面定义类型Singleton1就是基于这个思路的实现：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton1 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton1();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码3.1 只适用于单线程模式的解法<br>    上述代码只有在instance为null时才创建一个实例从而避免重复创建，同时我们把构造函数定义为私有函数从而确保只创建一个实例。该代码仔单线程的时候工作正常，但是在多线程的情况下就会出现问题。设想如果两个线程同时运行到判断instance是否为null的if语句，并且instance的确没有创建时，那么两个线程都会创建一个实例，此时类型Singleton1就不再满足单例模式的要求，可以通过以下解法改变该局面。</p><ol start="2"><li>适用于多线程的解法（效率欠佳的懒汉式）<br>为了保证在多线程环境下还是只能得到类型的一个实例，需要加上一个同步锁。假设有两个线程同时想创建一个实例。由于在一个时刻只有一个线程能得到同步锁，当第一个线程加上锁时，第二个线程只能等待。当第一个线程发现实例还没有创建时，它创建出一个实例。接着第一个线程释放同步锁，此时第二个线程可以加上同步锁，并运行接下来的代码。这个时候由于实例已经被第一个线程创建出来了，第二个线程就不会重复创建实例了，这样就保证了在多线程环境中也只能得到一个实例。把Singleton1稍做修改得到了如下代码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码3.2 适用于多线程的低效率解法<br>    但是 Singleton2 还不是很完美。我们每次通过 getInstance 方法得到Singleton2的实例，都会试图加上一个同步锁，而加锁是一个非常耗时的操作，在没有必要的时候应该尽量避免。</p><ol start="3"><li>   加同步锁前后两次判断实例是否已存在的解法（DCL）<br>在实例还没有创建之前需要加锁操作，以保证只有一个线程创建出实例。然而当实例已经完成创建之后，已经不需要再做加锁操作了。Singleton3中只有当instance为null即没有创建时，需要加锁操作。当instance 已经创建出来之后，则无须加锁。参考以下改进后的Singleton2代码，其时间效率能够比Singleton2提升很多。其中instance被volatile 修饰，增加线程之间的可见性，并且任何线程对它的写操作都会立即刷新到主内存中，并且会强制让缓存了instance变量的线程中的数据清空，必须从主内存重新读取最新数据。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton3 instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton3.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton3();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码3.3 加同步锁前后两次判断实例是否已存在的解法<br>Singleton3用加锁机制来确保在多线程环境下只创建一个实例，并且用两个 if 判断来提高效率。这样的代码实现起来比较复杂，容易出错，然而还有其他解法。</p><ol start="4"><li>   利用静态构造函数的解法（饿汉式）<br>静态构造函数的实现代码非常简洁。因为单例对象只创建一次，所以考虑使用 static 修饰，这样在 JVM 加载该类的时候就会自动创建对象，又因为不希望其他类执行该单例类的构造方法再去创建单例对象，所以把构造函数的属性设置为 private。效果为在调用静态构造函数时初始化静态变量，确保只调用一次静态构造函数，从而保证只初始化一次instance。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton4 instance = <span class="keyword">new</span> Singleton4();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码3.4 利用静态构造函数的解法<br>假设我们在Singleton4 中添加一个静态方法，调用该静态函数是不需要创建一个实例的，但如果按照Singleton4的方式实现单例模式，则仍然会过早地创建实例，从而降低内存的使用效率。</p><ol start="5"><li>   利用静态内部类的解法<br>静态内部类的优点为，外部类加载时不需要立即加载内部类，内部类不被加载则不去初始化instance，即不会在内存中占据位置。如下巧妙运用了这种方法，即第一次调用getInstance() 方法使得JVM加载SingletonStatic类，从某种程度上而言实现了按需创建实例。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonStatic</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton5 instance = <span class="keyword">new</span> Singleton5();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton5 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonStatic.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码3.5 利用静态内部类的解法<br>当Singleton5类第一次被加载时，并不需要立即加载SingletonStatic内部类，只有当 getInstance() 方法第一次被调用时，才会初始化instance对象。这种方法不仅能确保线程安全，也能保证单例的唯一性，同时也延迟了单例的实例化。</p><ol start="6"><li>   利用枚举的解法<br>引用 《Effective Java》书中的一句话，“单元素的枚举类型已经成为实现Singleton的最佳方法。”这种解法利用枚举的特性保证了按需加载、线程同步。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton6</span> </span>&#123;</span><br><span class="line">    instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码3.6 利用枚举类型的解法<br>目前该实现方式还没有被广泛采用，但它更简洁，自动支持序列化机制，绝对防止多次实例化。它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏。</p><ol start="7"><li>   解法总结<br>以简洁明了的表格总结前文中实现的六种单例模式的解法，对于不同解法的参考指标为是否懒加载、是否容易实现、是否线程安全以及是否高效率。</li></ol><table><thead><tr><th>实现方法</th><th>解法一</th><th>解法二</th><th>解法三</th><th>解法四</th><th>解法五</th><th>解法六</th></tr></thead><tbody><tr><td>懒加载</td><td>是</td><td>是</td><td>是</td><td>否</td><td>是</td><td>是</td></tr><tr><td>易实现</td><td>是</td><td>是</td><td>否</td><td>是</td><td>是</td><td>是</td></tr><tr><td>线程安全</td><td>否</td><td>是</td><td>是</td><td>是</td><td>是</td><td>是</td></tr><tr><td>高效率</td><td>否</td><td>否</td><td>是</td><td>是</td><td>是</td><td>是</td></tr></tbody></table><p>表格3.1 解法总结表</p><p>一般情况下不建议使用第一种和第二种懒汉解法，第三种解法补足了前两者的短板然而编写逻辑较为复杂，第四种解法虽然没有实现懒加载的效果但仍为比较通用的解法，静态内部类的解法能够实现按需加载不失为一种优秀的算法，而如果涉及到反序列化创建对象时，可以尝试使用最后一种枚举类型的算法。</p><h2 id="模式简例"><a href="#模式简例" class="headerlink" title="模式简例"></a>模式简例</h2><p>在JDK内部也存在对单例模式的运用。Runtime类就是十分典型的例子。<br><img src="http://image.stephenfang.me/mweb/15917515167469.jpg"></p><p>图4.2  Runtime类图<br>    在每一个Java应用程序中，都有唯一的一个Runtime对象，通过这个对象应用程序可以与其运行环境发生相互作用。Runtime类提供私有的静态的Runtime对象 currentRuntime、私有的空Runtime构造方法以及一个静态工厂方法getRuntime（），通过调用getRuntime（）方法，可以获得Runtime类唯一的一个实例，并且从源代码代码中可以看出，Runtime使用了饿汉式单例模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runtime</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Runtime currentRuntime = <span class="keyword">new</span> Runtime();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title">getRuntime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentRuntime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Runtime</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码4.3  Runtime源代码<br>前文中有提及，单例模式还可以用于生成唯一id 的情形，这里以前文中的Singleton4 实现方式为例。通过创建Main主类，并且在该类的main()方法中，创建2个Singleton4对象，获取对象的hashCode。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建单例对象1：&quot;</span>);</span><br><span class="line">        Singleton4 singleton1 = Singleton4.getInstance();</span><br><span class="line">        System.out.println(singleton1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;创建单例对象2&quot;</span>);</span><br><span class="line">        Singleton4 singleton2 = Singleton4.getInstance();</span><br><span class="line">        System.out.println(singleton2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码4.5  测试类<br>运行结果符合预期，测试类通过getInstance()方法获得的是同一对象，因而哈希值是一致的。此特点适用于生产唯一序列号的场景。<br><img src="http://image.stephenfang.me/mweb/15917516893500.jpg"></p><p>图4.3  测试结果<br>    对于单例模式的应用与验证至此告一段落，显然单例模式的运用远不止于此，相关的还有Web计数器、数据库配置文件等等。</p><h2 id="问题与缺陷"><a href="#问题与缺陷" class="headerlink" title="问题与缺陷"></a>问题与缺陷</h2><p>滥用单例可能带来一些负面问题，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出。在Java语言中，连接池采用持久化服务的方式，滥用单例将导致连接得不到释放，内存不断上升从而溢出。<br>JVM提供了自动垃圾回收的机制，并且采用根搜索算法，其基本思路为：任何“活”的对象一定能最终追溯到其存储在堆栈或静态存储区中的引用。通过一系列根（GC Roots）的引用作为起点开始搜索，经过一系列的路径，如果可以到达java堆中的对象，那么这个对象就是不可回收的。可以作为根的对象有：</p><ul><li>虚拟机栈（栈桢中的本地变量表）中的引用的对象。</li><li>方法区中的类静态属性引用的对象。</li><li>方法区中的常量引用的对象。</li><li>本地方法栈中JNI的引用的对象。</li></ul><p>方法区是JVM的一块内存区域，用来存放类相关的信息。java中单例模式创建的对象被自己类中的静态属性所引用，符合第二条，因此，单例对象不会被JVM垃圾收集。虽然JVM堆中的单例对象不会被垃圾收集，但是单例类本身如果长时间不用会不会被收集呢？因为JVM对方法区也是有垃圾收集机制的。如果单例类被收集，那么堆中的对象就会失去到根的路径，必然会被垃圾收集掉。<br>通过以下代码测试单例对象是否会被回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.singleton;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] test = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">6</span>*<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obj</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] test = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">3</span>*<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Singleton.getInstance();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">new</span> Obj();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码5.1  测试代码<br>运行时JVM 的参数被设定为：<br><code>-verbose:gc -Xms20M -Xmx20M</code><br>即每次JVM进行垃圾回收时显示内存信息，JVM的内存设为固定20M。<br>通过模拟J2EE容器，实例化大小为6M的单例类，然后不断的创建对象，迫使JVM进行垃圾回收，观察垃圾收集信息，如果进行垃圾收集后，内存仍然大于6M，则说明垃圾回收不会回收单例对象。</p><p><img src="http://image.stephenfang.me/java.png"></p><p>图5.1  测试结果<br>从运行结果中可以看到有6M空间没有被收集。达到GC的条件其一为该类所有的实例都已经被回收，即java堆中不存在该类的任何实例。单例的类不满足该条件，因此单例类也不会被回收。也就是说，只要单例类中的静态引用指向JVM堆中的单例对象，那么单例类和单例对象都不会被垃圾收集。所以“如果实例化的对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致对象状态丢失。”这一点目前无法在实验中验证。<br>至于违背了单一职责原则这一点前文已有讨论，不复引述。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>洁城浩，《设计模式-JAVA语言中的应用》，中国铁道出版社2005.1</li><li>（美） GoF, 《设计模式-可复用的面向对象软件的基础》，机械工业出版社，2005 </li><li>何海涛，《剑指Offer》，电子工业出版社2012.1</li><li>（美）Alan Holub，《设计模式初学者指南》，机械工业出版社，2006</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;单例模式(Singleton Pattern)，也叫单子模式，属于创建型模式的一种。单例模式重点解决几个不同的客户对象需要引用同个对象，且这种类型的对象数目不止一个的问题。通过确保一个类只能有一个实例，提供对该实例的全局访问，使得客户对象无需操心是否存在单例类的实例，实例化由单例类自己控制。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://stephefang.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="设计模式" scheme="https://stephefang.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="Java" scheme="https://stephefang.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>软件设计模式 - 中介者模式</title>
    <link href="https://stephefang.me/2020/06/03/Mediator_Pattern/"/>
    <id>https://stephefang.me/2020/06/03/Mediator_Pattern/</id>
    <published>2020-06-03T09:23:20.000Z</published>
    <updated>2022-07-24T15:20:03.844Z</updated>
    
    <content type="html"><![CDATA[<p>中介者模式(Mediator Pattern)，又称为调停者模式，是一种对象行为型模式。该设计模式使用一个中介对象（中介者）来封装一系列的对象交互，使得各对象不需要显式地相互引用，从而使其耦合松散、独立地改变它们之间的交互。本文以设计模式的四个要素出发系统性地研究中介者模式。</p><span id="more"></span><h2 id="模式目的"><a href="#模式目的" class="headerlink" title="模式目的"></a>模式目的</h2><p>中介的含义不难理解，以具体的生活场景为例，在租房、留学、找工作等时期或多或少都需要中介的帮助。互联网上实时更新的海量信息与错综复杂的关系让你无法分辨真实性与参考性，所以你无法躲避这些中介关系，只能够通过其获取你所需要的信息。<br>在软件世界也同样如此，当有多个对象彼此间相互交互的时候，自然就会想到对象间的耦合度过高，而中介者模式就是用来解决这一问题的，通过封装对象间的交互行为，来降低对象之间的耦合性，防止出现系统或模块内部过度耦合。以下的图片展现了具备复杂关联关系的对象模拟图。<br><img src="http://image.stephenfang.me/mweb/15917479538199.jpg"><br>图2.1 复杂关联关系模拟图<br>根据上图以及以往程序设计中的经验，我们可以推断出程序设计中存在过多复杂关联关系带来的问题：</p><ol><li>   系统结构复杂：对象之间存在大量的相互关联和调用，若其中一个对象发生变化，则需要跟踪和该对象关联的其他所有对象并进行相应处理。</li><li>   对象可重用性差：由于一个对象和其他对象具有很强的关联，若不存在其他对象的支持，一个对象很难被另一个系统或模块重用，这些对象表现像一个不可分割的整体，职责较为混乱。</li><li>   系统扩展性低：增加一个新对象需要在原有相关对象上增加引用，同时调整原有对象，系统耦合度高，对象操作很不灵活，扩展性差。</li></ol><p>在面向对象的软件设计与开发过程中，根据“单一职责原则”，我们应该尽量将对象细化，使其只负责或呈现单一的职责。对于一个可能由很多对象构成的模块，这些对象之间可能存在相互的引用，为了减少对象两两之间复杂的引用关系，使之成为一个松耦合的系统，我们需要使用中介者模式，下图十分生动地展现了中介者模式的意义。</p><p><img src="http://image.stephenfang.me/mweb/15917479852765.jpg"><br>图2.2 中介者模式应用模拟图<br>由上述的描述可知，中介者模式的目的主要是为了降低模块内部之间类的相互引用，防止出现系统或模块内部过度耦合。</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>从问题出发，我们总结出中介者需要承担两方面的职责：</p><ul><li>中转作用（结构性）：<br>通过中介者提供的中转作用，各个同事对象就不再需要显式引用其他同事，当需要和其他同事进行通信时，通过中介者即可。</li><li>协调作用（行为性）：<br>中介者可以更进一步的对同事之间的关系进行封装，同事可以一致地和中介者进行交互，而不需要指明中介者需要具体怎么做，中介者根据封装在自身内部的协调逻辑，对同事的请求进行进一步处理，将同事成员之间的关系行为进行分离和封装。</li></ul><p>从中介者模式的组成而言，其主要包含四个角色：</p><ul><li>Mediator（抽象中介者）：定义一个接口用于与各同事对象之间的通信</li><li>   ConcreteMediator（具体中介者）：抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；</li><li>   Colleague（抽象同事类）：定义各同事的公有方法；</li><li>   ConcreteColleague（具体同事类）：抽象同事类的子类，每一个同事对象都引用一个中介者对象；每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；在具体同事类中实现了在抽象同事类中定义的方法。</li></ul><p>下图展示了中介者模式中的类结构，可以清楚地看到四种角色之间的关系。<br><img src="http://image.stephenfang.me/mweb/15917481238616.jpg"><br>图3.1 中介者模式类图</p><p>中介者模式可以方便地应用于图形界面(GUI)开发中，在比较复杂的界面中可能存在多个界面组件之间的交互关系。对于这些复杂的交互关系，我们可以引入一个中介者类，将这些交互的组件作为具体的同事类，将它们之间的引用和控制关系交由中介者负责，在一定程度上简化系统的交互，<br>MVC架构中控制器（Controller）作为一种中介者，是数据模型对象与视图之间的桥梁，它监听视图上的交互动作并且对视图的状态作出反应，同时在Model通知数据发生改变的时候更新Model的状态。以移动应用开发为例，当用户点击按钮或在View中输入信息后视图会通知控制器，控制器解释用户交互逻辑，然后联系模型获取完成请求所需的信息。模型将信息提供给控制器，控制器将其中继到视图，视图将其显示给用户。</p><p><img src="http://image.stephenfang.me/mweb/15917481870001.jpg"></p><p>图3.2 MVC模式</p><h2 id="模式简例"><a href="#模式简例" class="headerlink" title="模式简例"></a>模式简例</h2><p>科技发达之后家里所有设备都是智能化的，而小明在家洗澡的时候有个习惯就是喜欢听歌，而且洗澡时候还要把窗帘拉上。因此就有这种情形，小明拉上窗帘说明洗浴设备需要工作，并且音乐设备也将唤醒。因此我们希望小明家的洗浴设备、音响设备和窗帘设备能协同合作，不管操作哪种设备，其他两种设备都有响应。<br>现在很明显我们可以看出来，我们有三个对象，也就是三种设备，程序看起来也很简单，只要在启动一个设备时，能同时启动另外两个设备。那么我们只需在一个设备的类里放两个其他设备的引用，很容易就能解决这个问题，这样写出来的程序对象关系如下图。<br><img src="http://image.stephenfang.me/mweb/15917485113553.jpg"><br>图4.1 修改前模式<br>该程序最主要的功能就是在一个类里完成了对另外两个类的方法作用。但是这样设计，由耦合度过高的问题带来两个主要缺陷</p><ul><li>一旦窗帘设备损坏需要更换，那么就要让新的窗帘设备建立所有其他设备的连接</li><li>若产生新的的需求，如洗澡的时候要把门锁住，那门锁的智能设备又要关联所有设备，这样的程序设计使得在扩展程序功能时更加麻烦。</li></ul><p>中介者模式的引入则极大的弥补了上述程序的两个缺陷，对象交互如下图：<br><img src="http://image.stephenfang.me/mweb/15917485380247.jpg"><br>图4.2 修改后模式</p><p>中介者就好比智能家居的管家，所有对象的交互指令都通过它来传达。中介者负责与对象联系，对象与对象之间不再进行直接的交互，也就是对对象关系进行解耦。</p><p> <img src="http://image.stephenfang.me/mweb/15917485453277.jpg"><br>图4.2 程序类图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicDevice</span> <span class="keyword">extends</span> <span class="title">Device</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operateDevice</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str != <span class="string">&quot;MusicDevice&quot;</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;音乐设备已启动&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="string">&quot;true&quot;</span>)&#123;</span><br><span class="line">            Mediator();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mediator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ConcreteMediator mediator = <span class="keyword">new</span> ConcreteMediator();</span><br><span class="line">        mediator.startUp(<span class="string">&quot;MusicDevice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>音乐设备部分的代码如上，其他设备代码可以参照此例。设备类都继承自Device类，其中主要由两个方法组成，一个是operateDevice函数，用来启动设备，另一个是Mediator函数，用来调用中介者，并以中介者为媒介启动其他设备。Mediator由operateDevice函数进行调用，并设置了判断条件，防止反复调用中介者类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">SmartMediator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startUp</span><span class="params">(String item)</span></span>&#123;</span><br><span class="line">        MusicDevice musicDevice = <span class="keyword">new</span> MusicDevice();</span><br><span class="line">        CurtainDevice curtainDevice = <span class="keyword">new</span> CurtainDevice();</span><br><span class="line">        BathDevice bathDevice = <span class="keyword">new</span> BathDevice();</span><br><span class="line"></span><br><span class="line">        musicDevice.operateDevice(item);</span><br><span class="line">        curtainDevice.operateDevice(item);</span><br><span class="line">        bathDevice.operateDevice(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中介者类如上，即程序最为重要的部分。当它的startUp方法被某一设备调用之后，它会新建所有设备的类，并且调用除了已启动的设备之外，所有其他设备的启动方法。在启动方法中设置了参数，以防止循环调用。当我们想要添加新的设备的时候，只需要编写新设备类，并且在中介者类中添加该类的启动方法，就能完成修改。从而降低代码之间的耦合性，提高了程序的可维护性。</p><p>程序分析：</p><ol><li>该程序解决了上述两个缺陷，现在所有设备都只与中介者相关联，不管是新增设备还是替换设备，只需要改变设备与中介者之间的关系，降低了代码之间的耦合性。</li><li>改变设计之后所有设备的启动项都由中介者管理，用户可以通过中介者方便地启动所有设备，而不需要将所有设备之间连接起来。避免了随着设备的增多，设备之间的联系变得无比复杂的情况。</li></ol><h2 id="模式总结"><a href="#模式总结" class="headerlink" title="模式总结"></a>模式总结</h2><ol><li><p>   中介者模式优点：    - 简化了对象之间的交互。    - 将各同事解耦，减少子类生成，增加对象的复用性。    - 简化各同事类的设计和实现，便于系统维护。</p></li><li><p>   中介者模式缺点：    - 在具体中介者类中包含了同事之间的交互细节，如果中介者类设计的不好，可能会导致具体中介者类非常复杂，使得系统难以维护。    - 中介者对象本身需要整理系统内部的对象之间的交互，可能会导致其本身会变得臃肿和复杂，进而变得难以维护</p></li><li><p>中介者模式的适用环境：</p><ul><li>系统中对象之间存在复杂的引用关系，产生的相互依赖关系结构混乱且难以理解。</li><li>一个对象引用了很多对象并且直接和这些对象通信，导致难以复用该对象。</li><li>希望通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。可以通过引入中介者类来实现，在中介者中定义对象。</li><li>交互的公共行为，如果需要改变行为则可以增加新的中介者类。</li></ul></li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F">中介者模式-维基百科</a><br><a href="https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/mediator.html">中介者模式— Graphic Design Patterns - 图说设计模式</a><br><a href="https://juejin.im/post/5bd275dc51882529290fe2c5">设计模式 | 中介者模式及典型应用</a><br><a href="https://storm.cis.fordham.edu/~gweiss/data-mining/datasets.html">中介者模式 - jyqdaisy - 博客园</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;中介者模式(Mediator Pattern)，又称为调停者模式，是一种对象行为型模式。该设计模式使用一个中介对象（中介者）来封装一系列的对象交互，使得各对象不需要显式地相互引用，从而使其耦合松散、独立地改变它们之间的交互。本文以设计模式的四个要素出发系统性地研究中介者模式。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://stephefang.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="设计模式" scheme="https://stephefang.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="Java" scheme="https://stephefang.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 学习笔记(八）</title>
    <link href="https://stephefang.me/2020/04/24/Objc_Learning_8/"/>
    <id>https://stephefang.me/2020/04/24/Objc_Learning_8/</id>
    <published>2020-04-24T14:23:20.000Z</published>
    <updated>2022-07-24T15:21:01.572Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第八篇文章，主要复习了自动引用计数与深浅拷贝。</p><span id="more"></span><h3 id="手动引用计数总结"><a href="#手动引用计数总结" class="headerlink" title="手动引用计数总结"></a>手动引用计数总结</h3><ul><li>若需保持对象不被销毁可以使用 retain，使用完对象后需使用 release 进行释放。</li><li>给对象发送 release 消息不会必然销毁对象，只有当该对象的引用计数减至0时对象才会被销毁，接着系统会发送 dealloc 消息给这个对象用于释放内存。</li><li>对使用了 retain 或者 copy、 mutableCopy、alloc 或 new 方法的任何对象，以及具有 retain 和 copy 特性的属性进行释放，需要覆盖 dealloc 方法，使得在对象被释放的时候能够释放这些实例变量。</li><li>如果在方法中不再需要用到这个对象但需要将其返回，可以给这个对象发送 autorelease 消息以标记这个对象延迟释放。autorelease 消息并不会影响到对象的引用计数。</li><li>当应用终止时内存中的所有对象都会被释放，不论它们是否在自动释放池中。</li></ul><h3 id="自动引用计数总结"><a href="#自动引用计数总结" class="headerlink" title="自动引用计数总结"></a>自动引用计数总结</h3><ul><li>只要某个对象被任一 strong 指针指向，那么它将不会被销毁。如果对象没有被任何 strong 指针指向，那么就将被销毁。</li><li>通常所有对象的指针变量都是强变量，将对象的引用赋给变量使对象自动保持，旧对象的引用会在赋值前被释放。</li><li>当两个对象都持有彼此的强引用时，将会产生循环保持。如果对象仍然有引用，系统将不能销毁这个对象。如果两个对象都强引用彼此就不可以被销毁。</li><li>解决强引用问题可以创建其他类型的对象变量，并允许使用弱引用。通过父视图持有子视图的强引用，子视图持有父视图的弱引用，这样就没有循环保持。弱变量也不能阻止引用的对象被销毁。</li><li>以 <code>Objective-C</code>中的 delegate 设计模式为例，viewController 中有一个 strong 指针指向它所负责管理的 UITableView，而 UITableView 中的 dataSource 和 delegate 指针都指向 viewController 的 weak 指针。</li><li>当声明一个弱变量，系统会追踪赋值给这个变量的引用。当引用的对象释放时，弱变量会被自动设置为nil。变量被设置为nil,给nil对象发送任何消息不会有反应，避免了无意间给这个变量发送消息引起的崩溃。</li><li>如果需要持有一个对象，那么对其发送 retain。如果之后不再使用该对象，那么需要对其发送 release（或者autorelease） 每一次对 retain、alloc 或 new 的调用，需要对应一次 release 或 autorelease 调用。</li></ul><h3 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h3><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><ul><li>将原数据拷贝后存入一块新的内存中，并以新的指针指向新的内存。</li><li>拷贝过程结束后，两个对象存储数据相同，内存地址不同。</li><li>两个对象互不影响，互不干涉。</li><li>源对象和副本的计数器相同。</li><li>非容器类的浅拷贝只拷贝对象的地址，没有新的内存被分配。</li><li>容器类的浅拷贝不拷贝容器的内容，两个容器的地址不同，在一个容器中修改值，另一个浅拷贝的容器中的值也会变化。</li></ul><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><ul><li>拷贝数据所在内存的地址，目标对象指针和源对象指向同一片内存空间。</li><li>新对象计数器为1，源对象计数器不变。</li><li>在<code>Objective-C</code>中使用 retain 关键字进行引用计数，使几个指针共用同一片内存空间，不会轻易的销毁内存。</li><li>非容器类的深拷贝就是重写分配一块内存，然后把另一个对象的内容原封不动搬过来。对容器类的深拷贝是对容器中的每个元素都进行拷贝。</li></ul><h4 id="拷贝方式"><a href="#拷贝方式" class="headerlink" title="拷贝方式"></a>拷贝方式</h4><ol><li><strong>retain</strong>：始终是浅拷贝。引用计数每次加1。返回对象是否可变与被复制的对象保持一致。</li><li><strong>copy</strong>：对于可变对象为深拷贝，引用计数不改变；对于不可变对象是浅拷贝，引用计数每次加1。始终返回一个不可变对象。  </li><li><strong>mutableCopy</strong>：始终是深拷贝，引用计数不改变。始终返回一个可变对象。</li></ol><p>并非所有的类都支持拷贝。只有遵循 NSCopying 协议的类，才支持 copy 拷贝，只有遵循 NSMutableCopying 协议的类，才支持 mutableCopy 拷贝。如果没有遵循拷贝协议拷贝时会出错。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://onevcat.com/2012/06/arc-hand-by-hand/">手把手教你ARC——iOS/Mac开发ARC入门和使用</a><br><a href="https://www.cnblogs.com/ludashi/p/3894151.html">Objective-C中的深拷贝和浅拷贝</a><br><a href="">Objective-C 程序设计 (第六版)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近开始学习 &lt;code&gt;Objective-C&lt;/code&gt; 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第八篇文章，主要复习了自动引用计数与深浅拷贝。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://stephefang.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Xcode" scheme="https://stephefang.me/tags/Xcode/"/>
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://stephefang.me/tags/Objective-C/"/>
    
    <category term="ARC" scheme="https://stephefang.me/tags/ARC/"/>
    
  </entry>
  
  <entry>
    <title>WEKA数据挖掘 - 关联算法</title>
    <link href="https://stephefang.me/2020/04/22/WEKA_Association/"/>
    <id>https://stephefang.me/2020/04/22/WEKA_Association/</id>
    <published>2020-04-22T04:23:20.000Z</published>
    <updated>2022-07-24T15:21:59.649Z</updated>
    
    <content type="html"><![CDATA[<p>本文总结了 WEKA 中 Apriori关联 与 FPgrowth关联 的操作方法。</p><span id="more"></span><h3 id="实验简介"><a href="#实验简介" class="headerlink" title="实验简介"></a>实验简介</h3><p>关联规则表示不同数据项目在同一事件中出现的相关性，下图中超市市场分析员分析顾客购买商品的场景可以直观地理解关联规则。 </p><p><img src="http://image.stephenfang.me/mweb/15877849125580.jpg"></p><p>顾客购买面包同时也购买牛奶的购物模式可以用以下关联规则表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">面包 =&gt; 牛奶 [ 支持度 =2%, 置信度 =60%]</span><br></pre></td></tr></table></figure><p>其中面包是规则前项（Antecedent），牛奶是规则后项 (Consequent)。实例数（Instances）表示所有购买记录中包含面包的记录的数量。支持度（Support）表示购买面包的记录数占所有购买记录数的百分比。规则支持度（Rule Support）表示同时购买面包和牛奶的记录数占所有的购买记录数的百分比。置信度（confidence）表示同时购买面包和牛奶的记录数占购买面包记录数的百分比。提升（Lift）表示置信度与已知购买牛奶的百分比的比值，提升大于 1 的规则才是有意义的。<br>如果关联满足最小支持度阈值和最小置信度阈值就可以认为关联规则是有意义的。这些阈值由用户或领域专家设定。就顾客购物而言，根据以往的购买记录，找出满足最小支持度阈值和最小置信度阈值的关联规则，就找到顾客经常同时购买的商品。</p><h4 id="Apriori"><a href="#Apriori" class="headerlink" title="Apriori"></a>Apriori</h4><p>Apriori算法是第一个关联规则挖掘算法，也是最经典的算法。它利用逐层搜索的迭代方法找出数据库中项集的关系，以形成规则，其过程由连接（类矩阵运算）与剪枝（去掉那些没必要的中间结果）组成。<br>本次实验中有如下步骤：</p><ul><li>使用 WEKA 的 Apriori 策略对数据集进行关联操作</li><li>查看并分析关联结果</li><li>分析 Apriori 的算法与特征</li></ul><h4 id="FPgrowth"><a href="#FPgrowth" class="headerlink" title="FPgrowth"></a>FPgrowth</h4><p>Apriori算法在产生频繁模式完全集前需要对数据库进行多次扫描，同时产生大量的候选频繁集，这就使Apriori算法时间和空间复杂度较大。<br>FP-Growth算法针对Apriori算法在挖掘长频繁模式时性能低下的特点提出了改进，它采取如下分治策略：将提供频繁项集的数据库压缩到一棵频繁模式树（FP-tree），但仍保留项集关联信息。FP-Growth算法使用了一种称为频繁模式树（Frequent Pattern Tree）的数据结构，FP-tree是一种特殊的前缀树，由频繁项头表和项前缀树构成。FP-Growth算法基于以上的结构加快整个挖掘过程。<br>实验包含如下步骤：</p><ul><li>使用 WEKA 的FPgrowth 策略对数据集进行关联操作</li><li><pre><code>查看并分析关联结果</code></pre></li><li><pre><code>对比分析 FPgrowth 策略与 Apriori 策略的效果</code></pre></li></ul><h3 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h3><p>本次实验的数据我参照Waikato大学的数据挖掘教程，选择了vote.arff 数据集，这是一个关于1984年美国国会投票记录数据集，其中包含投票者的身份（民主党人或共和党人）以及多项议题的投票结果，如下图所示：<br><img src="http://image.stephenfang.me/mweb/15877850041138.jpg"><br><img src="http://image.stephenfang.me/test-1.png"><br>这个数据集包含435条实例（投票信息），其中包含 267 位民主党人投票信息, 168 位共和党人投票信息。投票结果中有移民（immigration）、教育开支（education-spending）、、免税出口（duty-free-exports）等共16个议题。议员对于议题的表决不仅仅只用简单的“Y”、“N”标记，需要注意的是，被标记为“？”的数据并不是代表数据的缺失，可能代表议员持保留意见没有表决，部分数据集摘录如下：</p><p><img src="http://image.stephenfang.me/mweb/15877851693946.jpg"></p><p>由于数据集经过实验验证，数据已完成去噪声处理，并且数据中的“？”并非代表数据缺失，前文交代了相关意义，故不复进行数据预处理的步骤。</p><h3 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h3><h4 id="Apriori-1"><a href="#Apriori-1" class="headerlink" title="Apriori"></a>Apriori</h4><p>Apriori算法的主要思想为：首先找出所有频繁性至少和预定义的最小支持度一样的频繁项集，由频繁项集产生满足最小支持度和最小可信度的强关联规则，然后使用频繁项集产生期望的规则，产生只包含集合的项的所有规则，每一条规则的右部只有一项。一旦这些规则生成，那么只有那些大于用户给定的最小可信度的规则才被保留。<br>Apriori算法利用了“任一频繁项集的所有非空子集必须是频繁的”这一个性质。举例说，如果 {0, 1} 是频繁的，那么 {0}, {1} 也是频繁的，将条件倒置，可得“如果一个项集是非频繁项集，那么它的所有超集也是非频繁项集”这一结论。在算法流程中，首先需要找出频繁1-项集，记为L1；然后用L1来产生候选项集C2，对C2中的项进行判定挖掘产生L2，即频繁2-项集；如此循环往复直至无法发现更多的频繁k-项集。<br>由于Apriori算法每挖掘一层Lk就需要扫描整个数据库一遍，会产生大量的候选频繁集，使得Apriori算法时间和空间复杂度较大，以下为简单的算法示意图。</p><p><img src="http://image.stephenfang.me/mweb/15877852247683.jpg"></p><h4 id="FP-Growth"><a href="#FP-Growth" class="headerlink" title="FP-Growth"></a>FP-Growth</h4><p>FP-Growth算法针对Apriori算法在挖掘时可能出现的性能低下问题提出了改进，无论多少数据，只需要扫描两次数据集，提高了算法运行的效率。FP-Growth算法提供频繁项集的数据库压缩到一棵频繁模式树（FP-tree），但仍保留项集关联信息，基于频繁模式树加快整个挖掘过程。<br>FP-Growth算法思路即不断迭代FP-tree的构造和投影过程，其算法过程大致如下：</p><ol><li>   扫描数据集一次，找到频繁1-项集(单项模式)</li><li>   按频率降序对频繁项排序</li><li>   再次扫描数据集，按F-list的逆序构造条件FP树</li><li>   按F-list的逆序构造条件FP树，生成频繁项目集</li></ol><h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><h4 id="Apriori-2"><a href="#Apriori-2" class="headerlink" title="Apriori"></a>Apriori</h4><p>使用WEKA进行Apriori相关性分析，其生成结果如下所示，WEKA默认显示十条最佳item sets结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Apriori</span><br><span class="line">=======</span><br><span class="line"></span><br><span class="line">Minimum support: 0.45 (196 instances)</span><br><span class="line">Minimum metric &lt;confidence&gt;: 0.9</span><br><span class="line">Number of cycles performed: 11</span><br><span class="line"></span><br><span class="line">Generated sets of large itemsets:</span><br><span class="line"></span><br><span class="line">Size of set of large itemsets L(1): 20</span><br><span class="line"></span><br><span class="line">Size of set of large itemsets L(2): 17</span><br><span class="line"></span><br><span class="line">Size of set of large itemsets L(3): 6</span><br><span class="line"></span><br><span class="line">Size of set of large itemsets L(4): 1</span><br><span class="line"></span><br><span class="line">Best rules found:</span><br><span class="line"></span><br><span class="line"> 1. adoption-of-the-budget-resolution=y physician-fee-freeze=n 219 ==&gt; Class=democrat 219    &lt;conf:(1)&gt; lift:(1.63) lev:(0.19) [84] conv:(84.58)</span><br><span class="line"> 2. adoption-of-the-budget-resolution=y physician-fee-freeze=n aid-to-nicaraguan-contras=y 198 ==&gt; Class=democrat 198    &lt;conf:(1)&gt; lift:(1.63) lev:(0.18) [76] conv:(76.47)</span><br><span class="line"> 3. physician-fee-freeze=n aid-to-nicaraguan-contras=y 211 ==&gt; Class=democrat 210    &lt;conf:(1)&gt; lift:(1.62) lev:(0.19) [80] conv:(40.74)</span><br><span class="line"> 4. physician-fee-freeze=n education-spending=n 202 ==&gt; Class=democrat 201    &lt;conf:(1)&gt; lift:(1.62) lev:(0.18) [77] conv:(39.01)</span><br><span class="line"> 5. physician-fee-freeze=n 247 ==&gt; Class=democrat 245    &lt;conf:(0.99)&gt; lift:(1.62) lev:(0.21) [93] conv:(31.8)</span><br><span class="line"> 6. el-salvador-aid=n Class=democrat 200 ==&gt; aid-to-nicaraguan-contras=y 197    &lt;conf:(0.98)&gt; lift:(1.77) lev:(0.2) [85] conv:(22.18)</span><br><span class="line"> 7. el-salvador-aid=n 208 ==&gt; aid-to-nicaraguan-contras=y 204    &lt;conf:(0.98)&gt; lift:(1.76) lev:(0.2) [88] conv:(18.46)</span><br><span class="line"> 8. adoption-of-the-budget-resolution=y aid-to-nicaraguan-contras=y Class=democrat 203 ==&gt; physician-fee-freeze=n 198    &lt;conf:(0.98)&gt; lift:(1.72) lev:(0.19) [82] conv:(14.62)</span><br><span class="line"> 9. el-salvador-aid=n aid-to-nicaraguan-contras=y 204 ==&gt; Class=democrat 197    &lt;conf:(0.97)&gt; lift:(1.57) lev:(0.17) [71] conv:(9.85)</span><br><span class="line">10. aid-to-nicaraguan-contras=y Class=democrat 218 ==&gt; physician-fee-freeze=n 210    &lt;conf:(0.96)&gt; lift:(1.7) lev:(0.2) [86] conv:(10.47)</span><br></pre></td></tr></table></figure><p>由于对类进行关联分析，故度量类型为置信度，将最小支持度下界（lowerBoundMinSupport）设置为0.1，迭代递减单位（delta）设置为0.05，度量最小值（minMetric）保持默认值0.9，WEKA会重复运行Apriori 算法几次，从最小支持度上界（upperBoundMinSupport）开始，以delta为单位进行迭代运算，当迭代次数达到设定的numRules数值时，或数值达到最小支持度下界（lowerBoundMinSupport）时停止迭代操作。<br>当前获取结果可以看出，最小支持度为0.45，包含196个实例，其中最小置信度为0.9，整个循环操作进行了11次，生成的频繁1-项集包含20个实例，频繁2-项集包含17个实例，频繁3-项集包含6个实例，而频繁4-项集只包含1个实例。<br>关联挖掘结果中最好的Rule得到了219条数据的确认，简要查看一下这条数据代表的意义，若一个议员为收养开支预算投赞成票、为冻结医师的费用投反对票，那么他很可能是民主党人。这是一条很有意思的信息，得到这样的信息也就是关联规则算法的意义所在。<br>评定Ranking Rules的方式不止有Confidence，还有Lift，Leverage和Conviction等，结果中对于每一个Rules也分别给出了各个排序规则的结果，如刚才列举的规则置信度达到了1，Lift值达到了1.63，Leverage值达到了0.19，等等，由于本次关联主要对类进行操作，由置信度的结果我们可以推断出这一规则可信度价值较高。</p><h4 id="FPgrowth-1"><a href="#FPgrowth-1" class="headerlink" title="FPgrowth"></a>FPgrowth</h4><p>使用WEKA进行FPgrowth相关性分析，将参数保持与Apriori相关性分析时不变，可见的效果是生成结果的时间缩短了不少，其生成结果如下图所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">=== Associator model (full training set) ===</span><br><span class="line"></span><br><span class="line">FPGrowth found 41 rules (displaying top 10)</span><br><span class="line"></span><br><span class="line"> 1. [el-salvador-aid=y, Class=republican]: 157 ==&gt; [physician-fee-freeze=y]: 156   &lt;conf:(0.99)&gt; lift:(2.44) lev:(0.21) conv:(46.56) </span><br><span class="line"> 2. [crime=y, Class=republican]: 158 ==&gt; [physician-fee-freeze=y]: 155   &lt;conf:(0.98)&gt; lift:(2.41) lev:(0.21) conv:(23.43) </span><br><span class="line"> 3. [religious-groups-in-schools=y, physician-fee-freeze=y]: 160 ==&gt; [el-salvador-aid=y]: 156   &lt;conf:(0.97)&gt; lift:(2) lev:(0.18) conv:(16.4) </span><br><span class="line"> 4. [Class=republican]: 168 ==&gt; [physician-fee-freeze=y]: 163   &lt;conf:(0.97)&gt; lift:(2.38) lev:(0.22) conv:(16.61) </span><br><span class="line"> 5. [adoption-of-the-budget-resolution=y, anti-satellite-test-ban=y, mx-missile=y]: 161 ==&gt; [aid-to-nicaraguan-contras=y]: 155   &lt;conf:(0.96)&gt; lift:(1.73) lev:(0.15) conv:(10.2) </span><br><span class="line"> 6. [physician-fee-freeze=y, Class=republican]: 163 ==&gt; [el-salvador-aid=y]: 156   &lt;conf:(0.96)&gt; lift:(1.96) lev:(0.18) conv:(10.45) </span><br><span class="line"> 7. [religious-groups-in-schools=y, el-salvador-aid=y, superfund-right-to-sue=y]: 160 ==&gt; [crime=y]: 153   &lt;conf:(0.96)&gt; lift:(1.68) lev:(0.14) conv:(8.6) </span><br><span class="line"> 8. [el-salvador-aid=y, superfund-right-to-sue=y]: 170 ==&gt; [crime=y]: 162   &lt;conf:(0.95)&gt; lift:(1.67) lev:(0.15) conv:(8.12) </span><br><span class="line"> 9. [crime=y, physician-fee-freeze=y]: 168 ==&gt; [el-salvador-aid=y]: 160   &lt;conf:(0.95)&gt; lift:(1.95) lev:(0.18) conv:(9.57) </span><br><span class="line">10. [el-salvador-aid=y, physician-fee-freeze=y]: 168 ==&gt; [crime=y]: 160   &lt;conf:(0.95)&gt; lift:(1.67) lev:(0.15) conv:(8.02) </span><br></pre></td></tr></table></figure><p>WEKA中给予FPgrowth的描述是：实现FP-growth算法的类，用于查找大型项集而无需生成候选项。由于WEKA中的FPgrowth机制，无法实现对class进行关联分析（我没有找到相关选项），所以我使用FPgrowth得到的关联结果与之前Apriori关联分析的结果不同。<br>得到的置信度最高的规则代表着如果医院对萨尔瓦多议题投了赞成票并且他的身份是共和党人，那么大概率他会给冻结医师的费用投赞成票，支持该Rule的记录存在156条，置信度达到了0.99，Lift值达到了2.44。<br>至于计算的复杂度问题，运行过程花费的时间也可以预见一些结果，通过查资料得到一般性结论：Apriori算法的效率最低，因为需要很多次的扫描数据库；其次FP—Growth算法在长事物数据上表现很差，因为当事物很长时树的深度也很大，需要求解的子问题就变得特别多，因此效率会迅速下降。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://storm.cis.fordham.edu/~gweiss/data-mining/datasets.html">Sample Weka Data Sets</a><br><a href="https://www.ibm.com/developerworks/cn/data/library/techarticle/dm-1108zhangzy/index.html">应用关联规则模型提高超市销量-IBM</a><br><a href="http://athena.ecs.csus.edu/~associationcw/FpGrowth.html">Association Rule Mining Algorithms </a><br><a href="https://www.cnblogs.com/infaraway/p/6774521.html">频繁模式挖掘中Apriori、FP-Growth和Eclat算法的实现和对比</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文总结了 WEKA 中 Apriori关联 与 FPgrowth关联 的操作方法。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://stephefang.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="数据挖掘" scheme="https://stephefang.me/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
    <category term="关联算法" scheme="https://stephefang.me/tags/%E5%85%B3%E8%81%94%E7%AE%97%E6%B3%95/"/>
    
    <category term="WEKA" scheme="https://stephefang.me/tags/WEKA/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 学习笔记(七）</title>
    <link href="https://stephefang.me/2020/04/19/Objc_Learning_7/"/>
    <id>https://stephefang.me/2020/04/19/Objc_Learning_7/</id>
    <published>2020-04-19T15:43:20.000Z</published>
    <updated>2022-07-24T15:20:56.341Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第七篇文章，主要复习了 <code>Objective-C</code> Foundation 框架中文件操作内容。</p><span id="more"></span><h3 id="NSFileManager"><a href="#NSFileManager" class="headerlink" title="NSFileManager"></a>NSFileManager</h3><p>NSFileManager 类能够完成以下对于文件的操作</p><ul><li>创建一个新文件</li><li>从现有文件中读取数据</li><li>将数据写入文件</li><li>重命名文件</li><li>删除文件</li><li>测试文件是否存在</li><li>确定文件的大小和其他属性</li><li>复制文件</li><li>测试两个文件的内容是否相同<br>其中大部分操作对于目录同样适用同样，然而调用的方法不同。</li></ul><p>首先给出常见的 NSFileManager文件方法<br><img src="http://image.stephenfang.me/mweb/15872236886233.jpg"></p><p>attributesOfItemAtPath:path 方法返回一个包含指定文件属性的字典,属性字典包括各种信息，如文件的所有者、文件大小、文件的创建日期等。字典的每个属性可以通过键值提取，而所有的键都定义在头文件&lt;Foundation/NSFileManager.h&gt;中,如表示文件大小的键值为NSFileSize，以下列举了一部分常见属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NSFileAttributeKey const NSFileType; ：</span><br><span class="line">NSFileAttributeType const NSFileTypeDirectory;</span><br><span class="line">NSFileAttributeType const NSFileTypeRegular;</span><br><span class="line">NSFileAttributeKey const NSFileSize;</span><br><span class="line">NSFileAttributeKey const NSFileModificationDate;  //修改时间</span><br><span class="line">NSFileAttributeKey const NSFileCreationDate; //创建时间</span><br></pre></td></tr></table></figure><p>使用以上方法在示例代码中实现了一些当前目录下的简单文件功能，须确保当前目录下 test.txt 已创建。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *fName = <span class="string">@&quot;test.txt&quot;</span>;</span><br><span class="line">        <span class="built_in">NSString</span> *nName = <span class="string">@&quot;copy.txt&quot;</span>;</span><br><span class="line">        <span class="built_in">NSFileManager</span> *fm;</span><br><span class="line">        <span class="built_in">NSDictionary</span> *attr;</span><br><span class="line">        </span><br><span class="line">        fm = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([fm fileExistsAtPath:fName] == <span class="literal">NO</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;File does not exist!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([fm copyItemAtPath:fName toPath:nName error:<span class="literal">NULL</span>] == <span class="literal">NO</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;File copy failed!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ([fm contentsEqualAtPath:fName andPath:nName] == <span class="literal">NO</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;Files are not equal&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>([fm moveItemAtPath:nName toPath:<span class="string">@&quot;new.txt&quot;</span> error:<span class="literal">NULL</span>] == <span class="literal">NO</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;File renamed failed&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>((attr = [fm attributesOfItemAtPath:fName error:<span class="literal">NULL</span>]) == <span class="literal">nil</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;Couldn&#x27;t get file attributes!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;File size is %llu bytes&quot;</span>,[[attr objectForKey:<span class="built_in">NSFileSize</span>] unsignedLongLongValue]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([fm removeItemAtPath:fName error:<span class="literal">NULL</span>] == <span class="literal">NO</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;File removal failed&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;All operations success!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>书中给出了常见的 NSFileManager 目录方法<br><img src="http://image.stephenfang.me/mweb/15872698118240.jpg"></p><p>moveItemAtPath:toPath:方法可以将文件从一个目录移到另一个目录中，如果两个路径引用同一目录中的文件，其结果为重命名这个文件。使用示例代码实现了部分目录操作如下所示：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *dname = <span class="string">@&quot;testdir&quot;</span>;</span><br><span class="line">        <span class="built_in">NSString</span> *path;</span><br><span class="line">        <span class="built_in">NSFileManager</span> *fm;</span><br><span class="line">        </span><br><span class="line">        fm = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line">        </span><br><span class="line">        path = [fm currentDirectoryPath];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;Current Directory is: %@&quot;</span>,path);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([fm createDirectoryAtPath:dname withIntermediateDirectories:<span class="literal">YES</span> attributes:<span class="literal">nil</span> error:<span class="literal">NULL</span>] == <span class="literal">NO</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;Couldn&#x27;t create directory!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([fm moveItemAtPath:dname toPath:<span class="string">@&quot;newdir&quot;</span> error:<span class="literal">NULL</span>] == <span class="literal">NO</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;Directory rename failed!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([fm changeCurrentDirectoryPath:<span class="string">@&quot;newdir&quot;</span>] == <span class="literal">NO</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;Change directory failed!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        path = [fm currentDirectoryPath];;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;Current Directory is: %@&quot;</span>,path);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;All operation completed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NSData"><a href="#NSData" class="headerlink" title="NSData"></a>NSData</h3><p>在Foundation框架的 NSData 中提供了缓冲区的使用方式，包括设置缓冲区、数据读入缓冲区、将缓冲区数据写入文件等。<br>使用 NSFileManager 对象的 contentsAtPath: 方法能够接收一个路径名,并将指定文件内容读入该方法创建的存储区，若读取成功则返回存储区对象，否则返回nil。方法 createFileAtPath: contents: attributes: 创建特定属性的文件并将指定的 NSData 对象内容写入该文件中。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSFileManager</span> *fm;</span><br><span class="line">        <span class="built_in">NSData</span> *data;</span><br><span class="line">        </span><br><span class="line">        data = [fm contentsAtPath:<span class="string">@&quot;new.txt&quot;</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(data == <span class="literal">nil</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;File read failed!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([fm createFileAtPath:<span class="string">@&quot;another.txt&quot;</span> contents:data attributes:<span class="literal">nil</span>] == <span class="literal">NO</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;Couldn&#x27;t create the copy!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;File successfully copied.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用enumeratorAtPath: 方法或者 contentsOfDirectoryAtPath:error: 方法都可以完成枚举过程。如果使用前者，一次可以枚举指定目录中的每个文件，默认情况下，如果其中一个文件为目录，那么也会递归枚举它的内容。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ((path = [dirEnum nextObject]) != <span class="literal">nil</span>) (</span><br><span class="line"><span class="built_in">NSLog</span> (<span class="string">@&quot;%@&quot;</span>，path);</span><br><span class="line">[fm fileExistsAtPath: path isDirectory: &amp;flag];</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="literal">YES</span>)</span><br><span class="line">[dirEnum skipDescendents] ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 isDirectory 方法检验文件是否为目录，通过发送 skipDescendents 消息可以动态组织递归过程，不再枚举目录中的内容。<br>下面的代码使用两种方式枚举指定目录中的内容。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *path;</span><br><span class="line">        <span class="built_in">NSFileManager</span> *fm;</span><br><span class="line">        <span class="built_in">NSDirectoryEnumerator</span> *dm;</span><br><span class="line">        <span class="built_in">NSArray</span> *array;</span><br><span class="line">        </span><br><span class="line">        fm = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line">        </span><br><span class="line">        path = [fm currentDirectoryPath];</span><br><span class="line">        dm = [fm enumeratorAtPath:path];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;Contents in current path.&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//method 1</span></span><br><span class="line">        <span class="keyword">while</span> ((path = [dm nextObject]) != <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,path);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//method 2</span></span><br><span class="line">        array = [fm contentsOfDirectoryAtPath:[fm currentDirectoryPath] error:<span class="literal">NULL</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;Contents in current path.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (path <span class="keyword">in</span> array) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###NSPathUtilities<br>书中给出了常见的 NSPathUtilities 路径方法表。其中 components 是一个 NSArray 对象，包含路径每一部分的字符串对象；path是一个字符串对象，指定文件的路径; ext 是路径扩展名的字符串对象。<br><img src="http://image.stephenfang.me/mweb/15872706497596.jpg"><br><img src="http://image.stephenfang.me/mweb/15872707108256.jpg"><br>以下为一段简单的 NSPathUtilities Demo代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *path,*temp,*home;</span><br><span class="line">        <span class="built_in">NSFileManager</span> *fm;</span><br><span class="line">        <span class="built_in">NSArray</span> *components;</span><br><span class="line"> </span><br><span class="line">        fm = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line">        </span><br><span class="line">        path = [fm currentDirectoryPath];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;Current directory:%@&quot;</span>,path);</span><br><span class="line">        </span><br><span class="line">        temp = <span class="built_in">NSTemporaryDirectory</span>();</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;Temporary directory: %@&quot;</span>,temp);</span><br><span class="line">        </span><br><span class="line">        home = <span class="built_in">NSHomeDirectory</span>();</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;Home directory: %@&quot;</span>,home);</span><br><span class="line">        components = [home pathComponents];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (path <span class="keyword">in</span> components) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NSFileHandle"><a href="#NSFileHandle" class="headerlink" title="NSFileHandle"></a>NSFileHandle</h3><p>使用 NSFileHandle 方法可以实现如下操作</p><ul><li>打开一个文件，执行读、写、更新操作</li><li>在文件中查找指定位置</li><li>从文件中读取特定数目的字节</li><li>将指定数目的字节写入文件中</li></ul><p>处理文件的一般步骤为</p><ol><li>打开文件，并获取一个NSFileHandle对象</li><li>对打开的文件执行I/O操作</li><li>关闭文件</li></ol><p>下图中给出了部分常用的NSFileHandle方法<br><img src="http://image.stephenfang.me/mweb/15872843161853.jpg"><br>以下为一段简单的 NSFileHandle Demo代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSFileHandle</span> *inFile,*outFile;</span><br><span class="line">        <span class="built_in">NSData</span> *data;</span><br><span class="line">        </span><br><span class="line">        inFile = [<span class="built_in">NSFileHandle</span> fileHandleForReadingAtPath:<span class="string">@&quot;test.txt&quot;</span>];</span><br><span class="line">        <span class="keyword">if</span>(inFile == <span class="literal">nil</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;Open input file failed.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        outFile = [<span class="built_in">NSFileHandle</span> fileHandleForWritingAtPath:<span class="string">@&quot;out.txt&quot;</span>];</span><br><span class="line">        <span class="keyword">if</span>(outFile == <span class="literal">nil</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;Open output file failed&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        [outFile seekToEndOfFile];</span><br><span class="line">        </span><br><span class="line">        data = [inFile readDataToEndOfFile];</span><br><span class="line">        [outFile writeData: data];</span><br><span class="line">        </span><br><span class="line">        [inFile closeFile];</span><br><span class="line">        [outFile closeFile];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,[<span class="built_in">NSString</span> stringWithContentsOfFile:<span class="string">@&quot;out.txt&quot;</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">NULL</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从输出可知，第一个文件的内容成功地附加到第二个文件的末尾。<br>若 seekToEndOfFile 方法到达文件的末尾并且没有读到任何数据，那么将返回一个空的 NSData 对象，通过对该 NSData 对象应用 length 方法，测试其长度是否等于零判断文件是否为空，或者查看该文件中是否还有数据可以读取。<br>打开一个需要更新的文件，文件的偏移量应设为文件的开始。通过在文件中定位(seeking)可以更改偏移量，然后执行该文件的读写操作。因此，要定位到文件的第10字节，可以编写如下消息表达式，此时文件的句柄为 databaseHandle。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[databaseHandle seekToFileOffset: <span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>通过获得当前文件的偏移量，然后加上或者减去这个值，就得到相应文件的位置。<br>跳过文件中当前位置之后的128字节需要使用如下代码:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[databaseHandle seekToFileOffset:[databaseHandle offsetInFile] + <span class="number">128</span>];</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>书本中列出了部分 iOS 常用目录，内容略微过时但仍有参考意义。<br><img src="http://image.stephenfang.me/mweb/15872707572198.jpg"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/be80c46ab731">iOS中的文件管理（一）—— NSFileManager基础</a><br><a href="">Objective-C 程序设计 (第六版)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近开始学习 &lt;code&gt;Objective-C&lt;/code&gt; 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第七篇文章，主要复习了 &lt;code&gt;Objective-C&lt;/code&gt; Foundation 框架中文件操作内容。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://stephefang.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Xcode" scheme="https://stephefang.me/tags/Xcode/"/>
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://stephefang.me/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 学习笔记(六）</title>
    <link href="https://stephefang.me/2020/04/17/Objc_Learning_6/"/>
    <id>https://stephefang.me/2020/04/17/Objc_Learning_6/</id>
    <published>2020-04-17T09:43:20.000Z</published>
    <updated>2022-07-24T15:20:53.942Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第六篇文章，主要复习了 <code>Objective-C</code> Foundation 框架中关于数组排序、字典对象以及集合对象的内容。</p><span id="more"></span><h3 id="关于数组排序"><a href="#关于数组排序" class="headerlink" title="关于数组排序"></a>关于数组排序</h3><h4 id="简单排序示例"><a href="#简单排序示例" class="headerlink" title="简单排序示例"></a>简单排序示例</h4><p><code>Objective-C</code> 中对于 NSArray 排序方法主要有以下几种。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sortedArrayUsingSelector:</span><br><span class="line">sortedArrayUsingComparator:</span><br><span class="line">sortedArrayUsingDescriptors:</span><br></pre></td></tr></table></figure><p>给出前两者排序的简单示例，如果只是对字符串简单做排序，sortedArrayUsingSelector:方法已足够，sortedArrayUsingComparator: 中用到了block内容。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@&quot;abc&quot;</span>,<span class="string">@&quot;456&quot;</span>,<span class="string">@&quot;123&quot;</span>,<span class="string">@&quot;789&quot;</span>,<span class="string">@&quot;ef&quot;</span>, <span class="literal">nil</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//sortedArrayUsingSelector</span></span><br><span class="line">        <span class="built_in">NSArray</span> *sortedArray1 = [array sortedArrayUsingSelector:<span class="keyword">@selector</span>(compare:)];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;SortedArray1:&quot;</span>);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,sortedArray1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//sortedArrayUsingComparator:</span></span><br><span class="line">        <span class="built_in">NSArray</span> *sortedArray2 = [array sortedArrayUsingComparator:^<span class="built_in">NSComparisonResult</span>(<span class="keyword">id</span> obj1, <span class="keyword">id</span> obj2) &#123;</span><br><span class="line">             <span class="built_in">NSComparisonResult</span> result = [obj1 compare:obj2];</span><br><span class="line">             <span class="keyword">return</span> result;</span><br><span class="line">         &#125;];</span><br><span class="line">         <span class="built_in">NSLog</span>(<span class="string">@&quot;SortedArray2:&quot;</span>);</span><br><span class="line">         <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,sortedArray2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用区块排序"><a href="#使用区块排序" class="headerlink" title="使用区块排序"></a>使用区块排序</h4><p>NSArray和NSMutableArray类中具有使用区块对数组中元素进行排序的方法。<br>NSArray的排序方法一般格式为: </p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSArray</span> *) sortedArrayUsingComparator: (<span class="built_in">NSComparator</span>) block</span><br></pre></td></tr></table></figure><p>NSMutableArray的排序方法格式为: </p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) sortUsingComparator: (<span class="built_in">NSComparator</span>) block</span><br></pre></td></tr></table></figure><p>NSComparator作为typedef定义在系统头文件中:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NSComparisonResult</span> (^<span class="built_in">NSComparator</span>) (<span class="keyword">id</span> obj1, <span class="keyword">id</span> obj2);</span><br></pre></td></tr></table></figure><p>NSComparator是一个区块，使用两个待比较对象作为参数，并返回 NSComparisonResult 类型的值。预期会返回一个标识，说明第一个对象是否小于、等于或者大于第二个对象，这一点与不使用区块的数组排序方法是一致的。区块对于大数组排序能够提升一些速度，可以考虑在程序中使用。</p><h4 id="关于描述器排序"><a href="#关于描述器排序" class="headerlink" title="关于描述器排序"></a>关于描述器排序</h4><p>给出使用描述器排序的一个代码样例。<br>代码中定义了三种车与五个人，并将车与人的信息载入数组，通过构建排序描述器，将排序描述器按照一定顺序放入数组，最后能够按照你所期望的顺序对信息进行输出，因为代码中重写了description，故能够按照格式进行输出。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;Car.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;Person.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">            Car *car1 = [Car initWithName:<span class="string">@&quot;Audio&quot;</span>];</span><br><span class="line">            Car *car2 = [Car initWithName:<span class="string">@&quot;Rolls-Royce&quot;</span>];</span><br><span class="line">            Car *car3 = [Car initWithName:<span class="string">@&quot;BMW&quot;</span>];</span><br><span class="line">            </span><br><span class="line">            Person *p1 = [Person personWithAge:<span class="number">23</span> withName:<span class="string">@&quot;zhangsan&quot;</span> withCar:car2];</span><br><span class="line">            Person *p2 = [Person personWithAge:<span class="number">21</span> withName:<span class="string">@&quot;zhangsan&quot;</span> withCar:car1];</span><br><span class="line">            Person *p3 = [Person personWithAge:<span class="number">24</span> withName:<span class="string">@&quot;lisi&quot;</span> withCar:car1];</span><br><span class="line">            Person *p4 = [Person personWithAge:<span class="number">23</span> withName:<span class="string">@&quot;wangwu&quot;</span> withCar:car3];</span><br><span class="line">            Person *p5 = [Person personWithAge:<span class="number">23</span> withName:<span class="string">@&quot;wangwu&quot;</span> withCar:car2];</span><br><span class="line"></span><br><span class="line">            <span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> arrayWithObjects:p1,p2,p3,p4,p5, <span class="literal">nil</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">NSSortDescriptor</span> *carNameDesc = [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="string">@&quot;car.name&quot;</span> ascending:<span class="literal">YES</span>];</span><br><span class="line">            <span class="built_in">NSSortDescriptor</span> *personNameDesc = [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="string">@&quot;name&quot;</span> ascending:<span class="literal">YES</span>];</span><br><span class="line">            <span class="built_in">NSSortDescriptor</span> *personAgeDesc = [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="string">@&quot;age&quot;</span> ascending:<span class="literal">YES</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">NSArray</span> *descriptorArray = [<span class="built_in">NSArray</span> arrayWithObjects:personAgeDesc,carNameDesc,personNameDesc, <span class="literal">nil</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">NSArray</span> *sortedArray = [array sortedArrayUsingDescriptors: descriptorArray];</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,sortedArray);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Car.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Car</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line">+(Car *)initWithName:(<span class="built_in">NSString</span> *)name;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;Car.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="built_in">NSString</span> *name;</span><br><span class="line">    Car *car;</span><br><span class="line">&#125;</span><br><span class="line">+(Person *)personWithAge:(<span class="keyword">int</span>)age withName:(<span class="built_in">NSString</span> *)name withCar:(Car *)car;</span><br><span class="line">-(<span class="built_in">NSString</span> *)description;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Car.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;Car.h&quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Car</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@synthesize</span> name = _name;</span><br><span class="line"></span><br><span class="line">+(Car *)initWithName:(<span class="built_in">NSString</span> *)name&#123;</span><br><span class="line">    Car *car = [[Car alloc] init];</span><br><span class="line">    car.name = name;</span><br><span class="line">    <span class="keyword">return</span> car;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;Person.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;Car.h&quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></span><br><span class="line"></span><br><span class="line">+(Person *)personWithAge:(<span class="keyword">int</span>)age withName:(<span class="built_in">NSString</span> *)name withCar:(Car *)car&#123;</span><br><span class="line">    Person *person = [[Person alloc] init];</span><br><span class="line">    person-&gt;age = age;</span><br><span class="line">    person-&gt;name = name;</span><br><span class="line">    person-&gt;car = car;</span><br><span class="line">    <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="built_in">NSString</span> *)description&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;age is %i , name is %@, car is %@&quot;</span>,age,name,car.name];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2020-04-17 17:04:05.775056+0800 DemoProgram[55124:1325210] (</span><br><span class="line">    &quot;age is 21 , name is zhangsan, car is Audio&quot;,</span><br><span class="line">    &quot;age is 23 , name is wangwu, car is BMW&quot;,</span><br><span class="line">    &quot;age is 23 , name is wangwu, car is Rolls-Royce&quot;,</span><br><span class="line">    &quot;age is 23 , name is zhangsan, car is Rolls-Royce&quot;,</span><br><span class="line">    &quot;age is 24 , name is lisi, car is Audio&quot;</span><br><span class="line">)</span><br><span class="line">Program ended with exit code: 0</span><br></pre></td></tr></table></figure><h3 id="关于字典对象"><a href="#关于字典对象" class="headerlink" title="关于字典对象"></a>关于字典对象</h3><p>词典 (dictionary) 是由键——对象对组成的数据集合。通过对象的键可以从<code>Objective-C</code>词典中获取需要的对象。词典中的键必须是单值的，通常它们是字符串，但也可以是其他对象类型。和键关联的值可以是任何对象类型，但不能是nil。词典可以是固定的，也可以是可变的。可变词典中的记录可以动态添加和删除。可以使用键检索词典，也可以枚举它们的内容。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSMutableDictionary</span> *dict = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">        dict[<span class="string">@&quot;key1&quot;</span>] = <span class="string">@&quot;This is key 1&quot;</span>;</span><br><span class="line">        dict[<span class="string">@&quot;key2&quot;</span>] = <span class="string">@&quot;This is key 2&quot;</span>;</span><br><span class="line">        dict[<span class="string">@&quot;key3&quot;</span>] = <span class="string">@&quot;This is key 3&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;Key note for Key 1: %@&quot;</span>,dict[<span class="string">@&quot;key1&quot;</span>]);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;Key note for Key 2: %@&quot;</span>,dict[<span class="string">@&quot;key2&quot;</span>]);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;Key note for Key 3: %@&quot;</span>,dict[<span class="string">@&quot;key3&quot;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSMutableDictionary</span> *dict = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">        [dict setObject:<span class="string">@&quot;This is key 1&quot;</span> forKey:<span class="string">@&quot;key1&quot;</span>];</span><br><span class="line">        [dict setObject:<span class="string">@&quot;This is key 1&quot;</span> forKey:<span class="string">@&quot;key2&quot;</span>];</span><br><span class="line">        [dict setObject:<span class="string">@&quot;This is key 3&quot;</span> forKey:<span class="string">@&quot;key3&quot;</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;Key note for Key 1: %@&quot;</span>,[dict objectForKey:<span class="string">@&quot;key1&quot;</span>]);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;Key note for Key 2: %@&quot;</span>,[dict objectForKey:<span class="string">@&quot;key2&quot;</span>]);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;Key note for Key 3: %@&quot;</span>,[dict objectForKey:<span class="string">@&quot;key3&quot;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是若Key存在重复则会出现无法显示某一重复Key问题.<br>创建词典后可以利用循环语句枚举词典的内容。<br>键从词典中依次检索,没有特定顺序。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSDictionary</span> *dict = [<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys:</span><br><span class="line">                                     <span class="string">@&quot;This is key 1&quot;</span>,<span class="string">@&quot;key1&quot;</span>,</span><br><span class="line">                                     <span class="string">@&quot;This is key 2&quot;</span>,<span class="string">@&quot;key2&quot;</span>,</span><br><span class="line">                                     <span class="string">@&quot;This is key 3&quot;</span>,<span class="string">@&quot;key3&quot;</span>,</span><br><span class="line">                              <span class="literal">nil</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSDictionary</span> *dictItem <span class="keyword">in</span> dict ) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;%@:%@&quot;</span>,dictItem,[dict objectForKey:dictItem]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于集合对象"><a href="#关于集合对象" class="headerlink" title="关于集合对象"></a>关于集合对象</h3><p>Set是一组单值对象集合，可以是可变的，也可以是不变的。Set的操作包括搜索、添加、删除集合中的成员(仅用于可变集合)，比较两个集合，计算两个集合的交集和并集等，这些操作在示例程序中得以体现。</p><p>需要注意的是 NSCountedSet，该Set中同一对象可以出现多次，然而在 NSCountedSet 中并非存放了多个对象，而是维护一个次数计数。第一次将对象添加到集合中时，对象的 count 值被置为1,然后每次将该对象添加到集合中 count 值就会增1, 相应地，每次从集合删除对象，count 值就会减1。当对象的 count 值为零时，实际上对象本身就被删除了。</p><p>示例程序对 NSSet、 NSMutableSet、NSCountedSet 和 NSIndexSet进行了演示。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSSet</span> (<span class="title">Printing</span>)</span></span><br><span class="line">-(<span class="keyword">void</span>) print;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSSet</span> (<span class="title">Printing</span>)</span></span><br><span class="line">- (<span class="keyword">void</span>) print &#123;</span><br><span class="line">    printf(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSNumber</span> *element <span class="keyword">in</span> <span class="keyword">self</span>)</span><br><span class="line">        printf(<span class="string">&quot;%li&quot;</span>,(<span class="keyword">long</span>)[element integerValue]);</span><br><span class="line">    printf(<span class="string">&quot;&#125;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSMutableSet</span> *set1 = [<span class="built_in">NSMutableSet</span> setWithObjects:@<span class="number">1</span>, @<span class="number">3</span>, @<span class="number">5</span>,  @<span class="number">7</span>, <span class="literal">nil</span>];</span><br><span class="line">        <span class="built_in">NSSet</span> *set2 = [<span class="built_in">NSSet</span> setWithObjects:@<span class="number">2</span>, @<span class="number">4</span>, @<span class="number">6</span>, @<span class="number">8</span>, <span class="literal">nil</span>];</span><br><span class="line">        <span class="built_in">NSCountedSet</span> *set3 = [<span class="built_in">NSCountedSet</span> setWithObjects:@<span class="number">1</span>, @<span class="number">1</span>, @<span class="number">3</span>, @<span class="number">5</span>, <span class="literal">nil</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">NSIndexSet</span> * indexSet1 = [[<span class="built_in">NSIndexSet</span> alloc] initWithIndexesInRange:<span class="built_in">NSMakeRange</span>(<span class="number">1</span>,<span class="number">3</span>)];</span><br><span class="line">        <span class="built_in">NSMutableIndexSet</span> *indexSet2 =[[<span class="built_in">NSMutableIndexSet</span> alloc] init];</span><br><span class="line">        [indexSet2 addIndex:<span class="number">0</span>];</span><br><span class="line">        [indexSet2 addIndex:<span class="number">3</span>];</span><br><span class="line">        [indexSet2 addIndex:<span class="number">5</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> index;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;IndexSet1:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (index = [indexSet1 firstIndex];</span><br><span class="line">             index != <span class="built_in">NSNotFound</span>;</span><br><span class="line">             index = [indexSet1 indexGreaterThanIndex: index])  &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;%lu&quot;</span>,index);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;IndexSet2:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (index = [indexSet2 firstIndex];</span><br><span class="line">             index != <span class="built_in">NSNotFound</span>;</span><br><span class="line">             index = [indexSet2 indexGreaterThanIndex: index])  &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;%lu&quot;</span>,index);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;Set1:&quot;</span>);</span><br><span class="line">        [set1 print];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;Set2:&quot;</span>);</span><br><span class="line">        [set2 print];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;Set3:&quot;</span>);</span><br><span class="line">        [set3 print];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([set1 isEqualToSet: set2] == <span class="literal">YES</span>)</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;Set 1 equals set2&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;Set 1 is not equal to Set2&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([set1 containsObject: @<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;Set1 contains element 1&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;Set1 does not contains element 1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;The count of 1 in Set3: %lu&quot;</span>,(<span class="keyword">unsigned</span> <span class="keyword">long</span>)[set3 countForObject:@<span class="number">1</span>]);</span><br><span class="line">        [set1 addObject:@<span class="number">2</span>];</span><br><span class="line">        [set1 removeObject:@<span class="number">1</span>];</span><br><span class="line">        [set1 print];</span><br><span class="line">        [set1 intersectSet:set2];</span><br><span class="line">        [set1 print];</span><br><span class="line">        [set1 unionSet:set2];</span><br><span class="line">        [set1 print];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相应的运行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">2020-04-17 11:40:23.646162+0800 DemoProgram[51926:1202542] IndexSet1:</span><br><span class="line">2020-04-17 11:40:23.646584+0800 DemoProgram[51926:1202542] 1</span><br><span class="line">2020-04-17 11:40:23.646627+0800 DemoProgram[51926:1202542] 2</span><br><span class="line">2020-04-17 11:40:23.646679+0800 DemoProgram[51926:1202542] 3</span><br><span class="line">2020-04-17 11:40:23.646733+0800 DemoProgram[51926:1202542] IndexSet2:</span><br><span class="line">2020-04-17 11:40:23.646762+0800 DemoProgram[51926:1202542] 0</span><br><span class="line">2020-04-17 11:40:23.646786+0800 DemoProgram[51926:1202542] 3</span><br><span class="line">2020-04-17 11:40:23.646808+0800 DemoProgram[51926:1202542] 5</span><br><span class="line">2020-04-17 11:40:23.646825+0800 DemoProgram[51926:1202542] Set1:</span><br><span class="line">&#123;7351&#125;</span><br><span class="line">2020-04-17 11:40:23.646871+0800 DemoProgram[51926:1202542] Set2:</span><br><span class="line">&#123;6284&#125;</span><br><span class="line">2020-04-17 11:40:23.646898+0800 DemoProgram[51926:1202542] Set3:</span><br><span class="line">&#123;315&#125;</span><br><span class="line">2020-04-17 11:40:23.646934+0800 DemoProgram[51926:1202542] Set 1 is not equal to Set2</span><br><span class="line">2020-04-17 11:40:23.646957+0800 DemoProgram[51926:1202542] Set1 contains element 1</span><br><span class="line">2020-04-17 11:40:23.646979+0800 DemoProgram[51926:1202542] The count of 1 in Set3: 2</span><br><span class="line">&#123;7325&#125;</span><br><span class="line">&#123;2&#125;</span><br><span class="line">&#123;6284&#125;</span><br><span class="line">Program ended with exit code: 0</span><br></pre></td></tr></table></figure><h3 id="其他总结"><a href="#其他总结" class="headerlink" title="其他总结"></a>其他总结</h3><p>根据写代码过程中遇到的一些问题查找的答案做一些阶段性总结。</p><h4 id="实例变量的范围类型"><a href="#实例变量的范围类型" class="headerlink" title="实例变量的范围类型"></a>实例变量的范围类型</h4><p><strong>@private</strong><br>该类型的实例变量只有声明它的类能够访问它。<br><strong>@protected</strong><br>该类型的实例变量能被声明它的类和子类访问。<br>所有没有显式标识范围的实例变量默认为 @protected。<br><strong>@public</strong><br>该类型实例变量可以在任何地方被访问。<br><strong>@package</strong><br>在modern runtime下，@package 实例变量的范围在实现这个类的可执行文件镜像中是@public，但是在实现这个类的可执行文件镜像外部是 @private。<br>Objective-C 中的 @package 与 C 语言中变量和函数的 private_extern 类似，任何在实现类的镜像外的代码想使用这个实例变量都会引发link error错误。<br>@package 对于框架类的实例变量十分受用，在这种环境下使用 @private 可能太受限制，使用@protected 或者 @public 又过于开放。@package 类型的变量在 Framework 内部相当于 @protected，在 Framework 外部，相当于@private。</p><h4 id="类方法与实例方法"><a href="#类方法与实例方法" class="headerlink" title="类方法与实例方法"></a>类方法与实例方法</h4><ul><li>实例方法在类的具体实例的范围内执行，在调用一个实例方法前必须首先创建类的实例。需要在方法声明前加上“-”，表示实例（对象）方法 (动态方法)。</li><li>类方法不需要创建实例，不依赖于对象，直接用类名调用，执行效率较高；当方法内部不需要使用成员变量时，就可以使用类方法。需要在方法生命前加上“-”，表示类方法 (静态方法)。</li></ul><h4 id="声明方式"><a href="#声明方式" class="headerlink" title="声明方式"></a>声明方式</h4><p>在网上查找资料时发现属性声明存在三种方式，通过查资料对三种方式进行总结</p><ol><li>直接在 @interface 中声明。该方法声明的成员变量只能在类内部使用，即不能通过类名. 点的方式访问变量，需要使用 -&gt; 的方式。</li></ol><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Test</span> : <span class="title">NSObject</span></span>&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在@interface中声明，然后再在@property中声明。该方法为过时的声明变量方式，Xcode 在早期 @systhesize 没有自动合成属性器之前，需要手写 getter 与 setter 方法。在Xcode有自动合成属性器后，编译器会自动生成一个以下划线开头的的实例变量，所以不必同时声明属性与变量。即可以直接用 @property 声明一个成员属性，在 .m 文件中无需使用 @systhesize，Xcode 会自动生成 getter 与 setter.</li></ol><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Test</span> : <span class="title">NSObject</span></span>&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *_test;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *mystr; </span><br></pre></td></tr></table></figure><p>同时在.m文件中插入</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@synthesize</span> mystr = _myStr;</span><br></pre></td></tr></table></figure><ol start="3"><li>直接用@property声明。该方法声明的成员变量能够在类内部和外部使用，在类的内部可以通过下划线+变量名 或 self.变量名 的方式来访问变量。</li></ol><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Test</span> : <span class="title">NSObject</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *test;</span><br></pre></td></tr></table></figure><p>同时在.m文件中插入</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@synthesize</span> test = _test;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="">Objective-C 程序设计 (第六版)</a><br><a href="https://my.oschina.net/pengloo53/blog/173810">Objective C中数组排序几种情况的总结</a><br><a href="https://liuzhichao.com/p/1256.html">Objective-C入门教程14：集合对象(NSSet,NSMutableSet,NSIndexSet)</a><br><a href="https://www.cnblogs.com/stevenwuzheng/p/4605232.html">iOS中四种实例变量的范围类型</a><br><a href="https://blog.csdn.net/shenjie12345678/article/details/39052659">OC声明变量在@interface括号中与使用@property的区别</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近开始学习 &lt;code&gt;Objective-C&lt;/code&gt; 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第六篇文章，主要复习了 &lt;code&gt;Objective-C&lt;/code&gt; Foundation 框架中关于数组排序、字典对象以及集合对象的内容。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://stephefang.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Xcode" scheme="https://stephefang.me/tags/Xcode/"/>
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://stephefang.me/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 学习笔记(五）</title>
    <link href="https://stephefang.me/2020/04/13/Objc_Learning_5/"/>
    <id>https://stephefang.me/2020/04/13/Objc_Learning_5/</id>
    <published>2020-04-13T14:43:20.000Z</published>
    <updated>2022-07-24T15:20:46.197Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第五篇文章，主要复习了 <code>Objective-C</code> Foundation 框架中关于数字对象、字符串对象以及数组对象的内容。</p><span id="more"></span><h3 id="关于数字对象"><a href="#关于数字对象" class="headerlink" title="关于数字对象"></a>关于数字对象</h3><p>无论是int 型、float 型和long型都是<code>Objective-C</code>语言中的基本数据类型,它们都不是对象，不能够向它们发送消息，然而有时需要将这些值作为对象使用。如不能将任何基本数据类型直接存储到数组中，使用Foundation的NSArray对象创建一个数组时，它要求存储的值必须是对象。</p><p><strong>NSInteger</strong><br>NSInteger不是一个对象，是基本数据类型的typedef。</p><p> Apple 官方 Foundation 文档解释的很清楚：</p><blockquote><p>When building 32-bit applications, NSInteger is a 32-bit integer. A 64-bit application treats NSInteger as a 64-bit integer.</p></blockquote><blockquote><p>Apple use NSInteger (or NSUInteger) when passing a value as an argument to a function or returning a value from a function.</p></blockquote><p>鉴于目前 iOS 设备全部迈向64位架构，可以理解成 NSInteger 是64位的 long 类型。而 NSUInteger 也是类似于 NSInteger 的typedef。</p><p><strong>int</strong><br>int 类型的使用主要体现在循环的控制上，控制循环语句无需考虑平台依赖，在大部分情况下16-bit 大小的 int 即可胜任此项工作。 NSInteger 可以作为函数的返回值或者是函数参数，至于使用 NSInteger 还是 int 决定权仍然在你需要解决的问题上。</p><p><strong>NSNumber</strong><br>NSNumber 是<code>Objective-C</code>的类，具体来说是 NSValue 的子类。如果需要存储基本数据类型（包括 signed 或 unsigned char类型和BOOL类型），可以使用 NSNumber 对其进行包装来满足需求，NSNumber 会根据数据的类型创建对象。在集合中也会使用到 NSNumber，如NSSArray、NSSet，因为这些需要对象参与。<br>下图摘录了为 NSNumber 对象设值的类和实例方法以及获取这些数值的实例方法。</p><p><img src="http://image.stephenfang.me/mweb/15867486542169.jpg"></p><h4 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h4><p>给出一个简单的测试示例。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSNumber</span> *intNum, *floatNum, *charNum, *doubleNum;</span><br><span class="line">        <span class="built_in">NSInteger</span> integerNum;</span><br><span class="line">        </span><br><span class="line">        intNum = [<span class="built_in">NSNumber</span> numberWithInteger:<span class="number">20</span>];</span><br><span class="line">        integerNum = [intNum integerValue];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%li&quot;</span>,(<span class="keyword">long</span>)integerNum);</span><br><span class="line">        </span><br><span class="line">        floatNum = [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">20.5</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%f&quot;</span>,[floatNum floatValue]);</span><br><span class="line">        </span><br><span class="line">        charNum = [<span class="built_in">NSNumber</span> numberWithChar:<span class="string">&#x27;X&#x27;</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%c&quot;</span>,[charNum charValue]);</span><br><span class="line">        </span><br><span class="line">        doubleNum = @<span class="number">20.5</span>;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%lf&quot;</span>,[doubleNum doubleValue]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([doubleNum isEqualToNumber:floatNum] == <span class="literal">YES</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;doubleNum is equal to number floatNum&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="built_in">NSLog</span>(<span class="string">@&quot;doubleNum is not equal to number floatNum&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([floatNum compare:intNum] == <span class="built_in">NSOrderedDescending</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;intNum is less than floatNum&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例解释"><a href="#示例解释" class="headerlink" title="示例解释"></a>示例解释</h4><p>一般来说，需要确保使用正确的方式获取对象的值，如果在NSNumber对象中存储了一个值，那么也需要用一致的方式去获取。同时，<code>Objective-C</code>语言扩展允许通过@表达式创建数字对象.</p><p>方法 numberWithInt: 和 numberWithInteger: 在使用存在差别</p><ol><li>使用 numberWithInt: 方法创建一个整型数,需要使用intValue获取值，使用%i作为格式化字符串显示它的值。</li><li>使用 numberWithInteger: 方法创建一个整型数,需要使用integerValue获取值，也可以转换成 long 显示或者使用 stringWithFormat: 将其格式化成字符串。使用%li作为格式化字符串。</li></ol><h4 id="关于NSLog"><a href="#关于NSLog" class="headerlink" title="关于NSLog"></a>关于NSLog</h4><p>在NSLog中，格式字符<code>%@</code>不仅可以显示 NSString 对象，而且可以显示数组、字典和集合的全部内容。对于数组中的每一个元素,NSLog 将使用属于每个元素类的 description 方法。如果使用的是从 NSObject 对象继承的默认方法,获取到的是对象的类和地址。然而,通过覆盖继承的 description 方法可使用这些格式字符显示自定义类对象。</p><h3 id="关于字符串对象"><a href="#关于字符串对象" class="headerlink" title="关于字符串对象"></a>关于字符串对象</h3><p>Foundation 框架支持 NSString类用于处理字符串对象。C 样式的字符串 char 字符组成，NSString 对象由 unichar 字符组成。unichar 字符是符合 Unicode 标准的多字节字符。NSString 类能够自动处理字符串的内部表示。使用 NSString 类的方法更容易开发出具有本地化的应用程序，并且能够在不同的语言环境下使用。</p><p>NSMutableString 类是 NSString 类的子类，可以用来创建可以更改字符的字符串对象，它可以使用 NSString 类所有方法。摘录常见 NSMutableString 方法<br><img src="http://image.stephenfang.me/mweb/15867813113647.jpg"></p><h4 id="简单示例-1"><a href="#简单示例-1" class="headerlink" title="简单示例"></a>简单示例</h4><p>给出一个简单的测试示例。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *str1 = <span class="string">@&quot;This is str1&quot;</span>;</span><br><span class="line">        <span class="built_in">NSString</span> *str2 = <span class="string">@&quot;This is str2&quot;</span>;</span><br><span class="line">        <span class="built_in">NSString</span> *subStr;</span><br><span class="line">        <span class="built_in">NSMutableString</span> *mutStr;</span><br><span class="line">        <span class="built_in">NSRange</span> subRange;</span><br><span class="line">        </span><br><span class="line">        subStr = [str1 substringToIndex:<span class="number">3</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,subStr);</span><br><span class="line">        </span><br><span class="line">        subStr = [str1 substringFromIndex:<span class="number">3</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,subStr);</span><br><span class="line">        </span><br><span class="line">        subStr = [[str1 substringFromIndex:<span class="number">3</span>]substringToIndex:<span class="number">5</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,subStr);</span><br><span class="line">        </span><br><span class="line">        subStr = [str1 substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">3</span>, <span class="number">5</span>)];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,subStr);</span><br><span class="line">        </span><br><span class="line">        subRange = [str2 rangeOfString:<span class="string">@&quot;str2&quot;</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;index: %lu length: %lu&quot;</span>,(<span class="keyword">unsigned</span> <span class="keyword">long</span>)subRange.location,(<span class="keyword">unsigned</span> <span class="keyword">long</span>)subRange.length);</span><br><span class="line">        </span><br><span class="line">        subRange = [str1 rangeOfString:<span class="string">@&quot;str2&quot;</span>];</span><br><span class="line">        <span class="keyword">if</span> (subRange.location == <span class="built_in">NSNotFound</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;String not found&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;index: %lu length: %lu&quot;</span>,(<span class="keyword">unsigned</span> <span class="keyword">long</span>)subRange.location,(<span class="keyword">unsigned</span> <span class="keyword">long</span>)subRange.length);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        mutStr = [<span class="built_in">NSMutableString</span> stringWithString:str1];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,mutStr);</span><br><span class="line">        </span><br><span class="line">        [mutStr insertString:mutStr atIndex:[mutStr length]];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,mutStr);</span><br><span class="line">        </span><br><span class="line">        [mutStr deleteCharactersInRange:<span class="built_in">NSMakeRange</span>([mutStr length]/<span class="number">2</span>, [mutStr length]/<span class="number">2</span>)];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,mutStr);</span><br><span class="line">        </span><br><span class="line">        [mutStr appendString:mutStr];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,mutStr);</span><br><span class="line">        </span><br><span class="line">        [mutStr replaceCharactersInRange:<span class="built_in">NSMakeRange</span>([mutStr length]/<span class="number">2</span>, [mutStr length]/<span class="number">2</span>) withString:str2];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,mutStr);</span><br><span class="line">        </span><br><span class="line">        subRange = [mutStr rangeOfString: <span class="string">@&quot;This is&quot;</span>];</span><br><span class="line">        <span class="keyword">if</span> (subRange.location != <span class="built_in">NSNotFound</span>) &#123;</span><br><span class="line">        [mutStr replaceCharactersInRange:subRange withString: <span class="string">@&quot;it is&quot;</span>] ;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,mutStr) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">2020-04-13 18:21:20.795845+0800 DemoProgram[49815:1823615] Thi</span><br><span class="line">2020-04-13 18:21:20.796235+0800 DemoProgram[49815:1823615] s is str1</span><br><span class="line">2020-04-13 18:21:20.796281+0800 DemoProgram[49815:1823615] s is</span><br><span class="line">2020-04-13 18:21:20.796305+0800 DemoProgram[49815:1823615] s is</span><br><span class="line">2020-04-13 18:21:20.796331+0800 DemoProgram[49815:1823615] index: 8 length: 4</span><br><span class="line">2020-04-13 18:21:20.796353+0800 DemoProgram[49815:1823615] String not found</span><br><span class="line">2020-04-13 18:21:20.796395+0800 DemoProgram[49815:1823615] This is str1</span><br><span class="line">2020-04-13 18:21:20.796432+0800 DemoProgram[49815:1823615] This is str1This is str1</span><br><span class="line">2020-04-13 18:21:20.796453+0800 DemoProgram[49815:1823615] This is str1</span><br><span class="line">2020-04-13 18:21:20.796472+0800 DemoProgram[49815:1823615] This is str1This is str1</span><br><span class="line">2020-04-13 18:21:20.796498+0800 DemoProgram[49815:1823615] This is str1This is str2</span><br><span class="line">2020-04-13 18:21:20.796520+0800 DemoProgram[49815:1823615] it is str1This is str2</span><br><span class="line">Program ended with exit code: 0</span><br></pre></td></tr></table></figure><h3 id="关于数组对象"><a href="#关于数组对象" class="headerlink" title="关于数组对象"></a>关于数组对象</h3><p>Foundation数组是有序的对象集合。不可变数组由 NSArray 类处理的，而可变数组由NSMutableArray 处理的。后者是前者的子类，即后者继承了前者的方法。</p><p>其中</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *monthNames = [<span class="built_in">NSArray</span> arrayWithObjects :<span class="string">@&quot;January&quot;</span>, <span class="string">@&quot;February&quot;</span>, <span class="string">@&quot;March&quot;</span>, <span class="string">@&quot;April&quot;</span>, <span class="string">@&quot;May&quot;</span>, <span class="string">&quot;June&quot;</span>, <span class="string">@&quot;July&quot;</span>, <span class="string">@&quot;August&quot;</span>, <span class="string">@&quot;September&quot;</span>, <span class="string">@&quot;October&quot;</span>, <span class="string">@&quot;November&quot;</span>, <span class="string">@&quot;December&quot;</span>, <span class="literal">nil</span> ];</span><br></pre></td></tr></table></figure><p>与如下方式相同。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *monthNames = @[<span class="string">@&quot;January&quot;</span>, <span class="string">@&quot;February&quot;</span>, <span class="string">@&quot;March&quot;</span>, <span class="string">@&quot;April&quot;</span>, <span class="string">@&quot;May&quot;</span>,<span class="string">@&quot;June&quot;</span>, <span class="string">@&quot;July&quot;</span>, <span class="string">@&quot;August&quot;</span>, <span class="string">@&quot;September&quot;</span>, <span class="string">@&quot;October&quot;</span>, <span class="string">@&quot;November&quot;</span> ,<span class="string">@&quot;December&quot;</span>];</span><br></pre></td></tr></table></figure><p>而</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array[index]</span><br></pre></td></tr></table></figure><p>相当于如下表达式</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[array objectAtIndex: index]</span><br></pre></td></tr></table></figure><p>同时</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array[index] = object</span><br></pre></td></tr></table></figure><p>相当于如下表达式</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[array setObject: object forIndex: index]</span><br></pre></td></tr></table></figure><p>下一节会参照书本给的样例进行编写。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://monkey-oyster.blogspot.com/2014/10/int-vs-nsinteger-vs-nsnumber.html">int vs. NSInteger vs. NSNumber</a><br><a href="https://stackoverflow.com/questions/4445173/when-to-use-nsinteger-vs-int/5320359#5320359">Why use int at all?-Stack overflow</a><br><a href="">Objective-C 程序设计 (第六版)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近开始学习 &lt;code&gt;Objective-C&lt;/code&gt; 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第五篇文章，主要复习了 &lt;code&gt;Objective-C&lt;/code&gt; Foundation 框架中关于数字对象、字符串对象以及数组对象的内容。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://stephefang.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Xcode" scheme="https://stephefang.me/tags/Xcode/"/>
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://stephefang.me/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>数字生活启示录</title>
    <link href="https://stephefang.me/2020/04/12/Digital_Life/"/>
    <id>https://stephefang.me/2020/04/12/Digital_Life/</id>
    <published>2020-04-11T18:43:20.000Z</published>
    <updated>2022-07-24T15:19:06.646Z</updated>
    
    <content type="html"><![CDATA[<p>尼古拉·尼葛洛庞帝在他1995年发布的的著作《Being Digital》中描绘了未来数字生活的诸多情景，其中VR、AI、智能家居、个人助理等，无一不是近几年研究的热门领域，这些技术的出现深深影响了现代人的日常生活，换句话说，数字生活成为了当今时代人们生活的一部分。</p><span id="more"></span><p><img src="http://image.stephenfang.me/mweb/s1496668.jpg" alt="image.stephenfang.me/mweb/s1496668.jpg"></p><p>尼古拉·尼葛洛庞帝的《数字化生存》封面</p><h2 id="拥抱数字生活"><a href="#拥抱数字生活" class="headerlink" title="拥抱数字生活"></a>拥抱数字生活</h2><p>当我和朋友谈及「数字生活」这个话题的时候，我们认为，每个人都有自己处理数字生活的方式，但没有一个客观固定的标准。我们每天都会在数码设备上花费不少的时间，但如何妥善安排自己的数码生活却不被重视。</p><p>本文开篇之所以用拥抱一词，是因为笔者认为在当今时代，大部分人对于数字内容的汲取和吸收并不是一个被动的过程，相反，是一个开放、主动接受的过程。如何让自己个性化的需求得到满足，其背后的思路是拥抱数字生活的关键。</p><p>本文将以乱序的方式回忆和总结我所体验过的数字生活，希望我的这篇文章能给予你一点启发，让你能够以正确的打开方式享受数字时代带来的便利。当然，你完全可以把本文看作敝人的碎碎念，若有不合您想法的观点还请包容。</p><h2 id="开始数字生活"><a href="#开始数字生活" class="headerlink" title="开始数字生活"></a>开始数字生活</h2><p>作为一个平凡人，我勉强认为自己比较擅长鼓捣手机，并在鼓捣的过程中有所感悟。然而我也走过一些弯路，曾经下载过盗版的App，执着于哪款手机更优，庆幸的是这些我的行为或想法能够得到纠正，日常使用习惯也进而得到了培养。</p><p><img src="http://image.stephenfang.me/mweb/C68FD435-10A6-449C-8DEB-329A9F4BEC24.jpeg" alt="image.stephenfang.me/mweb/C68FD435-10A6-449C-8DEB-329A9F4BEC24.jpeg"></p><p>我所折腾过的一些数码物件</p><p><img src="http://image.stephenfang.me/mweb/Untitled.png" alt="image.stephenfang.me/mweb/Untitled.png"></p><p>我所折腾过的一些数码物件</p><p>引用经济学的一个重要原则，</p><blockquote><p>“Rational people think at the margin“</p></blockquote><p>即理性的人会从边际去考虑问题。假设你是理性的人，当你在决定更新一台设备时。会尝试从边际成本考虑它会带给你的价值，若你的手头不充裕且更新只能给你的工作流带来5%的提升，那大可不必做这样的决断。手机就是现代人的工具，其最大的价值为其存储的数据带来的价值，你应该做的是让你的手机为你创造价值，而不是被其禁锢。</p><p>作为一个工具，那手机必然存在其好处及劣处，且每个人对于手机都有不同的使用习惯和评价标准，你完全可以认为某手机是你当下最好的选择，但他人也完全有理由认为你的看法是错误的。即使你是某个品牌的死忠，也应该客观看待其他厂商推出的各类产品，所谓“信仰”只是一种调侃，而为黑而黑更是没有意义。手机是如此，生活中的许多琐事亦是如此。</p><p><img src="http://image.stephenfang.me/mweb/IMG_1485.jpeg" alt="image.stephenfang.me/mweb/IMG_1485.jpeg"></p><p>我的iPod touch</p><p>我的真正意义上的数字生活起始于2010年购买的一台iPod touch (4th genration)。我至今仍清楚记得它的配置：阉割版的A4 芯片、3.5 英寸 Retina 屏幕、iOS 4、聊胜于无的摄像头、8GB的存储空间。当时的我对于 Apple 生态一无所知，同步iPod中的内容也是由一家Apple授权店的小哥帮忙完成。</p><p>在使用iPod touch的过程中，我逐渐熟悉Apple的生态系统，令我记忆深刻的体验有第一次购买付费App，第一次给设备越狱，第一次在设备上玩在线联机游戏、第一次使用云服务等等。在iPod touch之后我对数码产品的兴趣愈发浓厚，且不仅仅限于iOS设备、Android设备，几年间，手中的设备换了一台又一台，安装的App换了一批又一批，我也逐步走进与计算机打交道的行业。</p><h2 id="关于App的回忆"><a href="#关于App的回忆" class="headerlink" title="关于App的回忆"></a>关于App的回忆</h2><p>App Store是Apple生态的一个重要组成部分，相当一部分人选择Apple的平台看重的是优秀的iOS独占App。和很多人一样，我购买iPod touch的理由很大程度上是为了游戏。十年后的今天，我的手机中鲜有游戏，虽然有时也会在闲暇时间与朋友来上两把吃鸡，但是再也不会像以前一样为了打通Angry Birds费尽心思。</p><p><img src="http://image.stephenfang.me/mweb/06CBDF84-B70A-4412-8F67-2D3C7CFD4E85.jpeg" alt="image.stephenfang.me/mweb/06CBDF84-B70A-4412-8F67-2D3C7CFD4E85.jpeg"></p><p>iOS 4时代的 App Store</p><p>iOS 4时代的游戏以单机、逻辑简单的小游戏为主，但也不乏许多知名的大作，较为出名的有Infinity Blade系列、Asphalt系列，我当时最喜欢的是Gameloft开发的Rainbow Six手游，其最大的特色就是能够以蓝牙联机的方式与好友对战，还记得每天中午都会和班上的同学去学校的阁楼玩几盘联机游戏。然而Cut the Rope、Fruit Ninja、Angry Birds、Doodle Jump才是我对于那个时期最真实的回忆。</p><h2 id="关于效率"><a href="#关于效率" class="headerlink" title="关于效率"></a>关于效率</h2><p>现在的我会仍会刻意给所有的App分门别类，然而刚接触 iOS 时我总把首屏留给系统默认App，并且总是在结束App的使用后习惯性将它在后台清除，同时我还会出于自己对 Google 的向往，在自己的手机中安装所有 Google 系的App，这些行为在现在看来是相当愚蠢。</p><p><img src="http://image.stephenfang.me/mweb/0A5E372C-83FF-429D-8B1D-12749EEB60DE.jpeg" alt="image.stephenfang.me/mweb/0A5E372C-83FF-429D-8B1D-12749EEB60DE.jpeg"></p><p>iOS 6时代我的 iPod touch</p><p><img src="http://image.stephenfang.me/mweb/604EE641-9BC7-48BA-BC4B-06DE45144E0A.jpeg" alt="image.stephenfang.me/mweb/604EE641-9BC7-48BA-BC4B-06DE45144E0A.jpeg"></p><p>装满所有 Google 系 App 的 iPhone</p><p>首先，更好的应用排布会带来更高的利用效率，试想一下你需要使用某个App记录信息，然而在不使用搜索的情况下每次都要滚动到第二屏，甚至还需要点开一个文件夹才能打开它，还有找不到App的风险，这势必会浪费一部分时间，让你显得手忙脚乱，可能你连需要记录什么都忘了。</p><p><img src="http://image.stephenfang.me/mweb/s26872396.jpg" alt="image.stephenfang.me/mweb/s26872396.jpg"></p><p>山下英子的断舍离封面</p><p>另外一种想法是我在读了《断舍离》这本书后感悟的，首先简要说明这本书的一个重要观点：</p><ul><li>断舍离非常简单，只需要以自己而不是物品为主角，去思考什么东西最适合现在的自己。只要是不符合这两个标准的东西，就立即淘汰或是送人。</li></ul><p>反映在数字生活中即为保留最近需要用到的App，删除不必须要的内容。目前我在我的手机上保留了80个左右的App，显然我不可能每天用到其中的绝大多数App。有统计学的数据显示，智能手机用户平均每个月将会使用超过30个软件，而平均到每天，将会有10个软件被用户登录。</p><p>对于我而言，不会用到的App可以看作是手机的一种“负担”，把它们从我的主屏幕中删除可以看似一种“解脱”，你可以将其看做为一种“伪哲学“，正如许多人对于《断舍离》这本书的看法。时刻保持自己的设备有最高的效率面对工作或学习有如时刻使自己保持清醒的头脑面对生活。</p><h2 id="关于正版"><a href="#关于正版" class="headerlink" title="关于正版"></a>关于正版</h2><p>前几天听说最新版本的 iOS 系统再次能够「越狱」了，然而对此新闻感到兴奋的人寥寥无几。从某种角度来说，「越狱」也是当时导致盗版猖獗的一大原因，然而「越狱」的最重要意义却是让 iOS 设备更具个性化，如 iOS 5 时期我会通过「越狱」去为自己的设备增加通知中心的功能，在 iOS 4 时期我会通过「越狱」给我的iPod touch增加虚拟内存。</p><p><img src="http://image.stephenfang.me/mweb/223F237B-B3BB-4BF5-8361-F037537C98EC.jpeg" alt="http://image.stephenfang.me/mweb/223F237B-B3BB-4BF5-8361-F037537C98EC.jpeg"></p><p>“Jailbreak”界面</p><p><img src="http://image.stephenfang.me/mweb/C215DC38-4A0D-42F6-94A8-37EEE9EBD3C6.jpeg" alt="http://image.stephenfang.me/mweb/C215DC38-4A0D-42F6-94A8-37EEE9EBD3C6.jpeg"></p><p>“奔跑的大菠萝”</p><p>iOS 的付费购买体系目前已经十分成熟，你可以通过各种支付方式获得你需要的App。在没有支付能力的小学时期我可能会为了一款想玩的游戏下载盗版，但我深知这样的想法是错误的，我会告诉自己我需要某一个APP，它为我创造了价值，我乐意为其付费，于是具备消费能力之后我督促自己禁止使用盗版的内容。</p><p>为内容付费是一种闭环，没有投入就没有产出，如果开发者的投入没有回报，很可能导致的结果就是软件停止更新，或比喻为劣币驱逐良币，试想一下应用商店充斥着隐含各种广告的App，相信这种局面都是你我所不愿意看到的。自然，我不会去鄙视用盗版的人，他们很可能是迫不得已，诚然，一些大公司的营收不会因为缺少了一部分人的支出而受重大影响，但我认为用着盗版还大肆夸耀就有些不合情理了。</p><p>微软推出的 Office 365 是一个很有趣的例子，在高中的时候我开始每年为 Office 365 付费，我完全厌倦了 WPS 恼人的广告机制，能够用到正版 Office 令我十分开心，然而这样的行为当时为许多人所不解。近年来使用正版 Office 的成本不断降低，愿意使用正版的人群也逐渐壮大，微软也在努力提升该产品的价值，现在你能够以每年 70多元的价格购买到 Office 套件的全部功能，如果你确定Office能够提供你工作中的便利，那么其价格完全不构成经济上的负担，何况这其中还包括完善的云服务，我认为这是消费者与产品提供商实现的一种协调。当然如果你使用的是Mac，你完全可以用 Apple 的 iWork 套件替代 Office 的工作流，总是有合适的方案替代最坏的使用盗版的方案。你如果觉得购买 Mac 上的 Apps 太贵，可以选择订阅性质的 Setapp，只要你对于设备生产力的界定在“爱奇艺“之上，这些举措都是有意义的。</p><p><img src="http://image.stephenfang.me/mweb/Xnip2020-04-12_00-33-00.png" alt="http://image.stephenfang.me/mweb/Xnip2020-04-12_00-33-00.png"></p><p>采用订阅收费制度的Setapp</p><p>我想表达的并不是一种说教，更多的是一种意识。你可能喜欢观看美剧，但出于各方面原因你无法使用到网飞等平台的服务，但你可以选择的是想办法使用到这种服务，正可谓“办法总比困难多”，或者你可以在某些方面支持你所喜爱的作品。最次的方案则是“偷偷地看“，不是为自己享有盗版而感到自豪。你愿意为一杯奶茶带来的味蕾刺激付费，却不愿意为能够提升你的效率、生活品质的内容而付费，这听起来是不是很荒谬？</p><h2 id="关于多样性"><a href="#关于多样性" class="headerlink" title="关于多样性"></a>关于多样性</h2><p>“如果你想要学习一些自己感兴趣的内容，你必须经历一段痛苦的，学习自己不想学习内容的经历。“这是我对于学习这一件事最真切的感悟。在互联网时代，互联网就是你最好的老师，你可以通过互联网检索到你任何感兴趣的问题的答案，同时你也可以通过互联网学习到任何你想学习的内容，尽管你搜索到的内容很大几率是错误的，且检索到的课程质量可能良莠不齐，但并不影响这个结论的正确性，你需要做的是提高自己辨别正误信息的能力以及提高自己接受新事物的能力。</p><p>回到这段开头这一句话，当你拥有了学习自己所喜欢内容的时间和机会，不应该以“没有空”等类似理由搪塞自己，而应该通过互联网的力量让自己的求知欲得到满足。当你不理解思维导图如何完成就尝试去学习和实践它，当你对咖啡文化感兴趣就去了解它的历史和发展状况，当你充满求知欲时就刷上一天的维基百科。</p><p>我的一位高中同学对任何知识都满怀好奇，无论是他所不熟悉的电竞领域还是他所了解的电影市场，凡是能够引起讨论的内容他都略知一二，我暂且认定他的学习方法称之为“杂学”。起初我对这种学习方式不以为然，认为学习的重要方法在于精而不是杂，渐渐地，我开始觉得这种方式在信息爆炸的年代存在其合理性。</p><p><img src="http://image.stephenfang.me/mweb/s1429010.jpg" alt="http://image.stephenfang.me/mweb/s1429010.jpg"></p><p>许多人的理财启蒙读物——《富爸爸，穷爸爸》</p><p>首先，他的学习内容仍然是以兴趣为第一导向，对于乏味、无用的内容他一概不学，确保了学习过程的积极性和主动性；其次，在阅读了《富爸爸穷爸爸》这本书后，我认为当时我当时的观点与书中穷爸爸对于停留在某种体制内、在某一方面成为专家的观点无异，而书中的富爸爸则倡导学习各方的知识，如财务知识、交谈经验等，这一出发点对该书的作者产生了深刻的影响，促成了其人生中的诸多机会，同时也造就了该书作者的经济地位——这也就是我想说的，求知欲以及交叉学科知识产生的影响。</p><p><img src="http://image.stephenfang.me/mweb/999FB844-A92A-4852-BA27-6BC0091DCB8C.jpg" alt="http://image.stephenfang.me/mweb/999FB844-A92A-4852-BA27-6BC0091DCB8C.jpg"></p><p>12年我的音乐资料库</p><p>人在学习和探索的过程中很可能会推翻许多固有的认知，很多年以前，我曾对日本的音乐抱有偏见，但通过数年对于日本音乐、文化的学习，我了解到坂本龙一、玉置浩二这样的大师，喜爱上re:plus这样的小众乐队，痴迷于押尾光太郎的指弹，见证过Aimer的迅速发展，我所学到的一切都引起了我对日本音乐的尊重。然而不仅仅是音乐，我对很多事物的看法都在互联网的影响下产生很大改观。我在本文最后呼吁大家走出“XX无用论”的泥淖，大胆拥抱新鲜事物，积极表达求知欲望，如尝试「GTD工作法」、「量化自我」等方法将大有裨益，至于某些具体的方法论不在此文中引述，读者可以期待本人未来的分享。</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>本文至此就告一段落了，显然，笔者想表达的观点和内容还有很多，对于具体的方法论会在之后的文章阐述，还请继续期待和支持。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://bi.qq.com/a/20170613/059340.htm">https://bi.qq.com/a/20170613/059340.htm</a></p><p><a href="https://en.wikiversity.org/wiki/10_Principles_of_Economics">https://en.wikiversity.org/wiki/10_Principles_of_Economics</a></p><p><a href="https://www.ifanr.com/app/727935">https://www.ifanr.com/app/727935</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;尼古拉·尼葛洛庞帝在他1995年发布的的著作《Being Digital》中描绘了未来数字生活的诸多情景，其中VR、AI、智能家居、个人助理等，无一不是近几年研究的热门领域，这些技术的出现深深影响了现代人的日常生活，换句话说，数字生活成为了当今时代人们生活的一部分。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://stephefang.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="数字生活" scheme="https://stephefang.me/tags/%E6%95%B0%E5%AD%97%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 学习笔记(四）</title>
    <link href="https://stephefang.me/2020/04/11/Objc_Learning_4/"/>
    <id>https://stephefang.me/2020/04/11/Objc_Learning_4/</id>
    <published>2020-04-11T07:43:20.000Z</published>
    <updated>2022-07-24T15:20:41.169Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第四篇文章，主要复习了 <code>Objective-C</code>中C语言特性。</p><span id="more"></span><h3 id="关于C语言特性"><a href="#关于C语言特性" class="headerlink" title="关于C语言特性"></a>关于C语言特性</h3><h4 id="关于数组"><a href="#关于数组" class="headerlink" title="关于数组"></a>关于数组</h4><p><code>Objective-C</code>与C语言一样允许用户定义一组有序的数据项，即数组。其操作与C语言几乎完全一致，事实上无论是函数还是数组还是变量具备良好C基础的人都不会对此感到陌生。以下为最简单的使用数组的Fibonacci代码。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> Fibo [<span class="number">30</span>];</span><br><span class="line">        Fibo [<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        Fibo [<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="keyword">sizeof</span>(Fibo)/<span class="keyword">sizeof</span>(Fibo[<span class="number">0</span>]); i++) &#123;</span><br><span class="line">            Fibo [i] = Fibo [i<span class="number">-1</span>] + Fibo [i<span class="number">-2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(Fibo)/<span class="keyword">sizeof</span>(Fibo[<span class="number">0</span>]); i++) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;The result of Fibonacci[%i] is %li\n&quot;</span>,i,Fibo[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关于函数"><a href="#关于函数" class="headerlink" title="关于函数"></a>关于函数</h4><p>默认情况下，<code>Objective-C</code>语言编译器假设函数返回int,除非发生以下两种情况之一:</p><ul><li>在函数被调用之前，已经在程序中定义了该函数，</li><li>在遇到函数调用之前，已经声明了该函数的返回值类型。<br>调用函数或方法时，作为参数传递的值将被复制到相应的形参中。使用数组时，并非将整个数组的内容复制到形参数组中，而是传递一个指针，它表示数组所在的内存地址。所以对形参数组所做的所有更改实际上都是对原始数组而不是数组的副本执行的。因此，函数或方法返回时，这些变化仍然有效。</li></ul><h4 id="关于块"><a href="#关于块" class="headerlink" title="关于块"></a>关于块</h4><ul><li>块是对C语言的一种扩展。它并未作为标准ANSI C所定义的部分，而是由 Apple 添加。</li><li>块看起来更像是函数，可以给块传递参数，块也具有返回值。</li><li>块定义在函数或者方法内部，并能够访问在函数或者方法范围内、块之外的任何变量，这些变量能够访问但是并不能够改变这些变量。</li><li>特殊的块修改器(由块前面含有两个下画线的字符组成)能够修改块内变量的值。</li><li>块的其中一个优势在于能够让系统分配给其他处理器或应用的其他线程执行。<br>以下为一个处理最小公倍数的简单块演示。</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> (^gcd)(<span class="keyword">int</span>,<span class="keyword">int</span>)=</span><br><span class="line">^(<span class="keyword">int</span> u,<span class="keyword">int</span> v)&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">while</span>(v!= <span class="number">0</span>)&#123;</span><br><span class="line">        temp = u % v;</span><br><span class="line">        u = v;</span><br><span class="line">        v = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="关于数组指针"><a href="#关于数组指针" class="headerlink" title="关于数组指针"></a>关于数组指针</h4><p>要将valuesPtr设为指向数组values的第–个元素的指针，可以写成：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valuesPtr = values;</span><br></pre></td></tr></table></figure><p>因为Objective-C编译器将没有下标的数组名称看作是指向数组第一个元素的指针。所以，仅仅指明values而不带下标，其作用就是产生一个指向values第一个元素的指针。不需要用到地址运算符，要产生指向values首元素的指针，还有另一个等效方式，就是对数组第一个元素应用地址运算符，即</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valuesPtr = &amp;values(<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>将数组values第一个元素的指针存放到指针变量valuesPtr中。此时通过</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valuesPtr += <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>可以使其指向下一个元素，即values[1]。在<code>Objective-C</code>语言中，这是完全合法的表达式，并且可以用于指向任何数据类型的指针。同时比较两个指针变量的做法也是完全合法的。这在比较指向同一数组的两个指针时非常有用。比如测试指针valuesPtr的指向是否超出了包含有100个元素的数组的范围，方法是将它与指向数组最后一个元素的指针相比较。<br>如果valuesPtr超出了数组values的最后元素，</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valuesPtr &gt; &amp;values [<span class="number">99</span>]</span><br></pre></td></tr></table></figure><p>的结果将为TRUE，反之，表达式的值为FALSE，也可将上面的表达式相应地改写为:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valuesPtr &gt; values + <span class="number">99</span></span><br></pre></td></tr></table></figure><p>在<code>Objective-C</code>语言中，两指针相减的结果是它们之间所包含的元素个数。这样，如果a是指向任意类型的元素数组，而b是指向同一数组中索引值更大的其他元素，那么表达式b-a<br>代表的就是这两个指针之间的元素个数。</p><h4 id="关于字符串指针"><a href="#关于字符串指针" class="headerlink" title="关于字符串指针"></a>关于字符串指针</h4><p>在《Objective-C 程序设计 (第六版)》中给出了以下两段代码说明字符串指针的运用。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用常规数组索引</span></span><br><span class="line"><span class="keyword">void</span> copyString (<span class="keyword">char</span> to[], <span class="keyword">char</span> from[])&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span> ; from[i] != <span class="string">&#x27;\0&#x27;</span>; ++i)</span><br><span class="line">        to[i] = from [i];</span><br><span class="line">    </span><br><span class="line">    to[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用指针数组</span></span><br><span class="line"><span class="keyword">void</span> copystring (<span class="keyword">char</span> *to， <span class="keyword">char</span> *from)&#123;</span><br><span class="line">    <span class="keyword">for</span> ( ; *from != <span class="string">&#x27;\0&#x27;</span>; ++from,++to ) </span><br><span class="line">        *to = *from;</span><br><span class="line">        </span><br><span class="line">    *to=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很有意思的是，<code>Objective-C</code>语言中用到字符串就会产生指向该字符串的指针。学习过程中在程序中使用了字符串不是字符串对象，而是属于C风格的字符串，可以通过字符串的前面是否具有@字符进行区分。这两种类型不能互换。如果一个函数需要字符数组作为参数，可以将char类型的数组或c风格字符串传递给它，不能传递一个字符串对象。</p><h3 id="关于两种语言的联系"><a href="#关于两种语言的联系" class="headerlink" title="关于两种语言的联系"></a>关于两种语言的联系</h3><ol><li>实例变量存储在结构中：对象实际上是结构</li><li>对象变量实际上是指针：将对象变量赋给另一个对象变量时，只是简单地复制了指针，最后都指向存储在内存中的同一结构</li><li>方法是函数，消息表达式是函数调用：调用方法是在调用与接收者类相关的函数。</li><li>id类型是通用指针类型：通过指针来引用对象可以自由地将它们在id变量之间来回赋值。因此返回id类型值的方法只是返回指向内存中某对象的指针。</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="">Objective-C 程序设计 (第六版)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近开始学习 &lt;code&gt;Objective-C&lt;/code&gt; 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第四篇文章，主要复习了 &lt;code&gt;Objective-C&lt;/code&gt;中C语言特性。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://stephefang.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Xcode" scheme="https://stephefang.me/tags/Xcode/"/>
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://stephefang.me/tags/Objective-C/"/>
    
  </entry>
  
</feed>
