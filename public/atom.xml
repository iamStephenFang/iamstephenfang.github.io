<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StephenFang</title>
  
  
  <link href="https://stephefang.me/atom.xml" rel="self"/>
  
  <link href="https://stephefang.me/"/>
  <updated>2021-07-26T08:15:57.651Z</updated>
  <id>https://stephefang.me/</id>
  
  <author>
    <name>Stephen Fang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SwiftUI开发初探</title>
    <link href="https://stephefang.me/2021/07/15/SwiftUIExploration/"/>
    <id>https://stephefang.me/2021/07/15/SwiftUIExploration/</id>
    <published>2021-07-15T07:20:20.000Z</published>
    <updated>2021-07-26T08:15:57.651Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用 SwiftUI 完成了一部分项目的编写，我将完成项目时使用 SwiftUI 进行开发的体验做简单的总结。本文也同时发表于网易KM平台。</p><a id="more"></a><h1 id="最近项目"><a href="#最近项目" class="headerlink" title="最近项目"></a>最近项目</h1><ul><li>基于知识图谱的推荐系统的设计与实现（客户端部分采用 SwiftUI 实现）</li></ul><img src="/2021/07/15/SwiftUIExploration/Recommender.png" class=""><img src="/2021/07/15/SwiftUIExploration/Structure.png" class=""><ul><li>知识图谱入门简介（UI 部分采用 SwiftUI 实现，WWDC Swift Student Challenge获奖项目）</li></ul><p><a href="https://github.com/iamStephenFang/KnowledgeGraph" target="_blank" rel="noopener">iamStephenFang/KnowledgeGraph</a></p><img src="/2021/07/15/SwiftUIExploration/KG.png" class=""><ul><li>FinMatters（一款采用 SwiftUI 编写的理财 App）</li></ul><img src="/2021/07/15/SwiftUIExploration/Fin.png" class=""><h1 id="哪些优点"><a href="#哪些优点" class="headerlink" title="哪些优点"></a>哪些优点</h1><h2 id="指令式编程-VS-声明式编程"><a href="#指令式编程-VS-声明式编程" class="headerlink" title="指令式编程 VS 声明式编程"></a>指令式编程 VS 声明式编程</h2><p>指令式编程逐条指示计算机<strong>怎么做，</strong>注重于<strong>描述过程</strong></p><ul><li>运算语句：let a = 1 + 2</li><li>循环语句: for while</li><li>条件语句: if switch</li></ul><h2 id="声明式编程教会计算机做什么，注重于描述结果"><a href="#声明式编程教会计算机做什么，注重于描述结果" class="headerlink" title="声明式编程教会计算机做什么，注重于描述结果"></a>声明式编程教会计算机<strong>做什么，</strong>注重于<strong>描述结果</strong></h2><ul><li>Map： let squares = nums.map {$0* $0}</li><li>Reduce： let total = nums.reduce(10.0,+)</li><li>Filter： let evens = nums.filter { $0% 2 == 0 }</li></ul><h2 id="声明式UI"><a href="#声明式UI" class="headerlink" title="声明式UI"></a>声明式UI</h2><p>1.View并不负责渲染，并非传统意义的视图层级，而是对视图组织关系的声明</p><p>2.决定 UI 状态的状态 State 存储在对象之中</p><p>3.View = func(State)通过控制和改变 State来得到确定的 View</p><p>4.State 改变时调用上述函数获取新的 State 的 View，重新渲染更改部分</p><h2 id="开发体验"><a href="#开发体验" class="headerlink" title="开发体验"></a>开发体验</h2><ul><li>UIKit 组件混编成本不高</li><li>复杂视图减少代码量</li><li>Model-View-ViewModel</li><li>动画、效果、手势实现简单</li></ul><img src="/2021/07/15/SwiftUIExploration/Code1.png" class=""><h2 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h2><ul><li>在 iPad 上的 Swift Playground编写 SwiftUI 相关代码</li></ul><img src="/2021/07/15/SwiftUIExploration/PG.png" class=""><ul><li>在 Xcode 中可以实现实时的、可响应的预览</li></ul><img src="/2021/07/15/SwiftUIExploration/Demo.png" class=""><ul><li>跨端开发压力小，实现iOS、iPadOS、watchOS、macOS同步开发</li></ul><img src="/2021/07/15/SwiftUIExploration/CP.png" class=""><h1 id="哪些缺点"><a href="#哪些缺点" class="headerlink" title="哪些缺点"></a>哪些缺点</h1><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><ul><li>发布于 WWDC19</li><li>Xcode 11.0+</li><li>iOS 13.0+</li><li>网易云音乐iOS 11.0+</li></ul><h2 id="组件开发"><a href="#组件开发" class="headerlink" title="组件开发"></a>组件开发</h2><p>表面上 SwiftUI 集成了很多可用的组件，但在实现自定义组件时还是需要自行编写元组件相关的代码，并且目前三方组件库可选择的项目较少。</p><img src="/2021/07/15/SwiftUIExploration/Code2.png" class=""><img src="/2021/07/15/SwiftUIExploration/Code3.png" class=""><img src="/2021/07/15/SwiftUIExploration/Fin2.png" class=""><p>原生组件可供更改的样式极其有限，有时候一些问题的解决方案代码并不优雅，比如导航栏只能手动隐藏、全屏状态下无法展示Modal、List 的分割线无法移除等等。</p><img src="/2021/07/15/SwiftUIExploration/Code4.png" class=""><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span>&#123;</span><br><span class="line">            <span class="type">ZStack</span> &#123;</span><br><span class="line">                <span class="type">Color</span>(<span class="string">"Background"</span>).ignoresSafeArea()</span><br><span class="line">                <span class="type">VStack</span>&#123;</span><br><span class="line">                    <span class="type">TopNavView</span>(navDesc: “总览<span class="string">")</span></span><br><span class="line"><span class="string">                        .padding(.horizontal)</span></span><br><span class="line"><span class="string">                        .padding(.top, 0)</span></span><br><span class="line"><span class="string">                    </span></span><br><span class="line"><span class="string">                    VStack&#123;&#125;</span></span><br><span class="line"><span class="string">      / *** 省略内容 ***/</span></span><br><span class="line"><span class="string">                .navigationTitle("</span><span class="string">")</span></span><br><span class="line"><span class="string">                .navigationBarHidden(true)</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br></pre></td></tr></table></figure><h2 id="组件缺失"><a href="#组件缺失" class="headerlink" title="组件缺失"></a>组件缺失</h2><ul><li>WKWebView 混编</li></ul><img src="/2021/07/15/SwiftUIExploration/Code4.png" class=""><ul><li>SwiftUIX <a href="https://github.com/SwiftUIX/SwiftUIX" target="_blank" rel="noopener">https://github.com/SwiftUIX/SwiftUIX</a></li><li>SwiftUI-Introspect <a href="https://github.com/SwiftUIX/SwiftUIX" target="_blank" rel="noopener">https://github.com/SwiftUIX/SwiftUIX</a></li></ul><h2 id="开发体验问题"><a href="#开发体验问题" class="headerlink" title="开发体验问题"></a>开发体验问题</h2><ul><li>寻找问题答案成本较高，Stack Overflow可能都未收录</li><li>API 在 SwiftUI 大版本更新时存在差别</li><li>View Hierarchy 检查器无法使用</li><li>Live Preview 渲染经常出错且消耗大量性能</li><li>错误信息有时存在误导</li></ul><h1 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h1><ul><li>目前适合个人开发者开发个人项目</li><li>两年内随着老款iOS设备的淘汰能够看到更多的 SwiftUI 应用</li><li>SwiftUI 与 Combine 的结合</li><li>苹果平台应用有跨端需求可以减少开发成本</li><li>开发体验上好于 Flutter、React Native</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://designcode.io/swiftui2-course" target="_blank" rel="noopener">https://designcode.io/swiftui2-course</a></li><li><a href="https://www.raywenderlich.com/19611194-multiplatform-app-tutorial-swiftui-and-xcode-12" target="_blank" rel="noopener">https://www.raywenderlich.com/19611194-multiplatform-app-tutorial-swiftui-and-xcode-12</a></li><li><a href="https://www.fivestars.blog/articles/custom-view-styles/" target="_blank" rel="noopener">https://www.fivestars.blog/articles/custom-view-styles/</a></li><li><a href="https://objccn.io/products/functional-swift/" target="_blank" rel="noopener">https://objccn.io/products/functional-swift/</a></li><li><a href="https://objccn.io/products/swift-ui" target="_blank" rel="noopener">https://objccn.io/products/swift-ui</a></li><li><a href="https://www.fivestars.blog/articles/swiftui-hud/" target="_blank" rel="noopener">https://www.fivestars.blog/articles/swiftui-hud/</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近使用 SwiftUI 完成了一部分项目的编写，我将完成项目时使用 SwiftUI 进行开发的体验做简单的总结。本文也同时发表于网易KM平台。&lt;/p&gt;</summary>
    
    
    
    <category term="tech" scheme="https://stephefang.me/categories/tech/"/>
    
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Swift" scheme="https://stephefang.me/tags/Swift/"/>
    
    <category term="SwiftUI" scheme="https://stephefang.me/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>Effective Objective-C 总结</title>
    <link href="https://stephefang.me/2021/07/12/EffectiveObjcTips/"/>
    <id>https://stephefang.me/2021/07/12/EffectiveObjcTips/</id>
    <published>2021-07-12T03:34:32.000Z</published>
    <updated>2021-07-26T08:44:20.385Z</updated>
    
    <content type="html"><![CDATA[<p>准备开始写 Objective-C 之前花了一些时间重新阅读这本经典的《Effective Objective-C》，在阅读的过程中对重点内容进行了一些摘录，在方便自己复习的同时将相关内容在博客分享出来供参考。</p><a id="more"></a><h2 id="第一节"><a href="#第一节" class="headerlink" title="第一节"></a>第一节</h2><ul><li>Objective-C 采用了动态绑定的消息结构，在运行时检查对象的类型，运行期环境决定了接受消息后需要执行的代码。</li><li>Objective-C 对象所占内存分配在堆空间中，分配在堆空间中的内存必须直接管理。</li><li>定义中不含*的变量分配在栈空间上，分配在栈的用于保存变量的内存会在栈帧弹出时自动清理。</li><li>如果需要存储int、float、double、char等非对象类型推荐使用结构体。</li></ul><h2 id="第二节"><a href="#第二节" class="headerlink" title="第二节"></a>第二节</h2><ul><li>在 .h 文件中使用@class 标识需要引入的类并且在 .m 文件中引入相关头文件，该种方式被称为向前声明，简单的说，将引入头文件的时机尽量向后可以减短编译的时间，并且能够解决互相引用问题。尽量不要引入头文件，降低类之间的耦合。</li><li>有时无法使用向前声明，比如要声明某个类遵循一项协议。此时应尽量把“该类遵循某协议〞的这条声明移至“class-continuation 分类” 中。如果不行就把协议单独放在一个头文件中然后将其引人。</li></ul><h2 id="第三节"><a href="#第三节" class="headerlink" title="第三节"></a>第三节</h2><ul><li>尽量使用字面量语法创建字符串、数值、数组、字典</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSNumber</span> *intNumber = @<span class="number">1</span>;</span><br><span class="line"><span class="built_in">NSNumber</span> *floatNumber = @<span class="number">1.1</span>f;</span><br><span class="line"><span class="built_in">NSNumber</span> *doubleNumber = @<span class="number">1.123456</span>;</span><br><span class="line"><span class="built_in">NSNumber</span> *boolNumber = @YES;</span><br><span class="line"><span class="built_in">NSNumber</span> *charNumber = @<span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> numberInt = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">float</span> numberFloat = <span class="number">1.23</span>f;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSArray</span> *animals = @[<span class="string">@"cat"</span>, <span class="string">@"dog"</span>, <span class="string">@"mouse"</span>];</span><br><span class="line"><span class="built_in">NSString</span> *dog = <span class="string">@"shiba"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSDictionary</span> *personData = @&#123;<span class="string">@"firstName"</span> : <span class="string">@"Stephen"</span>,</span><br><span class="line"> <span class="string">@"lastName"</span> : <span class="string">@"Fang"</span>,</span><br><span class="line"> <span class="string">@"gender"</span> : <span class="string">@"male"</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li>NSArray 的 arrayWithObjects 方法依次处理各个参数直到发现nil，而如果使用字面量的方法在创建时就会抛出异常终止程序执行，需要确保创建的数组与字典中不含有nil</li><li>尽量使用取下标的方式来访问数组或字典中的元素</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *dog = animals[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">NSString</span> *lastName = personData[<span class="string">@"lastName"</span>];</span><br></pre></td></tr></table></figure><h2 id="第四节"><a href="#第四节" class="headerlink" title="第四节"></a>第四节</h2><ul><li>#define预处理指令声明全局变量尽量少用，编译器只会执行查找和替换操作，不会产生重复定义的警告信息</li><li>尽量使用 static const 声明的方式来完成变量的声明，static表示该变量在定义此变量的编译单元中可见，而static const不会创建符号，只是将变量替换为常量</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">NSTimeInterval</span> kAnimationDuration = <span class="number">0.3</span>;</span><br></pre></td></tr></table></figure><ul><li>编译器看到extern关键字得知全局符号表中包含该符号无需查看该定义就允许只用该常量，该类常量只可以定义一次，命名最好使用与之相关的类名作为前缀</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In the header file</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> EOCStringConstant;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In the implementation file </span></span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> EOCStringConstant = <span class="string">@"DEMO"</span>;</span><br></pre></td></tr></table></figure><h2 id="第五节"><a href="#第五节" class="headerlink" title="第五节"></a>第五节</h2><ul><li>保证枚举由底层数据类型实现，不采用编译器所选类型</li><li>凡是需要以按位或操作来组合的枚举都应使用NS_OPTIONS定义，若枚举不需要相互组合应使用NS_ENUM来定义</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, STFFeedPageType) &#123;</span><br><span class="line">    STFFeedPageTypeNone = <span class="number">0</span>,             <span class="comment">// 未知</span></span><br><span class="line">    STFFeedPageTypeFollow = <span class="number">1</span>,           <span class="comment">// 关注页</span></span><br><span class="line">    STFFeedPageTypeRecommend = <span class="number">2</span>,        <span class="comment">// 推荐页</span></span><br><span class="line">    STFFeedPageTypeFeatured = <span class="number">3</span>,         <span class="comment">// 精选页</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, AgoraAudioSessionOperationRestriction) &#123;</span><br><span class="line">    <span class="comment">/** No restriction, the SDK has full control of the audio session operations. */</span></span><br><span class="line">    AgoraAudioSessionOperationRestrictionNone              = <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/** The SDK does not change the audio session category. */</span></span><br><span class="line">    AgoraAudioSessionOperationRestrictionSetCategory       = <span class="number">1</span>,</span><br><span class="line">    <span class="comment">/** The SDK does not change any setting of the audio session (category, mode, categoryOptions). */</span></span><br><span class="line">    AgoraAudioSessionOperationRestrictionConfigureSession  = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">    <span class="comment">/** The SDK keeps the audio session active when leaving a channel. */</span></span><br><span class="line">    AgoraAudioSessionOperationRestrictionDeactivateSession = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">    <span class="comment">/** The SDK does not configure the audio session anymore. */</span></span><br><span class="line">    AgoraAudioSessionOperationRestrictionAll               = <span class="number">1</span> &lt;&lt; <span class="number">7</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>处理枚举类型的switch语句不要实现default分支</li></ul><h2 id="第六节"><a href="#第六节" class="headerlink" title="第六节"></a>第六节</h2><ul><li>在iOS中一般不使用atomic，因为同步锁会带来较大的开销，且无法保证线程安全</li><li>尽量使用@property语法定义对象封装的数据</li><li>在设置属性对应的实例变量时需要遵从属性声明的语义</li><li>针对CGFloat、NSInteger此类纯量类型采用assign声明即可</li><li>copy类型用于保护NSString*类型的封装性，在ARC下直接访问一个声明为copy的属性并不会直接拷贝而是保留新值释放旧值</li></ul><h2 id="第七节"><a href="#第七节" class="headerlink" title="第七节"></a>第七节</h2><ul><li>在对象内部尽量直接访问实例变量<ul><li>速度更快且生成的代码会直接访问对象实例变量的那块内存</li><li>不会调用“设置方法”</li><li>不会触发KVO，但需要确定是否会产生问题</li><li>通过给getter、setter设置断点可以进行监控和确定访问时机</li></ul></li><li>在写入实例变量时可以通过属性写入，读取实例变量时直接访问，可以作为一种折中方案</li><li>在初始化方法及dealloc方法中，应该直接通过实例变量读取数据，即_</li><li>懒加载方式中必须使用getter的方式访问属性，如果在没有用getter的情况下直接访问实例变量会导致得到是尚未设置好的变量</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (STFComponent*)component &#123;</span><br><span class="line"><span class="keyword">if</span> (!_component) &#123;</span><br><span class="line">_component = [SFComponent new];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _component;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第八节"><a href="#第八节" class="headerlink" title="第八节"></a>第八节</h2><ul><li>== 操作符对比的是两个指针本身并非所指对象</li><li>NSString类实现了一个等同判断方法即isEqualToString，执行该方法的速度快于执行isEqual</li><li>检测对象的等同性需要提供 isEqual 与 hash 方法，NSObject对于两个方法默认实现是仅当指针值完全相等才返回相等，需要针对具体的需求制定检测方案</li><li>编写hash方法时需要使用计算速度快且哈希碰撞低的算法</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- （<span class="built_in">BOOL</span>）isEqual:(<span class="keyword">id</span>)object &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">self</span> == object) <span class="keyword">return</span> <span class="literal">YES</span>; <span class="comment">// 指向同一个对象必然相等</span></span><br><span class="line"><span class="keyword">if</span> ([<span class="keyword">self</span> <span class="keyword">class</span>] != [object <span class="keyword">class</span>]) <span class="keyword">return</span> <span class="literal">NO</span>; <span class="comment">//不属于同一个类不相等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测每一个属性是否相等</span></span><br><span class="line">STFPerson *someone = (STFPerson*) object;</span><br><span class="line"><span class="keyword">if</span> (![_firstName isEqualToString:someone.firstName])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line"><span class="keyword">if</span> (![_lastName isEqualToString:someone.lastName])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line"><span class="keyword">if</span> (![_age != someone.age])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> - (<span class="built_in">NSUInteger</span>)hash &#123;</span><br><span class="line"><span class="built_in">NSUInteger</span> firstNameHash = [_firstName hash]；</span><br><span class="line"><span class="built_in">NSUInteger</span> lastNameHash = [_lastName hash]；</span><br><span class="line"><span class="built_in">NSUInteger</span> ageHash = [_ageHash hash]；</span><br><span class="line"><span class="keyword">return</span> firstNameHash ^ lastNameHash ^ ageHash；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>NSArray有等同性判定方法”isEqualToArray:”，而NSDictionary有等同性判定方法”isEqualToDictionary:”， NSArray检测方式为首先核对两个数组包含对象的个数是否相等，若相等在每个对应位置调用”isEqual:”方法</li><li>在编写判定方法时应一并覆写”isEqual:”方法，如果接收该消息的对象与受测参数来自一个类就调用自己编写的判定方法，负责交由超类判定</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-  (<span class="built_in">BOOL</span>)isEqual:(<span class="keyword">id</span>)object &#123;</span><br><span class="line"><span class="keyword">if</span> ([<span class="keyword">self</span> <span class="keyword">class</span>] == [object <span class="keyword">class</span>]) </span><br><span class="line"><span class="keyword">return</span> [<span class="keyword">self</span> isEqualToPerson:(STFPerson*)object];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> [<span class="keyword">super</span> isEqual: object];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第九节"><a href="#第九节" class="headerlink" title="第九节"></a>第九节</h2><ul><li>UIButton类使用者无需关系创建出来的按钮属于哪个子类也无需考虑按钮绘制方式等细节</li><li>类族的使用需要遵循以下原则<ul><li>子类应该继承自类族的抽象基类</li><li>子类应该定义自己的数据存储方式</li><li>子类应该覆写超类文档中需要覆写的方法</li></ul></li></ul><h2 id="第十节"><a href="#第十节" class="headerlink" title="第十节"></a>第十节</h2><ul><li>在其他做法不可行的条件下可以选用关联对象，因为这种做法同样会引入难以查找的bug（不建议使用）</li></ul><h2 id="第十一节"><a href="#第十一节" class="headerlink" title="第十一节"></a>第十一节</h2><ul><li>在编译期就能决定运行时所需要调用的函数为静态绑定，而所需要调用的函数直到运行期才能确定为动态绑定</li><li>runtime决定了对象收到消息后调用哪个方法，甚至在程序运行时可以改变。发送给对象的所有消息都由动态信息派发系统处理</li><li>objc_msgSend函数根据receive和selector的类型调用适当的方法，通过查找每个类中的“表格”查找需要执行的方法并跳转至相应的实现</li><li>尾调用优化在函数的最后一项是调用另一个函数时生效，编译器生成跳转至另一个函数所需的指令码</li></ul><h2 id="第十二节"><a href="#第十二节" class="headerlink" title="第十二节"></a>第十二节</h2><ul><li><p>消息转发分为两个阶段</p><ul><li><p>第一阶段：动态方法解析</p></li><li><p>第二阶段：消息转发机制</p><img src="/2021/07/12/EffectiveObjcTips/Untitled.png" class=""></li></ul></li><li><p>receiver在每一步都有机会处理消息且步骤越往后处理消息的代价越大</p></li><li><p>如果对象没有办法响应某个selector则进入消息转发流程,runtime的动态方法解析可以在需要某个方法时将其加入类中，对象可以将无法解析的selector转交给其他对象处理。这一步结束后若仍然无法处理selector则启动消息转发机制</p></li></ul><h2 id="第十三节"><a href="#第十三节" class="headerlink" title="第十三节"></a>第十三节</h2><ul><li>在runtime中可以向类中新增或替换selector对应的方法实现，但一般只用于调试</li><li>method swizzling，即使用另一份实现替换原有的方法实现，可以用于向原有的实现中添加新功能</li></ul><h2 id="第十四节"><a href="#第十四节" class="headerlink" title="第十四节"></a>第十四节</h2><ul><li>每个Objective-C对象实例都有指向Class对象的指针，每个对象结构体的首个成员是Class类的变量，该变量定义了对象所属的类，通常称为”is a”指针</li><li>isMemberOfClass 判断对象是否为某个特定类的实例，isKindOfClass 判断对象是否是某类或派生类的实例</li><li>动态类型特性可以用于从 collection 中获取对象（类型信息查询方法）</li><li>假设名为SomeClass的子类继承自NSObject可以得到以下继承体系</li></ul><img src="/2021/07/12/EffectiveObjcTips/Untitled1.png" class=""><h2 id="第十五节"><a href="#第十五节" class="headerlink" title="第十五节"></a>第十五节</h2><ul><li>类名、分类名都应该加上相应的前缀，如果使用三方库编写自己的代码并分发尤其需要注意重复符号问题</li></ul><img src="/2021/07/12/EffectiveObjcTips/Untitled2.png" class=""><h2 id="第十六节"><a href="#第十六节" class="headerlink" title="第十六节"></a>第十六节</h2><ul><li>在类中实现一个designated initializer，尽量在文档中指明初始化需要调用该方法</li><li>若designated initializer不同于超类则需覆写超类对应方法</li><li>如果超类的初始化方法不适用于子类应覆写超类方法并抛出异常</li></ul><h2 id="第十七节"><a href="#第十七节" class="headerlink" title="第十七节"></a>第十七节</h2><ul><li>实现description方法能够返回一个有意义的字符串来描述实例，需要打印出类的名字和指针地址因为有时候会用到</li><li>使用NSDictionary来编写description方法使代码更容易维护</li></ul><img src="/2021/07/12/EffectiveObjcTips/Untitled3.png" class=""><ul><li>在调试时打印更为详尽的对象描述信息应实现debugDescription方法</li></ul><img src="/2021/07/12/EffectiveObjcTips/Untitled4.png" class=""><h2 id="第十八节"><a href="#第十八节" class="headerlink" title="第十八节"></a>第十八节</h2><ul><li>尽量创建不可变对象，把对外公开的属性设置为只读且在必要时对外公布属性</li><li>某属性仅用于对象内部修改应将其从readonly改为readwrite属性</li><li>可变的collection不应作为属性公开，而应提供相关方法修改可变的collection</li></ul><h2 id="第十九节"><a href="#第十九节" class="headerlink" title="第十九节"></a>第十九节</h2><p>如果从其他框架中继承子类务必遵循命名惯例，如从UIView中继承自定义子类则类名末尾词为View，若创建自定义委托协议末尾应跟上Delegate一词。</p><img src="/2021/07/12/EffectiveObjcTips/Untitled5.png" class=""><h2 id="第二十节"><a href="#第二十节" class="headerlink" title="第二十节"></a>第二十节</h2><ul><li>适当给私有方法加上前缀可以很容易将其与公共方法进行区分</li><li>不应使用一个下划线做私有方法的前缀，如 _resetViewController 方法已经被苹果实现</li></ul><h2 id="第二十一节"><a href="#第二十一节" class="headerlink" title="第二十一节"></a>第二十一节</h2><ul><li>Objective-C对于异常采取的态度为：只有在极为罕见的情况下才抛出异常，并在异常抛出后无需考虑恢复问题，应用程序此时应该退出。异常应该运用于极其严重的问题</li></ul><img src="/2021/07/12/EffectiveObjcTips/Untitled6.png" class=""><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)doSomething:(<span class="built_in">NSError</span>**) error</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)doSomething:(<span class="built_in">NSError</span>**) error &#123;</span><br><span class="line"><span class="comment">// do something that may cause an error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( <span class="comment">/* there was an error */</span> ) &#123;</span><br><span class="line"><span class="keyword">if</span> (error) &#123;</span><br><span class="line">*error = [<span class="built_in">NSErrorerrorwithDomain</span>:domain code:code userInfo:userInfo];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line"><span class="built_in">BOOL</span> ret = [object doSomething: &amp;error];</span><br><span class="line"><span class="keyword">if</span> (ret) &#123;</span><br><span class="line">     <span class="comment">// handle error </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/07/12/EffectiveObjcTips/Untitled7.png" class=""><p>传递给方法的是个指针，指针本身指向另一个指向NSError对象的指针，或认为其为一个直接指向NSError对象的指针。在 ARC 中，指针所指向的对象会在方法执行完毕后自动释放。</p><h2 id="第二十二节"><a href="#第二十二节" class="headerlink" title="第二十二节"></a>第二十二节</h2><ul><li>使自己的类支持拷贝操作需要实现NSCopying协议，该协议只有一个方法且不必担心zone参数。覆写copy方法真正需要实现的是copyWithZone方法。</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)copyWithZone:(<span class="built_in">NSZone</span>*)zone</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)copyWithZone:(<span class="built_in">NSZone</span>*)zone &#123;</span><br><span class="line">STFPerson *<span class="keyword">copy</span> = [[<span class="keyword">self</span> <span class="keyword">class</span>] allocWithZone:zone]initWithFirstName:_firstName andLastName:_lastName];</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">copy</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在可变对象上调用copy会返回一个不可变类的实例，可能会把NSMutableArray对象当作NSArray返回，为了安全起见使用copy和mutableCopy这两个方法复制对象</p></li><li><p>深拷贝与浅拷贝</p><ul><li><p>深拷贝：拷贝对象自身时一并拷贝其底层数据，需要新增一个专门执行深拷贝的方法</p></li><li><p>浅拷贝：只拷贝容器对象本身不拷贝其中数据；Foundation框架所有collection类执行拷贝的默认情况；实现copyWithZone方法</p></li><li><p>图解：</p><img src="/2021/07/12/EffectiveObjcTips/Untitled8.png" class=""></li></ul></li></ul><h2 id="第二十三节"><a href="#第二十三节" class="headerlink" title="第二十三节"></a>第二十三节</h2>   <img src="/2021/07/12/EffectiveObjcTips/Untitled9.png" class="">   <img src="/2021/07/12/EffectiveObjcTips/Untitled10.png" class="">   <img src="/2021/07/12/EffectiveObjcTips/Untitled11.png" class="">   <img src="/2021/07/12/EffectiveObjcTips/Untitled12.png" class="">   <img src="/2021/07/12/EffectiveObjcTips/Untitled13.png" class="">   <img src="/2021/07/12/EffectiveObjcTips/Untitled14.png" class=""><p>存放委托对象的属性需要为weak（在对象销毁时自动清空）或unsafe_unretained（不需要自动清空）。</p>   <img src="/2021/07/12/EffectiveObjcTips/Untitled15.png" class="">   <img src="/2021/07/12/EffectiveObjcTips/Untitled16.png" class="">   <img src="/2021/07/12/EffectiveObjcTips/Untitled17.png" class=""><ul><li>某个对象从另一个对象获取数据可以使用委托模式，亦成为数据源模式，数据的流动如上图所示</li><li>如果有必要可以实现有段位的结构体将委托对象是否能响应相关协议的信息缓存至其中</li></ul><h2 id="第二十四条"><a href="#第二十四条" class="headerlink" title="第二十四条"></a>第二十四条</h2><ul><li><p>通过分类机制将代码划分为易于管理的小块</p> <img src="/2021/07/12/EffectiveObjcTips/Untitled18.png" class=""> <img src="/2021/07/12/EffectiveObjcTips/Untitled19.png" class=""> <img src="/2021/07/12/EffectiveObjcTips/Untitled20.png" class=""> <img src="/2021/07/12/EffectiveObjcTips/Untitled21.png" class=""></li><li><p>可以创建名为Private的分类并将私有方法放在里面，这个分类的方法只在类和框架内部使用无需对外公布</p></li></ul><h2 id="第二十五条"><a href="#第二十五条" class="headerlink" title="第二十五条"></a>第二十五条</h2><ul><li><p>向第三方类中添加分类时给分类名与方法名加上前缀</p> <img src="/2021/07/12/EffectiveObjcTips/Untitled22.png" class=""></li></ul><h2 id="第二十六条"><a href="#第二十六条" class="headerlink" title="第二十六条"></a>第二十六条</h2><ul><li><p>在实现分类时所有属性都应该定义在主接口内，类所封装的所有数据都应该定义在主接口内</p> <img src="/2021/07/12/EffectiveObjcTips/Untitled23.png" class=""></li></ul><h2 id="第二十七条"><a href="#第二十七条" class="headerlink" title="第二十七条"></a>第二十七条</h2><ul><li><p>class-continuation 分类中可以定义方法和实例变量，如下方式中_anotherInstanceVariable 是隐藏的状态</p>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">STFPerson</span>() </span>&#123;</span><br><span class="line"><span class="built_in">NSString</span> *_anInstanceVariable;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Methods declaration</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">STFPerson</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> _anotherInstanceVariable;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Methods implementation </span></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure> <img src="/2021/07/12/EffectiveObjcTips/Untitled24.png" class=""></li><li><p>WebKit、CoreAnimation 底层大部分代码用C++编写，对外展示的为Objective-C接口</p> <img src="/2021/07/12/EffectiveObjcTips/Untitled25.png" class=""></li><li><p>上图方式可以随意调用setFirstName与setLastName方法与点语法设置属性，同时外界无法修改对象，完成了类型的拓展</p> <img src="/2021/07/12/EffectiveObjcTips/Untitled26.png" class=""><ul><li>不需要在公共接口中声明类遵从了私有协议，而应该改到 class-continuation 分类内进行声明</li></ul></li></ul><h2 id="第二十八条"><a href="#第二十八条" class="headerlink" title="第二十八条"></a>第二十八条</h2><ul><li><p>协议可以在某种程度上提供匿名类型，具体的对象类型淡化成为遵从某个协议的id类型，协议离规定对象应该实现的方法。下图中与数据库连接相关的类名称就无法泄漏</p>  <img src="/2021/07/12/EffectiveObjcTips/Untitled27.png" class=""></li><li><p>使用匿名对象实现类型名称的隐藏，需要注意的是对象需要能够响应定义在协议中的方法</p></li><li><p>下图中其中sectionInfo为匿名对象，把section数组中返回的内部状态对象视为遵从NSFetchedResultsSectionInfo的匿名对象，隐藏了相关实现细节。</p>  <img src="/2021/07/12/EffectiveObjcTips/Untitled28.png" class=""></li></ul><h2 id="第二十九条"><a href="#第二十九条" class="headerlink" title="第二十九条"></a>第二十九条</h2><ul><li><p>对象创建完成后引用计数至少为1，如果需要保留该对象需要调用retain方法，如果不再需要该对象则调用release、autorelease方法，当引用计数归零时对象被回收</p>  <img src="/2021/07/12/EffectiveObjcTips/Untitled29.png" class=""></li><li><p>为了避免使用无效对象一般在完成调用release之后清空指针，保证不会出现指向无效对象的指针</p>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSNumber</span> *number = [[<span class="built_in">NSNumber</span> alloc]initWithInt: <span class="number">1234</span>];</span><br><span class="line">[array addObject: number];</span><br><span class="line">[number release];</span><br><span class="line">number = <span class="literal">nil</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="第三十条"><a href="#第三十条" class="headerlink" title="第三十条"></a>第三十条</h2><ul><li>ARC会自动执行retain、release、autorelease等操作，不能直接对这些方法（还包括dealloc）进行调用</li><li>ARC在调用这些方法并不通过Objective-C消息派发机制，而是直接调用底层C语言版本，能够带来更好的性能</li><li>若方法名以以下的几个四个词语开头则表示返回的对象归调用者所有，反之返回的对象会自动释放<ul><li>copy</li><li>mutableCopy</li><li>new</li><li>alloc</li></ul></li></ul><h2 id="第三十一条"><a href="#第三十一条" class="headerlink" title="第三十一条"></a>第三十一条</h2>   <img src="/2021/07/12/EffectiveObjcTips/Untitled30.png" class=""><ul><li>如果对象持有文件描述符等系统资源，应该专门写一个方法释放此类资源，用完使用close方法</li><li>执行异步任务的方法和只能在正常状态下执行的方法不应在dealloc中调用</li></ul><h2 id="第三十二条"><a href="#第三十二条" class="headerlink" title="第三十二条"></a>第三十二条</h2><ul><li><p>ARC不生成安全处理异常所需的清理代码，开启编译器标志后可以生成这种代码但是会导致应用程序变大，且会降低运行效率</p> <img src="/2021/07/12/EffectiveObjcTips/Untitled31.png" class=""></li></ul><h2 id="第三十三条"><a href="#第三十三条" class="headerlink" title="第三十三条"></a>第三十三条</h2><ul><li><p>当指向EOCClassA的实例引用移除后unsafe_unretained属性仍然指向已经回收的实例，而weak属性指向nil</p>  <img src="/2021/07/12/EffectiveObjcTips/Untitled32.png" class=""></li></ul><h2 id="第三十四条"><a href="#第三十四条" class="headerlink" title="第三十四条"></a>第三十四条</h2><p>系统会自动创建一些线程，如主线程或GCD机制中的线程都有自动释放池，这些线程都有autoreleasepool，每次执行event loop就会将其清空</p>   <img src="/2021/07/12/EffectiveObjcTips/Untitled33.png" class="">   <img src="/2021/07/12/EffectiveObjcTips/Untitled34.png" class=""><h2 id="第三十五条"><a href="#第三十五条" class="headerlink" title="第三十五条"></a>第三十五条</h2><ul><li>系统在回收对象时可以将其转化为僵尸对象，通过环境变量NSZombieEnabled可以开启该功能，或在Xcode中开启</li></ul><img src="/2021/07/12/EffectiveObjcTips/Untitled35.png" class=""><ul><li>系统修改对象的isa指针指向特殊的僵尸类可以时该对象成为僵尸对鲜花，僵尸类能够响应所有的selector，在打印一条包含消息内容及接受者的消息后终止应用程序</li></ul><h2 id="第三十六条"><a href="#第三十六条" class="headerlink" title="第三十六条"></a>第三十六条</h2><p>在 ARC 下调用查询对象当前引用计数的方法会触发崩溃</p><pre><code><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSUInteger</span>)retainCount</span><br></pre></td></tr></table></figure></code></pre><p>事实上该方法不应该调用，方法返回的retainCount是某个给定时间点上的数值，并未考虑系统会稍后清空自动释放池，无法反应对象生命期的全貌。</p><h2 id="第三十七条"><a href="#第三十七条" class="headerlink" title="第三十七条"></a>第三十七条</h2><ul><li><p>Block与定义它的函数共享同一个范围内的信息，块自有其相关类型，可以将块赋值给变量并使用它</p>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> (^someBlock) () = ^ &#123;</span><br><span class="line"><span class="comment">// Block implementation</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> other = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> (^addBlock) (<span class="keyword">int</span> a, <span class="keyword">int</span> b) = ^ (<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line"><span class="keyword">return</span> other + a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> sum = addBlock(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><ul><li>需要在Block内修改的变量需要加上 _block 修饰符，如果将块定义在Objective-C类的实例方法中，除了可以访问类的所有的实例变量外还可以使用self变量且无需添加_block。</li><li>定义Block的时候分配的内存区域在栈上，即块只在定义的范围内有效，可以创建不会捕捉任何状态的全局块</li></ul></li></ul><img src="/2021/07/12/EffectiveObjcTips/Untitled36.png" class=""><img src="/2021/07/12/EffectiveObjcTips/Untitled37.png" class=""><h2 id="第三十八条"><a href="#第三十八条" class="headerlink" title="第三十八条"></a>第三十八条</h2><img src="/2021/07/12/EffectiveObjcTips/Untitled38.png" class=""><ul><li><p>以下展示了SDWebImage中Block的写法</p>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^SDWebImageDownloaderProgressBlock)(<span class="built_in">NSUInteger</span> receivedSize, <span class="keyword">long</span> <span class="keyword">long</span> expectedSize);</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^SDWebImageDownloaderCompletedBlock)(<span class="built_in">UIImage</span> *image, <span class="built_in">NSData</span> *data, <span class="built_in">NSError</span> *error, <span class="built_in">BOOL</span> finished);</span><br><span class="line"></span><br><span class="line">****- (<span class="keyword">void</span>)setImageWithURL:(<span class="built_in">NSURL</span> *)url placeholderImage:(<span class="built_in">UIImage</span> *)placeholder options:(SDWebImageOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageCompletedBlock)completedBlock;</span><br><span class="line">- (<span class="keyword">id</span>&lt;SDWebImageOperation&gt;)downloadImageWithURL:(<span class="built_in">NSURL</span> *)url</span><br><span class="line">                                        options:(SDWebImageDownloaderOptions)options</span><br><span class="line">                                       progress:(SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class="line">                                      completed:(SDWebImageDownloaderCompletedBlock)completedBlock;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>&lt;SDWebImageOperation&gt;)downloadImageWithURL:(<span class="built_in">NSURL</span> *)url</span><br><span class="line">                                timeOutInterval:(<span class="built_in">NSTimeInterval</span>)timeOutInterval</span><br><span class="line">                                        options:(SDWebImageDownloaderOptions)options</span><br><span class="line">                                       progress:(SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class="line">                                      completed:(SDWebImageDownloaderCompletedBlock)completedBlock;</span><br></pre></td></tr></table></figure></li></ul><h2 id="第三十九条"><a href="#第三十九条" class="headerlink" title="第三十九条"></a>第三十九条</h2><ul><li><p>简洁程度上Delegate与Block的对比</p> <img src="/2021/07/12/EffectiveObjcTips/Untitled39.png" class=""> <img src="/2021/07/12/EffectiveObjcTips/Untitled40.png" class=""></li><li><p>处理多个请求时Delegate与Block的对比</p> <img src="/2021/07/12/EffectiveObjcTips/Untitled41.png" class=""> <img src="/2021/07/12/EffectiveObjcTips/Untitled42.png" class=""> <img src="/2021/07/12/EffectiveObjcTips/Untitled43.png" class=""> <img src="/2021/07/12/EffectiveObjcTips/Untitled44.png" class=""></li><li><p>在处理请求时采用两个独立的处理Block（1/2）</p> <img src="/2021/07/12/EffectiveObjcTips/Untitled45.png" class=""> <img src="/2021/07/12/EffectiveObjcTips/Untitled46.png" class=""> <img src="/2021/07/12/EffectiveObjcTips/Untitled47.png" class=""></li><li><p>在处理请求时采用同一个处理Block，令Block更为灵活但更为冗长</p> <img src="/2021/07/12/EffectiveObjcTips/Untitled48.png" class=""> <img src="/2021/07/12/EffectiveObjcTips/Untitled49.png" class=""></li></ul><h2 id="第四十条"><a href="#第四十条" class="headerlink" title="第四十条"></a>第四十条</h2><p>大部分网络通信库写法</p>   <img src="/2021/07/12/EffectiveObjcTips/Untitled50.png" class=""><p>为了使得在下载完成后通过以下方法执行调用者指定的Block，需要将completion handler保存至实例变量，一旦运行完completion handler之后没有必要对其进行保留，从而避免出现retain cycle</p>   <img src="/2021/07/12/EffectiveObjcTips/Untitled51.png" class="">   <img src="/2021/07/12/EffectiveObjcTips/Untitled52.png" class=""><h2 id="第四十一条"><a href="#第四十一条" class="headerlink" title="第四十一条"></a>第四十一条</h2><ul><li><p>串行队列，将读取操作与写入操作安排到同个队列中保证数据同步，可以将设置方法由同步派发改为异步执派发</p> <img src="/2021/07/12/EffectiveObjcTips/Untitled53.png" class=""> <img src="/2021/07/12/EffectiveObjcTips/Untitled54.png" class=""><ul><li><p>并发队列，读取与写入操作可以随时执行</p><img src="/2021/07/12/EffectiveObjcTips/Untitled55.png" class=""><p>创建栅栏使得barrier块单独执行不与其他Block并行，对并发队列有意义，因为串行Block按顺序逐个执行</p><img src="/2021/07/12/EffectiveObjcTips/Untitled56.png" class=""><img src="/2021/07/12/EffectiveObjcTips/Untitled57.png" class=""><img src="/2021/07/12/EffectiveObjcTips/Untitled58.png" class=""></li></ul></li></ul><h2 id="第四十二条"><a href="#第四十二条" class="headerlink" title="第四十二条"></a>第四十二条</h2><ul><li><p>performSelector接受的参数类型为id，限定了传入参数必须是对象，不能是整数或者浮点数，并且最多只能接受两个参数</p> <img src="/2021/07/12/EffectiveObjcTips/Untitled59.png" class=""></li><li><p>延后执行某项任务，优先使用GCD的方式</p> <img src="/2021/07/12/EffectiveObjcTips/Untitled60.png" class=""></li><li><p>把任务放到主线程上执行，把任务封装至Block中用GCD相关方法更为合适</p> <img src="/2021/07/12/EffectiveObjcTips/Untitled61.png" class=""></li><li><p>performSelector在内存管理方面存在缺失，无法确定将执行的Selector具体是什么</p></li></ul><h2 id="第四十三条"><a href="#第四十三条" class="headerlink" title="第四十三条"></a>第四十三条</h2><ul><li><p>GCD是纯C的API，操作队列是Objective-C的对象</p></li><li><p>Block是轻量级的书籍结构而Operation是重量级的Objective-C对象</p></li><li><p>在执行后台任务时GCD并不一定是最佳方式</p></li><li><p>使用NSOperation与NSOperationQueue有以下好处，能够实现纯GCD具备的绝大部分功能</p> <img src="/2021/07/12/EffectiveObjcTips/Untitled62.png" class=""> <img src="/2021/07/12/EffectiveObjcTips/Untitled63.png" class=""> <img src="/2021/07/12/EffectiveObjcTips/Untitled64.png" class=""></li><li><p>NSNotificationCenter 的 addObserverForName: 方法接受的参数是块而不是Selector</p> <img src="/2021/07/12/EffectiveObjcTips/Untitled65.png" class=""></li><li><p>确定哪一种方法的最好方式是测试性能</p><h2 id="第四十四条"><a href="#第四十四条" class="headerlink" title="第四十四条"></a>第四十四条</h2></li><li><p>dispatch group 能够将任务分组，调用者可以等待这组任务执行完毕同时也可以在提供回调函数之后继续执行</p></li><li><p>如下函数是dispatch_async的变体</p></li></ul><img src="/2021/07/12/EffectiveObjcTips/Untitled66.png" class=""><ul><li>如下函数用于等待 dispatch group 执行完毕，timeout 参数表示阻塞时间，若执行时间短于timeout返回0</li></ul><img src="/2021/07/12/EffectiveObjcTips/Untitled67.png" class=""><ul><li>如下函数中可以传入在特定线程上执行的Block</li></ul><img src="/2021/07/12/EffectiveObjcTips/Untitled68.png" class=""><ul><li>令数组每个对象都执行某个任务，并且等待每个任务都执行完毕可以使用如下GCD特性</li></ul><img src="/2021/07/12/EffectiveObjcTips/Untitled69.png" class=""><ul><li>若当前线程不阻塞可以使用notify函数取代wait</li></ul><img src="/2021/07/12/EffectiveObjcTips/Untitled70.png" class=""><ul><li>区分任务的优先级放置于不同的线程执行，同时将所有任务归于一个dispatch group，并且在执行完毕后获得通知（并发队列）</li></ul><img src="/2021/07/12/EffectiveObjcTips/Untitled71.png" class=""><ul><li>将任务提交到串行队列中并用dispatch group 跟踪执行情况</li></ul><img src="/2021/07/12/EffectiveObjcTips/Untitled72.png" class=""><img src="/2021/07/12/EffectiveObjcTips/Untitled73.png" class=""><h2 id="第四十五条"><a href="#第四十五条" class="headerlink" title="第四十五条"></a>第四十五条</h2><ul><li><p>常用的一种共享单例的方法</p> <img src="/2021/07/12/EffectiveObjcTips/Untitled74.png" class=""></li><li><p>使用GCD实现共享单例的方法</p> <img src="/2021/07/12/EffectiveObjcTips/Untitled75.png" class=""></li><li><p>使用 dispatch_once 能够简化代码并且彻底保证线程安全开发者无需关心加锁或同步，所有问题都由GCD在底层进行处理，static 作用域能够保证编译器在每次执行该方法时复用该变量而不是重复创建</p></li></ul><h2 id="第四十六条"><a href="#第四十六条" class="headerlink" title="第四十六条"></a>第四十六条</h2><ul><li>dispatch_get_current_queue 函数尽量不要使用</li></ul><h2 id="第四十七条"><a href="#第四十七条" class="headerlink" title="第四十七条"></a>第四十七条</h2><ul><li><p>框架指一系列代码被封装为动态库，并且在其中放入描述接口的头文件，iOS平台的系统框架仍然采用了动态库</p></li><li><p>iOS应用程序不允许在其中包含动态库于是就出现了静态库</p></li><li><p>关于静态库与动态库的了解可以参考 <a href="https://juejin.cn/post/6844904031937101838" target="_blank" rel="noopener">细说iOS静态库和动态库</a></p></li><li><p>Cocoa 本身并不是框架而是集成了一批创建应用程序时需要用到的框架</p></li><li><p>Objective-C编程的一个重要特点是经常需要用到底层的C语言级API</p></li><li><p>CoreAnimation 使用Objective-C进行编写，而 CoreGraphics 框架采用C语言进行编写，两者均为 UI 框架之下的一等框架</p></li></ul><h2 id="第四十八条"><a href="#第四十八条" class="headerlink" title="第四十八条"></a>第四十八条</h2><ul><li><p>遍历方式</p><ul><li><p>for循环</p><img src="/2021/07/12/EffectiveObjcTips/Untitled76.png" class=""><p>字典与 set 均无顺序，无法根据下标访问数值。于是需要获取字典内所有键或 set 内所有对象，从而产生空间上的额外开销。然而执行反向遍历时 for 循环会更为方便。</p></li><li><p>NSEnumerator</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dictionary</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *dict = <span class="comment">/* ... */</span>;</span><br><span class="line"><span class="built_in">NSEnumerator</span> *enumerator = [dict keyEnumerator];</span><br><span class="line"><span class="keyword">id</span> key;</span><br><span class="line"><span class="keyword">while</span> ((key = [enumerator nextObject]) != <span class="literal">nil</span>) &#123;</span><br><span class="line"><span class="keyword">id</span> value = dict[key];</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set</span></span><br><span class="line"><span class="built_in">NSSet</span> *set = <span class="comment">/* ... */</span>;</span><br><span class="line"><span class="built_in">NSEnumerator</span> *enumerator = [set objectEnumerator];</span><br><span class="line"><span class="keyword">id</span> object;</span><br><span class="line"><span class="keyword">while</span> ((object = [enumerator nextObject]) != <span class="literal">nil</span>) &#123;</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array</span></span><br><span class="line"><span class="built_in">NSArray</span> *array = <span class="comment">/* ... */</span>;</span><br><span class="line"><span class="built_in">NSEnumerator</span> *enumerator = [array reverseObjectEnumerator];</span><br><span class="line"><span class="keyword">id</span> object;</span><br><span class="line"><span class="keyword">while</span> ((object = [enumerator nextObject]) != <span class="literal">nil</span>) &#123;</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于所有的collection都可以采用这套语法，在读法上更容易被理解</p></li><li><p>for in 快速遍历</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dictionary</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *dict = <span class="comment">/* ... */</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">id</span> key <span class="keyword">in</span> dict) &#123;</span><br><span class="line"><span class="keyword">id</span> value = dict[key];</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set</span></span><br><span class="line"><span class="built_in">NSSet</span> *set = <span class="comment">/* ... */</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">id</span> object <span class="keyword">in</span> set) &#123;</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array</span></span><br><span class="line"><span class="built_in">NSArray</span> *array = <span class="comment">/* ... */</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">id</span> object <span class="keyword">in</span> array) &#123;</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">id</span> object <span class="keyword">in</span> [array reverseObjectEnumerator]) &#123;</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>某个支持快速遍历的类的对象遵从 NSFastEnumeration 协议可以实现对象的迭代，而NSEnumerator 也实现了该协议，该遍历方法无法获取遍历操作针对的下标。</p></li><li><p>基于Block的遍历</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dictionary</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *dict = <span class="comment">/* ... */</span>;</span><br><span class="line">[array enumerateKeysAndObjectsUsingBlock:</span><br><span class="line">^(<span class="keyword">id</span> key, <span class="keyword">id</span> object, <span class="built_in">BOOL</span> *stop) &#123;</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line"><span class="keyword">if</span> (shouldStopHere) &#123;</span><br><span class="line">*stop = <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set</span></span><br><span class="line"><span class="built_in">NSSet</span> *set = <span class="comment">/* ... */</span>;</span><br><span class="line">[array enumerateObjectsUsingBlock:</span><br><span class="line">^(<span class="keyword">id</span> object, <span class="built_in">BOOL</span> *stop) &#123;</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line"><span class="keyword">if</span> (shouldStopHere) &#123;</span><br><span class="line">*stop = <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array</span></span><br><span class="line"><span class="built_in">NSArray</span> *array = <span class="comment">/* ... */</span>;</span><br><span class="line">[array enumerateObjectsUsingBlock:</span><br><span class="line">^(<span class="keyword">id</span> object, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> *stop) &#123;</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line"><span class="keyword">if</span> (shouldStopHere) &#123;</span><br><span class="line">*stop = <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>使得遍历能够从Block中获取信息，并且可以在遍历数组获取数组的下标。</p><p>NSEnumerationOptions 类型为enum，如果开启了NSEnumerationConcurrent 底层会使用GCD处理出发执行事宜，采用其他方法很难实现。</p></li></ul></li></ul><h2 id="第四十九条"><a href="#第四十九条" class="headerlink" title="第四十九条"></a>第四十九条</h2><ul><li><p>使用桥接技术可以实现定义在Foundation框架内的Objective-C类与CoreFoundation 框架中的 C 数据结构的相互转换</p>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *anNSArray = @[@<span class="number">1</span>, @<span class="number">2</span>, @<span class="number">3</span>, @<span class="number">4</span>, @<span class="number">5</span>];</span><br><span class="line"><span class="built_in">CFArrayRef</span> *aCGArray = (__bridge <span class="built_in">CFArrayRef</span>)anNSArray;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"size of array = %li"</span>, <span class="built_in">CFArrayGetCount</span>(aCFArray)); </span><br><span class="line"></span><br><span class="line">gradientLayer.colors = @[(__bridge <span class="keyword">id</span>)[<span class="built_in">UIColor</span> ne_colorWithHexString:<span class="string">@"000000"</span> alpha:<span class="number">0.95</span>].CGColor,</span><br><span class="line">                                            (__bridge <span class="keyword">id</span>)[<span class="built_in">UIColor</span> ne_colorWithHexString:<span class="string">@"000000"</span> alpha:<span class="number">0.95</span>].CGColor,</span><br><span class="line">                                            (__bridge <span class="keyword">id</span>)[<span class="built_in">UIColor</span> ne_colorWithHexString:<span class="string">@"000000"</span> alpha:<span class="number">0.72</span>].CGColor,</span><br><span class="line">                                            (__bridge <span class="keyword">id</span>)[<span class="built_in">UIColor</span> ne_colorWithHexString:<span class="string">@"000000"</span> alpha:<span class="number">0.45</span>].CGColor,</span><br><span class="line">                                            (__bridge <span class="keyword">id</span>)[<span class="built_in">UIColor</span> ne_colorWithHexString:<span class="string">@"000000"</span> alpha:<span class="number">0.28</span>].CGColor,</span><br><span class="line">                                            ];</span><br></pre></td></tr></table></figure></li><li><p><strong>bridge 含义为ARC具备该对象的所有权，</strong>bridge_retained表示ARC交出该对象的所有权， 通过__bridge告诉ARC如何处理转换涉及的Objective-C对象</p></li><li><p>Foundation 框架中的 Objective-C 类具备的某些功能是 CoreFoundation 框架中的 C语言数据结构不具备的</p></li></ul><h2 id="第五十条"><a href="#第五十条" class="headerlink" title="第五十条"></a>第五十条</h2><ul><li>NSCache 在系统资源耗尽时能够自动删减缓存，采用LRU策略</li><li>NSCache并不会直接拷贝键，而是保留键</li><li>NSCache是线程安全的，多个线程可以同时访问NSCache</li><li>NSCache可以设置针对对象个数以及总成本的上限</li></ul><p>缓存的一般用法</p>   <img src="/2021/07/12/EffectiveObjcTips/Untitled77.png" class="">   <img src="/2021/07/12/EffectiveObjcTips/Untitled78.png" class=""><p>加入 NSPurgeable 的缓存用法</p>   <img src="/2021/07/12/EffectiveObjcTips/Untitled79.png" class="">   <img src="/2021/07/12/EffectiveObjcTips/Untitled80.png" class=""><ul><li>重复计算会带来性能开销的数据值得被放入缓存，从而提高应用程序的响应速度</li><li>NSPurgeableData 与 NSCache 一起使用能够实现自动清除数据的功能</li></ul><h2 id="第五十一条"><a href="#第五十一条" class="headerlink" title="第五十一条"></a>第五十一条</h2><ul><li>load 方法并不像普通的方法那样，她不遵从继承规则，如果某个类本身不实现load方法那么无论其各级超类是否实现此方法系统都不会调用</li><li>load 与 initialize 方法务必精简实现，因为会产生阻塞从而使得应用程序无响应</li><li>initialize 方法在程序首次用该类前调用一次，并且使用runtime进行调用，只应该用来设置内部数据而不应该调用其他方法</li><li>如果某个类本身不实现 initialize 方法然而超类完成了就会调用超类的实现方法，如下图中初始化子类后由于该类未覆写该方法于是需要执行父类的实现代码，于是得到了通常的子类实现方法</li></ul><img src="/2021/07/12/EffectiveObjcTips/Untitled81.png" class=""><img src="/2021/07/12/EffectiveObjcTips/Untitled82.png" class=""><img src="/2021/07/12/EffectiveObjcTips/Untitled83.png" class=""><h2 id="第五十二条"><a href="#第五十二条" class="headerlink" title="第五十二条"></a>第五十二条</h2><ul><li><p>NSTimer 对象会保留目标直到计时器失效，需要调用invalidate方法令其失效</p> <img src="/2021/07/12/EffectiveObjcTips/Untitled84.png" class=""> <img src="/2021/07/12/EffectiveObjcTips/Untitled85.png" class=""></li><li><p>反复执行的计时器容易引入retain cycle，可以使用 Block 的方式打破，需要注意的是必须创建分类来加入相关实现代码</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;准备开始写 Objective-C 之前花了一些时间重新阅读这本经典的《Effective Objective-C》，在阅读的过程中对重点内容进行了一些摘录，在方便自己复习的同时将相关内容在博客分享出来供参考。&lt;/p&gt;</summary>
    
    
    
    <category term="tech" scheme="https://stephefang.me/categories/tech/"/>
    
    
    <category term="Xcode" scheme="https://stephefang.me/tags/Xcode/"/>
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://stephefang.me/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Muzik开发总结 — 设计与实现</title>
    <link href="https://stephefang.me/2020/07/15/Muzik_Progress/"/>
    <id>https://stephefang.me/2020/07/15/Muzik_Progress/</id>
    <published>2020-07-15T11:15:20.000Z</published>
    <updated>2020-07-27T16:14:18.559Z</updated>
    
    <content type="html"><![CDATA[<p>我希望有一款 Tab Based 的 iOS App 带来简约轻量的音乐播放体验，作为一个有一些 iOS 基础的人，我决定自己开发一个简单的本地音乐播放器，正好实践一些 UIKit 控件的使用。</p><a id="more"></a><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>本系列文章是开发一个简易的音乐播放器（暂时命名为“Muzik”）的博客记录，本篇目的在于展示设计与实现方面的进度。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>iOS 13.6</li><li>Xcode 11.6</li></ul><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p><img src="http://images.stephenfang.xyz/sketch.png" alt="截图2020-07-27 at 22.58.20"><br>在项目开始编写代码前，我使用 Sketch 对整个App 进行设计，确定了字体与元素的使用规范，方便之后针对我想要实现的设计进行微调。其实这一步也可以直接在 StoryBoard 中完成，然而添加阴影等操作在 Sketch 等原型创作工具中更为直观。<br>在完成设计后我尝试使用 Sketch Mirror、MockUp工具对 App 上手的感受进行评估，并发送原型给朋友了解他们提出的一些建议。<br><img src="http://images.stephenfang.xyz/mweb/15958622925026.png" alt=""><br>至少在 MockUp 效果下 App的整体观感还让我比较满意。我希望这种简单的风格贯穿整个 App，使得我能够用 UIKit 较为轻松地实现 App 的功能。<br> <img src="http://images.stephenfang.xyz/mweb/15958623328077.png" alt=""></p><p>支持 Dark Mode 也是大势所趋，针对 iOS 13 之后的 App 都应该加入支持。为了给 iPhone X设备带来更好的视觉观感，我选择了纯黑作为 App 的底色。<br><img src="http://images.stephenfang.xyz/mweb/15958624669288.jpg" alt=""></p><h2 id="组织"><a href="#组织" class="headerlink" title="组织"></a>组织</h2><p>按照 Sketch 中的页面设计，我将整体 App 分为精选、专辑、歌曲、音乐人、播放列表、正在播放这几个部分，其中我希望有一个小组件能像原生音乐App一样能够看到当前播放进度以及进行快捷操作，于是我将包含显示当前播放内容的 UIView 置于App的顶层位置，其中UIView中包含 UIProgressView 等控件。这是我目前能够想到且实现的理想方法，缺点即需要为下层的所有视图添加 Offset。<br>Tab + Navigation 是 iOS 开发中一种非常常见的模式，每一个页面依次对应了精选、专辑、歌曲、音乐人、播放列表的功能。<br><img src="http://images.stephenfang.xyz/strc.png" alt=""></p><h2 id="页面实现"><a href="#页面实现" class="headerlink" title="页面实现"></a>页面实现</h2><h3 id="精选页面"><a href="#精选页面" class="headerlink" title="精选页面"></a>精选页面</h3><p>页面包含最近添加的专辑、收听最多的歌曲、常听的播放列表等栏目组成，点击不同栏目的项目可以触发不同的二级功能。从此页面可以简述我的设计理念，即专辑使用卡片式的设计语言，更契合 iOS 13 的设计风格。<br><img src="http://images.stephenfang.xyz/mweb/15958633632257.jpg" alt="-w301"></p><h3 id="专辑页面"><a href="#专辑页面" class="headerlink" title="专辑页面"></a>专辑页面</h3><p>卡片式的专辑页面，点击不同的专辑进入详情页面。需要注意的是我为该页面添加了可隐藏的索引栏，避免索引栏与专辑页面重合，显得过于拥挤，这一点在歌曲页面可以看到。<br><img src="http://images.stephenfang.xyz/mweb/15958635741661.jpg" alt="-w301"></p><p>点击专辑卡片进入相应的详情页面，简单的 TableView 实现。<br><img src="http://images.stephenfang.xyz/mweb/15958637814033.jpg" alt="-w301"></p><h2 id="歌曲页面"><a href="#歌曲页面" class="headerlink" title="歌曲页面"></a>歌曲页面</h2><p>从歌曲页面可以看到右侧的可隐藏的索引栏，这里学习了 Ecoute 的设计。App 整体的设计风格十分统一，无论是字体还是网格。<br><img src="http://images.stephenfang.xyz/mweb/15958640618143.jpg" alt="-w301"></p><h2 id="音乐人页面"><a href="#音乐人页面" class="headerlink" title="音乐人页面"></a>音乐人页面</h2><p>这个页面是我目前不满意的一个页面，因为 iOS 的MediaLibrary 框架中并没有提供获取 <code>albumArtist</code>的 <code>artwork</code> 的方法。目前有改进的方案，即通过请求 iTunes Store 数据库返回 JSON，获取其中的艺人封面 url 并缓存其中的艺人封面。思路有一些类似于 <a href="https://github.com/SDWebImage/SDWebImage" target="_blank" rel="noopener">SDWebImage</a>，然而希望以自己的方式进行简单实现。<br><img src="http://images.stephenfang.xyz/mweb/15958641787194.jpg" alt="-w301"></p><p>同样，点击不同的 row 进入相应的音乐人详情页面，区别是这个采用 CollectionView 实现。<br><img src="http://images.stephenfang.xyz/mweb/15958647723869.jpg" alt="-w301"></p><h2 id="播放列表页面"><a href="#播放列表页面" class="headerlink" title="播放列表页面"></a>播放列表页面</h2><p>根据播放列表的实际需求实现了显示页面，由于时间过于仓促没有认真适配播放列表的缩略图。<br>正打算自己花时间写一个类似于原声音乐播放器的播放列表的缩略图效果，我在 GitHub 上找到了一个类似的开源项目: <a href="https://github.com/zhengjinghua/StitchingImage" target="_blank" rel="noopener"><br>StitchingImage</a><br><img src="http://images.stephenfang.xyz/mweb/15958648056682.jpg" alt="-w301"></p><p>然而实现语言为 Objective-C，我正在尝试用 Swift 将其进行重写，之后会开源到 GitHub 上。</p><p>详情页还是同样的味道，目前做的仍然十分粗糙，我会尝试对 UI 进行持续改进。<br><img src="http://images.stephenfang.xyz/mweb/15958650862897.jpg" alt="-w301"></p><h2 id="搜索页面"><a href="#搜索页面" class="headerlink" title="搜索页面"></a>搜索页面</h2><p>点击任意一级页面导航栏的搜索按钮会激活搜索页面，使用框架的方法调用实现了简单的检索。<br><img src="http://images.stephenfang.xyz/mweb/15958640040336.jpg" alt="-w301"></p><h2 id="正在播放页面"><a href="#正在播放页面" class="headerlink" title="正在播放页面"></a>正在播放页面</h2><p>类似于原生的播放页面，目前正在对整个页面进行重构，包括 UI 部分与代码部分。<br>目前主要通过 Timer 与 Observer 实现了简单的功能实现，但是为了达到优雅听歌的目标功能远不于此，我正在尝试接入<a href="https://github.com/ddddxxx/LyricsKit" target="_blank" rel="noopener">LyricsKit</a> 使得页面具有显示歌词的功能，这里需要用到 ScrollView 与 PageControl的加持。<br><img src="http://images.stephenfang.xyz/mweb/15958655245499.jpg" alt="-w301"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上为目前的进度总结，我会持续更新 App 的开发过程，包括代码总结与功能实现。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我希望有一款 Tab Based 的 iOS App 带来简约轻量的音乐播放体验，作为一个有一些 iOS 基础的人，我决定自己开发一个简单的本地音乐播放器，正好实践一些 UIKit 控件的使用。&lt;/p&gt;</summary>
    
    
    
    <category term="tech" scheme="https://stephefang.me/categories/tech/"/>
    
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Swift" scheme="https://stephefang.me/tags/Swift/"/>
    
    <category term="Music" scheme="https://stephefang.me/tags/Music/"/>
    
  </entry>
  
  <entry>
    <title>Muzik开发总结 — AVAudioPlayer 实践</title>
    <link href="https://stephefang.me/2020/07/08/Muzik_GettingStarted/"/>
    <id>https://stephefang.me/2020/07/08/Muzik_GettingStarted/</id>
    <published>2020-07-08T11:20:20.000Z</published>
    <updated>2020-07-12T09:30:00.212Z</updated>
    
    <content type="html"><![CDATA[<p>最近又放弃了使用 Apple Music，作为一个从音乐下载时代过来的人，我仍然保持着将歌曲同步至 iPhone 再聆听的习惯，即使我仍然无法摆脱流媒体的束缚。话说回来，Apple 原生的 Music.app 的体验除了交互，于我而言是糟糕的，我更希望有一款 Tab Based 的 iOS App 支撑这种体验，作为一个有一些 iOS 基础的人，我决定自己开发一个简单的本地音乐播放器，正好学习一些 UIKit 控件。</p><a id="more"></a><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>本系列文章是开发一个简易的音乐播放器（暂时命名为“Muzik”）的博客记录，本篇目的在于实践一个简单的 AVAudioPlayer Demo 模拟 Music.app 的播放功能，内容十分基础。<br>需要注意的是，此 Demo 并没有采用读取系统音乐资料库需要的 MPMediaPlayer。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>Swift 5</li><li>iOS 13.5</li><li>Xcode 11.5</li></ul><p>在 Xcode 项目属性的 General 选项卡中点击底部的 Frameworks and Libraries，搜索AVFoundation Framework 将其添加至项目中。</p><h2 id="歌曲列表界面"><a href="#歌曲列表界面" class="headerlink" title="歌曲列表界面"></a>歌曲列表界面</h2><p>为了进行简单的 Demo，我将两首下载好歌曲添加到 Xcode 项目文件夹下，分别为<code>Song1.mp3</code>与<code>Song2.mp3</code>，并创建简单的结构体命名为 Song：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Song</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> songName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> albumName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> artistName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> imageName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> trackName: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了在播放时展示专辑封面，我将两首 .mp3 文件的专辑封面添加至 Assets，参照 Song 命名为 Cover1 与 Cover 2。我比较习惯于 AutoLayout 与代码布局共同使用，使用 StoryBoard 进行小项目的简单布局十分方便。<br>首先，创建一个<code>ViewController</code>展示歌曲页面，添加<code>UITableView</code>并调整约束，需要将 TableView 对象的 <code>Content</code> 属性改为 <code>Dynamic Prototypes</code>，将 对象的Cell的 <code>Style</code>属性更改为<code>Subtitle</code>，至此 StoryBoard 部分已经完成。<br>来到与该<code>ViewController</code>相对应的<code>ViewController.swift</code>文件，由于是在Storyboard中创建<code>UITableView</code>，所以需要通过<code>@IBOutlet</code>连接之前创建的<code>UITableView</code>，方法如Ctrl+拖拽，同时需要在<code>viewDidLoad()</code>中设置<code>UITableView</code>对象的<code>delegate</code>与<code>dataSource</code>。需要注意的是使用<code>UITableView</code>的方法需要 conforms to 相关的 protocols, 以上均为基本操作。<br>我需要在<code>viewDidLoad()</code>阶段加载歌曲的相关信息，于是创建<code>configureSongs()</code>方法为<code>songs</code>数组添加相关数据（需要在之前创建）。<br>尝试完成页面功能布局，作为Demo该 TableView 对象只包含一个 Section 的内容，如果需要调用系统音乐资料库的 <code>MPMediaItem</code>，需要使用 NSRange 对不同 Section 的内容进行排序（A-Z）。为了避免列表中图片大小显示不一致问题，我将 Row 的高度更改为60。在<code>cellForRowAt</code>方法中定制 cell，在<code>didSelectRowAt</code>方法中令其 present 播放器页面，相关内容在后文中讨论，目前这个页面看起来是这样的(先忽略 Tab 的效果)。<br><img src="http://images.stephenfang.xyz/screen1.png" alt=""><br>懒人代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UITableViewDelegate</span>, <span class="title">UITableViewDataSource</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">var</span> songTable: <span class="type">UITableView!</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> songs = [<span class="type">Song</span>]()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        configureSongs()</span><br><span class="line">        songTable.delegate = <span class="keyword">self</span></span><br><span class="line">        songTable.dataSource = <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">configureSongs</span><span class="params">()</span></span> &#123;</span><br><span class="line">        songs.append(<span class="type">Song</span>(songName: <span class="string">"Pretender"</span>, albumName: <span class="string">"Pretender"</span>, artistName: <span class="string">"Official鬍子男dism"</span>, imageName: <span class="string">"Cover1"</span>, trackName: <span class="string">"Song1"</span>))</span><br><span class="line">        songs.append(<span class="type">Song</span>(songName: <span class="string">"Imagine"</span>, albumName: <span class="string">"The Mango Tree"</span>, artistName: <span class="string">"Jack Johnson"</span>, imageName: <span class="string">"Cover2"</span>, trackName: <span class="string">"Song2"</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> songs.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, heightForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">60</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> songCell = tableView.dequeueReusableCell(withIdentifier: <span class="string">"songCell"</span>, <span class="keyword">for</span>: indexPath)</span><br><span class="line">        <span class="keyword">let</span> song = songs[indexPath.row]</span><br><span class="line">        </span><br><span class="line">        songCell.textLabel?.text = song.songName</span><br><span class="line">        songCell.detailTextLabel?.text = song.albumName + <span class="string">"  "</span> + song.artistName</span><br><span class="line">        songCell.imageView?.image = <span class="type">UIImage</span>(named: song.imageName)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> songCell</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</span><br><span class="line">        tableView.deselectRow(at: indexPath, animated: <span class="literal">true</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> position = indexPath.row</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> songView = storyboard?.instantiateViewController(identifier: <span class="string">"player"</span>) <span class="keyword">as</span>? <span class="type">PlayerViewController</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        songView.position = position</span><br><span class="line">        songView.songs = songs</span><br><span class="line">        </span><br><span class="line">        present(songView,animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="正在播放界面"><a href="#正在播放界面" class="headerlink" title="正在播放界面"></a>正在播放界面</h2><p>创建<code>PlayerViewController</code>展示正在播放的页面，不需要与任何View进行连接，之后创建一个 UIView 令其紧贴 Safe Area 将其命名为 holder。这次我采用代码进行布局，最终看起来应该是这样的，虽然很不美观但是 it just works。<br><img src="http://images.stephenfang.xyz/screen2.png" alt="">。<br>在开始代码注解前了解一下我的思路。其中<code>viewDidLayoutSubviews</code>方法在controller 的子视图的 position 和 size 被改变的时候被调用。在 view 已经被设计 subviews 并且还没有被展示在屏幕上时候，可以调用此方法改变这个view。任何依赖于 bounds 并且需要完成的操作都应该放在<code>viewDidLayoutSubviews</code>中而不是<code>viewDidLoad</code>或<code>viewWillAppear</code>中，因为 view 的 frame 和 bounds 直到 AutoLayout 完成工作的时候才会被确定，所以在执行完Auto Layout之后会调用此方法。<br>当用户点击上一首歌曲或下一首歌曲按钮后，需要改变控件内容的显示，我的想法是通过调用<code>removeFromSuperview()</code>方法，该方法即进行视图节点删除的操作，执行这个方法等于在 View 的树形结构中找到该节点并删除该节点及其子节点，而并非只是删除该节点自己，同时把该对象从响应者链中移除。在ARC的情况下执行<code>removeFromSuperview</code>方法多次也没有问题因为由系统自动管理。<br>那么在调用<code>removeFromSuperview</code>后势必需要重新载入页面元素，并且控制播放的过程，这个时候可以采用一个统一的方法在页面载入、切换的时候进行操作。对于 <code>AVAudioPlayer</code>的调用方面，需要导入<code>AVFoundation</code>框架并初始化<code>AVAudioPlayer</code>对象。由于之前导入了 .mp3 文件，需要做的是让<code>AVAudioPlayer</code>获取待播放的歌曲 url，之前的 ViewController 对 Song 的具体内容有定义，而<code>Bundle.main.path</code>代表获取工程目录下的文件。系统启动时会激活 <code>AVAudioSession</code>，通过设置<code>active</code>为”true”激活 Session，设置为“false”解除 Session 的激活状态，<code>options</code>使用 “.notifyOthersOnDeactivation” 使音频会话停用时其它音频会话可以返回到其它活动状态。对于<code>sharedInstance</code>包含五种设置方法，希望深入了解的参见这篇文章 <a href="https://www.jianshu.com/p/ae843162ace1" target="_blank" rel="noopener">AVAudioSession - Category、Model、Options、Error参数详解</a><br>Int 类型的变量<code>position</code>代表当前用户点按的歌曲在 songs 中所处下标，相关的 UIElement 配置都很容易理解不在此赘述，为了模拟 Music.app 的效果，我尝试使用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">0.2</span>, animations: &#123;</span><br><span class="line">               <span class="keyword">self</span>.albumImageView.frame = <span class="type">CGRect</span>(x: <span class="number">30</span>, y: <span class="number">30</span>, width: <span class="keyword">self</span>.holder.frame.size.width - <span class="number">60</span>, height: <span class="keyword">self</span>.holder.frame.size.width - <span class="number">60</span>)</span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></figure><p>实现类似的点击暂停或播放按钮后专辑封面大小变化的的效果，如果页面上已经对元素进行了大小限制使用<code>CGAffineTransform(scaleX: &lt;CGFloat&gt;, y: &lt;CGFloat&gt;)</code>也能够达到类似的效果。最后给出此次 Demo 所有的代码，对于播放器的开发进展我会持续更新，🦔本系列的第一篇文章。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> AVFoundation</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlayerViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> position: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> songs: [<span class="type">Song</span>] = []</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> holder: <span class="type">UIView!</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> player: <span class="type">AVAudioPlayer?</span></span><br><span class="line">    <span class="keyword">let</span> playPauseButton = <span class="type">UIButton</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> albumImageView: <span class="type">UIImageView</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> imageView = <span class="type">UIImageView</span>()</span><br><span class="line">        imageView.contentMode = .scaleAspectFill</span><br><span class="line">        <span class="keyword">return</span> imageView</span><br><span class="line">    &#125; ()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> nameLabel: <span class="type">UILabel</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> label = <span class="type">UILabel</span>()</span><br><span class="line">        label.textAlignment = .center</span><br><span class="line">        label.numberOfLines = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> label</span><br><span class="line">    &#125; ()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> albumLabel: <span class="type">UILabel</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> label = <span class="type">UILabel</span>()</span><br><span class="line">        label.textAlignment = .center</span><br><span class="line">        label.numberOfLines = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> label</span><br><span class="line">    &#125; ()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> artistLabel: <span class="type">UILabel</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> label = <span class="type">UILabel</span>()</span><br><span class="line">        label.textAlignment = .center</span><br><span class="line">        label.numberOfLines = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> label</span><br><span class="line">    &#125; ()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLayoutSubviews</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLayoutSubviews()</span><br><span class="line">        <span class="keyword">if</span> holder.subviews.<span class="built_in">count</span> == <span class="number">0</span> &#123;</span><br><span class="line">            configurePlayer()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewWillDisappear(animated)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> player = player &#123;</span><br><span class="line">            player.stop()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">configurePlayer</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> song = songs[position]</span><br><span class="line">        <span class="keyword">let</span> urlString = <span class="type">Bundle</span>.main.path(forResource: song.trackName, ofType: <span class="string">".mp3"</span>)</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> <span class="type">AVAudioSession</span>.sharedInstance().setMode(.<span class="keyword">default</span>)</span><br><span class="line">            <span class="keyword">try</span> <span class="type">AVAudioSession</span>.sharedInstance().setActive(<span class="literal">true</span>, options: .notifyOthersOnDeactivation)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> urlString = urlString <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            player = <span class="keyword">try</span> <span class="type">AVAudioPlayer</span>(contentsOf: <span class="type">URL</span>(string: urlString)!)</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> player = player <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            player.volume = <span class="number">0.5</span></span><br><span class="line">            </span><br><span class="line">            player.play()</span><br><span class="line">        &#125; <span class="keyword">catch</span>  &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Error occurred"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// UI</span></span><br><span class="line">        <span class="comment">// Album</span></span><br><span class="line">        albumImageView.frame = <span class="type">CGRect</span>(x: <span class="number">10</span>,</span><br><span class="line">                                      y: <span class="number">10</span>,</span><br><span class="line">                                      width: holder.frame.size.width - <span class="number">20</span>,</span><br><span class="line">                                      height: holder.frame.size.width - <span class="number">20</span>)</span><br><span class="line">        albumImageView.image = <span class="type">UIImage</span>(named: song.imageName)</span><br><span class="line">        holder.addSubview(albumImageView)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Label</span></span><br><span class="line">        nameLabel.frame = <span class="type">CGRect</span>(x: <span class="number">10</span>, y: albumImageView.frame.size.height + <span class="number">10</span>, width: holder.frame.size.width - <span class="number">20</span> , height: <span class="number">70</span>)</span><br><span class="line">        albumLabel.frame = <span class="type">CGRect</span>(x: <span class="number">10</span>, y: albumImageView.frame.size.height + <span class="number">80</span>, width: holder.frame.size.width - <span class="number">20</span> , height: <span class="number">70</span>)</span><br><span class="line">        artistLabel.frame = <span class="type">CGRect</span>(x: <span class="number">10</span>, y: albumImageView.frame.size.height + <span class="number">140</span>, width: holder.frame.size.width - <span class="number">20</span> , height: <span class="number">70</span>)</span><br><span class="line">        </span><br><span class="line">        nameLabel.text = song.songName</span><br><span class="line">        albumLabel.text = song.albumName</span><br><span class="line">        artistLabel.text = song.artistName</span><br><span class="line">        </span><br><span class="line">        holder.addSubview(nameLabel)</span><br><span class="line">        holder.addSubview(albumLabel)</span><br><span class="line">        holder.addSubview(artistLabel)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Button</span></span><br><span class="line">        <span class="keyword">let</span> nextButton = <span class="type">UIButton</span>()</span><br><span class="line">        <span class="keyword">let</span> backButton = <span class="type">UIButton</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> buttonSize: <span class="type">CGFloat</span> = <span class="number">50</span></span><br><span class="line">        </span><br><span class="line">        playPauseButton.frame = <span class="type">CGRect</span>(x: (holder.frame.size.width - buttonSize)/<span class="number">2.0</span>, y: artistLabel.frame.origin.y + <span class="number">90</span>, width: buttonSize, height: buttonSize)</span><br><span class="line">        nextButton.frame = <span class="type">CGRect</span>(x: holder.frame.size.width - <span class="number">20</span> - buttonSize, y: artistLabel.frame.origin.y + <span class="number">90</span>, width: buttonSize, height: buttonSize)</span><br><span class="line">        backButton.frame = <span class="type">CGRect</span>(x: <span class="number">20</span>, y: artistLabel.frame.origin.y + <span class="number">90</span>, width: buttonSize, height: buttonSize)</span><br><span class="line">        </span><br><span class="line">        playPauseButton.addTarget(<span class="keyword">self</span>, action: #selector(didTapPauseButton), <span class="keyword">for</span>: .touchUpInside)</span><br><span class="line">        nextButton.addTarget(<span class="keyword">self</span>, action: #selector(didTapNextButton), <span class="keyword">for</span>: .touchUpInside)</span><br><span class="line">        backButton.addTarget(<span class="keyword">self</span>, action: #selector(didTapBackButton), <span class="keyword">for</span>: .touchUpInside)</span><br><span class="line">        </span><br><span class="line">        playPauseButton.setBackgroundImage(<span class="type">UIImage</span>(systemName: <span class="string">"pause.fill"</span>), <span class="keyword">for</span>: .normal)</span><br><span class="line">        nextButton.setBackgroundImage(<span class="type">UIImage</span>(systemName: <span class="string">"forward.fill"</span>), <span class="keyword">for</span>: .normal)</span><br><span class="line">        backButton.setBackgroundImage(<span class="type">UIImage</span>(systemName: <span class="string">"backward.fill"</span>), <span class="keyword">for</span>: .normal)</span><br><span class="line">        </span><br><span class="line">        playPauseButton.tintColor = .black</span><br><span class="line">        nextButton.tintColor = .black</span><br><span class="line">        backButton.tintColor = .black</span><br><span class="line">        </span><br><span class="line">        holder.addSubview(playPauseButton)</span><br><span class="line">        holder.addSubview(nextButton)</span><br><span class="line">        holder.addSubview(backButton)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Element</span></span><br><span class="line">        <span class="keyword">let</span> slider = <span class="type">UISlider</span>(frame: <span class="type">CGRect</span>(x: <span class="number">20</span>, y: holder.frame.size.height - <span class="number">60</span>, width: holder.frame.size.width - <span class="number">40</span>, height: <span class="number">50</span>))</span><br><span class="line">        </span><br><span class="line">        slider.value = <span class="number">50</span></span><br><span class="line">        slider.addTarget(<span class="keyword">self</span>, action: #selector(didSlideSlider(<span class="number">_</span>:)), <span class="keyword">for</span>: .valueChanged)</span><br><span class="line">        holder.addSubview(slider)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">didSlideSlider</span> <span class="params">(<span class="number">_</span> slider: UISlider)</span></span>&#123;</span><br><span class="line">        <span class="keyword">let</span> value = slider.value</span><br><span class="line">        player?.volume = value</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">didTapPauseButton</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> player?.isPlaying == <span class="literal">true</span> &#123;</span><br><span class="line">            player?.pause()</span><br><span class="line">            playPauseButton.setBackgroundImage(<span class="type">UIImage</span>(systemName: <span class="string">"play.fill"</span>), <span class="keyword">for</span>: .normal)</span><br><span class="line">            <span class="type">UIView</span>.animate(withDuration: <span class="number">0.2</span>, animations: &#123;</span><br><span class="line">                <span class="keyword">self</span>.albumImageView.frame = <span class="type">CGRect</span>(x: <span class="number">30</span>, y: <span class="number">30</span>, width: <span class="keyword">self</span>.holder.frame.size.width - <span class="number">60</span>, height: <span class="keyword">self</span>.holder.frame.size.width - <span class="number">60</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            player?.play()</span><br><span class="line">            playPauseButton.setBackgroundImage(<span class="type">UIImage</span>(systemName: <span class="string">"pause.fill"</span>), <span class="keyword">for</span>: .normal)</span><br><span class="line">            <span class="type">UIView</span>.animate(withDuration: <span class="number">0.2</span>, animations: &#123;</span><br><span class="line">                <span class="keyword">self</span>.albumImageView.frame = <span class="type">CGRect</span>(x: <span class="number">10</span>, y: <span class="number">10</span>, width: <span class="keyword">self</span>.holder.frame.size.width - <span class="number">20</span>, height: <span class="keyword">self</span>.holder.frame.size.width - <span class="number">20</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">didTapNextButton</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> position &lt; (songs.<span class="built_in">count</span> - <span class="number">1</span> )&#123;</span><br><span class="line">            position = position + <span class="number">1</span></span><br><span class="line">            player?.stop()</span><br><span class="line">            <span class="keyword">for</span> subview <span class="keyword">in</span> holder.subviews &#123;</span><br><span class="line">                subview.removeFromSuperview()</span><br><span class="line">            &#125;</span><br><span class="line">            configurePlayer()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">didTapBackButton</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> position &gt; <span class="number">0</span> &#123;</span><br><span class="line">            position = position - <span class="number">1</span></span><br><span class="line">            player?.stop()</span><br><span class="line">            <span class="keyword">for</span> subview <span class="keyword">in</span> holder.subviews &#123;</span><br><span class="line">                subview.removeFromSuperview()</span><br><span class="line">            &#125;</span><br><span class="line">            configurePlayer()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近又放弃了使用 Apple Music，作为一个从音乐下载时代过来的人，我仍然保持着将歌曲同步至 iPhone 再聆听的习惯，即使我仍然无法摆脱流媒体的束缚。话说回来，Apple 原生的 Music.app 的体验除了交互，于我而言是糟糕的，我更希望有一款 Tab Based 的 iOS App 支撑这种体验，作为一个有一些 iOS 基础的人，我决定自己开发一个简单的本地音乐播放器，正好学习一些 UIKit 控件。&lt;/p&gt;</summary>
    
    
    
    <category term="tech" scheme="https://stephefang.me/categories/tech/"/>
    
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Swift" scheme="https://stephefang.me/tags/Swift/"/>
    
    <category term="AudioPlayer" scheme="https://stephefang.me/tags/AudioPlayer/"/>
    
  </entry>
  
  <entry>
    <title>设计、摄影与编码的碎碎念</title>
    <link href="https://stephefang.me/2020/07/05/Design_Thoughts/"/>
    <id>https://stephefang.me/2020/07/05/Design_Thoughts/</id>
    <published>2020-07-04T17:20:20.000Z</published>
    <updated>2020-07-12T09:24:13.951Z</updated>
    
    <content type="html"><![CDATA[<p>学习了一部分 Design + Code 课程，在 Dribbble 发布了一部分用 Sketch 设计的东西，加之十分喜欢 Notion 这款笔记应用，使得我产生了对于设计与编码的一些零碎的思考。<br>Notion招聘的标准为“Designer Who Can Code”，我将其视为也是一种社会需求的反馈，相较于强调编码的能力，他们的团队更强调设计师的属性。随着应用程序的同质化越来越明显，优秀的设计、优秀的交互能够给用户带来耳目一新的体验，有时能够获得更好的回报。</p><a id="more"></a><h2 id="最近的定位"><a href="#最近的定位" class="headerlink" title="最近的定位"></a>最近的定位</h2><p>在学习前端课程的时候，我看到身边的同学虽然掌握着编码的技能却把页面写得一团糟。对于设计师而言，从事前端工程师或许是一个不错的选择，事实也确实如此。如果希望成为一名独立开发者，那么设计的技能更是不可或缺。<br>随着 iOS 14 的推出，SwiftUI更是被推到了一个更高优先级的位置上，甚至对于新版本的小部件的适配都需要使用 SwiftUI。上学期自学了 iOS 相关的课程，当时的 SwiftUI 并未完善，在编码的过程中还能遇到 bug，这一点暂且不提，我仍然期待 SwiftUI 的新表现，可以说对于设计师乃至独立开发者而言 SwiftUI 绝对是一个重大利好，开发的门槛进一步降低。<br>我的计算机学习生涯带给我的优势又体现在哪里呢，可能是更好的计算机基础，可能是对于算法优化的了解。如果我将自己定位于独立开发者，我会更倾向于做设计导向的App而不是算法导向的App，虽然其中的技术含量可能看起来捉襟见愁，但我认为优秀的设计（不仅仅是界面设计，也包括组织设计）是驱使用户选择的更大诱因。意思并不是算法不重要，而是要对内容进行良好的包装，这一点将用于指导我未来App的开发。</p><h2 id="最近的设计"><a href="#最近的设计" class="headerlink" title="最近的设计"></a>最近的设计</h2><p>由于并不是设计出身，我自学了 Design + Code 的设计课程，包括Sketch的使用、字体、动画的应用等等，并且学习了少数派的「比身边人多懂一点设计」课程，后者非常推荐没有设计基础的人仔细阅读。目前能做出一些符合我想发的、并不蹩脚的设计，如 App 的 icon 设计、UI设计等等。<br>列举两个我发布在 Dribbble 上的作品，第一个是对 Notion 图标的重新设计。由于 Notion 是一款笔记应用，我能够联想到彩色的便签与装帧精美的册子，那如何体现 Notion 的品牌意义呢？我参考了原版 Notion 的图标，为了使得大写字母显得不那么突兀，我为其加上了阴影。最后参照 Logic Pro X等 App 给予其一个恰到好处的倾角。该图标被 Andreas Storm 等人Rebound，也算是一个不小的成就。<br><img src="http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2001.21.51.png" alt=""><br>另一个设计方案就是我的音乐播放器设计，目前编码已经完成了1/2，是我目前完成的第一个“有设计”的App，至少MockUp看起来还不错。其设计理念十分简洁，一个页面只完成一个类别的功能，充分利用 UIKit，目前仍然有不少功能想做，包括接入 Apple Music、从LyricsKit获取歌词等等，无法确定何时上架。<br><img src="http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2001.33.30.png" alt=""><br>最后放出我在 Dribbble 的地址： <a href="https://dribbble.com/stephenfang" target="_blank" rel="noopener">https://dribbble.com/stephenfang</a></p><h2 id="最近的摄影"><a href="#最近的摄影" class="headerlink" title="最近的摄影"></a>最近的摄影</h2><p>因为疫情缘故今年并没有出门，连寒假旅行也连带取消了，只能通过 Unsplash 发一些先前的照片，我所理解的低阶摄影（也就是我目前实践的）满足于把画面交代清楚，以不一样的构图拍出比游客照更具有感觉的东西。好的照片应该是能够讲述故事的，这也是街头摄影之所以能打动人的原因，显然我并没有做到，但是我仍在不断尝试让平凡的照片看起来具有不平凡的内容。例如对于物体的拍摄，我希望画面能够传递一定的感情信息，例如以下的猫狗照片，你可能会思考它们此刻在想些什么。<br><img src="http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.52.32.png" alt=""><br><img src="http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.54.52.png" alt=""><br>另一个要点就是构图，简单的构图方式可能得到不同的效果。构图方式可以简单复制，而建筑和你的视角则不会。<br><img src="http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.56.52.png" alt=""><br><img src="http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2013.59.12.png" alt=""><br>罗伯特·卡帕说过“如果你拍得不够好，是因为你离得不够近”，不做这句话的过分解读，但我确实能够以此作为我玩摄影的一条箴言。以下为在上海人民英雄纪念碑下拍摄的照片，当时只是感觉自己被震撼到了就按下了快门，没有想到登上了 Unsplash 的信息流推荐，这也促使着我业余时间在该平台下继续深耕。<br><img src="http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2014.00.55.png" alt=""><br>最后放出我在 Unsplash 的地址： <a href="https://unsplash.com/@stephenfang" target="_blank" rel="noopener">https://unsplash.com/@stephenfang</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习了一部分 Design + Code 课程，在 Dribbble 发布了一部分用 Sketch 设计的东西，加之十分喜欢 Notion 这款笔记应用，使得我产生了对于设计与编码的一些零碎的思考。&lt;br&gt;Notion招聘的标准为“Designer Who Can Code”，我将其视为也是一种社会需求的反馈，相较于强调编码的能力，他们的团队更强调设计师的属性。随着应用程序的同质化越来越明显，优秀的设计、优秀的交互能够给用户带来耳目一新的体验，有时能够获得更好的回报。&lt;/p&gt;</summary>
    
    
    
    <category term="design" scheme="https://stephefang.me/categories/design/"/>
    
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="UI" scheme="https://stephefang.me/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>iOS 图像处理 App - OpenCV 与 Swift 开发</title>
    <link href="https://stephefang.me/2020/07/01/Haze-Free/"/>
    <id>https://stephefang.me/2020/07/01/Haze-Free/</id>
    <published>2020-07-01T01:20:20.000Z</published>
    <updated>2020-07-12T09:32:08.120Z</updated>
    
    <content type="html"><![CDATA[<p>本篇内容主要包含在 iOS 项目项目中添加 OpenCV 库、Objective-C++ 与 Swift 的结合使用，及桥接文件的添加等等，为 OpenCV 系列的第四篇文章。</p><a id="more"></a><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>本学期选修了 OpenCV 相关课程，最后课程设计为完成一个图像去雾功能的小程序。作为一个具备 iOS 相关基础的程序员，我没有选用老师推荐的 Qt 平台，而是选择在 iOS 平台上实现算法的应用。最终实现效果还不错，而其中去雾算法参考了何凯明博士的论文<a href="http://kaiminghe.com/publications/cvpr09.pdf" target="_blank" rel="noopener">Kaiming He. Single Image Haze Removal Using Dark Channel Prior</a>，不在本文的讨论范畴，本文主要对Objective-C++ 与 Swift 的结合开发做一个总结。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>Swift 5</li><li>iOS 13.4</li><li>Xcode 11.5</li><li>OpenCV Framework 4.3.0</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>OpenCV Package 可以通过以下两种方式添加到 iOS 项目当中：</p><ol><li>使用 CocoaPods 添加<br>Profile 中添加 OpenCV：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target &#39;Haze-Free&#39; do</span><br><span class="line">  use_frameworks!</span><br><span class="line">  pod &#39;OpenCV&#39;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>2.自行下载并添加<br>在官网下载相应版本的<a href="https://opencv.org/releases/" target="_blank" rel="noopener">iOS Pack</a>，解压后得到一个 opencv2.framework 库，创建项目并右键添加文件到项目。</p><h2 id="桥接"><a href="#桥接" class="headerlink" title="桥接"></a>桥接</h2><p>OpenCV 框架由 C++ 进行编码，通过将 C++ 代码插入 Objective-C 就成为了 Objective-C++ 代码。但是 Swift 本身与 Objective-C / Objective-C++ 并不兼容，所以需要一个Bridging Header 将 OpenCV 的功能接口暴露给 Swift。<br>以下为简单的示意图。<br><img src="http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2015.18.30.png" alt=""></p><p>添加一个 Objective-C 文件到项目中将其命名为“OpenCvWrapper”，包含<code>OpenCvWrapper.h</code>与<code>OpenCvWrapper.m</code>两个文件，需要将文件扩展名“.m”改为“.mm”。如果自动弹出提示是否添加 Bridging-Header 文件选择添加；如果没有提示，则手动添加一个 Bridging-Header 文件，即添加一个头文件（Header file），重命名为“项目名-Bridging-Header.h”（本例中为：Haze-Free-Bridging-Header.h），部分项目结构图如下。<br><img src="http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2015.54.22.png" alt=""></p><h2 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h2><p>如果你对 C++ 和 Objective-C 有一定了解，那完全能够理解以下的步骤。<br>其中 Bridging-Header 对 Objective-C++ 类及方法进行定义，而 OpenCVWrapper 主要面向具体定义的类及方法实现。<br>假设我需要对图片进行灰度化处理，需要调用的 OpenCV 函数为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cvtColor(source, target, COLOR_BGR2GRAY);</span><br></pre></td></tr></table></figure><p>我尝试在<code>OpenCvWrapper.h</code>中声明实现的方法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+(UIImage *) makeGary: (UIImage *) <span class="built_in">image</span>;</span><br></pre></td></tr></table></figure><p>显然 Swift 无法接受 Mat 类型的数据，若需要对图像进行处理并在 View 中显示，需要的是ImageView 获取到 image，换言之，我们需要进行 UIImage 与 Mat 之间的类型转换，而 OpenCV iOS 框架中就做了这样的事情。所以我们的<code>OpenCvWrapper.mm</code>看起来会是这样。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;opencv2/imgcodecs/ios.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"OpenCvWrapper.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line">@implementation OpenCvWrapper</span><br><span class="line"></span><br><span class="line">+(UIImage *) makeGary: (UIImage *) <span class="built_in">image</span></span><br><span class="line">&#123;</span><br><span class="line">    Mat source,target;</span><br><span class="line">    UIImageToMat(<span class="built_in">image</span>,source);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(source.channels() == <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">image</span>;</span><br><span class="line">    cvtColor(source, target, COLOR_BGR2GRAY);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> MatToUIImage(target);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="built_in">end</span></span><br></pre></td></tr></table></figure><p>接下来需要做的事情就轻车熟路了，只需要通过<code>OpenCvWrapper.makeGary(image)</code>方法即可返回一个经过处理的 UIImage 对象。</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>我给予了 Haze-Free 图像处理App三种图像处理功能，分别是去雾、灰度化与中值滤波，考虑到处理图像本身需要一定的等待时间，我添加了 UIActivityIndicatorView 并放置了一个无法交互的 UIView 在需要的时候出现，同时 GCD 也可以加以运用，以下为部分改进后的代码。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">let</span> queue = <span class="type">DispatchQueue</span>(label: <span class="string">"process-queue"</span>, qos: .userInitiated)</span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">ProcessType</span> </span>&#123;</span><br><span class="line">     <span class="keyword">case</span> toGrayScale, toHazeFree, toSoftFilter</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">     <span class="keyword">super</span>.viewWillAppear(<span class="literal">true</span>)</span><br><span class="line">     <span class="keyword">self</span>.loadingOverlayView.isHidden = <span class="literal">true</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">toGrayScale</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">     processImage(withType: .toGrayScale)</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">toHazeFree</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">     processImage(withType: .toHazeFree)</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">toSoftFilter</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">     processImage(withType: .toSoftFilter)</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">processImage</span><span class="params">(withType type: ProcessType)</span></span> &#123;</span><br><span class="line">     <span class="keyword">self</span>.loadingOverlayView.isHidden = <span class="literal">false</span></span><br><span class="line">     <span class="keyword">let</span> image = <span class="keyword">self</span>.demoImageView.image!</span><br><span class="line">     queue.async &#123;</span><br><span class="line">         <span class="keyword">let</span> processed: <span class="type">UIImage</span></span><br><span class="line">         <span class="keyword">switch</span> type &#123;</span><br><span class="line">         <span class="keyword">case</span> .toHazeFree:</span><br><span class="line">             processed = <span class="type">OpenCvWrapper</span>.hazeFree(image)</span><br><span class="line">         <span class="keyword">case</span> .toSoftFilter:</span><br><span class="line">             processed = <span class="type">OpenCvWrapper</span>.softFilter(image)</span><br><span class="line">         <span class="keyword">case</span> .toGrayScale:</span><br><span class="line">             processed = <span class="type">OpenCvWrapper</span>.makeGary(image)</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">self</span>.processed = processed</span><br><span class="line">         <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">             <span class="keyword">self</span>.performSegue(withIdentifier: <span class="string">"SavingPhoto"</span>, sender: <span class="literal">nil</span>)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p>在写 App 的过程中遇到了一个重大问题，去雾算法验证无误后始终无法得到正确的去雾图像，于是开始对去雾步骤中所有的阶段性图像打断点，一一验证得到的图像结果。最后根据StackOverFlow 上的解释以及断点结果查明了原因，原因出在 <code>UIImageToMat</code> 方法返回的Mat 类型上。<br><img src="http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.40.11.png" alt=""><br><code>UIImageToMat</code> 方法返回的Mat类型为 <code>CV_8UC4</code>，而程序中需要的 Mat 格式为 <code>CV_8UC3</code>，需要使用<code>cvtColor()</code> 方法对其进行转换，改正后程序正常运行。<br>在使用 SFSymbols 时遇到了一些bug，UIButton的 image 使用 SFSymbol出现了无法显示Background 的问题，Debug View Hierarchy也看不出来名堂，最后只好换了自定义的icon。<br><img src="http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.51.25.png" alt=""></p><h2 id="App-总结"><a href="#App-总结" class="headerlink" title="App 总结"></a>App 总结</h2><h3 id="UI总结"><a href="#UI总结" class="headerlink" title="UI总结"></a>UI总结</h3><p>研究了iOS的设计原则后，针对该程序设计了以下页面，包含欢迎页面、权限获取页面、图像浏览页面、图像处理页面与图像分享页面，尽最大程度减少不同页面之间的耦合，使整体的页面逻辑更加清晰。<br><img src="http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.56.25.png" alt=""><br>在对iOS开发框架进行实践后，为 App 增加了中值滤波和灰度转换的功能，同时嵌入了Unsplash 获取图像的SDK，使得程序不仅能够从相册、相机获取图像，还能够直接从 Unsplash 无版权图像网站通过关键字检索获取图像。同时新增了图像分享的入口。为了适应新的变化将页面进行了部分重组，使其更加符合开发需求。<br><img src="http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.58.22.png" alt=""><br>未来可能会考虑将该项目进行开源，现阶段仍然希望其具备更多的功能，以下为软件的运行测试。</p><h3 id="页面逻辑"><a href="#页面逻辑" class="headerlink" title="页面逻辑"></a>页面逻辑</h3><p><img src="http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.44.23.png" alt=""></p><ul><li>开启App后进入引导页面，提示用户使用该App需遵守相关用户协议。</li><li>点击开始处理后跳转至第二个页面，页面显示提示需要选择图像</li><li>点击选择图像后，用户需要在三种图像获取图形中做出选择，或选择取消</li></ul><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p><img src="http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.46.41.png" alt=""></p><ul><li>处理相册图片实例，点选最近拍摄的照片，程序在本视图中加载此图像</li><li>点击三个处理按钮中的最右者，即中值滤波效果，视图会进行跳转</li><li>新的视图包含了保存和分享图像的功能，若点击保存，程序会将图像写入相册并告知用户</li></ul><p><img src="http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.51.50.png" alt=""></p><ul><li>尝试从相册加载一张新图像，可以看到图像中的树林被雾霾覆盖</li><li>点击最左侧的去雾操作，由于去雾操作运算量较大，并且为了避免用户在运算过程中点按按钮，整个可操作区域不可点按，同时有活动指示环展示加载进度</li><li>需要注意的是三个图像操作都采用了多线程的方式</li><li>处理完成图像后可以点击分享按钮使用系统内建的分享服务进行图像的分享</li></ul><p><img src="http://images.stephenfang.xyz/%E6%88%AA%E5%9B%BE2020-07-12%20at%2016.54.28.png" alt=""></p><ul><li>尝试从相机拍摄一张图像</li><li>点击拍摄按钮后图像被获取，可以使用该图像进行处理</li><li>在视图中加载图像后尝试点击中间的灰度化图像处理</li><li>图像灰度化操作完成可以预览效果和保存、分享</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] Kaiming He. Single Image Haze Removal Using Dark Channel Prior [D]. 2009,CVPR<br>[2] Alexander Shishkov, Kirill Kornyakov. Instant OpenCV for iOS (English Edition) [M]. Packt Publishing, 2013<br>[3] Matthijs Hollemans. The iOS Apprentice [M]. Razeware LLC, 2014</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇内容主要包含在 iOS 项目项目中添加 OpenCV 库、Objective-C++ 与 Swift 的结合使用，及桥接文件的添加等等，为 OpenCV 系列的第四篇文章。&lt;/p&gt;</summary>
    
    
    
    <category term="tech" scheme="https://stephefang.me/categories/tech/"/>
    
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="OpenCV" scheme="https://stephefang.me/tags/OpenCV/"/>
    
    <category term="Swift" scheme="https://stephefang.me/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>软件设计模式 - 单例模式</title>
    <link href="https://stephefang.me/2020/06/07/Singleton_Pattern/"/>
    <id>https://stephefang.me/2020/06/07/Singleton_Pattern/</id>
    <published>2020-06-07T05:23:20.000Z</published>
    <updated>2020-06-10T01:21:23.158Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式(Singleton Pattern)，也叫单子模式，属于创建型模式的一种。单例模式重点解决几个不同的客户对象需要引用同个对象，且这种类型的对象数目不止一个的问题。通过确保一个类只能有一个实例，提供对该实例的全局访问，使得客户对象无需操心是否存在单例类的实例，实例化由单例类自己控制。</p><a id="more"></a><h2 id="模式简介"><a href="#模式简介" class="headerlink" title="模式简介"></a>模式简介</h2><p>某些时候整个系统只需要拥有一个全局对象，却有利于协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息，这种方式简化了在复杂环境下的配置管理。<br>单例类存在多种实现方式，较为普遍的实现方式为饿汉式单例类与懒汉式单例类。其中饿汉式单例类在被加载时就将自己实例化。单从资源利用效率角度来讲，饿汉式单例类比懒汉式单例类稍差些。从速度和反应时间角度来讲，饿汉式单例类则比懒汉式单例类稍好些。懒汉式单例类在实例化时，必须处理好在多个线程同时首次引用此类时的访问限制问题，特别是当单例类作为资源控制器，在实例化时必然涉及资源初始化，而资源初始化很有可能耗费大量时间，这意味着出现多线程同时首次引用此类的机率变得较大，需要通过同步化机制进行控制。具体的单例模式实现方式会在后文重点讨论。<br>单例模式的优点在于可以严格控制客户怎样以及何时访问它，为设计及开发团队提供了共享的概念。同时由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能。然而，由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。单例类的职责过重，在一定程度上违背了“单一职责原则”。至于单例模式相关的设计原则会在后文中逐一列举。<br>单例模式应用十分广泛，如需创建一个对象需要耗费大量时间与空间资源时，如IO，数据库连接等，再如需要生成唯一id、静态类型的的工具类等情形也需要使用单例模式。</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><p>与单例设计模式相关的有以下OOP设计原则。</p><ul><li>迪米特原则<br>迪米特法则（Law of Demeter），一个类对于其他类知道的越少越好，就是说一个对象应当对其他对象有尽可能少的了解,只和朋友通信，不和陌生人说话。<br>在单例模式中表现为其他类对该单例类了解的尽量少。其他类获取该单例类的对象只需要通过其暴露的方法即可，而不需要了解单例具体是怎么创建的。假如该单例类创建的过程变得更加复杂，其他类的调用还是通过这个简单的方法获得对象，不用关心单例类增加了哪些代码。</li><li>单一职责原则<br>单一职责模式的定义为，就一个类而言，应该仅有一个引起它变化的原因。单例类的职责过重，既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起，在一定程度上违背了单一职责原则。违背单一职责原则带来的弊端不限于复用能力越弱、多个职责，一个职责的变化可能会影响到其他的职责等。<br>在使用具体的设计模式前应该思考与之相关的设计原则，进而确定该设计模式是否符合需要，以单例模式为例，单例类没有接口，不能继承，与单一职责原则冲突，仅适用于只关心内部逻辑而不关心外面如何实例化的情形。</li></ul><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>单例模式的实现需以下三个部分：</p><ul><li>一个引用单例对象的静态私有成员变量</li><li>一个公共静态方法，负责实现一次性的实例化并返回对单例对象的引用</li><li>设置为保护型或私有型的构造方法<br>根据单例模式的成员可以画出相应的类图，其中包含引用单例对象的静态私有成员变量instance；公共静态方法getInstance()负责实现一次性的实例化并返回对单例对象的引用；设置私有型的构造方法Singleton()。</li></ul><p><img src="http://images.stephenfang.xyz/mweb/15917501563785.jpg" alt=""><br>图3.1 单例模式的类图</p><p>在所有常见的设计模式中，singleton模式是唯一一个能够用短短几十行代码完成实现的模式，接下来以不同的例子探讨单例模式的解法。</p><ol><li>只适用于单线程模式的解法（懒汉式）<br>由于单例模式要求只能生成一个实例，因此我们必须把构造函数设为私有函数以禁止他人创建实例。可以通过定义一个静态的实例，在需要的时候创建该实例。下面定义类型Singleton1就是基于这个思路的实现：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton1 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton1();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码3.1 只适用于单线程模式的解法<br>    上述代码只有在instance为null时才创建一个实例从而避免重复创建，同时我们把构造函数定义为私有函数从而确保只创建一个实例。该代码仔单线程的时候工作正常，但是在多线程的情况下就会出现问题。设想如果两个线程同时运行到判断instance是否为null的if语句，并且instance的确没有创建时，那么两个线程都会创建一个实例，此时类型Singleton1就不再满足单例模式的要求，可以通过以下解法改变该局面。</p><ol start="2"><li>适用于多线程的解法（效率欠佳的懒汉式）<br>为了保证在多线程环境下还是只能得到类型的一个实例，需要加上一个同步锁。假设有两个线程同时想创建一个实例。由于在一个时刻只有一个线程能得到同步锁，当第一个线程加上锁时，第二个线程只能等待。当第一个线程发现实例还没有创建时，它创建出一个实例。接着第一个线程释放同步锁，此时第二个线程可以加上同步锁，并运行接下来的代码。这个时候由于实例已经被第一个线程创建出来了，第二个线程就不会重复创建实例了，这样就保证了在多线程环境中也只能得到一个实例。把Singleton1稍做修改得到了如下代码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码3.2 适用于多线程的低效率解法<br>    但是 Singleton2 还不是很完美。我们每次通过 getInstance 方法得到Singleton2的实例，都会试图加上一个同步锁，而加锁是一个非常耗时的操作，在没有必要的时候应该尽量避免。</p><ol start="3"><li>加同步锁前后两次判断实例是否已存在的解法（DCL）<br>在实例还没有创建之前需要加锁操作，以保证只有一个线程创建出实例。然而当实例已经完成创建之后，已经不需要再做加锁操作了。Singleton3中只有当instance为null即没有创建时，需要加锁操作。当instance 已经创建出来之后，则无须加锁。参考以下改进后的Singleton2代码，其时间效率能够比Singleton2提升很多。其中instance被volatile 修饰，增加线程之间的可见性，并且任何线程对它的写操作都会立即刷新到主内存中，并且会强制让缓存了instance变量的线程中的数据清空，必须从主内存重新读取最新数据。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton3 instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton3<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton3();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码3.3 加同步锁前后两次判断实例是否已存在的解法<br>Singleton3用加锁机制来确保在多线程环境下只创建一个实例，并且用两个 if 判断来提高效率。这样的代码实现起来比较复杂，容易出错，然而还有其他解法。</p><ol start="4"><li>利用静态构造函数的解法（饿汉式）<br>静态构造函数的实现代码非常简洁。因为单例对象只创建一次，所以考虑使用 static 修饰，这样在 JVM 加载该类的时候就会自动创建对象，又因为不希望其他类执行该单例类的构造方法再去创建单例对象，所以把构造函数的属性设置为 private。效果为在调用静态构造函数时初始化静态变量，确保只调用一次静态构造函数，从而保证只初始化一次instance。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton4 instance = <span class="keyword">new</span> Singleton4();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码3.4 利用静态构造函数的解法<br>假设我们在Singleton4 中添加一个静态方法，调用该静态函数是不需要创建一个实例的，但如果按照Singleton4的方式实现单例模式，则仍然会过早地创建实例，从而降低内存的使用效率。</p><ol start="5"><li>利用静态内部类的解法<br>静态内部类的优点为，外部类加载时不需要立即加载内部类，内部类不被加载则不去初始化instance，即不会在内存中占据位置。如下巧妙运用了这种方法，即第一次调用getInstance() 方法使得JVM加载SingletonStatic类，从某种程度上而言实现了按需创建实例。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonStatic</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton5 instance = <span class="keyword">new</span> Singleton5();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton5 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonStatic.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码3.5 利用静态内部类的解法<br>当Singleton5类第一次被加载时，并不需要立即加载SingletonStatic内部类，只有当 getInstance() 方法第一次被调用时，才会初始化instance对象。这种方法不仅能确保线程安全，也能保证单例的唯一性，同时也延迟了单例的实例化。</p><ol start="6"><li>利用枚举的解法<br>引用 《Effective Java》书中的一句话，“单元素的枚举类型已经成为实现Singleton的最佳方法。”这种解法利用枚举的特性保证了按需加载、线程同步。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton6 &#123;</span><br><span class="line">    instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码3.6 利用枚举类型的解法<br>目前该实现方式还没有被广泛采用，但它更简洁，自动支持序列化机制，绝对防止多次实例化。它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏。</p><ol start="7"><li>解法总结<br>以简洁明了的表格总结前文中实现的六种单例模式的解法，对于不同解法的参考指标为是否懒加载、是否容易实现、是否线程安全以及是否高效率。</li></ol><table><thead><tr><th>实现方法</th><th>解法一</th><th>解法二</th><th>解法三</th><th>解法四</th><th>解法五</th><th>解法六</th></tr></thead><tbody><tr><td>懒加载</td><td>是</td><td>是</td><td>是</td><td>否</td><td>是</td><td>是</td></tr><tr><td>易实现</td><td>是</td><td>是</td><td>否</td><td>是</td><td>是</td><td>是</td></tr><tr><td>线程安全</td><td>否</td><td>是</td><td>是</td><td>是</td><td>是</td><td>是</td></tr><tr><td>高效率</td><td>否</td><td>否</td><td>是</td><td>是</td><td>是</td><td>是</td></tr></tbody></table><p>表格3.1 解法总结表</p><p>一般情况下不建议使用第一种和第二种懒汉解法，第三种解法补足了前两者的短板然而编写逻辑较为复杂，第四种解法虽然没有实现懒加载的效果但仍为比较通用的解法，静态内部类的解法能够实现按需加载不失为一种优秀的算法，而如果涉及到反序列化创建对象时，可以尝试使用最后一种枚举类型的算法。</p><h2 id="模式简例"><a href="#模式简例" class="headerlink" title="模式简例"></a>模式简例</h2><p>在JDK内部也存在对单例模式的运用。Runtime类就是十分典型的例子。<br><img src="http://images.stephenfang.xyz/mweb/15917515167469.jpg" alt=""></p><p>图4.2  Runtime类图<br>    在每一个Java应用程序中，都有唯一的一个Runtime对象，通过这个对象应用程序可以与其运行环境发生相互作用。Runtime类提供私有的静态的Runtime对象 currentRuntime、私有的空Runtime构造方法以及一个静态工厂方法getRuntime（），通过调用getRuntime（）方法，可以获得Runtime类唯一的一个实例，并且从源代码代码中可以看出，Runtime使用了饿汉式单例模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runtime</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Runtime currentRuntime = <span class="keyword">new</span> Runtime();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title">getRuntime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentRuntime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Runtime</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码4.3  Runtime源代码<br>前文中有提及，单例模式还可以用于生成唯一id 的情形，这里以前文中的Singleton4 实现方式为例。通过创建Main主类，并且在该类的main()方法中，创建2个Singleton4对象，获取对象的hashCode。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建单例对象1："</span>);</span><br><span class="line">        Singleton4 singleton1 = Singleton4.getInstance();</span><br><span class="line">        System.out.println(singleton1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">"创建单例对象2"</span>);</span><br><span class="line">        Singleton4 singleton2 = Singleton4.getInstance();</span><br><span class="line">        System.out.println(singleton2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码4.5  测试类<br>运行结果符合预期，测试类通过getInstance()方法获得的是同一对象，因而哈希值是一致的。此特点适用于生产唯一序列号的场景。<br><img src="http://images.stephenfang.xyz/mweb/15917516893500.jpg" alt=""></p><p>图4.3  测试结果<br>    对于单例模式的应用与验证至此告一段落，显然单例模式的运用远不止于此，相关的还有Web计数器、数据库配置文件等等。</p><h2 id="问题与缺陷"><a href="#问题与缺陷" class="headerlink" title="问题与缺陷"></a>问题与缺陷</h2><p>滥用单例可能带来一些负面问题，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出。在Java语言中，连接池采用持久化服务的方式，滥用单例将导致连接得不到释放，内存不断上升从而溢出。<br>JVM提供了自动垃圾回收的机制，并且采用根搜索算法，其基本思路为：任何“活”的对象一定能最终追溯到其存储在堆栈或静态存储区中的引用。通过一系列根（GC Roots）的引用作为起点开始搜索，经过一系列的路径，如果可以到达java堆中的对象，那么这个对象就是不可回收的。可以作为根的对象有：</p><ul><li>虚拟机栈（栈桢中的本地变量表）中的引用的对象。</li><li>方法区中的类静态属性引用的对象。</li><li>方法区中的常量引用的对象。</li><li>本地方法栈中JNI的引用的对象。</li></ul><p>方法区是JVM的一块内存区域，用来存放类相关的信息。java中单例模式创建的对象被自己类中的静态属性所引用，符合第二条，因此，单例对象不会被JVM垃圾收集。虽然JVM堆中的单例对象不会被垃圾收集，但是单例类本身如果长时间不用会不会被收集呢？因为JVM对方法区也是有垃圾收集机制的。如果单例类被收集，那么堆中的对象就会失去到根的路径，必然会被垃圾收集掉。<br>通过以下代码测试单例对象是否会被回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.singleton;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] test = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">6</span>*<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obj</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] test = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">3</span>*<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Singleton.getInstance();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">new</span> Obj();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码5.1  测试代码<br>运行时JVM 的参数被设定为：<br><code>-verbose:gc -Xms20M -Xmx20M</code><br>即每次JVM进行垃圾回收时显示内存信息，JVM的内存设为固定20M。<br>通过模拟J2EE容器，实例化大小为6M的单例类，然后不断的创建对象，迫使JVM进行垃圾回收，观察垃圾收集信息，如果进行垃圾收集后，内存仍然大于6M，则说明垃圾回收不会回收单例对象。</p><p><img src="http://images.stephenfang.xyz/java.png" alt=""></p><p>图5.1  测试结果<br>从运行结果中可以看到有6M空间没有被收集。达到GC的条件其一为该类所有的实例都已经被回收，即java堆中不存在该类的任何实例。单例的类不满足该条件，因此单例类也不会被回收。也就是说，只要单例类中的静态引用指向JVM堆中的单例对象，那么单例类和单例对象都不会被垃圾收集。所以“如果实例化的对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致对象状态丢失。”这一点目前无法在实验中验证。<br>至于违背了单一职责原则这一点前文已有讨论，不复引述。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>洁城浩，《设计模式-JAVA语言中的应用》，中国铁道出版社2005.1</li><li>（美） GoF, 《设计模式-可复用的面向对象软件的基础》，机械工业出版社，2005 </li><li>何海涛，《剑指Offer》，电子工业出版社2012.1</li><li>（美）Alan Holub，《设计模式初学者指南》，机械工业出版社，2006</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;单例模式(Singleton Pattern)，也叫单子模式，属于创建型模式的一种。单例模式重点解决几个不同的客户对象需要引用同个对象，且这种类型的对象数目不止一个的问题。通过确保一个类只能有一个实例，提供对该实例的全局访问，使得客户对象无需操心是否存在单例类的实例，实例化由单例类自己控制。&lt;/p&gt;</summary>
    
    
    
    <category term="tech" scheme="https://stephefang.me/categories/tech/"/>
    
    
    <category term="设计模式" scheme="https://stephefang.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="Java" scheme="https://stephefang.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>软件设计模式 - 中介者模式</title>
    <link href="https://stephefang.me/2020/06/03/Mediator_Pattern/"/>
    <id>https://stephefang.me/2020/06/03/Mediator_Pattern/</id>
    <published>2020-06-03T09:23:20.000Z</published>
    <updated>2020-06-10T00:44:27.026Z</updated>
    
    <content type="html"><![CDATA[<p>中介者模式(Mediator Pattern)，又称为调停者模式，是一种对象行为型模式。该设计模式使用一个中介对象（中介者）来封装一系列的对象交互，使得各对象不需要显式地相互引用，从而使其耦合松散、独立地改变它们之间的交互。本文以设计模式的四个要素出发系统性地研究中介者模式。</p><a id="more"></a><h2 id="模式目的"><a href="#模式目的" class="headerlink" title="模式目的"></a>模式目的</h2><p>中介的含义不难理解，以具体的生活场景为例，在租房、留学、找工作等时期或多或少都需要中介的帮助。互联网上实时更新的海量信息与错综复杂的关系让你无法分辨真实性与参考性，所以你无法躲避这些中介关系，只能够通过其获取你所需要的信息。<br>在软件世界也同样如此，当有多个对象彼此间相互交互的时候，自然就会想到对象间的耦合度过高，而中介者模式就是用来解决这一问题的，通过封装对象间的交互行为，来降低对象之间的耦合性，防止出现系统或模块内部过度耦合。以下的图片展现了具备复杂关联关系的对象模拟图。<br><img src="http://images.stephenfang.xyz/mweb/15917479538199.jpg" alt=""><br>图2.1 复杂关联关系模拟图<br>根据上图以及以往程序设计中的经验，我们可以推断出程序设计中存在过多复杂关联关系带来的问题：</p><ol><li>系统结构复杂：对象之间存在大量的相互关联和调用，若其中一个对象发生变化，则需要跟踪和该对象关联的其他所有对象并进行相应处理。</li><li>对象可重用性差：由于一个对象和其他对象具有很强的关联，若不存在其他对象的支持，一个对象很难被另一个系统或模块重用，这些对象表现像一个不可分割的整体，职责较为混乱。</li><li>系统扩展性低：增加一个新对象需要在原有相关对象上增加引用，同时调整原有对象，系统耦合度高，对象操作很不灵活，扩展性差。</li></ol><p>在面向对象的软件设计与开发过程中，根据“单一职责原则”，我们应该尽量将对象细化，使其只负责或呈现单一的职责。对于一个可能由很多对象构成的模块，这些对象之间可能存在相互的引用，为了减少对象两两之间复杂的引用关系，使之成为一个松耦合的系统，我们需要使用中介者模式，下图十分生动地展现了中介者模式的意义。</p><p><img src="http://images.stephenfang.xyz/mweb/15917479852765.jpg" alt=""><br>图2.2 中介者模式应用模拟图<br>由上述的描述可知，中介者模式的目的主要是为了降低模块内部之间类的相互引用，防止出现系统或模块内部过度耦合。</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>从问题出发，我们总结出中介者需要承担两方面的职责：</p><ul><li>中转作用（结构性）：<br>通过中介者提供的中转作用，各个同事对象就不再需要显式引用其他同事，当需要和其他同事进行通信时，通过中介者即可。</li><li>协调作用（行为性）：<br>中介者可以更进一步的对同事之间的关系进行封装，同事可以一致地和中介者进行交互，而不需要指明中介者需要具体怎么做，中介者根据封装在自身内部的协调逻辑，对同事的请求进行进一步处理，将同事成员之间的关系行为进行分离和封装。</li></ul><p>从中介者模式的组成而言，其主要包含四个角色：</p><ul><li>Mediator（抽象中介者）：定义一个接口用于与各同事对象之间的通信</li><li>ConcreteMediator（具体中介者）：抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；</li><li>Colleague（抽象同事类）：定义各同事的公有方法；</li><li>ConcreteColleague（具体同事类）：抽象同事类的子类，每一个同事对象都引用一个中介者对象；每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；在具体同事类中实现了在抽象同事类中定义的方法。</li></ul><p>下图展示了中介者模式中的类结构，可以清楚地看到四种角色之间的关系。<br><img src="http://images.stephenfang.xyz/mweb/15917481238616.jpg" alt=""><br>图3.1 中介者模式类图</p><p>中介者模式可以方便地应用于图形界面(GUI)开发中，在比较复杂的界面中可能存在多个界面组件之间的交互关系。对于这些复杂的交互关系，我们可以引入一个中介者类，将这些交互的组件作为具体的同事类，将它们之间的引用和控制关系交由中介者负责，在一定程度上简化系统的交互，<br>MVC架构中控制器（Controller）作为一种中介者，是数据模型对象与视图之间的桥梁，它监听视图上的交互动作并且对视图的状态作出反应，同时在Model通知数据发生改变的时候更新Model的状态。以移动应用开发为例，当用户点击按钮或在View中输入信息后视图会通知控制器，控制器解释用户交互逻辑，然后联系模型获取完成请求所需的信息。模型将信息提供给控制器，控制器将其中继到视图，视图将其显示给用户。</p><p><img src="http://images.stephenfang.xyz/mweb/15917481870001.jpg" alt=""></p><p>图3.2 MVC模式</p><h2 id="模式简例"><a href="#模式简例" class="headerlink" title="模式简例"></a>模式简例</h2><p>科技发达之后家里所有设备都是智能化的，而小明在家洗澡的时候有个习惯就是喜欢听歌，而且洗澡时候还要把窗帘拉上。因此就有这种情形，小明拉上窗帘说明洗浴设备需要工作，并且音乐设备也将唤醒。因此我们希望小明家的洗浴设备、音响设备和窗帘设备能协同合作，不管操作哪种设备，其他两种设备都有响应。<br>现在很明显我们可以看出来，我们有三个对象，也就是三种设备，程序看起来也很简单，只要在启动一个设备时，能同时启动另外两个设备。那么我们只需在一个设备的类里放两个其他设备的引用，很容易就能解决这个问题，这样写出来的程序对象关系如下图。<br><img src="http://images.stephenfang.xyz/mweb/15917485113553.jpg" alt=""><br>图4.1 修改前模式<br>该程序最主要的功能就是在一个类里完成了对另外两个类的方法作用。但是这样设计，由耦合度过高的问题带来两个主要缺陷</p><ul><li>一旦窗帘设备损坏需要更换，那么就要让新的窗帘设备建立所有其他设备的连接</li><li>若产生新的的需求，如洗澡的时候要把门锁住，那门锁的智能设备又要关联所有设备，这样的程序设计使得在扩展程序功能时更加麻烦。</li></ul><p>中介者模式的引入则极大的弥补了上述程序的两个缺陷，对象交互如下图：<br><img src="http://images.stephenfang.xyz/mweb/15917485380247.jpg" alt=""><br>图4.2 修改后模式</p><p>中介者就好比智能家居的管家，所有对象的交互指令都通过它来传达。中介者负责与对象联系，对象与对象之间不再进行直接的交互，也就是对对象关系进行解耦。</p><p> <img src="http://images.stephenfang.xyz/mweb/15917485453277.jpg" alt=""><br>图4.2 程序类图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicDevice</span> <span class="keyword">extends</span> <span class="title">Device</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operateDevice</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str != <span class="string">"MusicDevice"</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"音乐设备已启动"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="string">"true"</span>)&#123;</span><br><span class="line">            Mediator();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mediator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ConcreteMediator mediator = <span class="keyword">new</span> ConcreteMediator();</span><br><span class="line">        mediator.startUp(<span class="string">"MusicDevice"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>音乐设备部分的代码如上，其他设备代码可以参照此例。设备类都继承自Device类，其中主要由两个方法组成，一个是operateDevice函数，用来启动设备，另一个是Mediator函数，用来调用中介者，并以中介者为媒介启动其他设备。Mediator由operateDevice函数进行调用，并设置了判断条件，防止反复调用中介者类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">SmartMediator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startUp</span><span class="params">(String item)</span></span>&#123;</span><br><span class="line">        MusicDevice musicDevice = <span class="keyword">new</span> MusicDevice();</span><br><span class="line">        CurtainDevice curtainDevice = <span class="keyword">new</span> CurtainDevice();</span><br><span class="line">        BathDevice bathDevice = <span class="keyword">new</span> BathDevice();</span><br><span class="line"></span><br><span class="line">        musicDevice.operateDevice(item);</span><br><span class="line">        curtainDevice.operateDevice(item);</span><br><span class="line">        bathDevice.operateDevice(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中介者类如上，即程序最为重要的部分。当它的startUp方法被某一设备调用之后，它会新建所有设备的类，并且调用除了已启动的设备之外，所有其他设备的启动方法。在启动方法中设置了参数，以防止循环调用。当我们想要添加新的设备的时候，只需要编写新设备类，并且在中介者类中添加该类的启动方法，就能完成修改。从而降低代码之间的耦合性，提高了程序的可维护性。</p><p>程序分析：</p><ol><li>该程序解决了上述两个缺陷，现在所有设备都只与中介者相关联，不管是新增设备还是替换设备，只需要改变设备与中介者之间的关系，降低了代码之间的耦合性。</li><li>改变设计之后所有设备的启动项都由中介者管理，用户可以通过中介者方便地启动所有设备，而不需要将所有设备之间连接起来。避免了随着设备的增多，设备之间的联系变得无比复杂的情况。</li></ol><h2 id="模式总结"><a href="#模式总结" class="headerlink" title="模式总结"></a>模式总结</h2><ol><li><p>中介者模式优点：</p><ul><li>简化了对象之间的交互。</li><li>将各同事解耦，减少子类生成，增加对象的复用性。</li><li>简化各同事类的设计和实现，便于系统维护。</li></ul></li><li><p>中介者模式缺点：</p><ul><li>在具体中介者类中包含了同事之间的交互细节，如果中介者类设计的不好，可能会导致具体中介者类非常复杂，使得系统难以维护。</li><li>中介者对象本身需要整理系统内部的对象之间的交互，可能会导致其本身会变得臃肿和复杂，进而变得难以维护</li></ul></li><li><p>中介者模式的适用环境：</p><ul><li>系统中对象之间存在复杂的引用关系，产生的相互依赖关系结构混乱且难以理解。</li><li>一个对象引用了很多对象并且直接和这些对象通信，导致难以复用该对象。</li><li>希望通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。可以通过引入中介者类来实现，在中介者中定义对象。</li><li>交互的公共行为，如果需要改变行为则可以增加新的中介者类。</li></ul></li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">中介者模式-维基百科</a><br><a href="https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/mediator.html" target="_blank" rel="noopener">中介者模式— Graphic Design Patterns - 图说设计模式</a><br><a href="https://juejin.im/post/5bd275dc51882529290fe2c5" target="_blank" rel="noopener">设计模式 | 中介者模式及典型应用</a><br><a href="https://storm.cis.fordham.edu/~gweiss/data-mining/datasets.html" target="_blank" rel="noopener">中介者模式 - jyqdaisy - 博客园</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;中介者模式(Mediator Pattern)，又称为调停者模式，是一种对象行为型模式。该设计模式使用一个中介对象（中介者）来封装一系列的对象交互，使得各对象不需要显式地相互引用，从而使其耦合松散、独立地改变它们之间的交互。本文以设计模式的四个要素出发系统性地研究中介者模式。&lt;/p&gt;</summary>
    
    
    
    <category term="tech" scheme="https://stephefang.me/categories/tech/"/>
    
    
    <category term="设计模式" scheme="https://stephefang.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="Java" scheme="https://stephefang.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 学习笔记(八）</title>
    <link href="https://stephefang.me/2020/04/24/Objc_Learning_8/"/>
    <id>https://stephefang.me/2020/04/24/Objc_Learning_8/</id>
    <published>2020-04-24T14:23:20.000Z</published>
    <updated>2020-04-25T03:36:44.433Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第八篇文章，主要复习了自动引用计数与深浅拷贝。</p><a id="more"></a><h3 id="手动引用计数总结"><a href="#手动引用计数总结" class="headerlink" title="手动引用计数总结"></a>手动引用计数总结</h3><ul><li>若需保持对象不被销毁可以使用 retain，使用完对象后需使用 release 进行释放。</li><li>给对象发送 release 消息不会必然销毁对象，只有当该对象的引用计数减至0时对象才会被销毁，接着系统会发送 dealloc 消息给这个对象用于释放内存。</li><li>对使用了 retain 或者 copy、 mutableCopy、alloc 或 new 方法的任何对象，以及具有 retain 和 copy 特性的属性进行释放，需要覆盖 dealloc 方法，使得在对象被释放的时候能够释放这些实例变量。</li><li>如果在方法中不再需要用到这个对象但需要将其返回，可以给这个对象发送 autorelease 消息以标记这个对象延迟释放。autorelease 消息并不会影响到对象的引用计数。</li><li>当应用终止时内存中的所有对象都会被释放，不论它们是否在自动释放池中。</li></ul><h3 id="自动引用计数总结"><a href="#自动引用计数总结" class="headerlink" title="自动引用计数总结"></a>自动引用计数总结</h3><ul><li>只要某个对象被任一 strong 指针指向，那么它将不会被销毁。如果对象没有被任何 strong 指针指向，那么就将被销毁。</li><li>通常所有对象的指针变量都是强变量，将对象的引用赋给变量使对象自动保持，旧对象的引用会在赋值前被释放。</li><li>当两个对象都持有彼此的强引用时，将会产生循环保持。如果对象仍然有引用，系统将不能销毁这个对象。如果两个对象都强引用彼此就不可以被销毁。</li><li>解决强引用问题可以创建其他类型的对象变量，并允许使用弱引用。通过父视图持有子视图的强引用，子视图持有父视图的弱引用，这样就没有循环保持。弱变量也不能阻止引用的对象被销毁。</li><li>以 <code>Objective-C</code>中的 delegate 设计模式为例，viewController 中有一个 strong 指针指向它所负责管理的 UITableView，而 UITableView 中的 dataSource 和 delegate 指针都指向 viewController 的 weak 指针。</li><li>当声明一个弱变量，系统会追踪赋值给这个变量的引用。当引用的对象释放时，弱变量会被自动设置为nil。变量被设置为nil,给nil对象发送任何消息不会有反应，避免了无意间给这个变量发送消息引起的崩溃。</li><li>如果需要持有一个对象，那么对其发送 retain。如果之后不再使用该对象，那么需要对其发送 release（或者autorelease） 每一次对 retain、alloc 或 new 的调用，需要对应一次 release 或 autorelease 调用。</li></ul><h3 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h3><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><ul><li>将原数据拷贝后存入一块新的内存中，并以新的指针指向新的内存。</li><li>拷贝过程结束后，两个对象存储数据相同，内存地址不同。</li><li>两个对象互不影响，互不干涉。</li><li>源对象和副本的计数器相同。</li><li>非容器类的浅拷贝只拷贝对象的地址，没有新的内存被分配。</li><li>容器类的浅拷贝不拷贝容器的内容，两个容器的地址不同，在一个容器中修改值，另一个浅拷贝的容器中的值也会变化。</li></ul><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><ul><li>拷贝数据所在内存的地址，目标对象指针和源对象指向同一片内存空间。</li><li>新对象计数器为1，源对象计数器不变。</li><li>在<code>Objective-C</code>中使用 retain 关键字进行引用计数，使几个指针共用同一片内存空间，不会轻易的销毁内存。</li><li>非容器类的深拷贝就是重写分配一块内存，然后把另一个对象的内容原封不动搬过来。对容器类的深拷贝是对容器中的每个元素都进行拷贝。</li></ul><h4 id="拷贝方式"><a href="#拷贝方式" class="headerlink" title="拷贝方式"></a>拷贝方式</h4><ol><li><strong>retain</strong>：始终是浅拷贝。引用计数每次加1。返回对象是否可变与被复制的对象保持一致。</li><li><strong>copy</strong>：对于可变对象为深拷贝，引用计数不改变；对于不可变对象是浅拷贝，引用计数每次加1。始终返回一个不可变对象。  </li><li><strong>mutableCopy</strong>：始终是深拷贝，引用计数不改变。始终返回一个可变对象。</li></ol><p>并非所有的类都支持拷贝。只有遵循 NSCopying 协议的类，才支持 copy 拷贝，只有遵循 NSMutableCopying 协议的类，才支持 mutableCopy 拷贝。如果没有遵循拷贝协议拷贝时会出错。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://onevcat.com/2012/06/arc-hand-by-hand/" target="_blank" rel="noopener">手把手教你ARC——iOS/Mac开发ARC入门和使用</a><br><a href="https://www.cnblogs.com/ludashi/p/3894151.html" target="_blank" rel="noopener">Objective-C中的深拷贝和浅拷贝</a><br><a href="">Objective-C 程序设计 (第六版)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近开始学习 &lt;code&gt;Objective-C&lt;/code&gt; 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第八篇文章，主要复习了自动引用计数与深浅拷贝。&lt;/p&gt;</summary>
    
    
    
    <category term="tech" scheme="https://stephefang.me/categories/tech/"/>
    
    
    <category term="Xcode" scheme="https://stephefang.me/tags/Xcode/"/>
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://stephefang.me/tags/Objective-C/"/>
    
    <category term="ARC" scheme="https://stephefang.me/tags/ARC/"/>
    
  </entry>
  
  <entry>
    <title>WEKA数据挖掘 - 关联算法</title>
    <link href="https://stephefang.me/2020/04/22/WEKA_Association/"/>
    <id>https://stephefang.me/2020/04/22/WEKA_Association/</id>
    <published>2020-04-22T04:23:20.000Z</published>
    <updated>2020-04-25T03:49:54.649Z</updated>
    
    <content type="html"><![CDATA[<p>本文总结了 WEKA 中 Apriori关联 与 FPgrowth关联 的操作方法。</p><a id="more"></a><h3 id="实验简介"><a href="#实验简介" class="headerlink" title="实验简介"></a>实验简介</h3><p>关联规则表示不同数据项目在同一事件中出现的相关性，下图中超市市场分析员分析顾客购买商品的场景可以直观地理解关联规则。 </p><p><img src="http://images.stephenfang.xyz/mweb/15877849125580.jpg" alt=""></p><p>顾客购买面包同时也购买牛奶的购物模式可以用以下关联规则表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">面包 &#x3D;&gt; 牛奶 [ 支持度 &#x3D;2%, 置信度 &#x3D;60%]</span><br></pre></td></tr></table></figure><p>其中面包是规则前项（Antecedent），牛奶是规则后项 (Consequent)。实例数（Instances）表示所有购买记录中包含面包的记录的数量。支持度（Support）表示购买面包的记录数占所有购买记录数的百分比。规则支持度（Rule Support）表示同时购买面包和牛奶的记录数占所有的购买记录数的百分比。置信度（confidence）表示同时购买面包和牛奶的记录数占购买面包记录数的百分比。提升（Lift）表示置信度与已知购买牛奶的百分比的比值，提升大于 1 的规则才是有意义的。<br>如果关联满足最小支持度阈值和最小置信度阈值就可以认为关联规则是有意义的。这些阈值由用户或领域专家设定。就顾客购物而言，根据以往的购买记录，找出满足最小支持度阈值和最小置信度阈值的关联规则，就找到顾客经常同时购买的商品。</p><h4 id="Apriori"><a href="#Apriori" class="headerlink" title="Apriori"></a>Apriori</h4><p>Apriori算法是第一个关联规则挖掘算法，也是最经典的算法。它利用逐层搜索的迭代方法找出数据库中项集的关系，以形成规则，其过程由连接（类矩阵运算）与剪枝（去掉那些没必要的中间结果）组成。<br>本次实验中有如下步骤：</p><ul><li>使用 WEKA 的 Apriori 策略对数据集进行关联操作</li><li>查看并分析关联结果</li><li>分析 Apriori 的算法与特征</li></ul><h4 id="FPgrowth"><a href="#FPgrowth" class="headerlink" title="FPgrowth"></a>FPgrowth</h4><p>Apriori算法在产生频繁模式完全集前需要对数据库进行多次扫描，同时产生大量的候选频繁集，这就使Apriori算法时间和空间复杂度较大。<br>FP-Growth算法针对Apriori算法在挖掘长频繁模式时性能低下的特点提出了改进，它采取如下分治策略：将提供频繁项集的数据库压缩到一棵频繁模式树（FP-tree），但仍保留项集关联信息。FP-Growth算法使用了一种称为频繁模式树（Frequent Pattern Tree）的数据结构，FP-tree是一种特殊的前缀树，由频繁项头表和项前缀树构成。FP-Growth算法基于以上的结构加快整个挖掘过程。<br>实验包含如下步骤：</p><ul><li>使用 WEKA 的FPgrowth 策略对数据集进行关联操作</li><li>查看并分析关联结果</li><li>对比分析 FPgrowth 策略与 Apriori 策略的效果</li></ul><h3 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h3><p>本次实验的数据我参照Waikato大学的数据挖掘教程，选择了vote.arff 数据集，这是一个关于1984年美国国会投票记录数据集，其中包含投票者的身份（民主党人或共和党人）以及多项议题的投票结果，如下图所示：<br><img src="http://images.stephenfang.xyz/mweb/15877850041138.jpg" alt=""><br><img src="http://images.stephenfang.xyz/test-1.png" alt=""><br>这个数据集包含435条实例（投票信息），其中包含 267 位民主党人投票信息, 168 位共和党人投票信息。投票结果中有移民（immigration）、教育开支（education-spending）、、免税出口（duty-free-exports）等共16个议题。议员对于议题的表决不仅仅只用简单的“Y”、“N”标记，需要注意的是，被标记为“？”的数据并不是代表数据的缺失，可能代表议员持保留意见没有表决，部分数据集摘录如下：</p><p><img src="http://images.stephenfang.xyz/mweb/15877851693946.jpg" alt=""></p><p>由于数据集经过实验验证，数据已完成去噪声处理，并且数据中的“？”并非代表数据缺失，前文交代了相关意义，故不复进行数据预处理的步骤。</p><h3 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h3><h4 id="Apriori-1"><a href="#Apriori-1" class="headerlink" title="Apriori"></a>Apriori</h4><p>Apriori算法的主要思想为：首先找出所有频繁性至少和预定义的最小支持度一样的频繁项集，由频繁项集产生满足最小支持度和最小可信度的强关联规则，然后使用频繁项集产生期望的规则，产生只包含集合的项的所有规则，每一条规则的右部只有一项。一旦这些规则生成，那么只有那些大于用户给定的最小可信度的规则才被保留。<br>Apriori算法利用了“任一频繁项集的所有非空子集必须是频繁的”这一个性质。举例说，如果 {0, 1} 是频繁的，那么 {0}, {1} 也是频繁的，将条件倒置，可得“如果一个项集是非频繁项集，那么它的所有超集也是非频繁项集”这一结论。在算法流程中，首先需要找出频繁1-项集，记为L1；然后用L1来产生候选项集C2，对C2中的项进行判定挖掘产生L2，即频繁2-项集；如此循环往复直至无法发现更多的频繁k-项集。<br>由于Apriori算法每挖掘一层Lk就需要扫描整个数据库一遍，会产生大量的候选频繁集，使得Apriori算法时间和空间复杂度较大，以下为简单的算法示意图。</p><p><img src="http://images.stephenfang.xyz/mweb/15877852247683.jpg" alt=""></p><h4 id="FP-Growth"><a href="#FP-Growth" class="headerlink" title="FP-Growth"></a>FP-Growth</h4><p>FP-Growth算法针对Apriori算法在挖掘时可能出现的性能低下问题提出了改进，无论多少数据，只需要扫描两次数据集，提高了算法运行的效率。FP-Growth算法提供频繁项集的数据库压缩到一棵频繁模式树（FP-tree），但仍保留项集关联信息，基于频繁模式树加快整个挖掘过程。<br>FP-Growth算法思路即不断迭代FP-tree的构造和投影过程，其算法过程大致如下：</p><ol><li>扫描数据集一次，找到频繁1-项集(单项模式)</li><li>按频率降序对频繁项排序</li><li>再次扫描数据集，按F-list的逆序构造条件FP树</li><li>按F-list的逆序构造条件FP树，生成频繁项目集</li></ol><h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><h4 id="Apriori-2"><a href="#Apriori-2" class="headerlink" title="Apriori"></a>Apriori</h4><p>使用WEKA进行Apriori相关性分析，其生成结果如下所示，WEKA默认显示十条最佳item sets结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Apriori</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">Minimum support: 0.45 (196 instances)</span><br><span class="line">Minimum metric &lt;confidence&gt;: 0.9</span><br><span class="line">Number of cycles performed: 11</span><br><span class="line"></span><br><span class="line">Generated sets of large itemsets:</span><br><span class="line"></span><br><span class="line">Size of set of large itemsets L(1): 20</span><br><span class="line"></span><br><span class="line">Size of set of large itemsets L(2): 17</span><br><span class="line"></span><br><span class="line">Size of set of large itemsets L(3): 6</span><br><span class="line"></span><br><span class="line">Size of set of large itemsets L(4): 1</span><br><span class="line"></span><br><span class="line">Best rules found:</span><br><span class="line"></span><br><span class="line"> 1. adoption-of-the-budget-resolution&#x3D;y physician-fee-freeze&#x3D;n 219 &#x3D;&#x3D;&gt; Class&#x3D;democrat 219    &lt;conf:(1)&gt; lift:(1.63) lev:(0.19) [84] conv:(84.58)</span><br><span class="line"> 2. adoption-of-the-budget-resolution&#x3D;y physician-fee-freeze&#x3D;n aid-to-nicaraguan-contras&#x3D;y 198 &#x3D;&#x3D;&gt; Class&#x3D;democrat 198    &lt;conf:(1)&gt; lift:(1.63) lev:(0.18) [76] conv:(76.47)</span><br><span class="line"> 3. physician-fee-freeze&#x3D;n aid-to-nicaraguan-contras&#x3D;y 211 &#x3D;&#x3D;&gt; Class&#x3D;democrat 210    &lt;conf:(1)&gt; lift:(1.62) lev:(0.19) [80] conv:(40.74)</span><br><span class="line"> 4. physician-fee-freeze&#x3D;n education-spending&#x3D;n 202 &#x3D;&#x3D;&gt; Class&#x3D;democrat 201    &lt;conf:(1)&gt; lift:(1.62) lev:(0.18) [77] conv:(39.01)</span><br><span class="line"> 5. physician-fee-freeze&#x3D;n 247 &#x3D;&#x3D;&gt; Class&#x3D;democrat 245    &lt;conf:(0.99)&gt; lift:(1.62) lev:(0.21) [93] conv:(31.8)</span><br><span class="line"> 6. el-salvador-aid&#x3D;n Class&#x3D;democrat 200 &#x3D;&#x3D;&gt; aid-to-nicaraguan-contras&#x3D;y 197    &lt;conf:(0.98)&gt; lift:(1.77) lev:(0.2) [85] conv:(22.18)</span><br><span class="line"> 7. el-salvador-aid&#x3D;n 208 &#x3D;&#x3D;&gt; aid-to-nicaraguan-contras&#x3D;y 204    &lt;conf:(0.98)&gt; lift:(1.76) lev:(0.2) [88] conv:(18.46)</span><br><span class="line"> 8. adoption-of-the-budget-resolution&#x3D;y aid-to-nicaraguan-contras&#x3D;y Class&#x3D;democrat 203 &#x3D;&#x3D;&gt; physician-fee-freeze&#x3D;n 198    &lt;conf:(0.98)&gt; lift:(1.72) lev:(0.19) [82] conv:(14.62)</span><br><span class="line"> 9. el-salvador-aid&#x3D;n aid-to-nicaraguan-contras&#x3D;y 204 &#x3D;&#x3D;&gt; Class&#x3D;democrat 197    &lt;conf:(0.97)&gt; lift:(1.57) lev:(0.17) [71] conv:(9.85)</span><br><span class="line">10. aid-to-nicaraguan-contras&#x3D;y Class&#x3D;democrat 218 &#x3D;&#x3D;&gt; physician-fee-freeze&#x3D;n 210    &lt;conf:(0.96)&gt; lift:(1.7) lev:(0.2) [86] conv:(10.47)</span><br></pre></td></tr></table></figure><p>由于对类进行关联分析，故度量类型为置信度，将最小支持度下界（lowerBoundMinSupport）设置为0.1，迭代递减单位（delta）设置为0.05，度量最小值（minMetric）保持默认值0.9，WEKA会重复运行Apriori 算法几次，从最小支持度上界（upperBoundMinSupport）开始，以delta为单位进行迭代运算，当迭代次数达到设定的numRules数值时，或数值达到最小支持度下界（lowerBoundMinSupport）时停止迭代操作。<br>当前获取结果可以看出，最小支持度为0.45，包含196个实例，其中最小置信度为0.9，整个循环操作进行了11次，生成的频繁1-项集包含20个实例，频繁2-项集包含17个实例，频繁3-项集包含6个实例，而频繁4-项集只包含1个实例。<br>关联挖掘结果中最好的Rule得到了219条数据的确认，简要查看一下这条数据代表的意义，若一个议员为收养开支预算投赞成票、为冻结医师的费用投反对票，那么他很可能是民主党人。这是一条很有意思的信息，得到这样的信息也就是关联规则算法的意义所在。<br>评定Ranking Rules的方式不止有Confidence，还有Lift，Leverage和Conviction等，结果中对于每一个Rules也分别给出了各个排序规则的结果，如刚才列举的规则置信度达到了1，Lift值达到了1.63，Leverage值达到了0.19，等等，由于本次关联主要对类进行操作，由置信度的结果我们可以推断出这一规则可信度价值较高。</p><h4 id="FPgrowth-1"><a href="#FPgrowth-1" class="headerlink" title="FPgrowth"></a>FPgrowth</h4><p>使用WEKA进行FPgrowth相关性分析，将参数保持与Apriori相关性分析时不变，可见的效果是生成结果的时间缩短了不少，其生成结果如下图所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D; Associator model (full training set) &#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">FPGrowth found 41 rules (displaying top 10)</span><br><span class="line"></span><br><span class="line"> 1. [el-salvador-aid&#x3D;y, Class&#x3D;republican]: 157 &#x3D;&#x3D;&gt; [physician-fee-freeze&#x3D;y]: 156   &lt;conf:(0.99)&gt; lift:(2.44) lev:(0.21) conv:(46.56) </span><br><span class="line"> 2. [crime&#x3D;y, Class&#x3D;republican]: 158 &#x3D;&#x3D;&gt; [physician-fee-freeze&#x3D;y]: 155   &lt;conf:(0.98)&gt; lift:(2.41) lev:(0.21) conv:(23.43) </span><br><span class="line"> 3. [religious-groups-in-schools&#x3D;y, physician-fee-freeze&#x3D;y]: 160 &#x3D;&#x3D;&gt; [el-salvador-aid&#x3D;y]: 156   &lt;conf:(0.97)&gt; lift:(2) lev:(0.18) conv:(16.4) </span><br><span class="line"> 4. [Class&#x3D;republican]: 168 &#x3D;&#x3D;&gt; [physician-fee-freeze&#x3D;y]: 163   &lt;conf:(0.97)&gt; lift:(2.38) lev:(0.22) conv:(16.61) </span><br><span class="line"> 5. [adoption-of-the-budget-resolution&#x3D;y, anti-satellite-test-ban&#x3D;y, mx-missile&#x3D;y]: 161 &#x3D;&#x3D;&gt; [aid-to-nicaraguan-contras&#x3D;y]: 155   &lt;conf:(0.96)&gt; lift:(1.73) lev:(0.15) conv:(10.2) </span><br><span class="line"> 6. [physician-fee-freeze&#x3D;y, Class&#x3D;republican]: 163 &#x3D;&#x3D;&gt; [el-salvador-aid&#x3D;y]: 156   &lt;conf:(0.96)&gt; lift:(1.96) lev:(0.18) conv:(10.45) </span><br><span class="line"> 7. [religious-groups-in-schools&#x3D;y, el-salvador-aid&#x3D;y, superfund-right-to-sue&#x3D;y]: 160 &#x3D;&#x3D;&gt; [crime&#x3D;y]: 153   &lt;conf:(0.96)&gt; lift:(1.68) lev:(0.14) conv:(8.6) </span><br><span class="line"> 8. [el-salvador-aid&#x3D;y, superfund-right-to-sue&#x3D;y]: 170 &#x3D;&#x3D;&gt; [crime&#x3D;y]: 162   &lt;conf:(0.95)&gt; lift:(1.67) lev:(0.15) conv:(8.12) </span><br><span class="line"> 9. [crime&#x3D;y, physician-fee-freeze&#x3D;y]: 168 &#x3D;&#x3D;&gt; [el-salvador-aid&#x3D;y]: 160   &lt;conf:(0.95)&gt; lift:(1.95) lev:(0.18) conv:(9.57) </span><br><span class="line">10. [el-salvador-aid&#x3D;y, physician-fee-freeze&#x3D;y]: 168 &#x3D;&#x3D;&gt; [crime&#x3D;y]: 160   &lt;conf:(0.95)&gt; lift:(1.67) lev:(0.15) conv:(8.02)</span><br></pre></td></tr></table></figure><p>WEKA中给予FPgrowth的描述是：实现FP-growth算法的类，用于查找大型项集而无需生成候选项。由于WEKA中的FPgrowth机制，无法实现对class进行关联分析（我没有找到相关选项），所以我使用FPgrowth得到的关联结果与之前Apriori关联分析的结果不同。<br>得到的置信度最高的规则代表着如果医院对萨尔瓦多议题投了赞成票并且他的身份是共和党人，那么大概率他会给冻结医师的费用投赞成票，支持该Rule的记录存在156条，置信度达到了0.99，Lift值达到了2.44。<br>至于计算的复杂度问题，运行过程花费的时间也可以预见一些结果，通过查资料得到一般性结论：Apriori算法的效率最低，因为需要很多次的扫描数据库；其次FP—Growth算法在长事物数据上表现很差，因为当事物很长时树的深度也很大，需要求解的子问题就变得特别多，因此效率会迅速下降。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://storm.cis.fordham.edu/~gweiss/data-mining/datasets.html" target="_blank" rel="noopener">Sample Weka Data Sets</a><br><a href="https://www.ibm.com/developerworks/cn/data/library/techarticle/dm-1108zhangzy/index.html" target="_blank" rel="noopener">应用关联规则模型提高超市销量-IBM</a><br><a href="http://athena.ecs.csus.edu/~associationcw/FpGrowth.html" target="_blank" rel="noopener">Association Rule Mining Algorithms </a><br><a href="https://www.cnblogs.com/infaraway/p/6774521.html" target="_blank" rel="noopener">频繁模式挖掘中Apriori、FP-Growth和Eclat算法的实现和对比</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文总结了 WEKA 中 Apriori关联 与 FPgrowth关联 的操作方法。&lt;/p&gt;</summary>
    
    
    
    <category term="tech" scheme="https://stephefang.me/categories/tech/"/>
    
    
    <category term="数据挖掘" scheme="https://stephefang.me/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
    <category term="关联算法" scheme="https://stephefang.me/tags/%E5%85%B3%E8%81%94%E7%AE%97%E6%B3%95/"/>
    
    <category term="WEKA" scheme="https://stephefang.me/tags/WEKA/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 学习笔记(七）</title>
    <link href="https://stephefang.me/2020/04/19/Objc_Learning_7/"/>
    <id>https://stephefang.me/2020/04/19/Objc_Learning_7/</id>
    <published>2020-04-19T15:43:20.000Z</published>
    <updated>2020-04-19T15:51:11.458Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第七篇文章，主要复习了 <code>Objective-C</code> Foundation 框架中文件操作内容。</p><a id="more"></a><h3 id="NSFileManager"><a href="#NSFileManager" class="headerlink" title="NSFileManager"></a>NSFileManager</h3><p>NSFileManager 类能够完成以下对于文件的操作</p><ul><li>创建一个新文件</li><li>从现有文件中读取数据</li><li>将数据写入文件</li><li>重命名文件</li><li>删除文件</li><li>测试文件是否存在</li><li>确定文件的大小和其他属性</li><li>复制文件</li><li>测试两个文件的内容是否相同<br>其中大部分操作对于目录同样适用同样，然而调用的方法不同。</li></ul><p>首先给出常见的 NSFileManager文件方法<br><img src="http://images.stephenfang.xyz/mweb/15872236886233.jpg" alt=""></p><p>attributesOfItemAtPath:path 方法返回一个包含指定文件属性的字典,属性字典包括各种信息，如文件的所有者、文件大小、文件的创建日期等。字典的每个属性可以通过键值提取，而所有的键都定义在头文件&lt;Foundation/NSFileManager.h&gt;中,如表示文件大小的键值为NSFileSize，以下列举了一部分常见属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NSFileAttributeKey const NSFileType; ：</span><br><span class="line">NSFileAttributeType const NSFileTypeDirectory;</span><br><span class="line">NSFileAttributeType const NSFileTypeRegular;</span><br><span class="line">NSFileAttributeKey const NSFileSize;</span><br><span class="line">NSFileAttributeKey const NSFileModificationDate;  &#x2F;&#x2F;修改时间</span><br><span class="line">NSFileAttributeKey const NSFileCreationDate; &#x2F;&#x2F;创建时间</span><br></pre></td></tr></table></figure><p>使用以上方法在示例代码中实现了一些当前目录下的简单文件功能，须确保当前目录下 test.txt 已创建。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *fName = <span class="string">@"test.txt"</span>;</span><br><span class="line">        <span class="built_in">NSString</span> *nName = <span class="string">@"copy.txt"</span>;</span><br><span class="line">        <span class="built_in">NSFileManager</span> *fm;</span><br><span class="line">        <span class="built_in">NSDictionary</span> *attr;</span><br><span class="line">        </span><br><span class="line">        fm = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([fm fileExistsAtPath:fName] == <span class="literal">NO</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"File does not exist!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([fm copyItemAtPath:fName toPath:nName error:<span class="literal">NULL</span>] == <span class="literal">NO</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"File copy failed!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ([fm contentsEqualAtPath:fName andPath:nName] == <span class="literal">NO</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Files are not equal"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>([fm moveItemAtPath:nName toPath:<span class="string">@"new.txt"</span> error:<span class="literal">NULL</span>] == <span class="literal">NO</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"File renamed failed"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>((attr = [fm attributesOfItemAtPath:fName error:<span class="literal">NULL</span>]) == <span class="literal">nil</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Couldn't get file attributes!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"File size is %llu bytes"</span>,[[attr objectForKey:<span class="built_in">NSFileSize</span>] unsignedLongLongValue]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([fm removeItemAtPath:fName error:<span class="literal">NULL</span>] == <span class="literal">NO</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"File removal failed"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"All operations success!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>书中给出了常见的 NSFileManager 目录方法<br><img src="http://images.stephenfang.xyz/mweb/15872698118240.jpg" alt=""></p><p>moveItemAtPath:toPath:方法可以将文件从一个目录移到另一个目录中，如果两个路径引用同一目录中的文件，其结果为重命名这个文件。使用示例代码实现了部分目录操作如下所示：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *dname = <span class="string">@"testdir"</span>;</span><br><span class="line">        <span class="built_in">NSString</span> *path;</span><br><span class="line">        <span class="built_in">NSFileManager</span> *fm;</span><br><span class="line">        </span><br><span class="line">        fm = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line">        </span><br><span class="line">        path = [fm currentDirectoryPath];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Current Directory is: %@"</span>,path);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([fm createDirectoryAtPath:dname withIntermediateDirectories:<span class="literal">YES</span> attributes:<span class="literal">nil</span> error:<span class="literal">NULL</span>] == <span class="literal">NO</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Couldn't create directory!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([fm moveItemAtPath:dname toPath:<span class="string">@"newdir"</span> error:<span class="literal">NULL</span>] == <span class="literal">NO</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Directory rename failed!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([fm changeCurrentDirectoryPath:<span class="string">@"newdir"</span>] == <span class="literal">NO</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Change directory failed!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        path = [fm currentDirectoryPath];;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Current Directory is: %@"</span>,path);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"All operation completed."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NSData"><a href="#NSData" class="headerlink" title="NSData"></a>NSData</h3><p>在Foundation框架的 NSData 中提供了缓冲区的使用方式，包括设置缓冲区、数据读入缓冲区、将缓冲区数据写入文件等。<br>使用 NSFileManager 对象的 contentsAtPath: 方法能够接收一个路径名,并将指定文件内容读入该方法创建的存储区，若读取成功则返回存储区对象，否则返回nil。方法 createFileAtPath: contents: attributes: 创建特定属性的文件并将指定的 NSData 对象内容写入该文件中。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSFileManager</span> *fm;</span><br><span class="line">        <span class="built_in">NSData</span> *data;</span><br><span class="line">        </span><br><span class="line">        data = [fm contentsAtPath:<span class="string">@"new.txt"</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(data == <span class="literal">nil</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"File read failed!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([fm createFileAtPath:<span class="string">@"another.txt"</span> contents:data attributes:<span class="literal">nil</span>] == <span class="literal">NO</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Couldn't create the copy!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"File successfully copied."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用enumeratorAtPath: 方法或者 contentsOfDirectoryAtPath:error: 方法都可以完成枚举过程。如果使用前者，一次可以枚举指定目录中的每个文件，默认情况下，如果其中一个文件为目录，那么也会递归枚举它的内容。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ((path = [dirEnum nextObject]) != <span class="literal">nil</span>) (</span><br><span class="line"><span class="built_in">NSLog</span> (<span class="string">@"%@"</span>，path);</span><br><span class="line">[fm fileExistsAtPath: path isDirectory: &amp;flag];</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="literal">YES</span>)</span><br><span class="line">[dirEnum skipDescendents] ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 isDirectory 方法检验文件是否为目录，通过发送 skipDescendents 消息可以动态组织递归过程，不再枚举目录中的内容。<br>下面的代码使用两种方式枚举指定目录中的内容。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *path;</span><br><span class="line">        <span class="built_in">NSFileManager</span> *fm;</span><br><span class="line">        <span class="built_in">NSDirectoryEnumerator</span> *dm;</span><br><span class="line">        <span class="built_in">NSArray</span> *array;</span><br><span class="line">        </span><br><span class="line">        fm = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line">        </span><br><span class="line">        path = [fm currentDirectoryPath];</span><br><span class="line">        dm = [fm enumeratorAtPath:path];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Contents in current path."</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//method 1</span></span><br><span class="line">        <span class="keyword">while</span> ((path = [dm nextObject]) != <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,path);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//method 2</span></span><br><span class="line">        array = [fm contentsOfDirectoryAtPath:[fm currentDirectoryPath] error:<span class="literal">NULL</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Contents in current path.\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (path <span class="keyword">in</span> array) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###NSPathUtilities<br>书中给出了常见的 NSPathUtilities 路径方法表。其中 components 是一个 NSArray 对象，包含路径每一部分的字符串对象；path是一个字符串对象，指定文件的路径; ext 是路径扩展名的字符串对象。<br><img src="http://images.stephenfang.xyz/mweb/15872706497596.jpg" alt=""><br><img src="http://images.stephenfang.xyz/mweb/15872707108256.jpg" alt=""><br>以下为一段简单的 NSPathUtilities Demo代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *path,*temp,*home;</span><br><span class="line">        <span class="built_in">NSFileManager</span> *fm;</span><br><span class="line">        <span class="built_in">NSArray</span> *components;</span><br><span class="line"> </span><br><span class="line">        fm = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line">        </span><br><span class="line">        path = [fm currentDirectoryPath];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Current directory:%@"</span>,path);</span><br><span class="line">        </span><br><span class="line">        temp = <span class="built_in">NSTemporaryDirectory</span>();</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Temporary directory: %@"</span>,temp);</span><br><span class="line">        </span><br><span class="line">        home = <span class="built_in">NSHomeDirectory</span>();</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Home directory: %@"</span>,home);</span><br><span class="line">        components = [home pathComponents];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (path <span class="keyword">in</span> components) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NSFileHandle"><a href="#NSFileHandle" class="headerlink" title="NSFileHandle"></a>NSFileHandle</h3><p>使用 NSFileHandle 方法可以实现如下操作</p><ul><li>打开一个文件，执行读、写、更新操作</li><li>在文件中查找指定位置</li><li>从文件中读取特定数目的字节</li><li>将指定数目的字节写入文件中</li></ul><p>处理文件的一般步骤为</p><ol><li>打开文件，并获取一个NSFileHandle对象</li><li>对打开的文件执行I/O操作</li><li>关闭文件</li></ol><p>下图中给出了部分常用的NSFileHandle方法<br><img src="http://images.stephenfang.xyz/mweb/15872843161853.jpg" alt=""><br>以下为一段简单的 NSFileHandle Demo代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSFileHandle</span> *inFile,*outFile;</span><br><span class="line">        <span class="built_in">NSData</span> *data;</span><br><span class="line">        </span><br><span class="line">        inFile = [<span class="built_in">NSFileHandle</span> fileHandleForReadingAtPath:<span class="string">@"test.txt"</span>];</span><br><span class="line">        <span class="keyword">if</span>(inFile == <span class="literal">nil</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Open input file failed."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        outFile = [<span class="built_in">NSFileHandle</span> fileHandleForWritingAtPath:<span class="string">@"out.txt"</span>];</span><br><span class="line">        <span class="keyword">if</span>(outFile == <span class="literal">nil</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Open output file failed"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        [outFile seekToEndOfFile];</span><br><span class="line">        </span><br><span class="line">        data = [inFile readDataToEndOfFile];</span><br><span class="line">        [outFile writeData: data];</span><br><span class="line">        </span><br><span class="line">        [inFile closeFile];</span><br><span class="line">        [outFile closeFile];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="built_in">NSString</span> stringWithContentsOfFile:<span class="string">@"out.txt"</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">NULL</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从输出可知，第一个文件的内容成功地附加到第二个文件的末尾。<br>若 seekToEndOfFile 方法到达文件的末尾并且没有读到任何数据，那么将返回一个空的 NSData 对象，通过对该 NSData 对象应用 length 方法，测试其长度是否等于零判断文件是否为空，或者查看该文件中是否还有数据可以读取。<br>打开一个需要更新的文件，文件的偏移量应设为文件的开始。通过在文件中定位(seeking)可以更改偏移量，然后执行该文件的读写操作。因此，要定位到文件的第10字节，可以编写如下消息表达式，此时文件的句柄为 databaseHandle。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[databaseHandle seekToFileOffset: <span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>通过获得当前文件的偏移量，然后加上或者减去这个值，就得到相应文件的位置。<br>跳过文件中当前位置之后的128字节需要使用如下代码:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[databaseHandle seekToFileOffset:[databaseHandle offsetInFile] + <span class="number">128</span>];</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>书本中列出了部分 iOS 常用目录，内容略微过时但仍有参考意义。<br><img src="http://images.stephenfang.xyz/mweb/15872707572198.jpg" alt=""></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/be80c46ab731" target="_blank" rel="noopener">iOS中的文件管理（一）—— NSFileManager基础</a><br><a href="">Objective-C 程序设计 (第六版)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近开始学习 &lt;code&gt;Objective-C&lt;/code&gt; 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第七篇文章，主要复习了 &lt;code&gt;Objective-C&lt;/code&gt; Foundation 框架中文件操作内容。&lt;/p&gt;</summary>
    
    
    
    <category term="tech" scheme="https://stephefang.me/categories/tech/"/>
    
    
    <category term="Xcode" scheme="https://stephefang.me/tags/Xcode/"/>
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://stephefang.me/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 学习笔记(六）</title>
    <link href="https://stephefang.me/2020/04/17/Objc_Learning_6/"/>
    <id>https://stephefang.me/2020/04/17/Objc_Learning_6/</id>
    <published>2020-04-17T09:43:20.000Z</published>
    <updated>2020-04-17T10:10:04.356Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第六篇文章，主要复习了 <code>Objective-C</code> Foundation 框架中关于数组排序、字典对象以及集合对象的内容。</p><a id="more"></a><h3 id="关于数组排序"><a href="#关于数组排序" class="headerlink" title="关于数组排序"></a>关于数组排序</h3><h4 id="简单排序示例"><a href="#简单排序示例" class="headerlink" title="简单排序示例"></a>简单排序示例</h4><p><code>Objective-C</code> 中对于 NSArray 排序方法主要有以下几种。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sortedArrayUsingSelector:</span><br><span class="line">sortedArrayUsingComparator:</span><br><span class="line">sortedArrayUsingDescriptors:</span><br></pre></td></tr></table></figure><p>给出前两者排序的简单示例，如果只是对字符串简单做排序，sortedArrayUsingSelector:方法已足够，sortedArrayUsingComparator: 中用到了block内容。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@"abc"</span>,<span class="string">@"456"</span>,<span class="string">@"123"</span>,<span class="string">@"789"</span>,<span class="string">@"ef"</span>, <span class="literal">nil</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//sortedArrayUsingSelector</span></span><br><span class="line">        <span class="built_in">NSArray</span> *sortedArray1 = [array sortedArrayUsingSelector:<span class="keyword">@selector</span>(compare:)];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"SortedArray1:"</span>);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,sortedArray1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//sortedArrayUsingComparator:</span></span><br><span class="line">        <span class="built_in">NSArray</span> *sortedArray2 = [array sortedArrayUsingComparator:^<span class="built_in">NSComparisonResult</span>(<span class="keyword">id</span> obj1, <span class="keyword">id</span> obj2) &#123;</span><br><span class="line">             <span class="built_in">NSComparisonResult</span> result = [obj1 compare:obj2];</span><br><span class="line">             <span class="keyword">return</span> result;</span><br><span class="line">         &#125;];</span><br><span class="line">         <span class="built_in">NSLog</span>(<span class="string">@"SortedArray2:"</span>);</span><br><span class="line">         <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,sortedArray2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用区块排序"><a href="#使用区块排序" class="headerlink" title="使用区块排序"></a>使用区块排序</h4><p>NSArray和NSMutableArray类中具有使用区块对数组中元素进行排序的方法。<br>NSArray的排序方法一般格式为: </p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSArray</span> *) sortedArrayUsingComparator: (<span class="built_in">NSComparator</span>) block</span><br></pre></td></tr></table></figure><p>NSMutableArray的排序方法格式为: </p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) sortUsingComparator: (<span class="built_in">NSComparator</span>) block</span><br></pre></td></tr></table></figure><p>NSComparator作为typedef定义在系统头文件中:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NSComparisonResult</span> (^<span class="built_in">NSComparator</span>) (<span class="keyword">id</span> obj1, <span class="keyword">id</span> obj2);</span><br></pre></td></tr></table></figure><p>NSComparator是一个区块，使用两个待比较对象作为参数，并返回 NSComparisonResult 类型的值。预期会返回一个标识，说明第一个对象是否小于、等于或者大于第二个对象，这一点与不使用区块的数组排序方法是一致的。区块对于大数组排序能够提升一些速度，可以考虑在程序中使用。</p><h4 id="关于描述器排序"><a href="#关于描述器排序" class="headerlink" title="关于描述器排序"></a>关于描述器排序</h4><p>给出使用描述器排序的一个代码样例。<br>代码中定义了三种车与五个人，并将车与人的信息载入数组，通过构建排序描述器，将排序描述器按照一定顺序放入数组，最后能够按照你所期望的顺序对信息进行输出，因为代码中重写了description，故能够按照格式进行输出。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Car.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Person.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">            Car *car1 = [Car initWithName:<span class="string">@"Audio"</span>];</span><br><span class="line">            Car *car2 = [Car initWithName:<span class="string">@"Rolls-Royce"</span>];</span><br><span class="line">            Car *car3 = [Car initWithName:<span class="string">@"BMW"</span>];</span><br><span class="line">            </span><br><span class="line">            Person *p1 = [Person personWithAge:<span class="number">23</span> withName:<span class="string">@"zhangsan"</span> withCar:car2];</span><br><span class="line">            Person *p2 = [Person personWithAge:<span class="number">21</span> withName:<span class="string">@"zhangsan"</span> withCar:car1];</span><br><span class="line">            Person *p3 = [Person personWithAge:<span class="number">24</span> withName:<span class="string">@"lisi"</span> withCar:car1];</span><br><span class="line">            Person *p4 = [Person personWithAge:<span class="number">23</span> withName:<span class="string">@"wangwu"</span> withCar:car3];</span><br><span class="line">            Person *p5 = [Person personWithAge:<span class="number">23</span> withName:<span class="string">@"wangwu"</span> withCar:car2];</span><br><span class="line"></span><br><span class="line">            <span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> arrayWithObjects:p1,p2,p3,p4,p5, <span class="literal">nil</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">NSSortDescriptor</span> *carNameDesc = [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="string">@"car.name"</span> ascending:<span class="literal">YES</span>];</span><br><span class="line">            <span class="built_in">NSSortDescriptor</span> *personNameDesc = [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="string">@"name"</span> ascending:<span class="literal">YES</span>];</span><br><span class="line">            <span class="built_in">NSSortDescriptor</span> *personAgeDesc = [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="string">@"age"</span> ascending:<span class="literal">YES</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">NSArray</span> *descriptorArray = [<span class="built_in">NSArray</span> arrayWithObjects:personAgeDesc,carNameDesc,personNameDesc, <span class="literal">nil</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">NSArray</span> *sortedArray = [array sortedArrayUsingDescriptors: descriptorArray];</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,sortedArray);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Car.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Car</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line">+(Car *)initWithName:(<span class="built_in">NSString</span> *)name;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Car.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="built_in">NSString</span> *name;</span><br><span class="line">    Car *car;</span><br><span class="line">&#125;</span><br><span class="line">+(Person *)personWithAge:(<span class="keyword">int</span>)age withName:(<span class="built_in">NSString</span> *)name withCar:(Car *)car;</span><br><span class="line">-(<span class="built_in">NSString</span> *)description;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Car.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Car.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Car</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@synthesize</span> name = _name;</span><br><span class="line"></span><br><span class="line">+(Car *)initWithName:(<span class="built_in">NSString</span> *)name&#123;</span><br><span class="line">    Car *car = [[Car alloc] init];</span><br><span class="line">    car.name = name;</span><br><span class="line">    <span class="keyword">return</span> car;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Person.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Car.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></span><br><span class="line"></span><br><span class="line">+(Person *)personWithAge:(<span class="keyword">int</span>)age withName:(<span class="built_in">NSString</span> *)name withCar:(Car *)car&#123;</span><br><span class="line">    Person *person = [[Person alloc] init];</span><br><span class="line">    person-&gt;age = age;</span><br><span class="line">    person-&gt;name = name;</span><br><span class="line">    person-&gt;car = car;</span><br><span class="line">    <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="built_in">NSString</span> *)description&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"age is %i , name is %@, car is %@"</span>,age,name,car.name];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2020-04-17 17:04:05.775056+0800 DemoProgram[55124:1325210] (</span><br><span class="line">    &quot;age is 21 , name is zhangsan, car is Audio&quot;,</span><br><span class="line">    &quot;age is 23 , name is wangwu, car is BMW&quot;,</span><br><span class="line">    &quot;age is 23 , name is wangwu, car is Rolls-Royce&quot;,</span><br><span class="line">    &quot;age is 23 , name is zhangsan, car is Rolls-Royce&quot;,</span><br><span class="line">    &quot;age is 24 , name is lisi, car is Audio&quot;</span><br><span class="line">)</span><br><span class="line">Program ended with exit code: 0</span><br></pre></td></tr></table></figure><h3 id="关于字典对象"><a href="#关于字典对象" class="headerlink" title="关于字典对象"></a>关于字典对象</h3><p>词典 (dictionary) 是由键——对象对组成的数据集合。通过对象的键可以从<code>Objective-C</code>词典中获取需要的对象。词典中的键必须是单值的，通常它们是字符串，但也可以是其他对象类型。和键关联的值可以是任何对象类型，但不能是nil。词典可以是固定的，也可以是可变的。可变词典中的记录可以动态添加和删除。可以使用键检索词典，也可以枚举它们的内容。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSMutableDictionary</span> *dict = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">        dict[<span class="string">@"key1"</span>] = <span class="string">@"This is key 1"</span>;</span><br><span class="line">        dict[<span class="string">@"key2"</span>] = <span class="string">@"This is key 2"</span>;</span><br><span class="line">        dict[<span class="string">@"key3"</span>] = <span class="string">@"This is key 3"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Key note for Key 1: %@"</span>,dict[<span class="string">@"key1"</span>]);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Key note for Key 2: %@"</span>,dict[<span class="string">@"key2"</span>]);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Key note for Key 3: %@"</span>,dict[<span class="string">@"key3"</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSMutableDictionary</span> *dict = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">        [dict setObject:<span class="string">@"This is key 1"</span> forKey:<span class="string">@"key1"</span>];</span><br><span class="line">        [dict setObject:<span class="string">@"This is key 1"</span> forKey:<span class="string">@"key2"</span>];</span><br><span class="line">        [dict setObject:<span class="string">@"This is key 3"</span> forKey:<span class="string">@"key3"</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Key note for Key 1: %@"</span>,[dict objectForKey:<span class="string">@"key1"</span>]);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Key note for Key 2: %@"</span>,[dict objectForKey:<span class="string">@"key2"</span>]);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Key note for Key 3: %@"</span>,[dict objectForKey:<span class="string">@"key3"</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是若Key存在重复则会出现无法显示某一重复Key问题.<br>创建词典后可以利用循环语句枚举词典的内容。<br>键从词典中依次检索,没有特定顺序。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSDictionary</span> *dict = [<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys:</span><br><span class="line">                                     <span class="string">@"This is key 1"</span>,<span class="string">@"key1"</span>,</span><br><span class="line">                                     <span class="string">@"This is key 2"</span>,<span class="string">@"key2"</span>,</span><br><span class="line">                                     <span class="string">@"This is key 3"</span>,<span class="string">@"key3"</span>,</span><br><span class="line">                              <span class="literal">nil</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSDictionary</span> *dictItem <span class="keyword">in</span> dict ) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@:%@"</span>,dictItem,[dict objectForKey:dictItem]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于集合对象"><a href="#关于集合对象" class="headerlink" title="关于集合对象"></a>关于集合对象</h3><p>Set是一组单值对象集合，可以是可变的，也可以是不变的。Set的操作包括搜索、添加、删除集合中的成员(仅用于可变集合)，比较两个集合，计算两个集合的交集和并集等，这些操作在示例程序中得以体现。</p><p>需要注意的是 NSCountedSet，该Set中同一对象可以出现多次，然而在 NSCountedSet 中并非存放了多个对象，而是维护一个次数计数。第一次将对象添加到集合中时，对象的 count 值被置为1,然后每次将该对象添加到集合中 count 值就会增1, 相应地，每次从集合删除对象，count 值就会减1。当对象的 count 值为零时，实际上对象本身就被删除了。</p><p>示例程序对 NSSet、 NSMutableSet、NSCountedSet 和 NSIndexSet进行了演示。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSSet</span> (<span class="title">Printing</span>)</span></span><br><span class="line">-(<span class="keyword">void</span>) print;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSSet</span> (<span class="title">Printing</span>)</span></span><br><span class="line">- (<span class="keyword">void</span>) print &#123;</span><br><span class="line">    printf(<span class="string">"&#123;"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSNumber</span> *element <span class="keyword">in</span> <span class="keyword">self</span>)</span><br><span class="line">        printf(<span class="string">"%li"</span>,(<span class="keyword">long</span>)[element integerValue]);</span><br><span class="line">    printf(<span class="string">"&#125;\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSMutableSet</span> *set1 = [<span class="built_in">NSMutableSet</span> setWithObjects:@<span class="number">1</span>, @<span class="number">3</span>, @<span class="number">5</span>,  @<span class="number">7</span>, <span class="literal">nil</span>];</span><br><span class="line">        <span class="built_in">NSSet</span> *set2 = [<span class="built_in">NSSet</span> setWithObjects:@<span class="number">2</span>, @<span class="number">4</span>, @<span class="number">6</span>, @<span class="number">8</span>, <span class="literal">nil</span>];</span><br><span class="line">        <span class="built_in">NSCountedSet</span> *set3 = [<span class="built_in">NSCountedSet</span> setWithObjects:@<span class="number">1</span>, @<span class="number">1</span>, @<span class="number">3</span>, @<span class="number">5</span>, <span class="literal">nil</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">NSIndexSet</span> * indexSet1 = [[<span class="built_in">NSIndexSet</span> alloc] initWithIndexesInRange:<span class="built_in">NSMakeRange</span>(<span class="number">1</span>,<span class="number">3</span>)];</span><br><span class="line">        <span class="built_in">NSMutableIndexSet</span> *indexSet2 =[[<span class="built_in">NSMutableIndexSet</span> alloc] init];</span><br><span class="line">        [indexSet2 addIndex:<span class="number">0</span>];</span><br><span class="line">        [indexSet2 addIndex:<span class="number">3</span>];</span><br><span class="line">        [indexSet2 addIndex:<span class="number">5</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> index;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"IndexSet1:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (index = [indexSet1 firstIndex];</span><br><span class="line">             index != <span class="built_in">NSNotFound</span>;</span><br><span class="line">             index = [indexSet1 indexGreaterThanIndex: index])  &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%lu"</span>,index);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"IndexSet2:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (index = [indexSet2 firstIndex];</span><br><span class="line">             index != <span class="built_in">NSNotFound</span>;</span><br><span class="line">             index = [indexSet2 indexGreaterThanIndex: index])  &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%lu"</span>,index);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Set1:"</span>);</span><br><span class="line">        [set1 print];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Set2:"</span>);</span><br><span class="line">        [set2 print];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Set3:"</span>);</span><br><span class="line">        [set3 print];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([set1 isEqualToSet: set2] == <span class="literal">YES</span>)</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Set 1 equals set2"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Set 1 is not equal to Set2"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([set1 containsObject: @<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Set1 contains element 1"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Set1 does not contains element 1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"The count of 1 in Set3: %lu"</span>,(<span class="keyword">unsigned</span> <span class="keyword">long</span>)[set3 countForObject:@<span class="number">1</span>]);</span><br><span class="line">        [set1 addObject:@<span class="number">2</span>];</span><br><span class="line">        [set1 removeObject:@<span class="number">1</span>];</span><br><span class="line">        [set1 print];</span><br><span class="line">        [set1 intersectSet:set2];</span><br><span class="line">        [set1 print];</span><br><span class="line">        [set1 unionSet:set2];</span><br><span class="line">        [set1 print];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相应的运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">2020-04-17 11:40:23.646162+0800 DemoProgram[51926:1202542] IndexSet1:</span><br><span class="line">2020-04-17 11:40:23.646584+0800 DemoProgram[51926:1202542] 1</span><br><span class="line">2020-04-17 11:40:23.646627+0800 DemoProgram[51926:1202542] 2</span><br><span class="line">2020-04-17 11:40:23.646679+0800 DemoProgram[51926:1202542] 3</span><br><span class="line">2020-04-17 11:40:23.646733+0800 DemoProgram[51926:1202542] IndexSet2:</span><br><span class="line">2020-04-17 11:40:23.646762+0800 DemoProgram[51926:1202542] 0</span><br><span class="line">2020-04-17 11:40:23.646786+0800 DemoProgram[51926:1202542] 3</span><br><span class="line">2020-04-17 11:40:23.646808+0800 DemoProgram[51926:1202542] 5</span><br><span class="line">2020-04-17 11:40:23.646825+0800 DemoProgram[51926:1202542] Set1:</span><br><span class="line">&#123;7351&#125;</span><br><span class="line">2020-04-17 11:40:23.646871+0800 DemoProgram[51926:1202542] Set2:</span><br><span class="line">&#123;6284&#125;</span><br><span class="line">2020-04-17 11:40:23.646898+0800 DemoProgram[51926:1202542] Set3:</span><br><span class="line">&#123;315&#125;</span><br><span class="line">2020-04-17 11:40:23.646934+0800 DemoProgram[51926:1202542] Set 1 is not equal to Set2</span><br><span class="line">2020-04-17 11:40:23.646957+0800 DemoProgram[51926:1202542] Set1 contains element 1</span><br><span class="line">2020-04-17 11:40:23.646979+0800 DemoProgram[51926:1202542] The count of 1 in Set3: 2</span><br><span class="line">&#123;7325&#125;</span><br><span class="line">&#123;2&#125;</span><br><span class="line">&#123;6284&#125;</span><br><span class="line">Program ended with exit code: 0</span><br></pre></td></tr></table></figure><h3 id="其他总结"><a href="#其他总结" class="headerlink" title="其他总结"></a>其他总结</h3><p>根据写代码过程中遇到的一些问题查找的答案做一些阶段性总结。</p><h4 id="实例变量的范围类型"><a href="#实例变量的范围类型" class="headerlink" title="实例变量的范围类型"></a>实例变量的范围类型</h4><p><strong>@private</strong><br>该类型的实例变量只有声明它的类能够访问它。<br><strong>@protected</strong><br>该类型的实例变量能被声明它的类和子类访问。<br>所有没有显式标识范围的实例变量默认为 @protected。<br><strong>@public</strong><br>该类型实例变量可以在任何地方被访问。<br><strong>@package</strong><br>在modern runtime下，@package 实例变量的范围在实现这个类的可执行文件镜像中是@public，但是在实现这个类的可执行文件镜像外部是 @private。<br>Objective-C 中的 @package 与 C 语言中变量和函数的 private_extern 类似，任何在实现类的镜像外的代码想使用这个实例变量都会引发link error错误。<br>@package 对于框架类的实例变量十分受用，在这种环境下使用 @private 可能太受限制，使用@protected 或者 @public 又过于开放。@package 类型的变量在 Framework 内部相当于 @protected，在 Framework 外部，相当于@private。</p><h4 id="类方法与实例方法"><a href="#类方法与实例方法" class="headerlink" title="类方法与实例方法"></a>类方法与实例方法</h4><ul><li>实例方法在类的具体实例的范围内执行，在调用一个实例方法前必须首先创建类的实例。需要在方法声明前加上“-”，表示实例（对象）方法 (动态方法)。</li><li>类方法不需要创建实例，不依赖于对象，直接用类名调用，执行效率较高；当方法内部不需要使用成员变量时，就可以使用类方法。需要在方法生命前加上“-”，表示类方法 (静态方法)。</li></ul><h4 id="声明方式"><a href="#声明方式" class="headerlink" title="声明方式"></a>声明方式</h4><p>在网上查找资料时发现属性声明存在三种方式，通过查资料对三种方式进行总结</p><ol><li>直接在 @interface 中声明。该方法声明的成员变量只能在类内部使用，即不能通过类名. 点的方式访问变量，需要使用 -&gt; 的方式。</li></ol><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Test</span> : <span class="title">NSObject</span></span>&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *test;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 在<span class="class"><span class="keyword">@interface</span>中声明，然后再在@<span class="title">property</span>中声明。该方法为过时的声明变量方式，<span class="title">Xcode</span> 在早期 @<span class="title">systhesize</span> 没有自动合成属性器之前，需要手写 <span class="title">getter</span> 与 <span class="title">setter</span> 方法。在<span class="title">Xcode</span>有自动合成属性器后，编译器会自动生成一个以下划线开头的的实例变量，所以不必同时声明属性与变量。即可以直接用 @<span class="title">property</span> 声明一个成员属性，在 .<span class="title">m</span> 文件中无需使用 @<span class="title">systhesize</span>，<span class="title">Xcode</span> 会自动生成 <span class="title">getter</span> 与 <span class="title">setter</span>.</span></span><br><span class="line"></span><br><span class="line">```objc </span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Test</span> : <span class="title">NSObject</span></span>&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *_test;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *mystr;</span><br></pre></td></tr></table></figure><p>同时在.m文件中插入</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@synthesize</span> mystr = _myStr;</span><br></pre></td></tr></table></figure><ol start="3"><li>直接用@property声明。该方法声明的成员变量能够在类内部和外部使用，在类的内部可以通过下划线+变量名 或 self.变量名 的方式来访问变量。</li></ol><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Test</span> : <span class="title">NSObject</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *test;</span><br></pre></td></tr></table></figure><p>同时在.m文件中插入</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@synthesize</span> test = _test;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="">Objective-C 程序设计 (第六版)</a><br><a href="https://my.oschina.net/pengloo53/blog/173810">Objective C中数组排序几种情况的总结</a><br><a href="https://liuzhichao.com/p/1256.html" target="_blank" rel="noopener">Objective-C入门教程14：集合对象(NSSet,NSMutableSet,NSIndexSet)</a><br><a href="https://www.cnblogs.com/stevenwuzheng/p/4605232.html" target="_blank" rel="noopener">iOS中四种实例变量的范围类型</a><br><a href="https://blog.csdn.net/shenjie12345678/article/details/39052659" target="_blank" rel="noopener">OC声明变量在@interface括号中与使用@property的区别</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近开始学习 &lt;code&gt;Objective-C&lt;/code&gt; 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第六篇文章，主要复习了 &lt;code&gt;Objective-C&lt;/code&gt; Foundation 框架中关于数组排序、字典对象以及集合对象的内容。&lt;/p&gt;</summary>
    
    
    
    <category term="tech" scheme="https://stephefang.me/categories/tech/"/>
    
    
    <category term="Xcode" scheme="https://stephefang.me/tags/Xcode/"/>
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://stephefang.me/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 学习笔记(五）</title>
    <link href="https://stephefang.me/2020/04/13/Objc_Learning_5/"/>
    <id>https://stephefang.me/2020/04/13/Objc_Learning_5/</id>
    <published>2020-04-13T14:43:20.000Z</published>
    <updated>2020-04-17T10:10:09.102Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第五篇文章，主要复习了 <code>Objective-C</code> Foundation 框架中关于数字对象、字符串对象以及数组对象的内容。</p><a id="more"></a><h3 id="关于数字对象"><a href="#关于数字对象" class="headerlink" title="关于数字对象"></a>关于数字对象</h3><p>无论是int 型、float 型和long型都是<code>Objective-C</code>语言中的基本数据类型,它们都不是对象，不能够向它们发送消息，然而有时需要将这些值作为对象使用。如不能将任何基本数据类型直接存储到数组中，使用Foundation的NSArray对象创建一个数组时，它要求存储的值必须是对象。</p><p><strong>NSInteger</strong><br>NSInteger不是一个对象，是基本数据类型的typedef。</p><p> Apple 官方 Foundation 文档解释的很清楚：</p><blockquote><p>When building 32-bit applications, NSInteger is a 32-bit integer. A 64-bit application treats NSInteger as a 64-bit integer.</p></blockquote><blockquote><p>Apple use NSInteger (or NSUInteger) when passing a value as an argument to a function or returning a value from a function.</p></blockquote><p>鉴于目前 iOS 设备全部迈向64位架构，可以理解成 NSInteger 是64位的 long 类型。而 NSUInteger 也是类似于 NSInteger 的typedef。</p><p><strong>int</strong><br>int 类型的使用主要体现在循环的控制上，控制循环语句无需考虑平台依赖，在大部分情况下16-bit 大小的 int 即可胜任此项工作。 NSInteger 可以作为函数的返回值或者是函数参数，至于使用 NSInteger 还是 int 决定权仍然在你需要解决的问题上。</p><p><strong>NSNumber</strong><br>NSNumber 是<code>Objective-C</code>的类，具体来说是 NSValue 的子类。如果需要存储基本数据类型（包括 signed 或 unsigned char类型和BOOL类型），可以使用 NSNumber 对其进行包装来满足需求，NSNumber 会根据数据的类型创建对象。在集合中也会使用到 NSNumber，如NSSArray、NSSet，因为这些需要对象参与。<br>下图摘录了为 NSNumber 对象设值的类和实例方法以及获取这些数值的实例方法。</p><p><img src="http://images.stephenfang.xyz/mweb/15867486542169.jpg" alt=""></p><h4 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h4><p>给出一个简单的测试示例。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSNumber</span> *intNum, *floatNum, *charNum, *doubleNum;</span><br><span class="line">        <span class="built_in">NSInteger</span> integerNum;</span><br><span class="line">        </span><br><span class="line">        intNum = [<span class="built_in">NSNumber</span> numberWithInteger:<span class="number">20</span>];</span><br><span class="line">        integerNum = [intNum integerValue];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%li"</span>,(<span class="keyword">long</span>)integerNum);</span><br><span class="line">        </span><br><span class="line">        floatNum = [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">20.5</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%f"</span>,[floatNum floatValue]);</span><br><span class="line">        </span><br><span class="line">        charNum = [<span class="built_in">NSNumber</span> numberWithChar:<span class="string">'X'</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%c"</span>,[charNum charValue]);</span><br><span class="line">        </span><br><span class="line">        doubleNum = @<span class="number">20.5</span>;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%lf"</span>,[doubleNum doubleValue]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([doubleNum isEqualToNumber:floatNum] == <span class="literal">YES</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"doubleNum is equal to number floatNum"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="built_in">NSLog</span>(<span class="string">@"doubleNum is not equal to number floatNum"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>([floatNum compare:intNum] == <span class="built_in">NSOrderedDescending</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"intNum is less than floatNum"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例解释"><a href="#示例解释" class="headerlink" title="示例解释"></a>示例解释</h4><p>一般来说，需要确保使用正确的方式获取对象的值，如果在NSNumber对象中存储了一个值，那么也需要用一致的方式去获取。同时，<code>Objective-C</code>语言扩展允许通过@表达式创建数字对象.</p><p>方法 numberWithInt: 和 numberWithInteger: 在使用存在差别</p><ol><li>使用 numberWithInt: 方法创建一个整型数,需要使用intValue获取值，使用%i作为格式化字符串显示它的值。</li><li>使用 numberWithInteger: 方法创建一个整型数,需要使用integerValue获取值，也可以转换成 long 显示或者使用 stringWithFormat: 将其格式化成字符串。使用%li作为格式化字符串。</li></ol><h4 id="关于NSLog"><a href="#关于NSLog" class="headerlink" title="关于NSLog"></a>关于NSLog</h4><p>在NSLog中，格式字符<code>%@</code>不仅可以显示 NSString 对象，而且可以显示数组、字典和集合的全部内容。对于数组中的每一个元素,NSLog 将使用属于每个元素类的 description 方法。如果使用的是从 NSObject 对象继承的默认方法,获取到的是对象的类和地址。然而,通过覆盖继承的 description 方法可使用这些格式字符显示自定义类对象。</p><h3 id="关于字符串对象"><a href="#关于字符串对象" class="headerlink" title="关于字符串对象"></a>关于字符串对象</h3><p>Foundation 框架支持 NSString类用于处理字符串对象。C 样式的字符串 char 字符组成，NSString 对象由 unichar 字符组成。unichar 字符是符合 Unicode 标准的多字节字符。NSString 类能够自动处理字符串的内部表示。使用 NSString 类的方法更容易开发出具有本地化的应用程序，并且能够在不同的语言环境下使用。</p><p>NSMutableString 类是 NSString 类的子类，可以用来创建可以更改字符的字符串对象，它可以使用 NSString 类所有方法。摘录常见 NSMutableString 方法<br><img src="http://images.stephenfang.xyz/mweb/15867813113647.jpg" alt=""></p><h4 id="简单示例-1"><a href="#简单示例-1" class="headerlink" title="简单示例"></a>简单示例</h4><p>给出一个简单的测试示例。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *str1 = <span class="string">@"This is str1"</span>;</span><br><span class="line">        <span class="built_in">NSString</span> *str2 = <span class="string">@"This is str2"</span>;</span><br><span class="line">        <span class="built_in">NSString</span> *subStr;</span><br><span class="line">        <span class="built_in">NSMutableString</span> *mutStr;</span><br><span class="line">        <span class="built_in">NSRange</span> subRange;</span><br><span class="line">        </span><br><span class="line">        subStr = [str1 substringToIndex:<span class="number">3</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,subStr);</span><br><span class="line">        </span><br><span class="line">        subStr = [str1 substringFromIndex:<span class="number">3</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,subStr);</span><br><span class="line">        </span><br><span class="line">        subStr = [[str1 substringFromIndex:<span class="number">3</span>]substringToIndex:<span class="number">5</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,subStr);</span><br><span class="line">        </span><br><span class="line">        subStr = [str1 substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">3</span>, <span class="number">5</span>)];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,subStr);</span><br><span class="line">        </span><br><span class="line">        subRange = [str2 rangeOfString:<span class="string">@"str2"</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"index: %lu length: %lu"</span>,(<span class="keyword">unsigned</span> <span class="keyword">long</span>)subRange.location,(<span class="keyword">unsigned</span> <span class="keyword">long</span>)subRange.length);</span><br><span class="line">        </span><br><span class="line">        subRange = [str1 rangeOfString:<span class="string">@"str2"</span>];</span><br><span class="line">        <span class="keyword">if</span> (subRange.location == <span class="built_in">NSNotFound</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"String not found"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"index: %lu length: %lu"</span>,(<span class="keyword">unsigned</span> <span class="keyword">long</span>)subRange.location,(<span class="keyword">unsigned</span> <span class="keyword">long</span>)subRange.length);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        mutStr = [<span class="built_in">NSMutableString</span> stringWithString:str1];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,mutStr);</span><br><span class="line">        </span><br><span class="line">        [mutStr insertString:mutStr atIndex:[mutStr length]];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,mutStr);</span><br><span class="line">        </span><br><span class="line">        [mutStr deleteCharactersInRange:<span class="built_in">NSMakeRange</span>([mutStr length]/<span class="number">2</span>, [mutStr length]/<span class="number">2</span>)];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,mutStr);</span><br><span class="line">        </span><br><span class="line">        [mutStr appendString:mutStr];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,mutStr);</span><br><span class="line">        </span><br><span class="line">        [mutStr replaceCharactersInRange:<span class="built_in">NSMakeRange</span>([mutStr length]/<span class="number">2</span>, [mutStr length]/<span class="number">2</span>) withString:str2];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,mutStr);</span><br><span class="line">        </span><br><span class="line">        subRange = [mutStr rangeOfString: <span class="string">@"This is"</span>];</span><br><span class="line">        <span class="keyword">if</span> (subRange.location != <span class="built_in">NSNotFound</span>) &#123;</span><br><span class="line">        [mutStr replaceCharactersInRange:subRange withString: <span class="string">@"it is"</span>] ;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,mutStr) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">2020-04-13 18:21:20.795845+0800 DemoProgram[49815:1823615] Thi</span><br><span class="line">2020-04-13 18:21:20.796235+0800 DemoProgram[49815:1823615] s is str1</span><br><span class="line">2020-04-13 18:21:20.796281+0800 DemoProgram[49815:1823615] s is</span><br><span class="line">2020-04-13 18:21:20.796305+0800 DemoProgram[49815:1823615] s is</span><br><span class="line">2020-04-13 18:21:20.796331+0800 DemoProgram[49815:1823615] index: 8 length: 4</span><br><span class="line">2020-04-13 18:21:20.796353+0800 DemoProgram[49815:1823615] String not found</span><br><span class="line">2020-04-13 18:21:20.796395+0800 DemoProgram[49815:1823615] This is str1</span><br><span class="line">2020-04-13 18:21:20.796432+0800 DemoProgram[49815:1823615] This is str1This is str1</span><br><span class="line">2020-04-13 18:21:20.796453+0800 DemoProgram[49815:1823615] This is str1</span><br><span class="line">2020-04-13 18:21:20.796472+0800 DemoProgram[49815:1823615] This is str1This is str1</span><br><span class="line">2020-04-13 18:21:20.796498+0800 DemoProgram[49815:1823615] This is str1This is str2</span><br><span class="line">2020-04-13 18:21:20.796520+0800 DemoProgram[49815:1823615] it is str1This is str2</span><br><span class="line">Program ended with exit code: 0</span><br></pre></td></tr></table></figure><h3 id="关于数组对象"><a href="#关于数组对象" class="headerlink" title="关于数组对象"></a>关于数组对象</h3><p>Foundation数组是有序的对象集合。不可变数组由 NSArray 类处理的，而可变数组由NSMutableArray 处理的。后者是前者的子类，即后者继承了前者的方法。</p><p>其中</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *monthNames = [<span class="built_in">NSArray</span> arrayWithObjects :<span class="string">@"January"</span>, <span class="string">@"February"</span>, <span class="string">@"March"</span>, <span class="string">@"April"</span>, <span class="string">@"May"</span>, <span class="string">"June"</span>, <span class="string">@"July"</span>, <span class="string">@"August"</span>, <span class="string">@"September"</span>, <span class="string">@"October"</span>, <span class="string">@"November"</span>, <span class="string">@"December"</span>, <span class="literal">nil</span> ];</span><br></pre></td></tr></table></figure><p>与如下方式相同。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *monthNames = @[<span class="string">@"January"</span>, <span class="string">@"February"</span>, <span class="string">@"March"</span>, <span class="string">@"April"</span>, <span class="string">@"May"</span>,<span class="string">@"June"</span>, <span class="string">@"July"</span>, <span class="string">@"August"</span>, <span class="string">@"September"</span>, <span class="string">@"October"</span>, <span class="string">@"November"</span> ,<span class="string">@"December"</span>];</span><br></pre></td></tr></table></figure><p>而</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array[index]</span><br></pre></td></tr></table></figure><p>相当于如下表达式</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[array objectAtIndex: index]</span><br></pre></td></tr></table></figure><p>同时</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array[index] = object</span><br></pre></td></tr></table></figure><p>相当于如下表达式</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[array setObject: object forIndex: index]</span><br></pre></td></tr></table></figure><p>下一节会参照书本给的样例进行编写。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://monkey-oyster.blogspot.com/2014/10/int-vs-nsinteger-vs-nsnumber.html" target="_blank" rel="noopener">int vs. NSInteger vs. NSNumber</a><br><a href="https://stackoverflow.com/questions/4445173/when-to-use-nsinteger-vs-int/5320359#5320359" target="_blank" rel="noopener">Why use int at all?-Stack overflow</a><br><a href="">Objective-C 程序设计 (第六版)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近开始学习 &lt;code&gt;Objective-C&lt;/code&gt; 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第五篇文章，主要复习了 &lt;code&gt;Objective-C&lt;/code&gt; Foundation 框架中关于数字对象、字符串对象以及数组对象的内容。&lt;/p&gt;</summary>
    
    
    
    <category term="tech" scheme="https://stephefang.me/categories/tech/"/>
    
    
    <category term="Xcode" scheme="https://stephefang.me/tags/Xcode/"/>
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://stephefang.me/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>数字生活启示录</title>
    <link href="https://stephefang.me/2020/04/12/Digital_Life/"/>
    <id>https://stephefang.me/2020/04/12/Digital_Life/</id>
    <published>2020-04-11T18:43:20.000Z</published>
    <updated>2020-07-27T16:14:14.942Z</updated>
    
    <content type="html"><![CDATA[<p>尼古拉·尼葛洛庞帝在他1995年发布的的著作《Being Digital》中描绘了未来数字生活的诸多情景，其中VR、AI、智能家居、个人助理等，无一不是近几年研究的热门领域，这些技术的出现深深影响了现代人的日常生活，换句话说，数字生活成为了当今时代人们生活的一部分。</p><a id="more"></a><p><img src="http://images.stephenfang.xyz/mweb/s1496668.jpg" alt="images.stephenfang.xyz/mweb/s1496668.jpg"></p><p>尼古拉·尼葛洛庞帝的《数字化生存》封面</p><h2 id="拥抱数字生活"><a href="#拥抱数字生活" class="headerlink" title="拥抱数字生活"></a>拥抱数字生活</h2><p>当我和朋友谈及「数字生活」这个话题的时候，我们认为，每个人都有自己处理数字生活的方式，但没有一个客观固定的标准。我们每天都会在数码设备上花费不少的时间，但如何妥善安排自己的数码生活却不被重视。</p><p>本文开篇之所以用拥抱一词，是因为笔者认为在当今时代，大部分人对于数字内容的汲取和吸收并不是一个被动的过程，相反，是一个开放、主动接受的过程。如何让自己个性化的需求得到满足，其背后的思路是拥抱数字生活的关键。</p><p>本文将以乱序的方式回忆和总结我所体验过的数字生活，希望我的这篇文章能给予你一点启发，让你能够以正确的打开方式享受数字时代带来的便利。当然，你完全可以把本文看作敝人的碎碎念，若有不合您想法的观点还请包容。</p><h2 id="开始数字生活"><a href="#开始数字生活" class="headerlink" title="开始数字生活"></a>开始数字生活</h2><p>作为一个平凡人，我勉强认为自己比较擅长鼓捣手机，并在鼓捣的过程中有所感悟。然而我也走过一些弯路，曾经下载过盗版的App，执着于哪款手机更优，庆幸的是这些我的行为或想法能够得到纠正，日常使用习惯也进而得到了培养。</p><p><img src="http://images.stephenfang.xyz/mweb/C68FD435-10A6-449C-8DEB-329A9F4BEC24.jpeg" alt="images.stephenfang.xyz/mweb/C68FD435-10A6-449C-8DEB-329A9F4BEC24.jpeg"></p><p>我所折腾过的一些数码物件</p><p><img src="http://images.stephenfang.xyz/mweb/Untitled.png" alt="images.stephenfang.xyz/mweb/Untitled.png"></p><p>我所折腾过的一些数码物件</p><p>引用经济学的一个重要原则，</p><blockquote><p>“Rational people think at the margin“</p></blockquote><p>即理性的人会从边际去考虑问题。假设你是理性的人，当你在决定更新一台设备时。会尝试从边际成本考虑它会带给你的价值，若你的手头不充裕且更新只能给你的工作流带来5%的提升，那大可不必做这样的决断。手机就是现代人的工具，其最大的价值为其存储的数据带来的价值，你应该做的是让你的手机为你创造价值，而不是被其禁锢。</p><p>作为一个工具，那手机必然存在其好处及劣处，且每个人对于手机都有不同的使用习惯和评价标准，你完全可以认为某手机是你当下最好的选择，但他人也完全有理由认为你的看法是错误的。即使你是某个品牌的死忠，也应该客观看待其他厂商推出的各类产品，所谓“信仰”只是一种调侃，而为黑而黑更是没有意义。手机是如此，生活中的许多琐事亦是如此。</p><p><img src="http://images.stephenfang.xyz/mweb/IMG_1485.jpeg" alt="images.stephenfang.xyz/mweb/IMG_1485.jpeg"></p><p>我的iPod touch</p><p>我的真正意义上的数字生活起始于2010年购买的一台iPod touch (4th genration)。我至今仍清楚记得它的配置：阉割版的A4 芯片、3.5 英寸 Retina 屏幕、iOS 4、聊胜于无的摄像头、8GB的存储空间。当时的我对于 Apple 生态一无所知，同步iPod中的内容也是由一家Apple授权店的小哥帮忙完成。</p><p>在使用iPod touch的过程中，我逐渐熟悉Apple的生态系统，令我记忆深刻的体验有第一次购买付费App，第一次给设备越狱，第一次在设备上玩在线联机游戏、第一次使用云服务等等。在iPod touch之后我对数码产品的兴趣愈发浓厚，且不仅仅限于iOS设备、Android设备，几年间，手中的设备换了一台又一台，安装的App换了一批又一批，我也逐步走进与计算机打交道的行业。</p><h2 id="关于App的回忆"><a href="#关于App的回忆" class="headerlink" title="关于App的回忆"></a>关于App的回忆</h2><p>App Store是Apple生态的一个重要组成部分，相当一部分人选择Apple的平台看重的是优秀的iOS独占App。和很多人一样，我购买iPod touch的理由很大程度上是为了游戏。十年后的今天，我的手机中鲜有游戏，虽然有时也会在闲暇时间与朋友来上两把吃鸡，但是再也不会像以前一样为了打通Angry Birds费尽心思。</p><p><img src="http://images.stephenfang.xyz/mweb/06CBDF84-B70A-4412-8F67-2D3C7CFD4E85.jpeg" alt="images.stephenfang.xyz/mweb/06CBDF84-B70A-4412-8F67-2D3C7CFD4E85.jpeg"></p><p>iOS 4时代的 App Store</p><p>iOS 4时代的游戏以单机、逻辑简单的小游戏为主，但也不乏许多知名的大作，较为出名的有Infinity Blade系列、Asphalt系列，我当时最喜欢的是Gameloft开发的Rainbow Six手游，其最大的特色就是能够以蓝牙联机的方式与好友对战，还记得每天中午都会和班上的同学去学校的阁楼玩几盘联机游戏。然而Cut the Rope、Fruit Ninja、Angry Birds、Doodle Jump才是我对于那个时期最真实的回忆。</p><h2 id="关于效率"><a href="#关于效率" class="headerlink" title="关于效率"></a>关于效率</h2><p>现在的我会仍会刻意给所有的App分门别类，然而刚接触 iOS 时我总把首屏留给系统默认App，并且总是在结束App的使用后习惯性将它在后台清除，同时我还会出于自己对 Google 的向往，在自己的手机中安装所有 Google 系的App，这些行为在现在看来是相当愚蠢。</p><p><img src="http://images.stephenfang.xyz/mweb/0A5E372C-83FF-429D-8B1D-12749EEB60DE.jpeg" alt="images.stephenfang.xyz/mweb/0A5E372C-83FF-429D-8B1D-12749EEB60DE.jpeg"></p><p>iOS 6时代我的 iPod touch</p><p><img src="http://images.stephenfang.xyz/mweb/604EE641-9BC7-48BA-BC4B-06DE45144E0A.jpeg" alt="images.stephenfang.xyz/mweb/604EE641-9BC7-48BA-BC4B-06DE45144E0A.jpeg"></p><p>装满所有 Google 系 App 的 iPhone</p><p>首先，更好的应用排布会带来更高的利用效率，试想一下你需要使用某个App记录信息，然而在不使用搜索的情况下每次都要滚动到第二屏，甚至还需要点开一个文件夹才能打开它，还有找不到App的风险，这势必会浪费一部分时间，让你显得手忙脚乱，可能你连需要记录什么都忘了。</p><p><img src="http://images.stephenfang.xyz/mweb/s26872396.jpg" alt="images.stephenfang.xyz/mweb/s26872396.jpg"></p><p>山下英子的断舍离封面</p><p>另外一种想法是我在读了《断舍离》这本书后感悟的，首先简要说明这本书的一个重要观点：</p><ul><li>断舍离非常简单，只需要以自己而不是物品为主角，去思考什么东西最适合现在的自己。只要是不符合这两个标准的东西，就立即淘汰或是送人。</li></ul><p>反映在数字生活中即为保留最近需要用到的App，删除不必须要的内容。目前我在我的手机上保留了80个左右的App，显然我不可能每天用到其中的绝大多数App。有统计学的数据显示，智能手机用户平均每个月将会使用超过30个软件，而平均到每天，将会有10个软件被用户登录。</p><p>对于我而言，不会用到的App可以看作是手机的一种“负担”，把它们从我的主屏幕中删除可以看似一种“解脱”，你可以将其看做为一种“伪哲学“，正如许多人对于《断舍离》这本书的看法。时刻保持自己的设备有最高的效率面对工作或学习有如时刻使自己保持清醒的头脑面对生活。</p><h2 id="关于正版"><a href="#关于正版" class="headerlink" title="关于正版"></a>关于正版</h2><p>前几天听说最新版本的 iOS 系统再次能够「越狱」了，然而对此新闻感到兴奋的人寥寥无几。从某种角度来说，「越狱」也是当时导致盗版猖獗的一大原因，然而「越狱」的最重要意义却是让 iOS 设备更具个性化，如 iOS 5 时期我会通过「越狱」去为自己的设备增加通知中心的功能，在 iOS 4 时期我会通过「越狱」给我的iPod touch增加虚拟内存。</p><p><img src="http://images.stephenfang.xyz/mweb/223F237B-B3BB-4BF5-8361-F037537C98EC.jpeg" alt="http://images.stephenfang.xyz/mweb/223F237B-B3BB-4BF5-8361-F037537C98EC.jpeg"></p><p>“Jailbreak”界面</p><p><img src="http://images.stephenfang.xyz/mweb/C215DC38-4A0D-42F6-94A8-37EEE9EBD3C6.jpeg" alt="http://images.stephenfang.xyz/mweb/C215DC38-4A0D-42F6-94A8-37EEE9EBD3C6.jpeg"></p><p>“奔跑的大菠萝”</p><p>iOS 的付费购买体系目前已经十分成熟，你可以通过各种支付方式获得你需要的App。在没有支付能力的小学时期我可能会为了一款想玩的游戏下载盗版，但我深知这样的想法是错误的，我会告诉自己我需要某一个APP，它为我创造了价值，我乐意为其付费，于是具备消费能力之后我督促自己禁止使用盗版的内容。</p><p>为内容付费是一种闭环，没有投入就没有产出，如果开发者的投入没有回报，很可能导致的结果就是软件停止更新，或比喻为劣币驱逐良币，试想一下应用商店充斥着隐含各种广告的App，相信这种局面都是你我所不愿意看到的。自然，我不会去鄙视用盗版的人，他们很可能是迫不得已，诚然，一些大公司的营收不会因为缺少了一部分人的支出而受重大影响，但我认为用着盗版还大肆夸耀就有些不合情理了。</p><p>微软推出的 Office 365 是一个很有趣的例子，在高中的时候我开始每年为 Office 365 付费，我完全厌倦了 WPS 恼人的广告机制，能够用到正版 Office 令我十分开心，然而这样的行为当时为许多人所不解。近年来使用正版 Office 的成本不断降低，愿意使用正版的人群也逐渐壮大，微软也在努力提升该产品的价值，现在你能够以每年 70多元的价格购买到 Office 套件的全部功能，如果你确定Office能够提供你工作中的便利，那么其价格完全不构成经济上的负担，何况这其中还包括完善的云服务，我认为这是消费者与产品提供商实现的一种协调。当然如果你使用的是Mac，你完全可以用 Apple 的 iWork 套件替代 Office 的工作流，总是有合适的方案替代最坏的使用盗版的方案。你如果觉得购买 Mac 上的 Apps 太贵，可以选择订阅性质的 Setapp，只要你对于设备生产力的界定在“爱奇艺“之上，这些举措都是有意义的。</p><p><img src="http://images.stephenfang.xyz/mweb/Xnip2020-04-12_00-33-00.png" alt="http://images.stephenfang.xyz/mweb/Xnip2020-04-12_00-33-00.png"></p><p>采用订阅收费制度的Setapp</p><p>我想表达的并不是一种说教，更多的是一种意识。你可能喜欢观看美剧，但出于各方面原因你无法使用到网飞等平台的服务，但你可以选择的是想办法使用到这种服务，正可谓“办法总比困难多”，或者你可以在某些方面支持你所喜爱的作品。最次的方案则是“偷偷地看“，不是为自己享有盗版而感到自豪。你愿意为一杯奶茶带来的味蕾刺激付费，却不愿意为能够提升你的效率、生活品质的内容而付费，这听起来是不是很荒谬？</p><h2 id="关于多样性"><a href="#关于多样性" class="headerlink" title="关于多样性"></a>关于多样性</h2><p>“如果你想要学习一些自己感兴趣的内容，你必须经历一段痛苦的，学习自己不想学习内容的经历。“这是我对于学习这一件事最真切的感悟。在互联网时代，互联网就是你最好的老师，你可以通过互联网检索到你任何感兴趣的问题的答案，同时你也可以通过互联网学习到任何你想学习的内容，尽管你搜索到的内容很大几率是错误的，且检索到的课程质量可能良莠不齐，但并不影响这个结论的正确性，你需要做的是提高自己辨别正误信息的能力以及提高自己接受新事物的能力。</p><p>回到这段开头这一句话，当你拥有了学习自己所喜欢内容的时间和机会，不应该以“没有空”等类似理由搪塞自己，而应该通过互联网的力量让自己的求知欲得到满足。当你不理解思维导图如何完成就尝试去学习和实践它，当你对咖啡文化感兴趣就去了解它的历史和发展状况，当你充满求知欲时就刷上一天的维基百科。</p><p>我的一位高中同学对任何知识都满怀好奇，无论是他所不熟悉的电竞领域还是他所了解的电影市场，凡是能够引起讨论的内容他都略知一二，我暂且认定他的学习方法称之为“杂学”。起初我对这种学习方式不以为然，认为学习的重要方法在于精而不是杂，渐渐地，我开始觉得这种方式在信息爆炸的年代存在其合理性。</p><p><img src="http://images.stephenfang.xyz/mweb/s1429010.jpg" alt="http://images.stephenfang.xyz/mweb/s1429010.jpg"></p><p>许多人的理财启蒙读物——《富爸爸，穷爸爸》</p><p>首先，他的学习内容仍然是以兴趣为第一导向，对于乏味、无用的内容他一概不学，确保了学习过程的积极性和主动性；其次，在阅读了《富爸爸穷爸爸》这本书后，我认为当时我当时的观点与书中穷爸爸对于停留在某种体制内、在某一方面成为专家的观点无异，而书中的富爸爸则倡导学习各方的知识，如财务知识、交谈经验等，这一出发点对该书的作者产生了深刻的影响，促成了其人生中的诸多机会，同时也造就了该书作者的经济地位——这也就是我想说的，求知欲以及交叉学科知识产生的影响。</p><p><img src="http://images.stephenfang.xyz/mweb/999FB844-A92A-4852-BA27-6BC0091DCB8C.jpg" alt="http://images.stephenfang.xyz/mweb/999FB844-A92A-4852-BA27-6BC0091DCB8C.jpg"></p><p>12年我的音乐资料库</p><p>人在学习和探索的过程中很可能会推翻许多固有的认知，很多年以前，我曾对日本的音乐抱有偏见，但通过数年对于日本音乐、文化的学习，我了解到坂本龙一、玉置浩二这样的大师，喜爱上re:plus这样的小众乐队，痴迷于押尾光太郎的指弹，见证过Aimer的迅速发展，我所学到的一切都引起了我对日本音乐的尊重。然而不仅仅是音乐，我对很多事物的看法都在互联网的影响下产生很大改观。我在本文最后呼吁大家走出“XX无用论”的泥淖，大胆拥抱新鲜事物，积极表达求知欲望，如尝试「GTD工作法」、「量化自我」等方法将大有裨益，至于某些具体的方法论不在此文中引述，读者可以期待本人未来的分享。</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>本文至此就告一段落了，显然，笔者想表达的观点和内容还有很多，对于具体的方法论会在之后的文章阐述，还请继续期待和支持。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://bi.qq.com/a/20170613/059340.htm" target="_blank" rel="noopener">https://bi.qq.com/a/20170613/059340.htm</a></p><p><a href="https://en.wikiversity.org/wiki/10_Principles_of_Economics" target="_blank" rel="noopener">https://en.wikiversity.org/wiki/10_Principles_of_Economics</a></p><p><a href="https://www.ifanr.com/app/727935" target="_blank" rel="noopener">https://www.ifanr.com/app/727935</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;尼古拉·尼葛洛庞帝在他1995年发布的的著作《Being Digital》中描绘了未来数字生活的诸多情景，其中VR、AI、智能家居、个人助理等，无一不是近几年研究的热门领域，这些技术的出现深深影响了现代人的日常生活，换句话说，数字生活成为了当今时代人们生活的一部分。&lt;/p&gt;</summary>
    
    
    
    <category term="tech" scheme="https://stephefang.me/categories/tech/"/>
    
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="数字生活" scheme="https://stephefang.me/tags/%E6%95%B0%E5%AD%97%E7%94%9F%E6%B4%BB/"/>
    
    <category term="杂文" scheme="https://stephefang.me/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 学习笔记(四）</title>
    <link href="https://stephefang.me/2020/04/11/Objc_Learning_4/"/>
    <id>https://stephefang.me/2020/04/11/Objc_Learning_4/</id>
    <published>2020-04-11T07:43:20.000Z</published>
    <updated>2020-04-11T07:42:48.745Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第四篇文章，主要复习了 <code>Objective-C</code>中C语言特性。</p><a id="more"></a><h3 id="关于C语言特性"><a href="#关于C语言特性" class="headerlink" title="关于C语言特性"></a>关于C语言特性</h3><h4 id="关于数组"><a href="#关于数组" class="headerlink" title="关于数组"></a>关于数组</h4><p><code>Objective-C</code>与C语言一样允许用户定义一组有序的数据项，即数组。其操作与C语言几乎完全一致，事实上无论是函数还是数组还是变量具备良好C基础的人都不会对此感到陌生。以下为最简单的使用数组的Fibonacci代码。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> Fibo [<span class="number">30</span>];</span><br><span class="line">        Fibo [<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        Fibo [<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="keyword">sizeof</span>(Fibo)/<span class="keyword">sizeof</span>(Fibo[<span class="number">0</span>]); i++) &#123;</span><br><span class="line">            Fibo [i] = Fibo [i<span class="number">-1</span>] + Fibo [i<span class="number">-2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(Fibo)/<span class="keyword">sizeof</span>(Fibo[<span class="number">0</span>]); i++) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"The result of Fibonacci[%i] is %li\n"</span>,i,Fibo[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关于函数"><a href="#关于函数" class="headerlink" title="关于函数"></a>关于函数</h4><p>默认情况下，<code>Objective-C</code>语言编译器假设函数返回int,除非发生以下两种情况之一:</p><ul><li>在函数被调用之前，已经在程序中定义了该函数，</li><li>在遇到函数调用之前，已经声明了该函数的返回值类型。<br>调用函数或方法时，作为参数传递的值将被复制到相应的形参中。使用数组时，并非将整个数组的内容复制到形参数组中，而是传递一个指针，它表示数组所在的内存地址。所以对形参数组所做的所有更改实际上都是对原始数组而不是数组的副本执行的。因此，函数或方法返回时，这些变化仍然有效。</li></ul><h4 id="关于块"><a href="#关于块" class="headerlink" title="关于块"></a>关于块</h4><ul><li>块是对C语言的一种扩展。它并未作为标准ANSI C所定义的部分，而是由 Apple 添加。</li><li>块看起来更像是函数，可以给块传递参数，块也具有返回值。</li><li>块定义在函数或者方法内部，并能够访问在函数或者方法范围内、块之外的任何变量，这些变量能够访问但是并不能够改变这些变量。</li><li>特殊的块修改器(由块前面含有两个下画线的字符组成)能够修改块内变量的值。</li><li>块的其中一个优势在于能够让系统分配给其他处理器或应用的其他线程执行。<br>以下为一个处理最小公倍数的简单块演示。</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> (^gcd)(<span class="keyword">int</span>,<span class="keyword">int</span>)=</span><br><span class="line">^(<span class="keyword">int</span> u,<span class="keyword">int</span> v)&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">while</span>(v!= <span class="number">0</span>)&#123;</span><br><span class="line">        temp = u % v;</span><br><span class="line">        u = v;</span><br><span class="line">        v = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="关于数组指针"><a href="#关于数组指针" class="headerlink" title="关于数组指针"></a>关于数组指针</h4><p>要将valuesPtr设为指向数组values的第–个元素的指针，可以写成：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valuesPtr = values;</span><br></pre></td></tr></table></figure><p>因为Objective-C编译器将没有下标的数组名称看作是指向数组第一个元素的指针。所以，仅仅指明values而不带下标，其作用就是产生一个指向values第一个元素的指针。不需要用到地址运算符，要产生指向values首元素的指针，还有另一个等效方式，就是对数组第一个元素应用地址运算符，即</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valuesPtr = &amp;values(<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>将数组values第一个元素的指针存放到指针变量valuesPtr中。此时通过</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valuesPtr += <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>可以使其指向下一个元素，即values[1]。在<code>Objective-C</code>语言中，这是完全合法的表达式，并且可以用于指向任何数据类型的指针。同时比较两个指针变量的做法也是完全合法的。这在比较指向同一数组的两个指针时非常有用。比如测试指针valuesPtr的指向是否超出了包含有100个元素的数组的范围，方法是将它与指向数组最后一个元素的指针相比较。<br>如果valuesPtr超出了数组values的最后元素，</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valuesPtr &gt; &amp;values [<span class="number">99</span>]</span><br></pre></td></tr></table></figure><p>的结果将为TRUE，反之，表达式的值为FALSE，也可将上面的表达式相应地改写为:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valuesPtr &gt; values + <span class="number">99</span></span><br></pre></td></tr></table></figure><p>在<code>Objective-C</code>语言中，两指针相减的结果是它们之间所包含的元素个数。这样，如果a是指向任意类型的元素数组，而b是指向同一数组中索引值更大的其他元素，那么表达式b-a<br>代表的就是这两个指针之间的元素个数。</p><h4 id="关于字符串指针"><a href="#关于字符串指针" class="headerlink" title="关于字符串指针"></a>关于字符串指针</h4><p>在《Objective-C 程序设计 (第六版)》中给出了以下两段代码说明字符串指针的运用。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用常规数组索引</span></span><br><span class="line"><span class="keyword">void</span> copyString (<span class="keyword">char</span> to[], <span class="keyword">char</span> from[])&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span> ; from[i] != <span class="string">'\0'</span>; ++i)</span><br><span class="line">        to[i] = from [i];</span><br><span class="line">    </span><br><span class="line">    to[i] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用指针数组</span></span><br><span class="line"><span class="keyword">void</span> copystring (<span class="keyword">char</span> *to， <span class="keyword">char</span> *from)&#123;</span><br><span class="line">    <span class="keyword">for</span> ( ; *from != <span class="string">'\0'</span>; ++from,++to ) </span><br><span class="line">        *to = *from;</span><br><span class="line">        </span><br><span class="line">    *to=<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很有意思的是，<code>Objective-C</code>语言中用到字符串就会产生指向该字符串的指针。学习过程中在程序中使用了字符串不是字符串对象，而是属于C风格的字符串，可以通过字符串的前面是否具有@字符进行区分。这两种类型不能互换。如果一个函数需要字符数组作为参数，可以将char类型的数组或c风格字符串传递给它，不能传递一个字符串对象。</p><h3 id="关于两种语言的联系"><a href="#关于两种语言的联系" class="headerlink" title="关于两种语言的联系"></a>关于两种语言的联系</h3><ol><li>实例变量存储在结构中：对象实际上是结构</li><li>对象变量实际上是指针：将对象变量赋给另一个对象变量时，只是简单地复制了指针，最后都指向存储在内存中的同一结构</li><li>方法是函数，消息表达式是函数调用：调用方法是在调用与接收者类相关的函数。</li><li>id类型是通用指针类型：通过指针来引用对象可以自由地将它们在id变量之间来回赋值。因此返回id类型值的方法只是返回指向内存中某对象的指针。</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="">Objective-C 程序设计 (第六版)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近开始学习 &lt;code&gt;Objective-C&lt;/code&gt; 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第四篇文章，主要复习了 &lt;code&gt;Objective-C&lt;/code&gt;中C语言特性。&lt;/p&gt;</summary>
    
    
    
    <category term="tech" scheme="https://stephefang.me/categories/tech/"/>
    
    
    <category term="Xcode" scheme="https://stephefang.me/tags/Xcode/"/>
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://stephefang.me/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 学习笔记(三）</title>
    <link href="https://stephefang.me/2020/04/05/Objc_Learning_3/"/>
    <id>https://stephefang.me/2020/04/05/Objc_Learning_3/</id>
    <published>2020-04-05T06:43:20.000Z</published>
    <updated>2020-04-17T10:10:02.108Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始学习 <code>Objective-C</code> 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第三篇文章，主要复习了数据类型、预处理、分类与协议等内容。</p><a id="more"></a><h3 id="关于初始化与变量"><a href="#关于初始化与变量" class="headerlink" title="关于初始化与变量"></a>关于初始化与变量</h3><h4 id="关于初始化"><a href="#关于初始化" class="headerlink" title="关于初始化"></a>关于初始化</h4><p>若在创建类的对象时需要使用和引用一个或多个实例变量，可以通过重载init方法达到目的。该方法首先调用父类初始化方法，使得继承实例变量正常初始化，因为初始化过程改变了对象在内存中的位置所以需要将父类init方法执行结果赋值给self。特殊类型instancetype表明,从init方法返回的类型与它的初始化类相同。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(instantype) init &#123;</span><br><span class="line">    <span class="keyword">self</span> = [ <span class="keyword">super</span> init ];</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">self</span> ) &#123;</span><br><span class="line">    <span class="comment">//do sth here</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关于-extern-与-static"><a href="#关于-extern-与-static" class="headerlink" title="关于 extern 与 static"></a>关于 extern 与 static</h4><ul><li>声明不会引起变量存储空间分配，而定义会引起变量存储空间分配。</li><li>如果有很多方法需要访问外部变量的值,应该只在文件的开始进行一次extern声明。</li><li>如果只有一个或少数几个方法访问这个变量，应该在其中的每个方法中单独进行extern声明。</li><li>如果变量定义在包含访问这个变量的文件中，不需要单独进行extern声明。</li><li>static 变量声明在文件中的任何方法(或函数)之外，所有位于这条语句之后的方法或函数都可以访问其值，而其他文件中的方法和函数则不行。</li><li>静态局部变量用关键字static声明，其值在函数调用的过程中保留下来，并且初始值默认为0。</li></ul><h3 id="关于预处理"><a href="#关于预处理" class="headerlink" title="关于预处理"></a>关于预处理</h3><ul><li>预定义名称非变量不能为其赋值，其右边所有字符被预处理程序自动替换到程序中，类似于文本处理中的搜索与替换。</li><li>#define 可以出现在程序程序任何地方，不必为开头；把定义放在头文件中可以方便在多个源文件中使用。</li><li>从视觉上区分预定义的值和变量可以通过大写字母组合实现。</li><li>预处理程序定义右边不必是合法<code>Objective-C</code>表达式。</li></ul><h3 id="关于条件编译"><a href="#关于条件编译" class="headerlink" title="关于条件编译"></a>关于条件编译</h3><p>在调试程序时条件编译很有用。在程序中嵌入了NSLog调用可以用于显示中间结果并跟踪执行流程。程序中可能有很多这样的调试语句，且无论何时调试这个程序，都能够通过DEBUG使所有的调试语句都编译。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line"> <span class="built_in">NSLog</span> (<span class="string">@"username = %@, password = %i"</span>, username, password);</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="关于分类"><a href="#关于分类" class="headerlink" title="关于分类"></a>关于分类</h3><h4 id="分类定义"><a href="#分类定义" class="headerlink" title="分类定义"></a>分类定义</h4><p>面对一个类定义时可能想要添加新的方法，如对于一个计算器类来说可能需要四则运算的方法，而该类当前只需要处理四则运算方面的功能，其他的创建和初始化交由其他方法来做，这个时候就可以用到分类的思想。<br>分类提供简单的方式将类的定义模块划到相关方法的组或分类中，同时其提供了扩展现有类定义的简便方式，不必访问类的源代码，也不必创建子类。<br>如对于一个假定的计算器的四则运算操作就可以创建如下分类。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Calculator</span> (<span class="title">MathOps</span>)</span></span><br><span class="line">-(<span class="keyword">void</span>) add: (<span class="keyword">double</span>) value1 : (<span class="keyword">double</span>) value2;</span><br><span class="line">-(<span class="keyword">void</span>) subtract: (<span class="keyword">double</span>) value1 : (<span class="keyword">double</span>) value2;</span><br><span class="line">-(<span class="keyword">void</span>) multiply: (<span class="keyword">double</span>) value1 : (<span class="keyword">double</span>) value2;</span><br><span class="line">-(<span class="keyword">void</span>) divide: (<span class="keyword">double</span>) value1 : (<span class="keyword">double</span>) value2;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h4 id="分类注意"><a href="#分类注意" class="headerlink" title="分类注意"></a>分类注意</h4><p>分类可以覆写该类的另一个方法，但是覆写方法后无法访问原来的方法，所以正确的选择是创建子类。在子类中覆写方法可以通过super发送消息引用父类方法。<br>通过使用分类添加新方法扩展类会影响当前类与其子类。</p><h3 id="关于协议与代理"><a href="#关于协议与代理" class="headerlink" title="关于协议与代理"></a>关于协议与代理</h3><h4 id="协议要点"><a href="#协议要点" class="headerlink" title="协议要点"></a>协议要点</h4><p>协议是多个类共享的一个方法列表，协议中列出了一组方法，有些选择实现，有些必须实现。如<code>NSObject.h</code>中的部分协议定义。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">NSCopying</span></span></span><br><span class="line">- (<span class="keyword">id</span>)copyWithZone:(<span class="keyword">nullable</span> <span class="built_in">NSZone</span> *)zone;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">NSCoding</span></span></span><br><span class="line">- (<span class="keyword">void</span>)encodeWithCoder:(<span class="built_in">NSCoder</span> *)coder;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)coder; <span class="comment">// NS_DESIGNATED_INITIALIZER</span></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>如果类采用<code>NSCopying</code>和<code>NSCoding</code>协议，就必须实现<code>copyWithZone</code>等方法，使用方法如下。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DemoPrototol</span>: <span class="title">NSObject</span> &lt;<span class="title">NSCopying</span>,<span class="title">NSCoding</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义协议时可以使用<code>@optional</code>指令表明列出的方法都是可选的，可以使用<code>required</code>指令标明必须实现的方法。</p><h4 id="协议注意"><a href="#协议注意" class="headerlink" title="协议注意"></a>协议注意</h4><ul><li>协议不引用任何类。</li><li>可以使用conformsToProtocol:方法检查一个对象是否遵循某项协议。</li><li>编译器只有在没有实现协议要求的方法时发出警告。</li><li>与类名一样，协议名唯一。</li></ul><h4 id="代理要点"><a href="#代理要点" class="headerlink" title="代理要点"></a>代理要点</h4><p>定义了协议的类可以看作是将协议定义的方法代理给了实现它们的类。如iOS建立表格需使用UITableView类，需要代理定义UITableViewDataSource协议，如果协议需要信息就会调用类中实现协议的相关方法，开发者必须将其写入类中，与协议相匹配。协议中定义的其他方法是否实现决定权在开发者，即责任代理在开发者。</p><ul><li>如果一个对象采用正式协议，则它必须遵守协议中的所有信息。这可以在运行及编译时强制执行。</li><li>如果一个对象采用非正式协议，则它可能不需要采用此协议的所有方法，具体取决于这项协议。</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="">Objective-C 程序设计 (第六版)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近开始学习 &lt;code&gt;Objective-C&lt;/code&gt; 夯实基础，在此处总结可以方便本人更好地整理学习内容，此文为本系列的第三篇文章，主要复习了数据类型、预处理、分类与协议等内容。&lt;/p&gt;</summary>
    
    
    
    <category term="tech" scheme="https://stephefang.me/categories/tech/"/>
    
    
    <category term="Xcode" scheme="https://stephefang.me/tags/Xcode/"/>
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://stephefang.me/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 图像滤波</title>
    <link href="https://stephefang.me/2020/04/01/OpenCV_Filter/"/>
    <id>https://stephefang.me/2020/04/01/OpenCV_Filter/</id>
    <published>2020-04-01T10:40:20.000Z</published>
    <updated>2020-04-02T04:19:19.321Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果您不知道如何在 Mac 上使用 Xcode 配置 <code>OpenCV</code>，可以参考我之前的博文。</p></blockquote><p>利用像素本身以及其邻域象素的灰度关系进行增强的方法常称为滤波，而滤波器通过邻域运算实现。</p><p>开始之前先给出滤波相关知识结构图。</p><a id="more"></a><p><img src="http://images.stephenfang.xyz/mweb/%E6%BB%A4%E6%B3%A2.png" alt="滤波"></p><h2 id="理解滤波"><a href="#理解滤波" class="headerlink" title="理解滤波"></a>理解滤波</h2><p>先给出邻域操作的过程；</p><ol><li>将模板在输入图象中漫游，并将模板中心与图象中某个像素位置重合</li><li>将模板上的各个系数与模板下各对应像素的灰度值相乘</li><li>将所有乘积相加( 为保持灰度范围，常将结果再除以模板系数之和)</li><li>将上述结果(模板的输出响应)赋给输出图象中对应模板中心位置的象素</li></ol><blockquote><p>均值滤波其实就是对目标像素及周边像素取平均值后再填会目标像素来实现滤波目的的方法。</p></blockquote><p>接下来给出均值滤波具体的操作方法：<br>存在如下图片底板，可见图像中用蓝色标记的“99”为显著的噪声。<br><img src="http://images.stephenfang.xyz/mweb/15857298630296.jpg" alt=""><br>尝试建立如下 3*3 邻域模版，模版可以暂且被理解为叠在图像上的内容，实为平滑卷积模版<br><img src="http://images.stephenfang.xyz/mweb/15857297422480.jpg" alt=""><br>尝试对最左上角的重叠部分进行计算，计算方法为系数逐乘以邻域节点的数值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 1&#x2F;9 * (10x1 + 11x1 + 10x1 + 9x1 + 10x1 + 11x1 + 10x1 + 9x1 + 10x1) </span><br><span class="line">&#x3D; 1&#x2F;9 * (90) </span><br><span class="line">&#x3D; 10</span><br></pre></td></tr></table></figure><p>将运算结果“10”填充至中间位置，与原有结果相同。<br><img src="http://images.stephenfang.xyz/mweb/15857302402257.jpg" alt=""><br>至此完成了卷积模版最基本操作，接下来尝试遍历扫描整个图像，即通过对模板的平移完成对整个图像的运算，如下图所示：<br><img src="http://images.stephenfang.xyz/mweb/15857305800473.jpg" alt="-w229">)<img src="http://images.stephenfang.xyz/mweb/15857305984728.jpg" alt="-w229"><br>此时运算过程为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  1&#x2F;9 *(10x1 + 0x1 + 0x1 + 11x1 + 1x1 + 0x1 + 10x1 + 0x1 + 2x1) </span><br><span class="line">&#x3D; 1&#x2F;9 *( 34) </span><br><span class="line">&#x3D; 3.7778</span><br></pre></td></tr></table></figure><p>将小数量化后填充至中心位置，并重复操作，原则为逐行扫描，逐列增长。<br><img src="http://images.stephenfang.xyz/mweb/15857308419472.jpg" alt="-w229">)<img src="http://images.stephenfang.xyz/mweb/15857308571783.jpg" alt="-w229"><br>可以观察到运算进行到最下角的区域时，原来的“99”数值被填充为“20”，噪声被有效抑制。<br>你可能会发现，当然边缘处的图像无法通过该算法进行处理，然而存在以下方法：</p><ol><li><strong>拓宽原图</strong> :人为将边缘像素往外复制，图像外的第零列就被复制为与第一列相同，图像外的第零行被复制为与第一行相同，最后补全四个对角。如 6<em>6 的原图就被拓宽为 7</em>7 的图像，再对拓宽后的图像进行卷积处理。</li><li><strong>像素复制</strong> :将已经处理完成的内部像素往外复制，如上图中 4*4 的内部像素已经完成卷积运算，尝试将其往外复制像素，如(2,2)位置的 10 覆盖(1，2)位置的 11 和(2,1)位置的9。</li><li><strong>保持原样</strong> :这也是一种方法，毕竟三种方法都存在误差。</li></ol><p>其他还存在很多模版，简要理解中值滤波法：<br><img src="http://images.stephenfang.xyz/mweb/15857320034469.jpg" alt="-w229">)<img src="http://images.stephenfang.xyz/mweb/15857320145830.jpg" alt="-w229"><br>正如其名，其计算方法为：</p><ol><li>对邻域 10,9,11,9,99,11,11,10,10 进行排序</li><li>在排序后的数字 9,9,10,10,10,11,11,11,99 中寻找中间像素</li><li>查找到中位数“10”对”99“进行替换</li></ol><p>卷积也被称为算子，以下为著名的Prewitt算子（垂直方向与水平方向）<br><img src="http://images.stephenfang.xyz/mweb/15857327960667.jpg" alt="-w229">)<img src="http://images.stephenfang.xyz/mweb/15857328571767.jpg" alt="-w235"><br>它可以显著降低边缘精度，对噪声具有平滑作用。下图为原图<br><img src="http://images.stephenfang.xyz/mweb/15857329308611.jpg" alt=""><br>以下左图为处理后的x方向图片，右图为处理后的y方向图片。<br><img src="http://images.stephenfang.xyz/mweb/15857329552320.jpg" alt="-w229">)<img src="http://images.stephenfang.xyz/mweb/15857329695411.jpg" alt="-w238"><br>最后给出简单的Sobel边缘检测算子。</p><blockquote><p>索贝尔算子是计算机视觉领域的一种重要处理方法。主要用于获得数字图像的一阶梯度，常见的应用和物理意义是边缘检测。索贝尔算子是把图像中每个像素的上下左右四领域的灰度值加权差，在边缘处达到极值从而检测边缘。</p></blockquote><p>左图为垂直方向的Sobel边缘检测算子，右图为水平方向的Sobel边缘检测算子。<br><img src="http://images.stephenfang.xyz/mweb/15857325986198.jpg" alt="-w229">)<img src="http://images.stephenfang.xyz/mweb/15857327147059.jpg" alt="-w229"></p><p>对于邻域操作的概念这里不复再议，接下来尝试通过<code>OpenCV</code>的 filter2D() 函数实践 3*3 卷积模板。</p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><p>尝试自己编写了一段代码后，在<code>OpenCV</code>官方文档中查找到了线性滤波器的内容，通过循环的方式体现均值滤波器在不同的卷积核大小对图像的影响，现将其做解释。</p><p>该程序通过循环生成 sizes 为3、5、7、9、11 时的<em>normalized box filter</em>，即均值滤波器（上文中已提及）。<br>对于<code>size = 3</code> 的卷积核，应进行如下操作，其中 1/9 为系数。<br><img src="http://images.stephenfang.xyz/mweb/15857352054151.jpg" alt=""><br>给出<code>OpenCV</code>中 filter2D() 的定义：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> cv::filter2D(</span><br><span class="line">InputArray src, </span><br><span class="line">OutputArray dst,</span><br><span class="line"><span class="keyword">int</span> ddepth,</span><br><span class="line">InputArray kernel,</span><br><span class="line">Point anchor = Point(<span class="number">-1</span>,<span class="number">-1</span>),</span><br><span class="line"><span class="keyword">double</span> delta = <span class="number">0</span>,</span><br><span class="line"><span class="keyword">int</span> borderType = BORDER_DEFAULT </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>对参数进行解释</p><ul><li>src: 原图像</li><li>dst: 目标图像</li><li>ddepth: 图像深度.负数代表与原始图像相同，如 -1</li><li>kernel: 卷积核</li><li>anchor: 内核的基准点，默认(-1, -1) 代表处于中心位置</li><li>delta: 可选的添加到像素的值，默认为 0</li><li>BORDER_DEFAULT: 像素向外逼近的方法，默认值 BORDER_DEFAULT 表示对全部边界进行计算</li></ul><p>相比你已经能够了解如何处理这个程序了，接下来给出修改后的整个程序。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgproc.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgcodecs.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/highgui.hpp"</span></span></span><br><span class="line">using namespace cv;</span><br><span class="line"><span class="keyword">int</span> main ( <span class="keyword">int</span> argc, <span class="keyword">char</span>** argv )</span><br><span class="line">&#123;</span><br><span class="line">    Mat src, dst;</span><br><span class="line">    Mat kernel;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">double</span> delta = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ddepth = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> kernel_size;</span><br><span class="line">    Point anchor = Point( <span class="number">-1</span>, <span class="number">-1</span> );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加载图片</span></span><br><span class="line">  src = imread(<span class="string">"original.jpeg"</span>);</span><br><span class="line">    <span class="keyword">if</span>( src.empty() )</span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">"无法加载图片\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行循环：每隔0.5秒对图像执行不同卷积核下的滤波操作</span></span><br><span class="line">    <span class="keyword">int</span> ind = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 为归一化滤波循环更新卷积核的大小，kernel_size在3-11间循环</span></span><br><span class="line">        kernel_size = <span class="number">3</span> + <span class="number">2</span>*( ind%<span class="number">5</span> );</span><br><span class="line">        kernel = Mat::ones( kernel_size, kernel_size, CV_32F )/ (<span class="keyword">float</span>)(kernel_size*kernel_size);</span><br><span class="line">        <span class="comment">// 执行滤波器</span></span><br><span class="line">        filter2D(src, dst, ddepth , kernel, anchor, delta, BORDER_DEFAULT );</span><br><span class="line">        imshow( <span class="string">"FilterTest"</span>, dst );</span><br><span class="line">        <span class="keyword">char</span> c = (<span class="keyword">char</span>)waitKey(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">// 按下Esc退出程序</span></span><br><span class="line">        <span class="keyword">if</span>( c == <span class="number">27</span> )</span><br><span class="line">        &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">        ind++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>给出以下测试图片效果，可以看出效果已经相当明显。<br><img src="http://images.stephenfang.xyz/mweb/15857364490707.jpg" alt="-w599"><br><img src="http://images.stephenfang.xyz/mweb/15857363805369.jpg" alt="-w599"><br><img src="http://images.stephenfang.xyz/mweb/15857364391479.jpg" alt="-w599"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.opencv.org/master/d4/dbd/tutorial_filter_2d.html" target="_blank" rel="noopener">Making your own linear filters - OpenCV Docs</a><br><a href="https://mooc1-1.chaoxing.com/coursedata/toPreview?courseId=207584971&dataId=132888374&objectId=491305c721a2802f01b830bba5507385" target="_blank" rel="noopener">空域增强与模板操作-浙江工业大学刘盛</a><br><a href="https://zhuanlan.zhihu.com/p/76188487" target="_blank" rel="noopener">初识滤波之均值滤波</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;如果您不知道如何在 Mac 上使用 Xcode 配置 &lt;code&gt;OpenCV&lt;/code&gt;，可以参考我之前的博文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;利用像素本身以及其邻域象素的灰度关系进行增强的方法常称为滤波，而滤波器通过邻域运算实现。&lt;/p&gt;
&lt;p&gt;开始之前先给出滤波相关知识结构图。&lt;/p&gt;</summary>
    
    
    
    <category term="tech" scheme="https://stephefang.me/categories/tech/"/>
    
    
    <category term="Xcode" scheme="https://stephefang.me/tags/Xcode/"/>
    
    <category term="OpenCV" scheme="https://stephefang.me/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 学习笔记(二）</title>
    <link href="https://stephefang.me/2020/03/26/Objc_Learning_2/"/>
    <id>https://stephefang.me/2020/03/26/Objc_Learning_2/</id>
    <published>2020-03-26T13:43:20.000Z</published>
    <updated>2020-04-11T07:41:19.536Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始学习 Objective-C 夯实基础，并尝试在学习基础上开发出简单的 iOS 应用程序。在此处总结可以方便本人更好地整理学习内容，此文为本系列的第二篇文章。</p><a id="more"></a><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>先给出第二课学习的代码。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Calculator.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="keyword">double</span> value1, value2;</span><br><span class="line">        <span class="keyword">char</span> operator;</span><br><span class="line">        </span><br><span class="line">        SubCalculator *subCalculator = [[SubCalculator alloc]init];</span><br><span class="line">        [subCalculator print];</span><br><span class="line">        scanf(<span class="string">"%lf %c %lf"</span>,&amp;value1,&amp;operator,&amp;value2);</span><br><span class="line">        </span><br><span class="line">        subCalculator.accumulator = value1;</span><br><span class="line">        <span class="keyword">switch</span> (operator) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">                [subCalculator add: value2];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                [subCalculator subtract: value2];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">                [subCalculator multiply: value2];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">                [subCalculator divide: value2];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"The operator is unknown!\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"The result is %.2f"</span>,subCalculator.accumulator); <span class="comment">//点运算符</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"The result is %.2f"</span>, [subCalculator accumulator]); <span class="comment">//getter方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Calculator.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Calculator</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> <span class="keyword">double</span> accumulator;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) add: (<span class="keyword">double</span>) value;</span><br><span class="line">-(<span class="keyword">void</span>) subtract: (<span class="keyword">double</span>) value;</span><br><span class="line">-(<span class="keyword">void</span>) multiply: (<span class="keyword">double</span>) value;</span><br><span class="line">-(<span class="keyword">void</span>) divide: (<span class="keyword">double</span>) value;</span><br><span class="line">-(<span class="keyword">void</span>) print;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SubCalculator</span> : <span class="title">Calculator</span></span></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) print;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Calculator.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Calculator.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Calculator</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@synthesize</span> accumulator;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) add: (<span class="keyword">double</span>) value&#123;</span><br><span class="line">    accumulator += value;</span><br><span class="line">&#125;</span><br><span class="line">-(<span class="keyword">void</span>) subtract: (<span class="keyword">double</span>) value&#123;</span><br><span class="line">    accumulator -= value;</span><br><span class="line">&#125;</span><br><span class="line">-(<span class="keyword">void</span>) multiply: (<span class="keyword">double</span>) value&#123;</span><br><span class="line">    accumulator *= value;</span><br><span class="line">&#125;</span><br><span class="line">-(<span class="keyword">void</span>) divide: (<span class="keyword">double</span>) value&#123;</span><br><span class="line">    accumulator /= value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) print&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Type in your expression.\n"</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Method from Class Calculator.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SubCalculator</span></span></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) print&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Type in your expression.\n"</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Method from Sub Class subCalculator.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-03-26 18:21:58.865631+0800 DemoProgram[17447:519699] Type in your expression.</span><br><span class="line">2 * 5</span><br><span class="line">2020-03-26 18:22:23.471596+0800 DemoProgram[17447:519699] The result is 10.00</span><br><span class="line">2020-03-26 18:22:23.471696+0800 DemoProgram[17447:519699] The result is 10.00</span><br><span class="line">Program ended with exit code: 0</span><br></pre></td></tr></table></figure><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><p>相比上一次实验，接口与实现文件得到了分离，这一点与C++是类似的。<br>类的声明，即<code>@interface</code> 部分，用于描述类和类的方法，放在自己的名字为<code>class.h</code>的文件中；类的实现，即<code>@implementation</code> 部分，用于描述类对象的实例变量存储的数据，实现了接口中声明的方法，放在同名的.m文件中；<code>main.m</code>实现了简易计算器的功能。<br>该程序简单验证了继承、覆写的概念，可以在程序基础上做出更改验证</p><h3 id="点运算符"><a href="#点运算符" class="headerlink" title="点运算符"></a>点运算符</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[calculator setAccumulator: value1]</span><br></pre></td></tr></table></figure><p>与</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">calculator.accumulator = value1;</span><br></pre></td></tr></table></figure><p>都完成了赋值操作，需要注意的是编码风格，点运算符通常运用在属性上，用于设置或取得实例变量的值，其他的工作通常使用传统的方括号形式的消息表达式作为首选语法。</p><h3 id="property-与-synthesize"><a href="#property-与-synthesize" class="headerlink" title="@property 与 @synthesize"></a>@property 与 @synthesize</h3><h4 id="合成存取"><a href="#合成存取" class="headerlink" title="合成存取"></a>合成存取</h4><p>使用<code>synthesize</code>的存取方法，属性前面不要用new、alloc、copy或者init等作为开头，编译器会合成相关方法。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> <span class="keyword">double</span> accumulator;</span><br></pre></td></tr></table></figure><p>如果使用了<code>@property</code>指令，就不需要在实现部分声明相应的实例变量。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@synthesize</span> accumulator;</span><br></pre></td></tr></table></figure><p>这句话告诉Objective-C编译器，为accumulator属性生成一对设值方法和取值方法，即设值方法<code>accumulator</code>与取值方法<code>setAccumulator</code>。<br>如果只使用<code>@property</code>且并未使用<code>@synthesize</code>，编译器也会生成相应的 setter 和 getter，但是生成的实例变量以下划线(_)作为其名称第一个字符，如此处会生成”_accumulator”。</p><h4 id="继承中存在的问题"><a href="#继承中存在的问题" class="headerlink" title="继承中存在的问题"></a>继承中存在的问题</h4><p>在子类中使用实例变量，必须现在接口部分声明变量，而不是在实现部分声明变量。在实现部分声明和合成(<code>@synthesize</code>)的实例变量为私有，无法在子类中访问。</p><p><img src="http://images.stephenfang.xyz/test1.png" alt=""></p><h2 id="其他总结"><a href="#其他总结" class="headerlink" title="其他总结"></a>其他总结</h2><h3 id="关于多态"><a href="#关于多态" class="headerlink" title="关于多态"></a>关于多态</h3><p>使不同的类共享相同方法名称的能力叫多态。</p><blockquote><p>多态让你可以开发一组类，这组类中的每一个类都能响应相同的方法名。每个类的定义都封装了响应特定方法所需的代码，这就使得它独立于其他的类定义。多态还允许你以后添加新的类，这些新类能够响应相同的方法名。</p></blockquote><h3 id="关于动态类型"><a href="#关于动态类型" class="headerlink" title="关于动态类型"></a>关于动态类型</h3><ul><li><code>id</code> 可以用来存储属于任何类的对象，且<code>id</code>对象类型的声明中无需使用星号(*)。</li><li><code>Objective-C</code> 总是跟踪对象所属的类。系统先判定对象所属的类，然后在<strong>运行</strong>时确定需要动态调用的方法，而不是在<strong>编译</strong>的时候。</li><li>静态类型能够在程序编译阶段而不是运行阶段标明错误</li><li>静态类型相比动态类型能够提高程序可读性</li></ul><blockquote><p>如果存在id变量<code>dataValue 1</code>和<code>dataValue2</code>，那么</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = [dataValue1 add: dataValue2] ;</span><br></pre></td></tr></table></figure><p>会导致编译器生成代码,将参数传递给add:方法,并通过假设来处理其返回值。<br>在运行时，<code>Objective-C</code> 运行时系统仍然会检查存储在dataValue1中对象所属的类选择相应的方法来执行。然而，在大多数情况下，编译器可能生成不正确的代码来向方法传递参数或处理返回值。<br>当一个方法选取对象作为它的参数，而另一个方法选取浮点数作为参数时，很有可能发生这种情况。如果这两个方法之间的不一致仅在于对象类型的不同,编译器仍然能够生成正确的代码,因为传递给对象的引用是内存地址(即指针)。</p><h3 id="关于类的问题"><a href="#关于类的问题" class="headerlink" title="关于类的问题"></a>关于类的问题</h3><p><img src="http://images.stephenfang.xyz/Xnip2020-03-26_21-23-56.png" alt="NSObject类支持的基本方法"></p><p>对<code>isMemberOfClass</code>、<code>isKindOfClass</code>、<code>isSubclassOfClass</code>、<code>respondsToSelector</code>、<code>instancesRespondToSelector</code>的用法与意义应熟稔于心。</p><h3 id="关于异常处理"><a href="#关于异常处理" class="headerlink" title="关于异常处理"></a>关于异常处理</h3><p><code>Objective-C</code>中对于异常处理的机制与<code>C++</code>、<code>Java</code>等均为类似。格式如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@try</span> &#123;</span><br><span class="line">statement</span><br><span class="line">statement</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@catch</span> (<span class="built_in">NSException</span> *exception) &#123;</span><br><span class="line">statement</span><br><span class="line">statement</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一般来说，你并不希望程序在运行时发生异常。这就需要考虑更好的编程实践，在错误发生之前做测试，而不是错误发生后捕获它。测试方法的错误并返回一些值作为错误的标识，而不是抛出异常。抛出异常通常会使用大量的系统资源，Apple 反对非必要的使用异常(例如，你不希望因为一一个文件无法打开而抛出异常)。</p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="">Objective-C 程序设计 (第六版)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近开始学习 Objective-C 夯实基础，并尝试在学习基础上开发出简单的 iOS 应用程序。在此处总结可以方便本人更好地整理学习内容，此文为本系列的第二篇文章。&lt;/p&gt;</summary>
    
    
    
    <category term="tech" scheme="https://stephefang.me/categories/tech/"/>
    
    
    <category term="Xcode" scheme="https://stephefang.me/tags/Xcode/"/>
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://stephefang.me/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 学习笔记(一）</title>
    <link href="https://stephefang.me/2020/03/21/Objc_Learning_1/"/>
    <id>https://stephefang.me/2020/03/21/Objc_Learning_1/</id>
    <published>2020-03-21T01:20:20.000Z</published>
    <updated>2020-07-12T09:34:57.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>最近开始学习 Objective-C 夯实基础，并在学习基础上尝试开发出简单的 iOS 应用程序。有 C 语言基础的同学应该能够比较快上手。在此处总结可以方便本人更好地记忆。</p><a id="more"></a><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>先给出第一课学习的代码。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Device</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) wakeUp;</span><br><span class="line">-(<span class="keyword">void</span>) setPasswd: (<span class="keyword">int</span>)input;</span><br><span class="line">-(<span class="keyword">void</span>) verifyPasswd;</span><br><span class="line">-(<span class="keyword">int</span>) getPasswd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Device</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> passwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)wakeUp&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"The device was woken up."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)setPasswd:(<span class="keyword">int</span>)input &#123;</span><br><span class="line">    passwd = input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)verifyPasswd &#123;</span><br><span class="line">    <span class="keyword">if</span>( passwd == <span class="number">1111</span> )</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"The password of this device is correct."</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"The password of this device is incorrect!"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">int</span>) getPasswd &#123;</span><br><span class="line">    <span class="keyword">return</span> passwd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        Device *iPhone = [[Device alloc] init];</span><br><span class="line">        Device *iPad = [[Device alloc] init];</span><br><span class="line">        </span><br><span class="line">        [iPhone wakeUp];</span><br><span class="line">        [iPhone setPasswd:<span class="number">1000</span>];</span><br><span class="line">        [iPhone verifyPasswd];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"The password of iPhone is %i."</span>,[iPhone getPasswd]);</span><br><span class="line">        </span><br><span class="line">        [iPad wakeUp];</span><br><span class="line">        [iPad setPasswd:<span class="number">1111</span>];</span><br><span class="line">        [iPad verifyPasswd];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"The password of iPad is %i."</span>,[iPad getPasswd]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2020-03-21 12:20:14.658475+0800 DemoProgram[26195:134286] The device was woken up.</span><br><span class="line">2020-03-21 12:20:14.658766+0800 DemoProgram[26195:134286] The password of this device is incorrect!</span><br><span class="line">2020-03-21 12:20:14.658820+0800 DemoProgram[26195:134286] The password of iPhone is 1000.</span><br><span class="line">2020-03-21 12:20:14.658854+0800 DemoProgram[26195:134286] The device was woken up.</span><br><span class="line">2020-03-21 12:20:14.658875+0800 DemoProgram[26195:134286] The password of this device is correct.</span><br><span class="line">2020-03-21 12:20:14.658893+0800 DemoProgram[26195:134286] The password of iPad is 1111.</span><br><span class="line">Program ended with exit code: 0</span><br></pre></td></tr></table></figure><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><p><code>@interface</code> 部分用于描述类和类的方法；<code>@implementation</code> 部分用于描述类对象的实例变量存储的数据，同时实现了接口中声明的方法；剩下代码实现了程序的功能。</p><h3 id="alloc"><a href="#alloc" class="headerlink" title="alloc"></a>alloc</h3><p><code>alloc</code>即 allocate，目的是为新创建的对象分配内存存储空间。<code>alloc</code>保证对象的所有实例变量都变成初始状态，但不意味着对象完成了初始化工作，完成初始化工作需要使用<code>init</code>完成。<br><code>alloc</code> 直接调用了另一个私有方法 <code>id _objc_rootAlloc(Class cls)</code>。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">id</span>)alloc &#123;</span><br><span class="line">    <span class="keyword">return</span> _objc_rootAlloc(<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>id _objc_rootAlloc(Class cls)</code>调用了<code>callAlloc(cls, false/*checkNil*/, true/*allocWithZone*/)</code>,即 <code>NSObject</code> 对 <code>callAlloc</code> 的实现.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">id</span> _objc_rootAlloc(Class cls) &#123;</span><br><span class="line">    <span class="keyword">return</span> callAlloc(cls, <span class="literal">false</span><span class="comment">/*checkNil*/</span>, <span class="literal">true</span><span class="comment">/*allocWithZone*/</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续研究<code>callAlloc(Class cls, bool checkNil, bool allocWithZone=false)</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">id</span> callAlloc(Class cls, <span class="keyword">bool</span> checkNil, <span class="keyword">bool</span> allocWithZone=<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">id</span> obj = class_createInstance(cls, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">id</span> class_createInstance(Class cls, size_t extraBytes) &#123;</span><br><span class="line">    <span class="keyword">return</span> _class_createInstanceFromZone(cls, extraBytes, <span class="literal">nil</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象初始化中最重要的操作都在 <code>_class_createInstanceFromZone</code> 方法中执行：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">id</span> _class_createInstanceFromZone(Class cls, size_t extraBytes, <span class="keyword">void</span> *zone, <span class="keyword">bool</span> cxxConstruct = <span class="literal">true</span>, size_t *outAllocatedSize = <span class="literal">nil</span>) &#123;</span><br><span class="line">    size_t size = cls-&gt;instanceSize(extraBytes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">id</span> obj = (<span class="keyword">id</span>)calloc(<span class="number">1</span>, size);</span><br><span class="line">    <span class="keyword">if</span> (!obj) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    obj-&gt;initInstanceIsa(cls, hasCxxDtor);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p><code>init</code>用于初始化类的实例变量，<code>iPhone = [iPhone init];</code> 初始化了一个特殊的 Device 对象，然而他没有发送给类，而是发送给了类的一个实例。<code>init</code>方法也可以返回被初始化的对象。<br><code>NSObject</code> 的 <code>- init</code> 方法调用了 <code>_objc_rootInit</code> 并返回了当前对象：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)init &#123;</span><br><span class="line">    <span class="keyword">return</span> _objc_rootInit(<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">id</span> _objc_rootInit(<span class="keyword">id</span> obj) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="声明方法"><a href="#声明方法" class="headerlink" title="声明方法"></a>声明方法</h2><p>Objective-C 中声明的语法较为特别，方法名以冒号结束告诉编译器该方法有参数，在一对圆括号内指定参数的类型，与指定返回值的方法类似，和 C 类似整个声明以一个分号结束，给出一张图展示声明方法。</p><p><img src="http://images.stephenfang.xyz/obj1.jpg" alt=""></p><h2 id="规范注意"><a href="#规范注意" class="headerlink" title="规范注意"></a>规范注意</h2><p>流程为在<code>@interface</code>部分声明方法,并在<code>@implementation</code>部分定义它们,可使用冒号指明<code>ParentClassName</code>，与在@interface部分使用冒号一样:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Device</span>: <span class="title">NSObject</span></span></span><br></pre></td></tr></table></figure><p>但通常不这么做。</p><p><code>new</code>方法可以将<code>alloc</code>和<code>init</code>的操作结合起来,用两步来实现创建和初始化的方式可以在概念上理解正在发生两个不同的事件:首先创建对象，然后对它初始化。<br>即以下三种方式意义相同。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Device *iPhone = [[Device alloc] init];</span><br><span class="line"></span><br><span class="line">Device *iPhone;</span><br><span class="line">iPhone = [Device alloc];</span><br><span class="line">iPhone = [iPhone init];</span><br><span class="line"></span><br><span class="line">Device *iPhone = [ Device new]；</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://draveness.me/object-init" target="_blank" rel="noopener">对象是如何初始化的（iOS）</a><br><a href="">Objective-C 程序设计 (第六版)</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;最近开始学习 Objective-C 夯实基础，并在学习基础上尝试开发出简单的 iOS 应用程序。有 C 语言基础的同学应该能够比较快上手。在此处总结可以方便本人更好地记忆。&lt;/p&gt;</summary>
    
    
    
    <category term="tech" scheme="https://stephefang.me/categories/tech/"/>
    
    
    <category term="Xcode" scheme="https://stephefang.me/tags/Xcode/"/>
    
    <category term="iOS" scheme="https://stephefang.me/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://stephefang.me/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 图像直方图与均衡化</title>
    <link href="https://stephefang.me/2020/03/16/OpenCV_Grayscale/"/>
    <id>https://stephefang.me/2020/03/16/OpenCV_Grayscale/</id>
    <published>2020-03-16T08:20:20.000Z</published>
    <updated>2021-07-26T07:59:35.679Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果您不知道如何在 Mac 上使用 Xcode 配置 <code>OpenCV</code>，可以参考我写的上一篇博文。</p></blockquote><p>直方图是图像的一种统计表达，反映了图像中灰度的分布情况。以概率论为基础的，通过改变图像的直方图来改变图象中像素的灰度，以达到图像增强的目标，常称直方图修正。</p><a id="more"></a><img src="/2020/03/16/OpenCV_Grayscale/%E7%9B%B4%E6%96%B9%E5%9B%BE.png" class=""><p>直方图均衡化原理即借助直方图变换实现（归一的）灰度映射，实现思想为对在图像中像素个数多的灰度级进行展宽，而对像素个数少的灰度级进行缩减。从而达到清晰图像的目的。</p><p>回到 <code>OpenCV</code>，<code>OpenCV</code>中提供了<code>equalizeHist</code>函数实现灰度图像直方图均衡化，给出如下函数原型及相关文档。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cv::equalizeHist</span><span class="params">(InputArray src,</span></span></span><br><span class="line"><span class="function"><span class="params">OutputArray dst </span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br></pre></td></tr></table></figure><img src="/2020/03/16/OpenCV_Grayscale/equa.jpg" class=""><p>实现的图像直方图均衡化算法就是把直方图的每个灰度级进行归一化处理，求各个灰度的累积分布并得到一个映射的灰度映射表，最后根据相应的灰度值来修正原图中的每个像素的像素值。</p><p><code>OpenCV</code>中提供了<code>cvtColor</code>函数实现彩色图像转为灰度图像，给出如下函数原型及相关文档。</p><img src="/2020/03/16/OpenCV_Grayscale/cvcolor.png" class=""><p>至于直方图的绘制方法，<code>OpenCV</code>中提供了<code>calcList</code>函数计算图像直方图，尝试使用函数来实现会更符合操作流程。</p><img src="/2020/03/16/OpenCV_Grayscale/calcHist.jpg" class=""><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本次实验需要完成以下任务：</p><ol><li>完成直方图的绘制</li><li>使 RGB 图像变为灰度图像</li><li>完成图像直方图均衡化<br>给出如下代码：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function">MatND <span class="title">getHistogram</span><span class="params">(Mat &amp;image)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MatND hist;</span><br><span class="line">    <span class="keyword">int</span> channels[] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> dims = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> histSize[] = &#123;<span class="number">256</span>&#125;;</span><br><span class="line">    <span class="keyword">float</span> granges[] = &#123;<span class="number">0</span>, <span class="number">255</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">float</span> *ranges[] = &#123;granges&#125;;</span><br><span class="line">    calcHist(&amp;image, <span class="number">1</span>, channels, Mat(), hist, dims, histSize, ranges);</span><br><span class="line">    <span class="keyword">return</span> hist;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//  将图像直方图展示出来</span></span><br><span class="line"> <span class="function">Mat <span class="title">getHistogramImage</span><span class="params">(Mat &amp;image)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MatND hist = getHistogram(image);</span><br><span class="line">    <span class="function">Mat <span class="title">showImage</span><span class="params">(<span class="number">256</span>,<span class="number">256</span>, CV_8U,Scalar(<span class="number">0</span>))</span></span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">double</span> maxValue = <span class="number">0</span>;</span><br><span class="line">    minMaxLoc(hist, <span class="number">0</span>, &amp;maxValue, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">float</span> value = hist.at&lt;<span class="keyword">float</span>&gt;(i);</span><br><span class="line">        <span class="keyword">int</span> intensity = saturate_cast&lt;<span class="keyword">int</span>&gt;(<span class="number">256</span> - <span class="number">256</span>* (value/maxValue));</span><br><span class="line">        rectangle(showImage, Point(i,<span class="number">256</span> - <span class="number">1</span>), Point((i+<span class="number">1</span>)<span class="number">-1</span>, intensity), Scalar(<span class="number">255</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> showImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mat src= imread(<span class="string">"original.jpeg"</span>);<span class="comment">// 读取图片</span></span><br><span class="line">    Mat gray,equa;</span><br><span class="line">    Mat grayHistogram,equaHistogram;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!src.data)             <span class="comment">// 检查非法输入</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">cout</span> &lt;&lt;  <span class="string">"无法读取照片"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    namedWindow(<span class="string">"RGB"</span>,WINDOW_AUTOSIZE);   <span class="comment">// 创建图片显示自动调整大小的窗口</span></span><br><span class="line">    imshow(<span class="string">"RGB"</span>,src);    <span class="comment">// 在窗口显示原始图片</span></span><br><span class="line">    </span><br><span class="line">    cvtColor(src, gray, COLOR_BGR2GRAY);</span><br><span class="line">    namedWindow(<span class="string">"GRAY"</span>,WINDOW_AUTOSIZE);</span><br><span class="line">    imshow(<span class="string">"GRAY"</span>,gray);    <span class="comment">// 在窗口显示灰度图片</span></span><br><span class="line">    </span><br><span class="line">    grayHistogram = getHistogramImage(gray);</span><br><span class="line">    <span class="comment">//获得灰度图直方图</span></span><br><span class="line">    namedWindow(<span class="string">"FirstHistogram"</span>,WINDOW_AUTOSIZE);</span><br><span class="line">    imshow(<span class="string">"FirstHistogram"</span>,grayHistogram); <span class="comment">// 在窗口显示灰度图直方图</span></span><br><span class="line">    </span><br><span class="line">    equalizeHist(gray, equa);</span><br><span class="line">    namedWindow(<span class="string">"EQUA"</span>,WINDOW_AUTOSIZE); </span><br><span class="line">    imshow(<span class="string">"EQUA"</span>,equa);    <span class="comment">// 在窗口显示均衡化处理后图片</span></span><br><span class="line">    </span><br><span class="line">    imwrite(<span class="string">"result.jpg"</span>, equa); <span class="comment">// 存储实验结果</span></span><br><span class="line">    </span><br><span class="line">    equaHistogram = getHistogramImage(equa);  <span class="comment">//获得均衡化处理后直方图</span></span><br><span class="line">    namedWindow(<span class="string">"SecondHistogram"</span>,WINDOW_AUTOSIZE; </span><br><span class="line"> imshow(<span class="string">"SecondHistogram"</span>,equaHistogram);    <span class="comment">// 在窗口显示均衡化处理后</span></span><br><span class="line">    </span><br><span class="line">    waitKey(<span class="number">0</span>); <span class="comment">// 按键等待，需要在窗口任意输入字符退出，0代表永久等待</span></span><br><span class="line">    </span><br><span class="line">    src.release();</span><br><span class="line">    gray.release();</span><br><span class="line">    equa.release();</span><br><span class="line">    grayHistogram.release();</span><br><span class="line">    equaHistogram.release();</span><br><span class="line">    destroyWindow(<span class="string">"RGB"</span>);</span><br><span class="line">    destroyWindow(<span class="string">"GRAY"</span>);</span><br><span class="line">    destroyWindow(<span class="string">"EQUA"</span>);</span><br><span class="line">    destroyWindow(<span class="string">"FirstHistogram"</span>);</span><br><span class="line">    destroyWindow(<span class="string">"SecondHistogram"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><img src="/2020/03/16/OpenCV_Grayscale/result.png" class=""><p>第一张图片为未处理过的原图，第二张图片为灰度处理后的图片。第三张图片为均衡化处理后的灰度图，从直方图很能看出区别。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.opencv.org/master/" target="_blank" rel="noopener">OpenCV官方文档</a><br><a href="https://zhuanlan.zhihu.com/p/73201428" target="_blank" rel="noopener">Dongcheng Lai的知乎专栏</a><br><a href="https://blog.csdn.net/piaoxuezhong/article/details/54588270" target="_blank" rel="noopener">opencv图像直方图的计算及绘制-Naruto_Q的博客</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;如果您不知道如何在 Mac 上使用 Xcode 配置 &lt;code&gt;OpenCV&lt;/code&gt;，可以参考我写的上一篇博文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直方图是图像的一种统计表达，反映了图像中灰度的分布情况。以概率论为基础的，通过改变图像的直方图来改变图象中像素的灰度，以达到图像增强的目标，常称直方图修正。&lt;/p&gt;</summary>
    
    
    
    <category term="tech" scheme="https://stephefang.me/categories/tech/"/>
    
    
    <category term="Xcode" scheme="https://stephefang.me/tags/Xcode/"/>
    
    <category term="OpenCV" scheme="https://stephefang.me/tags/OpenCV/"/>
    
    <category term="Grayscale" scheme="https://stephefang.me/tags/Grayscale/"/>
    
  </entry>
  
</feed>
